{
  "version": 3,
  "sources": ["../../@babel/types/src/utils/shallowEqual.ts", "../../@babel/types/src/utils/deprecationWarning.ts", "../../@babel/types/src/validators/generated/index.ts", "../../@babel/types/src/validators/matchesPattern.ts", "../../@babel/types/src/validators/buildMatchMemberExpression.ts", "../../@babel/types/src/validators/react/isReactComponent.ts", "../../@babel/types/src/validators/react/isCompatTag.ts", "../../to-fast-properties/index.js", "../../@babel/types/src/validators/isType.ts", "../../@babel/types/src/validators/isPlaceholderType.ts", "../../@babel/types/src/validators/is.ts", "../../@babel/helper-validator-identifier/src/identifier.ts", "../../@babel/helper-validator-identifier/src/keyword.ts", "../../@babel/helper-validator-identifier/src/index.ts", "../../@babel/types/src/validators/isValidIdentifier.ts", "../../@babel/helper-string-parser/src/index.ts", "../../@babel/types/src/constants/index.ts", "../../@babel/types/src/definitions/utils.ts", "../../@babel/types/src/definitions/core.ts", "../../@babel/types/src/definitions/flow.ts", "../../@babel/types/src/definitions/jsx.ts", "../../@babel/types/src/definitions/placeholders.ts", "../../@babel/types/src/definitions/misc.ts", "../../@babel/types/src/definitions/experimental.ts", "../../@babel/types/src/definitions/typescript.ts", "../../@babel/types/src/definitions/deprecated-aliases.ts", "../../@babel/types/src/definitions/index.ts", "../../@babel/types/src/validators/validate.ts", "../../@babel/types/src/builders/validateNode.ts", "../../@babel/types/src/builders/generated/index.ts", "../../@babel/types/src/utils/react/cleanJSXElementLiteralChild.ts", "../../@babel/types/src/builders/react/buildChildren.ts", "../../@babel/types/src/validators/isNode.ts", "../../@babel/types/src/asserts/assertNode.ts", "../../@babel/types/src/asserts/generated/index.ts", "../../@babel/types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts", "../../@babel/types/src/modifications/flow/removeTypeDuplicates.ts", "../../@babel/types/src/builders/flow/createFlowUnionType.ts", "../../@babel/types/src/modifications/typescript/removeTypeDuplicates.ts", "../../@babel/types/src/builders/typescript/createTSUnionType.ts", "../../@babel/types/src/builders/generated/uppercase.js", "../../@babel/types/src/builders/productions.ts", "../../@babel/types/src/clone/cloneNode.ts", "../../@babel/types/src/clone/clone.ts", "../../@babel/types/src/clone/cloneDeep.ts", "../../@babel/types/src/clone/cloneDeepWithoutLoc.ts", "../../@babel/types/src/clone/cloneWithoutLoc.ts", "../../@babel/types/src/comments/addComments.ts", "../../@babel/types/src/comments/addComment.ts", "../../@babel/types/src/utils/inherit.ts", "../../@babel/types/src/comments/inheritInnerComments.ts", "../../@babel/types/src/comments/inheritLeadingComments.ts", "../../@babel/types/src/comments/inheritTrailingComments.ts", "../../@babel/types/src/comments/inheritsComments.ts", "../../@babel/types/src/comments/removeComments.ts", "../../@babel/types/src/constants/generated/index.ts", "../../@babel/types/src/converters/toBlock.ts", "../../@babel/types/src/converters/ensureBlock.ts", "../../@babel/types/src/converters/toIdentifier.ts", "../../@babel/types/src/converters/toBindingIdentifierName.ts", "../../@babel/types/src/converters/toComputedKey.ts", "../../@babel/types/src/converters/toExpression.ts", "../../@babel/types/src/traverse/traverseFast.ts", "../../@babel/types/src/modifications/removeProperties.ts", "../../@babel/types/src/modifications/removePropertiesDeep.ts", "../../@babel/types/src/converters/toKeyAlias.ts", "../../@babel/types/src/converters/toStatement.ts", "../../@babel/types/src/converters/valueToNode.ts", "../../@babel/types/src/modifications/appendToMemberExpression.ts", "../../@babel/types/src/modifications/inherits.ts", "../../@babel/types/src/modifications/prependToMemberExpression.ts", "../../@babel/types/src/retrievers/getBindingIdentifiers.ts", "../../@babel/types/src/retrievers/getOuterBindingIdentifiers.ts", "../../@babel/types/src/traverse/traverse.ts", "../../@babel/types/src/validators/isBinding.ts", "../../@babel/types/src/validators/isLet.ts", "../../@babel/types/src/validators/isBlockScoped.ts", "../../@babel/types/src/validators/isImmutable.ts", "../../@babel/types/src/validators/isNodesEquivalent.ts", "../../@babel/types/src/validators/isReferenced.ts", "../../@babel/types/src/validators/isScope.ts", "../../@babel/types/src/validators/isSpecifierDefault.ts", "../../@babel/types/src/validators/isValidES3Identifier.ts", "../../@babel/types/src/validators/isVar.ts", "../../@babel/types/src/converters/gatherSequenceExpressions.ts", "../../@babel/types/src/converters/toSequenceExpression.ts", "../../@babel/types/src/index.ts", "../../@babel/template/src/formatters.ts", "../../@babel/template/src/options.ts", "../../@babel/parser/src/util/location.ts", "../../@babel/parser/src/parse-error/module-errors.ts", "../../@babel/parser/src/parse-error/to-node-description.ts", "../../@babel/parser/src/parse-error/standard-errors.ts", "../../@babel/parser/src/parse-error/strict-mode-errors.ts", "../../@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../@babel/parser/src/parse-error.ts", "../../@babel/parser/src/plugins/estree.ts", "../../@babel/parser/src/tokenizer/context.ts", "../../@babel/parser/src/tokenizer/types.ts", "../../@babel/babel-helper-validator-identifier/src/identifier.ts", "../../@babel/babel-helper-validator-identifier/src/keyword.ts", "../../@babel/parser/src/util/identifier.ts", "../../@babel/parser/src/util/scope.ts", "../../@babel/parser/src/plugins/flow/scope.ts", "../../@babel/parser/src/parser/base.ts", "../../@babel/parser/src/parser/comments.ts", "../../@babel/parser/src/util/whitespace.ts", "../../@babel/parser/src/tokenizer/state.ts", "../../@babel/babel-helper-string-parser/src/index.ts", "../../@babel/parser/src/tokenizer/index.ts", "../../@babel/parser/src/util/class-scope.ts", "../../@babel/parser/src/util/expression-scope.ts", "../../@babel/parser/src/util/production-parameter.ts", "../../@babel/parser/src/parser/util.ts", "../../@babel/parser/src/parser/node.ts", "../../@babel/parser/src/plugins/flow/index.ts", "../../@babel/parser/src/plugins/jsx/xhtml.ts", "../../@babel/parser/src/plugins/jsx/index.ts", "../../@babel/parser/src/plugins/typescript/scope.ts", "../../@babel/parser/src/parser/lval.ts", "../../@babel/parser/src/plugins/typescript/index.ts", "../../@babel/parser/src/plugins/placeholders.ts", "../../@babel/parser/src/plugins/v8intrinsic.ts", "../../@babel/parser/src/plugin-utils.ts", "../../@babel/parser/src/options.ts", "../../@babel/parser/src/parser/expression.ts", "../../@babel/parser/src/parser/statement.ts", "../../@babel/parser/src/parser/index.ts", "../../@babel/parser/src/index.ts", "../../js-tokens/index.js", "../../escape-string-regexp/index.js", "../../color-name/index.js", "../../color-convert/conversions.js", "../../color-convert/route.js", "../../color-convert/index.js", "../../ansi-styles/index.js", "../../supports-color/browser.js", "../../chalk/templates.js", "../../chalk/index.js", "../../@babel/highlight/src/index.ts", "../../@babel/code-frame/src/index.ts", "../../@babel/template/src/parse.ts", "../../@babel/template/src/populate.ts", "../../@babel/template/src/string.ts", "../../@babel/template/src/literal.ts", "../../@babel/template/src/builder.ts", "../../@babel/template/src/index.ts", "../../@babel/helpers/src/helpers-generated.ts", "../../@babel/helpers/src/index.ts", "../../@babel/traverse/src/path/lib/virtual-types.ts", "../../@babel/traverse/src/path/lib/virtual-types-validator.ts", "../../@babel/traverse/src/visitors.ts", "../../@babel/traverse/src/cache.ts", "../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../@babel/helper-split-export-declaration/src/index.ts", "../../@babel/helper-environment-visitor/src/index.ts", "../../@babel/traverse/src/scope/lib/renamer.ts", "../../@babel/traverse/src/scope/binding.ts", "../../globals/globals.json", "../../globals/index.js", "../../@babel/traverse/src/scope/index.ts", "../../@jridgewell/set-array/src/set-array.ts", "../../@jridgewell/sourcemap-codec/src/sourcemap-codec.ts", "../../@jridgewell/resolve-uri/src/resolve-uri.ts", "../../@jridgewell/trace-mapping/src/resolve.ts", "../../@jridgewell/trace-mapping/src/strip-filename.ts", "../../@jridgewell/trace-mapping/src/sourcemap-segment.ts", "../../@jridgewell/trace-mapping/src/sort.ts", "../../@jridgewell/trace-mapping/src/binary-search.ts", "../../@jridgewell/trace-mapping/src/by-source.ts", "../../@jridgewell/trace-mapping/src/any-map.ts", "../../@jridgewell/trace-mapping/src/trace-mapping.ts", "../../@jridgewell/gen-mapping/src/sourcemap-segment.ts", "../../@jridgewell/gen-mapping/src/gen-mapping.ts", "../../@babel/generator/src/source-map.ts", "../../@babel/generator/src/buffer.ts", "../../@babel/generator/src/node/whitespace.ts", "../../@babel/generator/src/node/parentheses.ts", "../../@babel/generator/src/node/index.ts", "../../@babel/generator/src/generators/template-literals.ts", "../../@babel/generator/src/generators/expressions.ts", "../../@babel/generator/src/generators/statements.ts", "../../@babel/generator/src/generators/classes.ts", "../../@babel/generator/src/generators/methods.ts", "../../@babel/generator/src/generators/modules.ts", "../../jsesc/jsesc.js", "../../@babel/generator/src/generators/types.ts", "../../@babel/generator/src/generators/flow.ts", "../../@babel/generator/src/generators/base.ts", "../../@babel/generator/src/generators/jsx.ts", "../../@babel/generator/src/generators/typescript.ts", "../../@babel/generator/src/generators/index.ts", "../../@babel/generator/src/printer.ts", "../../@babel/generator/src/index.ts", "../../@babel/traverse/src/path/ancestry.ts", "../../@babel/traverse/src/path/inference/util.ts", "../../@babel/traverse/src/path/inference/inferer-reference.ts", "../../@babel/traverse/src/path/inference/inferers.ts", "../../@babel/traverse/src/path/inference/index.ts", "../../@babel/helper-hoist-variables/src/index.ts", "../../@babel/traverse/src/path/replacement.ts", "../../@babel/traverse/src/path/evaluation.ts", "../../@babel/helper-function-name/src/index.ts", "../../@babel/traverse/src/path/conversion.ts", "../../@babel/traverse/src/path/introspection.ts", "../../@babel/traverse/src/path/context.ts", "../../@babel/traverse/src/path/lib/removal-hooks.ts", "../../@babel/traverse/src/path/removal.ts", "../../@babel/traverse/src/path/lib/hoister.ts", "../../@babel/traverse/src/path/modification.ts", "../../@babel/traverse/src/path/family.ts", "../../@babel/traverse/src/path/comments.ts", "../../@babel/traverse/src/path/index.ts", "../../@babel/traverse/src/context.ts", "../../@babel/traverse/src/traverse-node.ts", "../../@babel/traverse/src/hub.ts", "../../@babel/traverse/src/index.ts", "../../@babel/helper-module-imports/src/import-builder.ts", "../../@babel/helper-module-imports/src/is-module.ts", "../../@babel/helper-module-imports/src/import-injector.ts", "../../@babel/helper-module-imports/src/index.ts", "../../@babel/helper-module-transforms/src/rewrite-this.ts", "../../@babel/helper-simple-access/src/index.ts", "../../@babel/helper-module-transforms/src/rewrite-live-references.ts", "../../@babel/helper-module-transforms/src/normalize-and-load-metadata.ts", "../../@babel/helper-module-transforms/src/lazy-modules.ts", "../../@babel/helper-module-transforms/src/dynamic-import.ts", "../../@babel/helper-module-transforms/src/get-module-name.ts", "../../@babel/helper-module-transforms/src/index.ts", "../../semver/semver.js", "../../@babel/core/src/transformation/file/file.ts", "../../@babel/core/src/tools/build-external-helpers.ts", "../../@babel/core/src/config/files/index-browser.ts", "../../@babel/core/src/config/helpers/environment.ts", "../../gensync/index.js", "../../@babel/core/src/gensync-utils/async.ts", "../../@babel/core/src/config/util.ts", "../../@babel/core/src/config/helpers/deep-array.ts", "../../@babel/core/src/config/plugin.ts", "../../@babel/core/src/gensync-utils/functional.ts", "../../@babel/core/src/config/caching.ts", "../../node-releases/data/processed/envs.json", "../../caniuse-lite/data/browsers.js", "../../caniuse-lite/dist/unpacker/browsers.js", "../../caniuse-lite/data/browserVersions.js", "../../caniuse-lite/dist/unpacker/browserVersions.js", "../../caniuse-lite/data/agents.js", "../../caniuse-lite/dist/unpacker/agents.js", "../../node-releases/data/release-schedule/release-schedule.json", "../../electron-to-chromium/versions.js", "../../browserslist/error.js", "../../browserslist/parse.js", "../../browserslist/browser.js", "../../browserslist/index.js", "../../@babel/helper-validator-option/src/find-suggestion.ts", "../../@babel/helper-validator-option/src/validator.ts", "../../@babel/helper-validator-option/src/index.ts", "../../@babel/compat-data/data/native-modules.json", "../../@babel/compat-data/native-modules.js", "../../yallist/iterator.js", "../../yallist/yallist.js", "../../lru-cache/index.js", "../../@babel/helper-compilation-targets/src/targets.ts", "../../@babel/helper-compilation-targets/src/utils.ts", "../../@babel/helper-compilation-targets/src/options.ts", "../../@babel/helper-compilation-targets/src/pretty.ts", "../../@babel/helper-compilation-targets/src/debug.ts", "../../@babel/compat-data/data/plugins.json", "../../@babel/compat-data/plugins.js", "../../@babel/helper-compilation-targets/src/filter-items.ts", "../../@babel/helper-compilation-targets/src/index.ts", "../../@babel/core/src/config/resolve-targets-browser.ts", "../../@babel/core/src/config/config-descriptors.ts", "../../@babel/core/src/config/item.ts", "../../@babel/core/src/config/validation/removed.ts", "../../@babel/core/src/config/validation/option-assertions.ts", "../../@babel/core/src/errors/rewrite-stack-trace.ts", "../../@babel/core/src/errors/config-error.ts", "../../@babel/core/src/config/validation/options.ts", "../../@babel/core/src/config/pattern-to-regex.ts", "../../@babel/core/src/config/printer.ts", "../../@babel/core/src/config/config-chain.ts", "../../@babel/core/src/config/validation/plugins.ts", "../../@babel/core/src/config/helpers/config-api.ts", "../../@babel/core/src/config/partial.ts", "../../@babel/core/src/config/full.ts", "../../@babel/core/src/config/index.ts", "../../@babel/core/src/transformation/plugin-pass.ts", "../../@babel/core/src/transformation/block-hoist-plugin.ts", "../../@babel/core/src/transformation/normalize-opts.ts", "../../convert-source-map/index.js", "../../@babel/core/src/parser/util/missing-plugin-helper.ts", "../../@babel/core/src/parser/index.ts", "../../@babel/core/src/transformation/util/clone-deep.ts", "../../@babel/core/src/transformation/normalize-file.ts", "../../@ampproject/remapping/src/source-map-tree.ts", "../../@ampproject/remapping/src/build-source-map-tree.ts", "../../@ampproject/remapping/src/source-map.ts", "../../@ampproject/remapping/src/remapping.ts", "../../@babel/core/src/transformation/file/merge-map.ts", "../../@babel/core/src/transformation/file/generate.ts", "../../@babel/core/src/transformation/index.ts", "../../@babel/core/src/transform.ts", "../../@babel/core/src/transform-file-browser.ts", "../../@babel/core/src/transform-ast.ts", "../../@babel/core/src/parse.ts", "../../@babel/core/src/index.ts"],
  "sourcesContent": ["export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "const warnings = new Set();\n\nexport default function deprecationWarning(\n  oldName: string,\n  newName: string,\n  prefix: string = \"\",\n) {\n  if (warnings.has(oldName)) return;\n  warnings.add(oldName);\n\n  const { internal, trace } = captureShortStackTrace(1, 2);\n  if (internal) {\n    // If usage comes from an internal package, there is no point in warning because\n    // 1. The new version of the package will already use the new API\n    // 2. When the deprecation will become an error (in a future major version), users\n    //    will have to update every package anyway.\n    return;\n  }\n  console.warn(\n    `${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`,\n  );\n}\n\nfunction captureShortStackTrace(skip: number, length: number) {\n  const { stackTraceLimit, prepareStackTrace } = Error;\n  let stackTrace: NodeJS.CallSite[];\n  // We add 1 to also take into account this function.\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (!stackTrace) return { internal: false, trace: \"\" };\n\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join(\"\\n\"),\n  };\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/* eslint-disable no-fallthrough */\n\nimport shallowEqual from \"../../utils/shallowEqual.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport function isArrayExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayExpression> | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentExpression> | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BinaryExpression> | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BinaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterpreterDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterpreterDirective> | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  if (node.type !== \"InterpreterDirective\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Directive> | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  if (node.type !== \"Directive\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirectiveLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DirectiveLiteral> | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DirectiveLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockStatement> | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BlockStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBreakStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BreakStatement> | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BreakStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CallExpression> | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"CallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCatchClause(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CatchClause> | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  if (node.type !== \"CatchClause\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditionalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ConditionalExpression> | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ConditionalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isContinueStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ContinueStatement> | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ContinueStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDebuggerStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DebuggerStatement> | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DebuggerStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoWhileStatement> | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DoWhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyStatement> | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionStatement> | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ExpressionStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.File> | null,\n): node is t.File {\n  if (!node) return false;\n\n  if (node.type !== \"File\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForInStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForInStatement> | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForInStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForStatement> | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionDeclaration> | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionExpression> | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Identifier> | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  if (node.type !== \"Identifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IfStatement> | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"IfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLabeledStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LabeledStatement> | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  if (node.type !== \"LabeledStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteral> | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumericLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumericLiteral> | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NumericLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteral> | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteral> | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRegExpLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegExpLiteral> | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"RegExpLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLogicalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LogicalExpression> | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"LogicalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MemberExpression> | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"MemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNewExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NewExpression> | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  if (node.type !== \"NewExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProgram(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Program> | null,\n): node is t.Program {\n  if (!node) return false;\n\n  if (node.type !== \"Program\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectExpression> | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMethod> | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectProperty> | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRestElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestElement> | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  if (node.type !== \"RestElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isReturnStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ReturnStatement> | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ReturnStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSequenceExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SequenceExpression> | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  if (node.type !== \"SequenceExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isParenthesizedExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ParenthesizedExpression> | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ParenthesizedExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchCase(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchCase> | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchCase\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchStatement> | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisExpression> | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ThisExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThrowStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThrowStatement> | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ThrowStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTryStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TryStatement> | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  if (node.type !== \"TryStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryExpression> | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UnaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUpdateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UpdateExpression> | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UpdateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclaration> | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclarator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclarator> | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclarator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WhileStatement> | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWithStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WithStatement> | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WithStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentPattern> | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayPattern> | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrowFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrowFunctionExpression> | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrowFunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassBody> | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  if (node.type !== \"ClassBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassExpression> | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ClassExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassDeclaration> | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ClassDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportAllDeclaration> | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultDeclaration> | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamedDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamedDeclaration> | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamedDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportSpecifier> | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForOfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForOfStatement> | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForOfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDeclaration> | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDefaultSpecifier> | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportNamespaceSpecifier> | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportSpecifier> | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportExpression> | null,\n): node is t.ImportExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ImportExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMetaProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MetaProperty> | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  if (node.type !== \"MetaProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassMethod> | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectPattern> | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSpreadElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadElement> | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  if (node.type !== \"SpreadElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSuper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Super> | null,\n): node is t.Super {\n  if (!node) return false;\n\n  if (node.type !== \"Super\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTaggedTemplateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TaggedTemplateExpression> | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TaggedTemplateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateElement> | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateLiteral> | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isYieldExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.YieldExpression> | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  if (node.type !== \"YieldExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAwaitExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AwaitExpression> | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AwaitExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImport(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Import> | null,\n): node is t.Import {\n  if (!node) return false;\n\n  if (node.type !== \"Import\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBigIntLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BigIntLiteral> | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BigIntLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamespaceSpecifier> | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalMemberExpression> | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalCallExpression> | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalCallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassProperty> | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassAccessorProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassAccessorProperty> | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassAccessorProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateProperty> | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateMethod> | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivateName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PrivateName> | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  if (node.type !== \"PrivateName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStaticBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StaticBlock> | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  if (node.type !== \"StaticBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAnyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AnyTypeAnnotation> | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"AnyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayTypeAnnotation> | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanTypeAnnotation> | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteralTypeAnnotation> | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteralTypeAnnotation> | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassImplements(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassImplements> | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  if (node.type !== \"ClassImplements\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareClass> | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareClass\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareFunction> | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareInterface(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareInterface> | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareInterface\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModule(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModule> | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModule\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModuleExports(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModuleExports> | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModuleExports\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareTypeAlias> | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareTypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareOpaqueType> | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareOpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareVariable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareVariable> | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareVariable\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportDeclaration> | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportAllDeclaration> | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclaredPredicate> | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"DeclaredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExistsTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExistsTypeAnnotation> | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ExistsTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeAnnotation> | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeParam(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeParam> | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeParam\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isGenericTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.GenericTypeAnnotation> | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"GenericTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInferredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InferredPredicate> | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"InferredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceExtends(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceExtends> | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceExtends\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceDeclaration> | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceTypeAnnotation> | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIntersectionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IntersectionTypeAnnotation> | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"IntersectionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMixedTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MixedTypeAnnotation> | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"MixedTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyTypeAnnotation> | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullableTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullableTypeAnnotation> | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullableTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteralTypeAnnotation> | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberTypeAnnotation> | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeAnnotation> | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeInternalSlot(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeInternalSlot> | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeInternalSlot\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeCallProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeCallProperty> | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeCallProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeIndexer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeIndexer> | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeIndexer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeProperty> | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeSpreadProperty> | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeSpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OpaqueType> | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"OpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isQualifiedTypeIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.QualifiedTypeIdentifier> | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"QualifiedTypeIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteralTypeAnnotation> | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringTypeAnnotation> | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSymbolTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SymbolTypeAnnotation> | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"SymbolTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisTypeAnnotation> | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ThisTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleTypeAnnotation> | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TupleTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeofTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeofTypeAnnotation> | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeofTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAlias> | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAnnotation> | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeCastExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeCastExpression> | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TypeCastExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameter> | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterDeclaration> | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterInstantiation> | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnionTypeAnnotation> | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"UnionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariance(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Variance> | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  if (node.type !== \"Variance\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidTypeAnnotation> | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"VoidTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDeclaration> | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanBody> | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberBody> | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringBody> | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumSymbolBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumSymbolBody> | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumSymbolBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanMember> | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberMember> | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringMember> | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDefaultedMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDefaultedMember> | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDefaultedMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IndexedAccessType> | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"IndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalIndexedAccessType> | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXAttribute> | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingElement> | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXElement> | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXEmptyExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXEmptyExpression> | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXEmptyExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXExpressionContainer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXExpressionContainer> | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  if (node.type !== \"JSXExpressionContainer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadChild(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadChild> | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadChild\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXIdentifier> | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"JSXIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXMemberExpression> | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXNamespacedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXNamespacedName> | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  if (node.type !== \"JSXNamespacedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningElement> | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadAttribute> | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXText(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXText> | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  if (node.type !== \"JSXText\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXFragment> | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningFragment> | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingFragment> | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Noop> | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  if (node.type !== \"Noop\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Placeholder> | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  if (node.type !== \"Placeholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isV8IntrinsicIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.V8IntrinsicIdentifier> | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"V8IntrinsicIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArgumentPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArgumentPlaceholder> | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  if (node.type !== \"ArgumentPlaceholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBindExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BindExpression> | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BindExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportAttribute> | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"ImportAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecorator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Decorator> | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  if (node.type !== \"Decorator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoExpression> | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  if (node.type !== \"DoExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultSpecifier> | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRecordExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RecordExpression> | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  if (node.type !== \"RecordExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleExpression> | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TupleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecimalLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DecimalLiteral> | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DecimalLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleExpression> | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ModuleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TopicReference> | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"TopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineTopicExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineTopicExpression> | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineTopicExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineBareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineBareFunction> | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineBareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelinePrimaryTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelinePrimaryTopicReference> | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"PipelinePrimaryTopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParameterProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParameterProperty> | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  if (node.type !== \"TSParameterProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareFunction> | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareMethod> | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSQualifiedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSQualifiedName> | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  if (node.type !== \"TSQualifiedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSCallSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSCallSignatureDeclaration> | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSCallSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructSignatureDeclaration> | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSPropertySignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSPropertySignature> | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSPropertySignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMethodSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMethodSignature> | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSMethodSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexSignature> | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAnyKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAnyKeyword> | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSAnyKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBooleanKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBooleanKeyword> | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBooleanKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBigIntKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBigIntKeyword> | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBigIntKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntrinsicKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntrinsicKeyword> | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntrinsicKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNeverKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNeverKeyword> | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNeverKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNullKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNullKeyword> | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNullKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNumberKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNumberKeyword> | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNumberKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSObjectKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSObjectKeyword> | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSObjectKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSStringKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSStringKeyword> | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSStringKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSymbolKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSymbolKeyword> | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSSymbolKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUndefinedKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUndefinedKeyword> | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUndefinedKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnknownKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnknownKeyword> | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnknownKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSVoidKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSVoidKeyword> | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSVoidKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSThisType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSThisType> | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  if (node.type !== \"TSThisType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSFunctionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSFunctionType> | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSFunctionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructorType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructorType> | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructorType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeReference> | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypePredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypePredicate> | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypePredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeQuery(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeQuery> | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeQuery\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeLiteral> | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSArrayType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSArrayType> | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  if (node.type !== \"TSArrayType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTupleType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTupleType> | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTupleType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSOptionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSOptionalType> | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSOptionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSRestType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSRestType> | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  if (node.type !== \"TSRestType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamedTupleMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamedTupleMember> | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamedTupleMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnionType> | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntersectionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntersectionType> | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntersectionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConditionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConditionalType> | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConditionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInferType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInferType> | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  if (node.type !== \"TSInferType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParenthesizedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParenthesizedType> | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSParenthesizedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeOperator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeOperator> | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeOperator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexedAccessType> | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMappedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMappedType> | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSMappedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSLiteralType> | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExpressionWithTypeArguments(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExpressionWithTypeArguments> | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  if (node.type !== \"TSExpressionWithTypeArguments\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceDeclaration> | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceBody> | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAliasDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAliasDeclaration> | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAliasDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInstantiationExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInstantiationExpression> | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSInstantiationExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAsExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAsExpression> | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSAsExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSatisfiesExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSatisfiesExpression> | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSSatisfiesExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAssertion(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAssertion> | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAssertion\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumDeclaration> | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumMember> | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleDeclaration> | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleBlock> | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportType> | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportEqualsDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportEqualsDeclaration> | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportEqualsDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExternalModuleReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExternalModuleReference> | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSExternalModuleReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNonNullExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNonNullExpression> | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSNonNullExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExportAssignment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExportAssignment> | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  if (node.type !== \"TSExportAssignment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamespaceExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamespaceExportDeclaration> | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamespaceExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAnnotation> | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterInstantiation> | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterDeclaration> | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameter> | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStandardized(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Standardized> | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"InterpreterDirective\":\n    case \"Directive\":\n    case \"DirectiveLiteral\":\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"CallExpression\":\n    case \"CatchClause\":\n    case \"ConditionalExpression\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"File\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"Program\":\n    case \"ObjectExpression\":\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"RestElement\":\n    case \"ReturnStatement\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"SwitchCase\":\n    case \"SwitchStatement\":\n    case \"ThisExpression\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"VariableDeclaration\":\n    case \"VariableDeclarator\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassBody\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ExportSpecifier\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"ClassMethod\":\n    case \"ObjectPattern\":\n    case \"SpreadElement\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateElement\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"ExportNamespaceSpecifier\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n    case \"StaticBlock\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Identifier\":\n        case \"StringLiteral\":\n        case \"BlockStatement\":\n        case \"ClassBody\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Expression> | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"CallExpression\":\n    case \"ConditionalExpression\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"ObjectExpression\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"ThisExpression\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"TypeCastExpression\":\n    case \"JSXElement\":\n    case \"JSXFragment\":\n    case \"BindExpression\":\n    case \"DoExpression\":\n    case \"RecordExpression\":\n    case \"TupleExpression\":\n    case \"DecimalLiteral\":\n    case \"ModuleExpression\":\n    case \"TopicReference\":\n    case \"PipelineTopicExpression\":\n    case \"PipelineBareFunction\":\n    case \"PipelinePrimaryTopicReference\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Expression\":\n        case \"Identifier\":\n        case \"StringLiteral\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinary(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Binary> | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isScopable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Scopable> | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockParent> | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Block> | null,\n): node is t.Block {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"Program\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Statement> | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Statement\":\n        case \"Declaration\":\n        case \"BlockStatement\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTerminatorless(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Terminatorless> | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCompletionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CompletionStatement> | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditional(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Conditional> | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Loop> | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"WhileStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.While> | null,\n): node is t.While {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"WhileStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionWrapper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionWrapper> | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExpressionStatement\":\n    case \"ParenthesizedExpression\":\n    case \"TypeCastExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.For> | null,\n): node is t.For {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForXStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForXStatement> | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Function> | null,\n): node is t.Function {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParent> | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPureish(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pureish> | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrowFunctionExpression\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Declaration> | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"VariableDeclaration\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Declaration\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPatternLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PatternLike> | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLVal(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LVal> | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSParameterProperty\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEntityName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEntityName> | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"TSQualifiedName\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Literal> | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"TemplateLiteral\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImmutable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Immutable> | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"BigIntLiteral\":\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXOpeningElement\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUserWhitespacable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UserWhitespacable> | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Method> | null,\n): node is t.Method {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMember> | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Property> | null,\n): node is t.Property {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectProperty\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryLike> | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"UnaryExpression\":\n    case \"SpreadElement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pattern> | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Pattern\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Class> | null,\n): node is t.Class {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportOrExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportOrExportDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDeclaration> | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleSpecifier> | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportSpecifier\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAccessor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Accessor> | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassAccessorProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Private> | null,\n): node is t.Private {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlow(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Flow> | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ClassImplements\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"DeclaredPredicate\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"FunctionTypeParam\":\n    case \"GenericTypeAnnotation\":\n    case \"InferredPredicate\":\n    case \"InterfaceExtends\":\n    case \"InterfaceDeclaration\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n    case \"OpaqueType\":\n    case \"QualifiedTypeIdentifier\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"TypeAlias\":\n    case \"TypeAnnotation\":\n    case \"TypeCastExpression\":\n    case \"TypeParameter\":\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n    case \"UnionTypeAnnotation\":\n    case \"Variance\":\n    case \"VoidTypeAnnotation\":\n    case \"EnumDeclaration\":\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowType> | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"GenericTypeAnnotation\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"UnionTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowBaseAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowBaseAnnotation> | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowDeclaration> | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowPredicate> | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclaredPredicate\":\n    case \"InferredPredicate\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBody> | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumMember> | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSX(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSX> | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXEmptyExpression\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXIdentifier\":\n    case \"JSXMemberExpression\":\n    case \"JSXNamespacedName\":\n    case \"JSXOpeningElement\":\n    case \"JSXSpreadAttribute\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMiscellaneous(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Miscellaneous> | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Noop\":\n    case \"Placeholder\":\n    case \"V8IntrinsicIdentifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeScript(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeScript> | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSParameterProperty\":\n    case \"TSDeclareFunction\":\n    case \"TSDeclareMethod\":\n    case \"TSQualifiedName\":\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSNamedTupleMember\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSInterfaceBody\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSEnumDeclaration\":\n    case \"TSEnumMember\":\n    case \"TSModuleDeclaration\":\n    case \"TSModuleBlock\":\n    case \"TSImportType\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExternalModuleReference\":\n    case \"TSNonNullExpression\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n    case \"TSTypeAnnotation\":\n    case \"TSTypeParameterInstantiation\":\n    case \"TSTypeParameterDeclaration\":\n    case \"TSTypeParameter\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeElement> | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSType> | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSImportType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBaseType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBaseType> | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSLiteralType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isNumericLiteral`\n */\nexport function isNumberLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteral> | null,\n): boolean {\n  deprecationWarning(\"isNumberLiteral\", \"isNumericLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRegExpLiteral`\n */\nexport function isRegexLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegexLiteral> | null,\n): boolean {\n  deprecationWarning(\"isRegexLiteral\", \"isRegExpLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"RegexLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRestElement`\n */\nexport function isRestProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestProperty> | null,\n): boolean {\n  deprecationWarning(\"isRestProperty\", \"isRestElement\");\n  if (!node) return false;\n\n  if (node.type !== \"RestProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isSpreadElement`\n */\nexport function isSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadProperty> | null,\n): boolean {\n  deprecationWarning(\"isSpreadProperty\", \"isSpreadElement\");\n  if (!node) return false;\n\n  if (node.type !== \"SpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isImportOrExportDeclaration`\n */\nexport function isModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  deprecationWarning(\"isModuleDeclaration\", \"isImportOrExportDeclaration\");\n  return isImportOrExportDeclaration(node, opts);\n}\n", "import {\n  isIdentifier,\n  isMemberExpression,\n  isStringLiteral,\n  isThisExpression,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpression(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (node = member; isMemberExpression(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n", "import matchesPattern from \"./matchesPattern.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n", "import buildMatchMemberExpression from \"../buildMatchMemberExpression.ts\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n", "export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n", "'use strict';\n\nlet fastProto = null;\n\n// Creates an object with permanently fast properties in V8. See Toon Verwaest's\n// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62\n// for more details. Use %HasFastProperties(object) and the Node.js flag\n// --allow-natives-syntax to check whether an object has fast properties.\nfunction FastObject(o) {\n\t// A prototype object will have \"fast properties\" enabled once it is checked\n\t// against the inline property cache of a function, e.g. fastProto.property:\n\t// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63\n\tif (fastProto !== null && typeof fastProto.property) {\n\t\tconst result = fastProto;\n\t\tfastProto = FastObject.prototype = null;\n\t\treturn result;\n\t}\n\tfastProto = FastObject.prototype = o == null ? Object.create(null) : o;\n\treturn new FastObject;\n}\n\n// Initialize the inline property cache of FastObject\nFastObject();\n\nmodule.exports = function toFastproperties(o) {\n\treturn FastObject(o);\n};\n", "import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n", "import { PLACEHOLDERS_ALIAS } from \"../definitions/index.ts\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n\n  return false;\n}\n", "import shallowEqual from \"../utils/shallowEqual.ts\";\nimport isType from \"./isType.ts\";\nimport isPlaceholderType from \"./isPlaceholderType.ts\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (typeof opts === \"undefined\") {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "export {\n  isIdentifierName,\n  isIdentifierChar,\n  isIdentifierStart,\n} from \"./identifier.ts\";\nexport {\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"./keyword.ts\";\n", "import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nexport const BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\nexport const NOT_LOCAL_BINDING = Symbol.for(\n  \"should not be considered a local binding\",\n);\n", "import is from \"../validators/is.ts\";\nimport { validateField, validateChild } from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  deprecated?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"deprecated\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n", "import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"OptionalMemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"Expression\", \"SpreadElement\", \"ArgumentPlaceholder\"),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"Expression\", \"SpreadElement\", \"ArgumentPlaceholder\"),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n", "import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  const isDeclareClass = name === \"DeclareClass\";\n\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      ...(isDeclareClass ? [\"mixins\", \"implements\"] : []),\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      ...(isDeclareClass\n        ? {\n            mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n            implements: validateOptional(arrayOfType(\"ClassImplements\")),\n          }\n        : {}),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n", "import { ALIAS_KEYS } from \"./utils.ts\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwn(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n", "import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils.ts\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n", "import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core.ts\";\nimport is from \"../validators/is.ts\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"ArrayPattern\", \"Identifier\", \"ObjectPattern\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n", "export const DEPRECATED_ALIASES = {\n  ModuleDeclaration: \"ImportOrExportDeclaration\",\n};\n", "import toFastProperties from \"to-fast-properties\";\nimport \"./core.ts\";\nimport \"./flow.ts\";\nimport \"./jsx.ts\";\nimport \"./misc.ts\";\nimport \"./experimental.ts\";\nimport \"./typescript.ts\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n} from \"./utils.ts\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders.ts\";\nimport { DEPRECATED_ALIASES } from \"./deprecated-aliases.ts\";\n\n(\n  Object.keys(DEPRECATED_ALIASES) as (keyof typeof DEPRECATED_ALIASES)[]\n).forEach(deprecatedAlias => {\n  FLIPPED_ALIAS_KEYS[deprecatedAlias] =\n    FLIPPED_ALIAS_KEYS[DEPRECATED_ALIASES[deprecatedAlias]];\n});\n\n// We do this here, because at this point the visitor keys should be ready and setup\ntoFastProperties(VISITOR_KEYS);\ntoFastProperties(ALIAS_KEYS);\ntoFastProperties(FLIPPED_ALIAS_KEYS);\ntoFastProperties(NODE_FIELDS);\ntoFastProperties(BUILDER_KEYS);\ntoFastProperties(DEPRECATED_KEYS);\n\ntoFastProperties(PLACEHOLDERS_ALIAS);\ntoFastProperties(PLACEHOLDERS_FLIPPED_ALIAS);\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_ALIASES,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils.ts\";\n", "import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string,\n  val?: t.Node | undefined | null,\n) {\n  if (val == null) return;\n  const validate = NODE_PARENT_VALIDATIONS[val.type];\n  if (!validate) return;\n  validate(node, key, val);\n}\n", "import validate from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\nimport { BUILDER_KEYS } from \"../index.ts\";\n\nexport default function validateNode<N extends t.Node>(node: N) {\n  // todo: because keys not in BUILDER_KEYS are not validated - this actually allows invalid nodes in some cases\n  const keys = BUILDER_KEYS[node.type] as (keyof N & string)[];\n  for (const key of keys) {\n    validate(node, key, node[key]);\n  }\n  return node;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  return validateNode<t.ImportExpression>({\n    type: \"ImportExpression\",\n    source,\n    options,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n", "import { stringLiteral } from \"../../builders/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\nimport { inherits } from \"../../index.ts\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n", "import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n", "import isNode from \"../validators/isNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n", "import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n", "import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { unionTypeAnnotation } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n", "import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.TSType>,\n): Array<t.TSType> {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { tsUnionType } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates.ts\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/**\n * This file is written in JavaScript and not TypeScript because uppercase builders\n * conflict with AST types. TypeScript reads the uppercase.d.ts file instead.\n */\n\nexport {\n  arrayExpression as ArrayExpression,\n  assignmentExpression as AssignmentExpression,\n  binaryExpression as BinaryExpression,\n  interpreterDirective as InterpreterDirective,\n  directive as Directive,\n  directiveLiteral as DirectiveLiteral,\n  blockStatement as BlockStatement,\n  breakStatement as BreakStatement,\n  callExpression as CallExpression,\n  catchClause as CatchClause,\n  conditionalExpression as ConditionalExpression,\n  continueStatement as ContinueStatement,\n  debuggerStatement as DebuggerStatement,\n  doWhileStatement as DoWhileStatement,\n  emptyStatement as EmptyStatement,\n  expressionStatement as ExpressionStatement,\n  file as File,\n  forInStatement as ForInStatement,\n  forStatement as ForStatement,\n  functionDeclaration as FunctionDeclaration,\n  functionExpression as FunctionExpression,\n  identifier as Identifier,\n  ifStatement as IfStatement,\n  labeledStatement as LabeledStatement,\n  stringLiteral as StringLiteral,\n  numericLiteral as NumericLiteral,\n  nullLiteral as NullLiteral,\n  booleanLiteral as BooleanLiteral,\n  regExpLiteral as RegExpLiteral,\n  logicalExpression as LogicalExpression,\n  memberExpression as MemberExpression,\n  newExpression as NewExpression,\n  program as Program,\n  objectExpression as ObjectExpression,\n  objectMethod as ObjectMethod,\n  objectProperty as ObjectProperty,\n  restElement as RestElement,\n  returnStatement as ReturnStatement,\n  sequenceExpression as SequenceExpression,\n  parenthesizedExpression as ParenthesizedExpression,\n  switchCase as SwitchCase,\n  switchStatement as SwitchStatement,\n  thisExpression as ThisExpression,\n  throwStatement as ThrowStatement,\n  tryStatement as TryStatement,\n  unaryExpression as UnaryExpression,\n  updateExpression as UpdateExpression,\n  variableDeclaration as VariableDeclaration,\n  variableDeclarator as VariableDeclarator,\n  whileStatement as WhileStatement,\n  withStatement as WithStatement,\n  assignmentPattern as AssignmentPattern,\n  arrayPattern as ArrayPattern,\n  arrowFunctionExpression as ArrowFunctionExpression,\n  classBody as ClassBody,\n  classExpression as ClassExpression,\n  classDeclaration as ClassDeclaration,\n  exportAllDeclaration as ExportAllDeclaration,\n  exportDefaultDeclaration as ExportDefaultDeclaration,\n  exportNamedDeclaration as ExportNamedDeclaration,\n  exportSpecifier as ExportSpecifier,\n  forOfStatement as ForOfStatement,\n  importDeclaration as ImportDeclaration,\n  importDefaultSpecifier as ImportDefaultSpecifier,\n  importNamespaceSpecifier as ImportNamespaceSpecifier,\n  importSpecifier as ImportSpecifier,\n  importExpression as ImportExpression,\n  metaProperty as MetaProperty,\n  classMethod as ClassMethod,\n  objectPattern as ObjectPattern,\n  spreadElement as SpreadElement,\n  super as Super,\n  taggedTemplateExpression as TaggedTemplateExpression,\n  templateElement as TemplateElement,\n  templateLiteral as TemplateLiteral,\n  yieldExpression as YieldExpression,\n  awaitExpression as AwaitExpression,\n  import as Import,\n  bigIntLiteral as BigIntLiteral,\n  exportNamespaceSpecifier as ExportNamespaceSpecifier,\n  optionalMemberExpression as OptionalMemberExpression,\n  optionalCallExpression as OptionalCallExpression,\n  classProperty as ClassProperty,\n  classAccessorProperty as ClassAccessorProperty,\n  classPrivateProperty as ClassPrivateProperty,\n  classPrivateMethod as ClassPrivateMethod,\n  privateName as PrivateName,\n  staticBlock as StaticBlock,\n  anyTypeAnnotation as AnyTypeAnnotation,\n  arrayTypeAnnotation as ArrayTypeAnnotation,\n  booleanTypeAnnotation as BooleanTypeAnnotation,\n  booleanLiteralTypeAnnotation as BooleanLiteralTypeAnnotation,\n  nullLiteralTypeAnnotation as NullLiteralTypeAnnotation,\n  classImplements as ClassImplements,\n  declareClass as DeclareClass,\n  declareFunction as DeclareFunction,\n  declareInterface as DeclareInterface,\n  declareModule as DeclareModule,\n  declareModuleExports as DeclareModuleExports,\n  declareTypeAlias as DeclareTypeAlias,\n  declareOpaqueType as DeclareOpaqueType,\n  declareVariable as DeclareVariable,\n  declareExportDeclaration as DeclareExportDeclaration,\n  declareExportAllDeclaration as DeclareExportAllDeclaration,\n  declaredPredicate as DeclaredPredicate,\n  existsTypeAnnotation as ExistsTypeAnnotation,\n  functionTypeAnnotation as FunctionTypeAnnotation,\n  functionTypeParam as FunctionTypeParam,\n  genericTypeAnnotation as GenericTypeAnnotation,\n  inferredPredicate as InferredPredicate,\n  interfaceExtends as InterfaceExtends,\n  interfaceDeclaration as InterfaceDeclaration,\n  interfaceTypeAnnotation as InterfaceTypeAnnotation,\n  intersectionTypeAnnotation as IntersectionTypeAnnotation,\n  mixedTypeAnnotation as MixedTypeAnnotation,\n  emptyTypeAnnotation as EmptyTypeAnnotation,\n  nullableTypeAnnotation as NullableTypeAnnotation,\n  numberLiteralTypeAnnotation as NumberLiteralTypeAnnotation,\n  numberTypeAnnotation as NumberTypeAnnotation,\n  objectTypeAnnotation as ObjectTypeAnnotation,\n  objectTypeInternalSlot as ObjectTypeInternalSlot,\n  objectTypeCallProperty as ObjectTypeCallProperty,\n  objectTypeIndexer as ObjectTypeIndexer,\n  objectTypeProperty as ObjectTypeProperty,\n  objectTypeSpreadProperty as ObjectTypeSpreadProperty,\n  opaqueType as OpaqueType,\n  qualifiedTypeIdentifier as QualifiedTypeIdentifier,\n  stringLiteralTypeAnnotation as StringLiteralTypeAnnotation,\n  stringTypeAnnotation as StringTypeAnnotation,\n  symbolTypeAnnotation as SymbolTypeAnnotation,\n  thisTypeAnnotation as ThisTypeAnnotation,\n  tupleTypeAnnotation as TupleTypeAnnotation,\n  typeofTypeAnnotation as TypeofTypeAnnotation,\n  typeAlias as TypeAlias,\n  typeAnnotation as TypeAnnotation,\n  typeCastExpression as TypeCastExpression,\n  typeParameter as TypeParameter,\n  typeParameterDeclaration as TypeParameterDeclaration,\n  typeParameterInstantiation as TypeParameterInstantiation,\n  unionTypeAnnotation as UnionTypeAnnotation,\n  variance as Variance,\n  voidTypeAnnotation as VoidTypeAnnotation,\n  enumDeclaration as EnumDeclaration,\n  enumBooleanBody as EnumBooleanBody,\n  enumNumberBody as EnumNumberBody,\n  enumStringBody as EnumStringBody,\n  enumSymbolBody as EnumSymbolBody,\n  enumBooleanMember as EnumBooleanMember,\n  enumNumberMember as EnumNumberMember,\n  enumStringMember as EnumStringMember,\n  enumDefaultedMember as EnumDefaultedMember,\n  indexedAccessType as IndexedAccessType,\n  optionalIndexedAccessType as OptionalIndexedAccessType,\n  jsxAttribute as JSXAttribute,\n  jsxClosingElement as JSXClosingElement,\n  jsxElement as JSXElement,\n  jsxEmptyExpression as JSXEmptyExpression,\n  jsxExpressionContainer as JSXExpressionContainer,\n  jsxSpreadChild as JSXSpreadChild,\n  jsxIdentifier as JSXIdentifier,\n  jsxMemberExpression as JSXMemberExpression,\n  jsxNamespacedName as JSXNamespacedName,\n  jsxOpeningElement as JSXOpeningElement,\n  jsxSpreadAttribute as JSXSpreadAttribute,\n  jsxText as JSXText,\n  jsxFragment as JSXFragment,\n  jsxOpeningFragment as JSXOpeningFragment,\n  jsxClosingFragment as JSXClosingFragment,\n  noop as Noop,\n  placeholder as Placeholder,\n  v8IntrinsicIdentifier as V8IntrinsicIdentifier,\n  argumentPlaceholder as ArgumentPlaceholder,\n  bindExpression as BindExpression,\n  importAttribute as ImportAttribute,\n  decorator as Decorator,\n  doExpression as DoExpression,\n  exportDefaultSpecifier as ExportDefaultSpecifier,\n  recordExpression as RecordExpression,\n  tupleExpression as TupleExpression,\n  decimalLiteral as DecimalLiteral,\n  moduleExpression as ModuleExpression,\n  topicReference as TopicReference,\n  pipelineTopicExpression as PipelineTopicExpression,\n  pipelineBareFunction as PipelineBareFunction,\n  pipelinePrimaryTopicReference as PipelinePrimaryTopicReference,\n  tsParameterProperty as TSParameterProperty,\n  tsDeclareFunction as TSDeclareFunction,\n  tsDeclareMethod as TSDeclareMethod,\n  tsQualifiedName as TSQualifiedName,\n  tsCallSignatureDeclaration as TSCallSignatureDeclaration,\n  tsConstructSignatureDeclaration as TSConstructSignatureDeclaration,\n  tsPropertySignature as TSPropertySignature,\n  tsMethodSignature as TSMethodSignature,\n  tsIndexSignature as TSIndexSignature,\n  tsAnyKeyword as TSAnyKeyword,\n  tsBooleanKeyword as TSBooleanKeyword,\n  tsBigIntKeyword as TSBigIntKeyword,\n  tsIntrinsicKeyword as TSIntrinsicKeyword,\n  tsNeverKeyword as TSNeverKeyword,\n  tsNullKeyword as TSNullKeyword,\n  tsNumberKeyword as TSNumberKeyword,\n  tsObjectKeyword as TSObjectKeyword,\n  tsStringKeyword as TSStringKeyword,\n  tsSymbolKeyword as TSSymbolKeyword,\n  tsUndefinedKeyword as TSUndefinedKeyword,\n  tsUnknownKeyword as TSUnknownKeyword,\n  tsVoidKeyword as TSVoidKeyword,\n  tsThisType as TSThisType,\n  tsFunctionType as TSFunctionType,\n  tsConstructorType as TSConstructorType,\n  tsTypeReference as TSTypeReference,\n  tsTypePredicate as TSTypePredicate,\n  tsTypeQuery as TSTypeQuery,\n  tsTypeLiteral as TSTypeLiteral,\n  tsArrayType as TSArrayType,\n  tsTupleType as TSTupleType,\n  tsOptionalType as TSOptionalType,\n  tsRestType as TSRestType,\n  tsNamedTupleMember as TSNamedTupleMember,\n  tsUnionType as TSUnionType,\n  tsIntersectionType as TSIntersectionType,\n  tsConditionalType as TSConditionalType,\n  tsInferType as TSInferType,\n  tsParenthesizedType as TSParenthesizedType,\n  tsTypeOperator as TSTypeOperator,\n  tsIndexedAccessType as TSIndexedAccessType,\n  tsMappedType as TSMappedType,\n  tsLiteralType as TSLiteralType,\n  tsExpressionWithTypeArguments as TSExpressionWithTypeArguments,\n  tsInterfaceDeclaration as TSInterfaceDeclaration,\n  tsInterfaceBody as TSInterfaceBody,\n  tsTypeAliasDeclaration as TSTypeAliasDeclaration,\n  tsInstantiationExpression as TSInstantiationExpression,\n  tsAsExpression as TSAsExpression,\n  tsSatisfiesExpression as TSSatisfiesExpression,\n  tsTypeAssertion as TSTypeAssertion,\n  tsEnumDeclaration as TSEnumDeclaration,\n  tsEnumMember as TSEnumMember,\n  tsModuleDeclaration as TSModuleDeclaration,\n  tsModuleBlock as TSModuleBlock,\n  tsImportType as TSImportType,\n  tsImportEqualsDeclaration as TSImportEqualsDeclaration,\n  tsExternalModuleReference as TSExternalModuleReference,\n  tsNonNullExpression as TSNonNullExpression,\n  tsExportAssignment as TSExportAssignment,\n  tsNamespaceExportDeclaration as TSNamespaceExportDeclaration,\n  tsTypeAnnotation as TSTypeAnnotation,\n  tsTypeParameterInstantiation as TSTypeParameterInstantiation,\n  tsTypeParameterDeclaration as TSTypeParameterDeclaration,\n  tsTypeParameter as TSTypeParameter,\n  numberLiteral as NumberLiteral,\n  regexLiteral as RegexLiteral,\n  restProperty as RestProperty,\n  spreadProperty as SpreadProperty,\n} from \"./index.ts\";\n", "import { numericLiteral, unaryExpression } from \"./generated/index.ts\";\n\nexport function buildUndefinedNode() {\n  return unaryExpression(\"void\", numericLiteral(0), true);\n}\n", "import { NODE_FIELDS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\nimport { isFile, isIdentifier } from \"../validators/generated/index.ts\";\n\nconst { hasOwn } = process.env.BABEL_8_BREAKING\n  ? Object\n  : { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (hasOwn(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (hasOwn(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!hasOwn(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (hasOwn(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n", "import type * as t from \"../index.ts\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n", "import addComments from \"./addComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n", "import type * as t from \"../index.ts\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n", "import inheritTrailingComments from \"./inheritTrailingComments.ts\";\nimport inheritLeadingComments from \"./inheritLeadingComments.ts\";\nimport inheritInnerComments from \"./inheritInnerComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n", "import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions/index.ts\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const IMPORTOREXPORTDECLARATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"ImportOrExportDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n/**\n * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.\n */\nexport const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n", "import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n", "import toBlock from \"./toBlock.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n", "import toIdentifier from \"./toIdentifier.ts\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n", "import { isIdentifier } from \"../validators/generated/index.ts\";\nimport { stringLiteral } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n", "import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * A prefix AST traversal implementation meant for simple searching\n * and processing.\n */\nexport default function traverseFast<Options = {}>(\n  node: t.Node | null | undefined,\n  enter: (node: t.Node, opts?: Options) => void,\n  opts?: Options,\n): void {\n  if (!node) return;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  opts = opts || ({} as Options);\n  enter(node, opts);\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n", "import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n", "import traverseFast from \"../traverse/traverseFast.ts\";\nimport removeProperties from \"./removeProperties.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n", "import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n", "import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated/index.ts\";\nimport { expressionStatement } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n", "import { memberExpression } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n", "import { INHERIT_KEYS } from \"../constants/index.ts\";\nimport inheritsComments from \"../comments/inheritsComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n", "import { memberExpression } from \"../builders/generated/index.ts\";\nimport { isSuper } from \"../index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n", "import {\n  isExportDeclaration,\n  isIdentifier,\n  isClassExpression,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n  isAssignmentExpression,\n  isUnaryExpression,\n  isUpdateExpression,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    if (\n      newBindingsOnly &&\n      // These nodes do not introduce _new_ bindings, but they are included\n      // in getBindingIdentifiers.keys for backwards compatibility.\n      // TODO(@nicolo-ribaudo): Check if we can remove them from .keys in a\n      // backward-compatible way, and if not what we need to do to remove them\n      // in Babel 8.\n      (isAssignmentExpression(id) ||\n        isUnaryExpression(id) ||\n        isUpdateExpression(id))\n    ) {\n      continue;\n    }\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (\n        isFunctionExpression(id) ||\n        (process.env.BABEL_8_BREAKING && isClassExpression(id))\n      ) {\n        continue;\n      }\n    }\n\n    const keys =\n      // @ts-expect-error getBindingIdentifiers.keys do not cover all AST types\n      getBindingIdentifiers.keys[id.type];\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);\n        }\n      }\n    }\n  }\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ngetBindingIdentifiers.keys = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n", "import getBindingIdentifiers from \"./getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (\n    node: t.Node,\n    duplicates?: boolean,\n  ): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n", "import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys =\n    // @ts-expect-error getBindingIdentifiers.keys does not cover all AST types\n    getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n", "import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node) &&\n    (node.kind !== \"var\" ||\n      // @ts-expect-error Fixme: document private properties\n      node[BLOCK_SCOPED_SYMBOL])\n  );\n}\n", "import {\n  isClassDeclaration,\n  isFunctionDeclaration,\n} from \"./generated/index.ts\";\nimport isLet from \"./isLet.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n", "import isType from \"./isType.ts\";\nimport { isIdentifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n", "import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n", "import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n", "import { isIdentifier, isImportDefaultSpecifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n", "import isValidIdentifier from \"./isValidIdentifier.ts\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n", "import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node, { kind: \"var\" }) &&\n    !(\n      // @ts-expect-error document private properties\n      node[BLOCK_SCOPED_SYMBOL]\n    )\n  );\n}\n", "// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport {\n  isExpression,\n  isExpressionStatement,\n  isVariableDeclaration,\n  isIfStatement,\n  isBlockStatement,\n  isEmptyStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  sequenceExpression,\n  assignmentExpression,\n  conditionalExpression,\n} from \"../builders/generated/index.ts\";\nimport { buildUndefinedNode } from \"../builders/productions.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type DeclarationInfo = {\n  kind: t.VariableDeclaration[\"kind\"];\n  id: t.Identifier;\n};\n\nexport default function gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  declars: Array<DeclarationInfo>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: cloneNode(bindings[key]),\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], declars)\n        : buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], declars)\n        : buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n", "// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport gatherSequenceExpressions from \"./gatherSequenceExpressions.ts\";\nimport type * as t from \"../index.ts\";\nimport type { DeclarationInfo } from \"./gatherSequenceExpressions.ts\";\n\n/**\n * Turn an array of statement `nodes` into a `SequenceExpression`.\n *\n * Variable declarations are turned into simple assignments and their\n * declarations hoisted to the top of the current scope.\n *\n * Expression statements are just resolved to their expression.\n */\nexport default function toSequenceExpression(\n  nodes: ReadonlyArray<t.Node>,\n  scope: any,\n): t.SequenceExpression | undefined {\n  if (!nodes?.length) return;\n\n  const declars: DeclarationInfo[] = [];\n  const result = gatherSequenceExpressions(nodes, declars);\n  if (!result) return;\n\n  for (const declar of declars) {\n    scope.push(declar);\n  }\n\n  // @ts-expect-error fixme: gatherSequenceExpressions will return an Expression when there are only one element\n  return result;\n}\n", "import isReactComponent from \"./validators/react/isReactComponent.ts\";\nimport isCompatTag from \"./validators/react/isCompatTag.ts\";\nimport buildChildren from \"./builders/react/buildChildren.ts\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode.ts\";\nexport * from \"./asserts/generated/index.ts\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof.ts\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType.ts\";\nexport * from \"./builders/generated/index.ts\";\nexport * from \"./builders/generated/uppercase.js\";\nexport * from \"./builders/productions.ts\";\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode.ts\";\nexport { default as clone } from \"./clone/clone.ts\";\nexport { default as cloneDeep } from \"./clone/cloneDeep.ts\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc.ts\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc.ts\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment.ts\";\nexport { default as addComments } from \"./comments/addComments.ts\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments.ts\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments.ts\";\nexport { default as inheritsComments } from \"./comments/inheritsComments.ts\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments.ts\";\nexport { default as removeComments } from \"./comments/removeComments.ts\";\n\n// constants\nexport * from \"./constants/generated/index.ts\";\nexport * from \"./constants/index.ts\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock.ts\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName.ts\";\nexport { default as toBlock } from \"./converters/toBlock.ts\";\nexport { default as toComputedKey } from \"./converters/toComputedKey.ts\";\nexport { default as toExpression } from \"./converters/toExpression.ts\";\nexport { default as toIdentifier } from \"./converters/toIdentifier.ts\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias.ts\";\nexport { default as toStatement } from \"./converters/toStatement.ts\";\nexport { default as valueToNode } from \"./converters/valueToNode.ts\";\n\n// definitions\nexport * from \"./definitions/index.ts\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression.ts\";\nexport { default as inherits } from \"./modifications/inherits.ts\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression.ts\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties.ts\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep.ts\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates.ts\";\n\n// retrievers\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers.ts\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers.ts\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse.ts\";\nexport * from \"./traverse/traverse.ts\";\nexport { default as traverseFast } from \"./traverse/traverseFast.ts\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual.ts\";\n\n// validators\nexport { default as is } from \"./validators/is.ts\";\nexport { default as isBinding } from \"./validators/isBinding.ts\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped.ts\";\nexport { default as isImmutable } from \"./validators/isImmutable.ts\";\nexport { default as isLet } from \"./validators/isLet.ts\";\nexport { default as isNode } from \"./validators/isNode.ts\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent.ts\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType.ts\";\nexport { default as isReferenced } from \"./validators/isReferenced.ts\";\nexport { default as isScope } from \"./validators/isScope.ts\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault.ts\";\nexport { default as isType } from \"./validators/isType.ts\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier.ts\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier.ts\";\nexport { default as isVar } from \"./validators/isVar.ts\";\nexport { default as matchesPattern } from \"./validators/matchesPattern.ts\";\nexport { default as validate } from \"./validators/validate.ts\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression.ts\";\nexport * from \"./validators/generated/index.ts\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\nexport type * from \"./ast-types/generated/index.ts\";\n\n// this is used by @babel/traverse to warn about deprecated visitors\nexport { default as __internal__deprecationWarning } from \"./utils/deprecationWarning.ts\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.toSequenceExpression =\n    // eslint-disable-next-line no-restricted-globals\n    require(\"./converters/toSequenceExpression.js\").default;\n}\n", "import { assertExpressionStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport type Formatter<T> = {\n  code: (source: string) => string;\n  validate: (ast: t.File) => void;\n  unwrap: (ast: t.File) => T;\n};\n\nfunction makeStatementFormatter<T>(\n  fn: (statements: Array<t.Statement>) => T,\n): Formatter<T> {\n  return {\n    // We need to prepend a \";\" to force statement parsing so that\n    // ExpressionStatement strings won't be parsed as directives.\n    // Alongside that, we also prepend a comment so that when a syntax error\n    // is encountered, the user will be less likely to get confused about\n    // where the random semicolon came from.\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: (ast: t.File): T => {\n      return fn(ast.program.body.slice(1));\n    },\n  };\n}\n\nexport const smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\n\nexport const statements = makeStatementFormatter(body => body);\n\nexport const statement = makeStatementFormatter(body => {\n  // We do this validation when unwrapping since the replacement process\n  // could have added or removed statements.\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\n\nexport const expression: Formatter<t.Expression> = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({ program }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  },\n};\n\nexport const program: Formatter<t.Program> = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program,\n};\n", "import type { ParserOptions as ParserOpts } from \"@babel/parser\";\n\nexport type { ParserOpts };\n\n/**\n * These are the options that 'babel-template' actually accepts and typechecks\n * when called. All other options are passed through to the parser.\n */\nexport type PublicOpts = {\n  /**\n   * A set of placeholder names to automatically accept, ignoring the given\n   * pattern entirely.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderWhitelist?: Set<string>;\n  /**\n   * A pattern to search for when looking for Identifier and StringLiteral\n   * nodes that can be replaced.\n   *\n   * 'false' will disable placeholder searching entirely, leaving only the\n   * 'placeholderWhitelist' value to find replacements.\n   *\n   * Defaults to /^[_$A-Z0-9]+$/.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderPattern?: RegExp | false;\n  /**\n   * 'true' to pass through comments from the template into the resulting AST,\n   * or 'false' to automatically discard comments. Defaults to 'false'.\n   */\n  preserveComments?: boolean;\n  /**\n   * 'true' to use %%foo%% style placeholders, 'false' to use legacy placeholders\n   * described by placeholderPattern or placeholderWhitelist.\n   * When it is not set, it behaves as 'true' if there are syntactic placeholders,\n   * otherwise as 'false'.\n   */\n  syntacticPlaceholders?: boolean | null;\n};\n\nexport type TemplateOpts = {\n  parser: ParserOpts;\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  preserveComments?: boolean;\n  syntacticPlaceholders?: boolean;\n};\n\nexport function merge(a: TemplateOpts, b: TemplateOpts): TemplateOpts {\n  const {\n    placeholderWhitelist = a.placeholderWhitelist,\n    placeholderPattern = a.placeholderPattern,\n    preserveComments = a.preserveComments,\n    syntacticPlaceholders = a.syntacticPlaceholders,\n  } = b;\n\n  return {\n    parser: {\n      ...a.parser,\n      ...b.parser,\n    },\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  };\n}\n\nexport function validate(opts: unknown): TemplateOpts {\n  if (opts != null && typeof opts !== \"object\") {\n    throw new Error(\"Unknown template options.\");\n  }\n\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n    ...parser\n  } = opts || ({} as any);\n\n  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {\n    throw new Error(\n      \"'.placeholderWhitelist' must be a Set, null, or undefined\",\n    );\n  }\n\n  if (\n    placeholderPattern != null &&\n    !(placeholderPattern instanceof RegExp) &&\n    placeholderPattern !== false\n  ) {\n    throw new Error(\n      \"'.placeholderPattern' must be a RegExp, false, null, or undefined\",\n    );\n  }\n\n  if (preserveComments != null && typeof preserveComments !== \"boolean\") {\n    throw new Error(\n      \"'.preserveComments' must be a boolean, null, or undefined\",\n    );\n  }\n\n  if (\n    syntacticPlaceholders != null &&\n    typeof syntacticPlaceholders !== \"boolean\"\n  ) {\n    throw new Error(\n      \"'.syntacticPlaceholders' must be a boolean, null, or undefined\",\n    );\n  }\n  if (\n    syntacticPlaceholders === true &&\n    (placeholderWhitelist != null || placeholderPattern != null)\n  ) {\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  return {\n    parser,\n    placeholderWhitelist: placeholderWhitelist || undefined,\n    placeholderPattern:\n      placeholderPattern == null ? undefined : placeholderPattern,\n    preserveComments: preserveComments == null ? undefined : preserveComments,\n    syntacticPlaceholders:\n      syntacticPlaceholders == null ? undefined : syntacticPlaceholders,\n  };\n}\n\nexport type PublicReplacements = { [x: string]: unknown } | Array<unknown>;\nexport type TemplateReplacements = { [x: string]: unknown } | void;\n\nexport function normalizeReplacements(\n  replacements: unknown,\n): TemplateReplacements {\n  if (Array.isArray(replacements)) {\n    return replacements.reduce((acc, replacement, i) => {\n      acc[\"$\" + i] = replacement;\n      return acc;\n    }, {});\n  } else if (typeof replacements === \"object\" || replacements == null) {\n    return (replacements as any) || undefined;\n  }\n\n  throw new Error(\n    \"Template replacements must be an array, object, null, or undefined\",\n  );\n}\n", "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error = new SyntaxError();\n    Object.assign(error, properties, { loc, pos: loc.index });\n    if (\"missingPlugin\" in details) {\n      Object.assign(error, { missingPlugin: details.missingPlugin });\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        ) {\n          (node as N.Node as N.EstreeImportExpression).options =\n            (node.arguments[1] as N.Expression) ?? null;\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            (node.arguments[1] as N.Expression) ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = {}>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        (elt as unknown as RestElement).type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node) {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    {\n      in: ancestor,\n      binding = BindingFlag.TYPE_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingFlag;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  // TODO: Accesor -> Accessor\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (\n        this.hasPlugin(\"importAttributes\") ||\n        this.hasPlugin(\"importAssertions\")\n      ) {\n        node.options = null;\n      }\n      if (this.eat(tt.comma)) {\n        this.expectImportAttributesPlugin();\n        if (!this.match(tt.parenR)) {\n          node.options = super.parseMaybeAssignAllowIn();\n          this.eat(tt.comma);\n        }\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccesorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccesorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        const nodeImportEquals = node as Undone<N.TsImportEqualsDeclaration>;\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSInstantiationExpression: \"expression\",\n            TSAsExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n          ) as N.CallExpression;\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const recordAndTupleConfigItem:\n      | \"recordAndTuple\"\n      | [\"recordAndTuple\", { syntaxType: \"hash\" }] = process.env\n      .BABEL_8_BREAKING\n      ? \"recordAndTuple\"\n      : [\"recordAndTuple\", { syntaxType: \"hash\" }];\n    const tupleSyntaxIsHash = hasPlugin(plugins, recordAndTupleConfigItem);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify(recordAndTupleConfigItem)}\\`.`,\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify(recordAndTupleConfigItem)}\\`.`,\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        hasPlugin(plugins, \"importAssertions\") ||\n        hasPlugin(plugins, \"importAttributes\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (\n    hasPlugin(plugins, \"importAssertions\") &&\n    hasPlugin(plugins, \"importAttributes\")\n  ) {\n    throw new Error(\n      \"Cannot combine importAssertions and importAttributes plugins.\",\n    );\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\")) {\n    const syntaxType = getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\");\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    hasPlugin(plugins, \"optionalChainingAssign\") &&\n    getPluginOption(plugins, \"optionalChainingAssign\", \"version\") !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  sourceType?: SourceType;\n  sourceFilename?: string;\n  startColumn?: number;\n  startLine?: number;\n  allowAwaitOutsideFunction?: boolean;\n  allowReturnOutsideFunction?: boolean;\n  allowNewTargetOutsideFunction?: boolean;\n  allowImportExportEverywhere?: boolean;\n  allowSuperOutsideMethod?: boolean;\n  allowUndeclaredExports?: boolean;\n  plugins?: PluginList;\n  strictMode?: boolean | undefined | null;\n  ranges?: boolean;\n  tokens?: boolean;\n  createImportExpressions?: boolean;\n  createParenthesizedExpressions?: boolean;\n  errorRecovery?: boolean;\n  attachComment?: boolean;\n  annexB?: boolean;\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nexport const defaultOptions: OptionsWithDefaults = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ImportExpression AST nodes (if false\n  // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n  createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  if (opts == null) {\n    return { ...defaultOptions };\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions) as (keyof Options)[]) {\n    options[key] = opts[key] ?? defaultOptions[key];\n  }\n  return options;\n}\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectImportAttributesPlugin();\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              Errors.ImportCallArgumentTrailingComma,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.options = null;\n    }\n    if (this.eat(tt.comma)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, at, { localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode<N.CallExpression>(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BindingFlag.TYPE_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node2.source = null;\n      node2.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      this.isContextual(tt._module)\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (phase === \"module\" || phase === \"source\") {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `module` in `import module x from \"x\"`, disambiguating\n   * `import module from \"x\"` and `import module from from \"x\"`.\n   *\n   * This function might return an identifier representing the `module`\n   * if it eats `module` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins.\n   *\n   * Note: the proposal has been updated to use `source` instead of `module`,\n   * but it has not been implemented yet.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    let useWith = false;\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      } else {\n        this.expectImportAttributesPlugin();\n        attributes = this.parseImportAttributes();\n      }\n      useWith = true;\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport type { PluginList } from \"../plugin-utils.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\nexport type { Expression, File };\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n", "// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n})\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: \"invalid\", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = \"string\" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = \"comment\"\n  else if (match[ 6]) token.type = \"comment\", token.closed = !!match[7]\n  else if (match[ 8]) token.type = \"regex\"\n  else if (match[ 9]) token.type = \"number\"\n  else if (match[10]) token.type = \"name\"\n  else if (match[11]) token.type = \"punctuator\"\n  else if (match[12]) token.type = \"whitespace\"\n  return token\n}\n", "'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n", "'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n", "var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n", "var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n", "'use strict';\nconst colorConvert = require('color-convert');\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n", "'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n", "'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n", "'use strict';\nconst escapeStringRegexp = require('escape-string-regexp');\nconst ansiStyles = require('ansi-styles');\nconst stdoutColor = require('supports-color').stdout;\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n", "import type { Token as JSToken, JSXToken } from \"js-tokens\";\nimport jsTokens from \"js-tokens\";\n\nimport {\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nimport _colors, { createColors } from \"picocolors\";\nimport type { Colors, Formatter } from \"picocolors/types\";\n// See https://github.com/alexeyraspopov/picocolors/issues/62\nconst colors =\n  typeof process === \"object\" &&\n  (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\")\n    ? createColors(false)\n    : _colors;\n\nconst compose: <T, U, V>(f: (gv: U) => V, g: (v: T) => U) => (v: T) => V =\n  (f, g) => v =>\n    f(g(v));\n\n/**\n * Names that are always allowed as identifiers, but also appear as keywords\n * within certain syntactic productions.\n *\n * https://tc39.es/ecma262/#sec-keywords-and-reserved-words\n *\n * `target` has been omitted since it is very likely going to be a false\n * positive.\n */\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\ntype InternalTokenType =\n  | \"keyword\"\n  | \"capitalized\"\n  | \"jsxIdentifier\"\n  | \"punctuator\"\n  | \"number\"\n  | \"string\"\n  | \"regex\"\n  | \"comment\"\n  | \"invalid\";\n\ntype Token = {\n  type: InternalTokenType | \"uncolored\";\n  value: string;\n};\n/**\n * Styles for token types.\n */\nfunction getDefs(colors: Colors): Record<InternalTokenType, Formatter> {\n  return {\n    keyword: colors.cyan,\n    capitalized: colors.yellow,\n    jsxIdentifier: colors.yellow,\n    punctuator: colors.yellow,\n    number: colors.magenta,\n    string: colors.green,\n    regex: colors.magenta,\n    comment: colors.gray,\n    invalid: compose(compose(colors.white, colors.bgRed), colors.bold),\n  };\n}\n\n/**\n * RegExp to test for newlines in terminal.\n */\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n/**\n * RegExp to test for the three types of brackets.\n */\nconst BRACKET = /^[()[\\]{}]$/;\n\nlet tokenize: (\n  text: string,\n) => Generator<{ type: InternalTokenType | \"uncolored\"; value: string }>;\n\nif (process.env.BABEL_8_BREAKING) {\n  /**\n   * Get the type of token, specifying punctuator type.\n   */\n  const getTokenType = function (\n    token: JSToken | JSXToken,\n  ): InternalTokenType | \"uncolored\" {\n    if (token.type === \"IdentifierName\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"Punctuator\" && BRACKET.test(token.value)) {\n      return \"uncolored\";\n    }\n\n    if (token.type === \"Invalid\" && token.value === \"@\") {\n      return \"punctuator\";\n    }\n\n    switch (token.type) {\n      case \"NumericLiteral\":\n        return \"number\";\n\n      case \"StringLiteral\":\n      case \"JSXString\":\n      case \"NoSubstitutionTemplate\":\n        return \"string\";\n\n      case \"RegularExpressionLiteral\":\n        return \"regex\";\n\n      case \"Punctuator\":\n      case \"JSXPunctuator\":\n        return \"punctuator\";\n\n      case \"MultiLineComment\":\n      case \"SingleLineComment\":\n        return \"comment\";\n\n      case \"Invalid\":\n      case \"JSXInvalid\":\n        return \"invalid\";\n\n      case \"JSXIdentifier\":\n        return \"jsxIdentifier\";\n\n      default:\n        return \"uncolored\";\n    }\n  };\n\n  /**\n   * Turn a string of JS into an array of objects.\n   */\n  tokenize = function* (text: string): Generator<Token> {\n    for (const token of jsTokens(text, { jsx: true })) {\n      switch (token.type) {\n        case \"TemplateHead\":\n          yield { type: \"string\", value: token.value.slice(0, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateMiddle\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateTail\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1) };\n          break;\n\n        default:\n          yield {\n            type: getTokenType(token),\n            value: token.value,\n          };\n      }\n    }\n  };\n} else {\n  /**\n   * RegExp to test for what seems to be a JSX tag name.\n   */\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  // The token here is defined in js-tokens@4. However we don't bother\n  // typing it since the whole block will be removed in Babel 8\n  const getTokenType = function (token: any, offset: number, text: string) {\n    if (token.type === \"name\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (\n        JSX_TAG.test(token.value) &&\n        (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) === \"</\")\n      ) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (\n      token.type === \"invalid\" &&\n      (token.value === \"@\" || token.value === \"#\")\n    ) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text: string) {\n    let match;\n    while ((match = (jsTokens as any).default.exec(text))) {\n      const token = (jsTokens as any).matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value,\n      };\n    }\n  };\n}\n\n/**\n * Highlight `text` using the token definitions in `defs`.\n */\nfunction highlightTokens(defs: Record<string, Formatter>, text: string) {\n  let highlighted = \"\";\n\n  for (const { type, value } of tokenize(text)) {\n    const colorize = defs[type];\n    if (colorize) {\n      highlighted += value\n        .split(NEWLINE)\n        .map(str => colorize(str))\n        .join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n\n/**\n * Highlight `text` using the token definitions in `defs`.\n */\n\ntype Options = {\n  forceColor?: boolean;\n};\n\n/**\n * Whether the code should be highlighted given the passed options.\n */\nexport function shouldHighlight(options: Options): boolean {\n  return colors.isColorSupported || options.forceColor;\n}\n\nlet pcWithForcedColor: Colors = undefined;\nfunction getColors(forceColor: boolean) {\n  if (forceColor) {\n    pcWithForcedColor ??= createColors(true);\n    return pcWithForcedColor;\n  }\n  return colors;\n}\n\n/**\n * Highlight `code`.\n */\nexport default function highlight(code: string, options: Options = {}): string {\n  if (code !== \"\" && shouldHighlight(options)) {\n    const defs = getDefs(getColors(options.forceColor));\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  let chalk: any, chalkWithForcedColor: any;\n  // eslint-disable-next-line no-restricted-globals\n  exports.getChalk = ({ forceColor }: Options) => {\n    // eslint-disable-next-line no-restricted-globals\n    chalk ??= require(\"chalk\");\n    if (forceColor) {\n      chalkWithForcedColor ??= new chalk.constructor({\n        enabled: true,\n        level: 1,\n      });\n      return chalkWithForcedColor;\n    }\n    return chalk;\n  };\n}\n", "import highlight, { shouldHighlight } from \"@babel/highlight\";\n\nimport _colors, { createColors } from \"picocolors\";\nimport type { Colors, Formatter } from \"picocolors/types\";\n// See https://github.com/alexeyraspopov/picocolors/issues/62\nconst colors =\n  typeof process === \"object\" &&\n  (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\")\n    ? createColors(false)\n    : _colors;\n\nconst compose: <T, U, V>(f: (gv: U) => V, g: (v: T) => U) => (v: T) => V =\n  (f, g) => v =>\n    f(g(v));\n\nlet pcWithForcedColor: Colors = undefined;\nfunction getColors(forceColor: boolean) {\n  if (forceColor) {\n    pcWithForcedColor ??= createColors(true);\n    return pcWithForcedColor;\n  }\n  return colors;\n}\n\nlet deprecationWarningShown = false;\n\ntype Location = {\n  column: number;\n  line: number;\n};\n\ntype NodeLocation = {\n  end?: Location;\n  start: Location;\n};\n\nexport interface Options {\n  /** Syntax highlight the code as JavaScript for terminals. default: false */\n  highlightCode?: boolean;\n  /**  The number of lines to show above the error. default: 2 */\n  linesAbove?: number;\n  /**  The number of lines to show below the error. default: 3 */\n  linesBelow?: number;\n  /**\n   * Forcibly syntax highlight the code as JavaScript (for non-terminals);\n   * overrides highlightCode.\n   * default: false\n   */\n  forceColor?: boolean;\n  /**\n   * Pass in a string to be displayed inline (if possible) next to the\n   * highlighted location in the code. If it can't be positioned inline,\n   * it will be placed above the code frame.\n   * default: nothing\n   */\n  message?: string;\n}\n\n/**\n * Styles for code frame token types.\n */\nfunction getDefs(colors: Colors) {\n  return {\n    gutter: colors.gray,\n    marker: compose(colors.red, colors.bold),\n    message: compose(colors.red, colors.bold),\n  };\n}\n\n/**\n * RegExp to test for newlines in terminal.\n */\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n/**\n * Extract what lines should be marked and highlighted.\n */\n\ntype MarkerLines = Record<number, true | [number, number]>;\n\nfunction getMarkerLines(\n  loc: NodeLocation,\n  source: Array<string>,\n  opts: Options,\n): {\n  start: number;\n  end: number;\n  markerLines: MarkerLines;\n} {\n  const startLoc: Location = {\n    column: 0,\n    line: -1,\n    ...loc.start,\n  };\n  const endLoc: Location = {\n    ...startLoc,\n    ...loc.end,\n  };\n  const { linesAbove = 2, linesBelow = 3 } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n\n  if (startLine === -1) {\n    start = 0;\n  }\n\n  if (endLine === -1) {\n    end = source.length;\n  }\n\n  const lineDiff = endLine - startLine;\n  const markerLines: MarkerLines = {};\n\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n\n  return { start, end, markerLines };\n}\n\nexport function codeFrameColumns(\n  rawLines: string,\n  loc: NodeLocation,\n  opts: Options = {},\n): string {\n  const highlighted =\n    (opts.highlightCode || opts.forceColor) && shouldHighlight(opts);\n  const colors = getColors(opts.forceColor);\n  const defs = getDefs(colors);\n  const maybeHighlight = (fmt: Formatter, string: string) => {\n    return highlighted ? fmt(string) : string;\n  };\n  const lines = rawLines.split(NEWLINE);\n  const { start, end, markerLines } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n\n  const numberMaxWidth = String(end).length;\n\n  const highlightedLines = highlighted ? highlight(rawLines, opts) : rawLines;\n\n  let frame = highlightedLines\n    .split(NEWLINE, end)\n    .slice(start, end)\n    .map((line, index) => {\n      const number = start + 1 + index;\n      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n      const gutter = ` ${paddedNumber} |`;\n      const hasMarker = markerLines[number];\n      const lastMarkerLine = !markerLines[number + 1];\n      if (hasMarker) {\n        let markerLine = \"\";\n        if (Array.isArray(hasMarker)) {\n          const markerSpacing = line\n            .slice(0, Math.max(hasMarker[0] - 1, 0))\n            .replace(/[^\\t]/g, \" \");\n          const numberOfMarkers = hasMarker[1] || 1;\n\n          markerLine = [\n            \"\\n \",\n            maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")),\n            \" \",\n            markerSpacing,\n            maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers),\n          ].join(\"\");\n\n          if (lastMarkerLine && opts.message) {\n            markerLine += \" \" + maybeHighlight(defs.message, opts.message);\n          }\n        }\n        return [\n          maybeHighlight(defs.marker, \">\"),\n          maybeHighlight(defs.gutter, gutter),\n          line.length > 0 ? ` ${line}` : \"\",\n          markerLine,\n        ].join(\"\");\n      } else {\n        return ` ${maybeHighlight(defs.gutter, gutter)}${\n          line.length > 0 ? ` ${line}` : \"\"\n        }`;\n      }\n    })\n    .join(\"\\n\");\n\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n\n  if (highlighted) {\n    return colors.reset(frame);\n  } else {\n    return frame;\n  }\n}\n\n/**\n * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.\n */\n\nexport default function (\n  rawLines: string,\n  lineNumber: number,\n  colNumber?: number | null,\n  opts: Options = {},\n): string {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n\n    const message =\n      \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n\n    if (process.emitWarning) {\n      // A string is directly supplied to emitWarning, because when supplying an\n      // Error object node throws in the tests because of different contexts\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n\n  colNumber = Math.max(colNumber, 0);\n\n  const location: NodeLocation = {\n    start: { column: colNumber, line: lineNumber },\n  };\n\n  return codeFrameColumns(rawLines, location, opts);\n}\n", "import {\n  isCallExpression,\n  isExpressionStatement,\n  isFunction,\n  isIdentifier,\n  isJSXIdentifier,\n  isNewExpression,\n  isPlaceholder,\n  isStatement,\n  isStringLiteral,\n  removePropertiesDeep,\n  traverse,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { TraversalAncestors } from \"@babel/types\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport type { TemplateOpts, ParserOpts } from \"./options.ts\";\nimport type { Formatter } from \"./formatters.ts\";\n\nexport type Metadata = {\n  ast: t.File;\n  placeholders: Array<Placeholder>;\n  placeholderNames: Set<string>;\n};\n\ntype PlaceholderType = \"string\" | \"param\" | \"statement\" | \"other\";\nexport type Placeholder = {\n  name: string;\n  resolve: (a: t.File) => { parent: t.Node; key: string; index?: number };\n  type: PlaceholderType;\n  isDuplicate: boolean;\n};\n\nconst PATTERN = /^[_$A-Z0-9]+$/;\n\nexport default function parseAndBuildMetadata<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): Metadata {\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  } = opts;\n\n  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);\n\n  removePropertiesDeep(ast, {\n    preserveComments,\n  });\n\n  formatter.validate(ast);\n\n  const state: MetadataState = {\n    syntactic: { placeholders: [], placeholderNames: new Set() },\n    legacy: { placeholders: [], placeholderNames: new Set() },\n    placeholderWhitelist,\n    placeholderPattern,\n    syntacticPlaceholders,\n  };\n\n  traverse(ast, placeholderVisitorHandler, state);\n\n  return {\n    ast,\n    ...(state.syntactic.placeholders.length ? state.syntactic : state.legacy),\n  };\n}\n\nfunction placeholderVisitorHandler(\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: MetadataState,\n) {\n  let name: string;\n\n  let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;\n\n  if (isPlaceholder(node)) {\n    if (state.syntacticPlaceholders === false) {\n      throw new Error(\n        \"%%foo%%-style placeholders can't be used when \" +\n          \"'.syntacticPlaceholders' is false.\",\n      );\n    }\n    name = node.name.name;\n    hasSyntacticPlaceholders = true;\n  } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {\n    return;\n  } else if (isIdentifier(node) || isJSXIdentifier(node)) {\n    name = node.name;\n  } else if (isStringLiteral(node)) {\n    name = node.value;\n  } else {\n    return;\n  }\n\n  if (\n    hasSyntacticPlaceholders &&\n    (state.placeholderPattern != null || state.placeholderWhitelist != null)\n  ) {\n    // This check is also in options.js. We need it there to handle the default\n    // .syntacticPlaceholders behavior.\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  if (\n    !hasSyntacticPlaceholders &&\n    (state.placeholderPattern === false ||\n      !(state.placeholderPattern || PATTERN).test(name)) &&\n    !state.placeholderWhitelist?.has(name)\n  ) {\n    return;\n  }\n\n  // Keep our own copy of the ancestors so we can use it in .resolve().\n  ancestors = ancestors.slice();\n\n  const { node: parent, key } = ancestors[ancestors.length - 1];\n\n  let type: PlaceholderType;\n  if (\n    isStringLiteral(node) ||\n    isPlaceholder(node, { expectedNode: \"StringLiteral\" })\n  ) {\n    type = \"string\";\n  } else if (\n    (isNewExpression(parent) && key === \"arguments\") ||\n    (isCallExpression(parent) && key === \"arguments\") ||\n    (isFunction(parent) && key === \"params\")\n  ) {\n    type = \"param\";\n  } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {\n    type = \"statement\";\n    ancestors = ancestors.slice(0, -1);\n  } else if (isStatement(node) && isPlaceholder(node)) {\n    type = \"statement\";\n  } else {\n    type = \"other\";\n  }\n\n  const { placeholders, placeholderNames } = !hasSyntacticPlaceholders\n    ? state.legacy\n    : state.syntactic;\n\n  placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: placeholderNames.has(name),\n  });\n  placeholderNames.add(name);\n}\n\nfunction resolveAncestors(ast: t.File, ancestors: TraversalAncestors) {\n  let parent: t.Node = ast;\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const { key, index } = ancestors[i];\n\n    if (index === undefined) {\n      parent = (parent as any)[key];\n    } else {\n      parent = (parent as any)[key][index];\n    }\n  }\n\n  const { key, index } = ancestors[ancestors.length - 1];\n\n  return { parent, key, index };\n}\n\ntype MetadataState = {\n  syntactic: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  legacy: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  syntacticPlaceholders?: boolean;\n};\n\nfunction parseWithCodeFrame(\n  code: string,\n  parserOpts: ParserOpts,\n  syntacticPlaceholders?: boolean,\n): t.File {\n  const plugins = (parserOpts.plugins || []).slice();\n  if (syntacticPlaceholders !== false) {\n    plugins.push(\"placeholders\");\n  }\n\n  parserOpts = {\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: \"module\",\n    ...parserOpts,\n    plugins,\n  };\n\n  try {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    return parse(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message += \"\\n\" + codeFrameColumns(code, { start: loc });\n      err.code = \"BABEL_TEMPLATE_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n", "import {\n  blockStatement,\n  cloneNode,\n  emptyStatement,\n  expressionStatement,\n  identifier,\n  isStatement,\n  isStringLiteral,\n  stringLiteral,\n  validate,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { TemplateReplacements } from \"./options.ts\";\nimport type { Metadata, Placeholder } from \"./parse.ts\";\n\nexport default function populatePlaceholders(\n  metadata: Metadata,\n  replacements: TemplateReplacements,\n): t.File {\n  const ast = cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!Object.hasOwn(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n\n        throw new Error(\n          `Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`,\n        );\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  // Process in reverse order so AST mutation doesn't change indices that\n  // will be needed for later calls to `placeholder.resolve()`.\n  metadata.placeholders\n    .slice()\n    .reverse()\n    .forEach(placeholder => {\n      try {\n        applyReplacement(\n          placeholder,\n          ast,\n          (replacements && replacements[placeholder.name]) || null,\n        );\n      } catch (e) {\n        e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n        throw e;\n      }\n    });\n\n  return ast;\n}\n\nfunction applyReplacement(\n  placeholder: Placeholder,\n  ast: t.File,\n  replacement: any,\n) {\n  // Track inserted nodes and clone them if they are inserted more than\n  // once to avoid injecting the same node multiple times.\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = cloneNode(replacement);\n    }\n  }\n\n  const { parent, key, index } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = stringLiteral(replacement);\n    }\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = identifier(replacement);\n        }\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    validate(parent, key, replacement);\n\n    (parent as any)[key] = replacement;\n  } else {\n    const items: Array<t.Node> = (parent as any)[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    validate(parent, key, items);\n    (parent as any)[key] = items;\n  }\n}\n", "import type { Formatter } from \"./formatters.ts\";\nimport type { TemplateOpts } from \"./options.ts\";\nimport type { Metadata } from \"./parse.ts\";\nimport { normalizeReplacements } from \"./options.ts\";\nimport parseAndBuildMetadata from \"./parse.ts\";\nimport populatePlaceholders from \"./populate.ts\";\n\nexport default function stringTemplate<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): (arg?: unknown) => T {\n  code = formatter.code(code);\n\n  let metadata: Metadata;\n\n  return (arg?: unknown) => {\n    const replacements = normalizeReplacements(arg);\n\n    if (!metadata) metadata = parseAndBuildMetadata(formatter, code, opts);\n\n    return formatter.unwrap(populatePlaceholders(metadata, replacements));\n  };\n}\n", "import type { Formatter } from \"./formatters.ts\";\nimport type { TemplateReplacements, TemplateOpts } from \"./options.ts\";\nimport { normalizeReplacements } from \"./options.ts\";\nimport parseAndBuildMetadata from \"./parse.ts\";\nimport populatePlaceholders from \"./populate.ts\";\n\nexport default function literalTemplate<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n): (_: Array<unknown>) => (_: unknown) => T {\n  const { metadata, names } = buildLiteralData(formatter, tpl, opts);\n\n  return arg => {\n    const defaultReplacements: TemplateReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n\n    return (arg: unknown) => {\n      const replacements = normalizeReplacements(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.hasOwn(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap(\n        populatePlaceholders(\n          metadata,\n          replacements\n            ? Object.assign(replacements, defaultReplacements)\n            : defaultReplacements,\n        ),\n      );\n    };\n  };\n}\n\nfunction buildLiteralData<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n) {\n  let prefix = \"BABEL_TPL$\";\n\n  const raw = tpl.join(\"\");\n\n  do {\n    // If there are cases where the template already contains $$BABEL_TPL$0 or any other\n    // matching pattern, we keep adding \"$$\" characters until a unique prefix\n    // is found.\n    prefix = \"$$\" + prefix;\n  } while (raw.includes(prefix));\n\n  const { names, code } = buildTemplateCode(tpl, prefix);\n\n  const metadata = parseAndBuildMetadata(formatter, formatter.code(code), {\n    parser: opts.parser,\n\n    // Explicitly include our generated names in the whitelist so users never\n    // have to think about whether their placeholder pattern will match.\n    placeholderWhitelist: new Set(\n      names.concat(\n        opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [],\n      ),\n    ),\n    placeholderPattern: opts.placeholderPattern,\n    preserveComments: opts.preserveComments,\n    syntacticPlaceholders: opts.syntacticPlaceholders,\n  });\n\n  return { metadata, names };\n}\n\nfunction buildTemplateCode(\n  tpl: Array<string>,\n  prefix: string,\n): { names: Array<string>; code: string } {\n  const names = [];\n\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n\n    code += value + tpl[i];\n  }\n\n  return { names, code };\n}\n", "import { merge, validate } from \"./options.ts\";\nimport type {\n  TemplateOpts,\n  PublicOpts,\n  PublicReplacements,\n} from \"./options.ts\";\nimport type { Formatter } from \"./formatters.ts\";\n\nimport stringTemplate from \"./string.ts\";\nimport literalTemplate from \"./literal.ts\";\n\nexport type TemplateBuilder<T> = {\n  // Build a new builder, merging the given options with the previous ones.\n  (opts: PublicOpts): TemplateBuilder<T>;\n\n  // Building from a string produces an AST builder function by default.\n  (tpl: string, opts?: PublicOpts): (replacements?: PublicReplacements) => T;\n\n  // Building from a template literal produces an AST builder function by default.\n  (\n    tpl: TemplateStringsArray,\n    ...args: Array<unknown>\n  ): (replacements?: PublicReplacements) => T;\n\n  // Allow users to explicitly create templates that produce ASTs, skipping\n  // the need for an intermediate function.\n  ast: {\n    (tpl: string, opts?: PublicOpts): T;\n    (tpl: TemplateStringsArray, ...args: Array<unknown>): T;\n  };\n};\n\n// Prebuild the options that will be used when parsing a `.ast` template.\n// These do not use a pattern because there is no way for users to pass in\n// replacement patterns to begin with, and disabling pattern matching means\n// users have more flexibility in what type of content they have in their\n// template JS.\nconst NO_PLACEHOLDER: TemplateOpts = validate({\n  placeholderPattern: false,\n});\n\nexport default function createTemplateBuilder<T>(\n  formatter: Formatter<T>,\n  defaultOpts?: TemplateOpts,\n): TemplateBuilder<T> {\n  const templateFnCache = new WeakMap();\n  const templateAstCache = new WeakMap();\n  const cachedOpts = defaultOpts || validate(null);\n\n  return Object.assign(\n    ((tpl, ...args) => {\n      if (typeof tpl === \"string\") {\n        if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n        return extendedTrace(\n          stringTemplate(formatter, tpl, merge(cachedOpts, validate(args[0]))),\n        );\n      } else if (Array.isArray(tpl)) {\n        let builder = templateFnCache.get(tpl);\n        if (!builder) {\n          builder = literalTemplate(formatter, tpl, cachedOpts);\n          templateFnCache.set(tpl, builder);\n        }\n        return extendedTrace(builder(args));\n      } else if (typeof tpl === \"object\" && tpl) {\n        if (args.length > 0) throw new Error(\"Unexpected extra params.\");\n        return createTemplateBuilder(\n          formatter,\n          merge(cachedOpts, validate(tpl)),\n        );\n      }\n      throw new Error(`Unexpected template param ${typeof tpl}`);\n    }) as TemplateBuilder<T>,\n    {\n      ast: (tpl: string | Array<string>, ...args: Array<unknown>) => {\n        if (typeof tpl === \"string\") {\n          if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n          return stringTemplate(\n            formatter,\n            tpl,\n            merge(merge(cachedOpts, validate(args[0])), NO_PLACEHOLDER),\n          )();\n        } else if (Array.isArray(tpl)) {\n          let builder = templateAstCache.get(tpl);\n          if (!builder) {\n            builder = literalTemplate(\n              formatter,\n              tpl,\n              merge(cachedOpts, NO_PLACEHOLDER),\n            );\n            templateAstCache.set(tpl, builder);\n          }\n          return builder(args)();\n        }\n\n        throw new Error(`Unexpected template param ${typeof tpl}`);\n      },\n    },\n  );\n}\n\nfunction extendedTrace<Arg, Result>(\n  fn: (_: Arg) => Result,\n): (_: Arg) => Result {\n  // Since we lazy parse the template, we get the current stack so we have the\n  // original stack to append if it errors when parsing\n  let rootStack = \"\";\n  try {\n    // error stack gets populated in IE only on throw\n    // (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)\n    throw new Error();\n  } catch (error) {\n    if (error.stack) {\n      // error.stack does not exists in IE <= 9\n      // We slice off the top 3 items in the stack to remove the call to\n      // 'extendedTrace', and the anonymous builder function, with the final\n      // stripped line being the error message itself since we threw it\n      // in the first place and it doesn't matter.\n      rootStack = error.stack.split(\"\\n\").slice(3).join(\"\\n\");\n    }\n  }\n\n  return (arg: Arg) => {\n    try {\n      return fn(arg);\n    } catch (err) {\n      err.stack += `\\n    =============\\n${rootStack}`;\n      throw err;\n    }\n  };\n}\n", "import * as formatters from \"./formatters.ts\";\nimport createTemplateBuilder from \"./builder.ts\";\n\nexport const smart = createTemplateBuilder(formatters.smart);\nexport const statement = createTemplateBuilder(formatters.statement);\nexport const statements = createTemplateBuilder(formatters.statements);\nexport const expression = createTemplateBuilder(formatters.expression);\nexport const program = createTemplateBuilder(formatters.program);\n\ntype DefaultTemplateBuilder = typeof smart & {\n  smart: typeof smart;\n  statement: typeof statement;\n  statements: typeof statements;\n  expression: typeof expression;\n  program: typeof program;\n};\n\nexport default Object.assign(smart.bind(undefined) as DefaultTemplateBuilder, {\n  smart,\n  statement,\n  statements,\n  expression,\n  program,\n  ast: smart.ast,\n});\n\nexport type {\n  PublicOpts as Options,\n  PublicReplacements as Replacements,\n} from \"./options.ts\";\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'yarn gulp generate-runtime-helpers'\n */\n\nimport template from \"@babel/template\";\nimport type * as t from \"@babel/types\";\n\ninterface Helper {\n  minVersion: string;\n  ast: () => t.Program;\n  metadata: HelperMetadata;\n}\n\nexport interface HelperMetadata {\n  globals: string[];\n  locals: { [name: string]: string[] };\n  dependencies: { [name: string]: string[] };\n  exportBindingAssignments: string[];\n  exportName: string;\n}\n\nfunction helper(\n  minVersion: string,\n  source: string,\n  metadata: HelperMetadata,\n): Helper {\n  return Object.freeze({\n    minVersion,\n    ast: () => template.program.ast(source, { preserveComments: true }),\n    metadata,\n  });\n}\n\nexport { helpers as default };\nconst helpers: Record<string, Helper> = {\n  __proto__: null,\n  // size: 47, gzip size: 63\n  OverloadYield: helper(\n    \"7.18.14\",\n    \"function _OverloadYield(e,d){this.v=e,this.k=d}\",\n    {\n      globals: [],\n      locals: { _OverloadYield: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_OverloadYield\",\n      dependencies: {},\n    },\n  ),\n  // size: 450, gzip size: 270\n  applyDecoratedDescriptor: helper(\n    \"7.0.0-beta.0\",\n    'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,(\"value\"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(i,e,a),a=null),a}',\n    {\n      globals: [\"Object\"],\n      locals: { _applyDecoratedDescriptor: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_applyDecoratedDescriptor\",\n      dependencies: {},\n    },\n  ),\n  // size: 2840, gzip size: 1469\n  applyDecs2311: helper(\n    \"7.24.0\",\n    'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for(\"Symbol.metadata\"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if(\"function\"!=typeof e&&(r||void 0!==e))throw new TypeError(t+\" must \"+(n||\"be\")+\" a function\"+(r?\"\":\" or undefined\"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?\"get\":j||D?\"set\":\"value\";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,\"get\"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?\"\":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error(\"Decorating two elements with the same name (\"+P[F].name+\") is not supported yet\");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],\"A decorator\",\"be\",!0),z=n?h[O-1]:void 0,A={},H={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError(\"attempted to call addInitializer after decoration was finished\");b(t,\"An initializer\",\"be\",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,\"class decorators\",\"return\")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I(\"get\",0,d):function(e){return e[r]}),E||S||(c.set=f?I(\"set\",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if(\"object\"==typeof N&&N)(c=b(N.get,\"accessor.get\"))&&(P.get=c),(c=b(N.set,\"accessor.set\"))&&(P.set=c),(c=b(N.init,\"accessor.init\"))&&k.unshift(c);else if(void 0!==N)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or undefined\")}else b(N,(l?\"field\":\"method\")+\" decorators\",\"return\")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I(\"get\",s),I(\"set\",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?\"#\"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}',\n    {\n      globals: [\"Symbol\", \"Object\", \"TypeError\", \"Error\"],\n      locals: { applyDecs2311: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"applyDecs2311\",\n      dependencies: {\n        checkInRHS: [\n          \"body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee\",\n        ],\n        setFunctionName: [\n          \"body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee\",\n          \"body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee\",\n        ],\n        toPropertyKey: [\n          \"body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 118, gzip size: 124\n  arrayLikeToArray: helper(\n    \"7.9.0\",\n    \"function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}\",\n    {\n      globals: [\"Array\"],\n      locals: { _arrayLikeToArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_arrayLikeToArray\",\n      dependencies: {},\n    },\n  ),\n  // size: 57, gzip size: 71\n  arrayWithHoles: helper(\n    \"7.0.0-beta.0\",\n    \"function _arrayWithHoles(r){if(Array.isArray(r))return r}\",\n    {\n      globals: [\"Array\"],\n      locals: { _arrayWithHoles: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_arrayWithHoles\",\n      dependencies: {},\n    },\n  ),\n  // size: 78, gzip size: 83\n  arrayWithoutHoles: helper(\n    \"7.0.0-beta.0\",\n    \"function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}\",\n    {\n      globals: [\"Array\"],\n      locals: { _arrayWithoutHoles: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_arrayWithoutHoles\",\n      dependencies: {\n        arrayLikeToArray: [\"body.0.body.body.0.consequent.argument.callee\"],\n      },\n    },\n  ),\n  // size: 172, gzip size: 159\n  assertClassBrand: helper(\n    \"7.24.0\",\n    'function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _assertClassBrand: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_assertClassBrand\",\n      dependencies: {},\n    },\n  ),\n  // size: 144, gzip size: 132\n  assertThisInitialized: helper(\n    \"7.0.0-beta.0\",\n    \"function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\");return e}\",\n    {\n      globals: [\"ReferenceError\"],\n      locals: { _assertThisInitialized: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_assertThisInitialized\",\n      dependencies: {},\n    },\n  ),\n  // size: 488, gzip size: 278\n  asyncGeneratorDelegate: helper(\n    \"7.0.0-beta.0\",\n    'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e[\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump(\"next\",t)},\"function\"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump(\"throw\",t)}),\"function\"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump(\"return\",t)}),e}',\n    {\n      globals: [\"Promise\", \"Symbol\"],\n      locals: { _asyncGeneratorDelegate: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_asyncGeneratorDelegate\",\n      dependencies: {\n        OverloadYield: [\n          \"body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 1081, gzip size: 431\n  asyncIterator: helper(\n    \"7.15.9\",\n    'function _asyncIterator(r){var n,t,o,e=2;for(\"undefined\"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t=\"@@asyncIterator\",o=\"@@iterator\"}throw new TypeError(\"Object is not async iterable\")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+\" is not an object.\"));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}',\n    {\n      globals: [\"Symbol\", \"TypeError\", \"Object\", \"Promise\"],\n      locals: {\n        _asyncIterator: [\"body.0.id\"],\n        AsyncFromSyncIterator: [\n          \"body.1.id\",\n          \"body.0.body.body.1.body.body.1.consequent.argument.callee\",\n          \"body.1.body.body.1.argument.expressions.1.left.object\",\n          \"body.1.body.body.1.argument.expressions.2.callee\",\n          \"body.1.body.body.1.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_asyncIterator\",\n      dependencies: {},\n    },\n  ),\n  // size: 414, gzip size: 240\n  asyncToGenerator: helper(\n    \"7.0.0-beta.0\",\n    'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,\"next\",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,\"throw\",n)}_next(void 0)}))}}',\n    {\n      globals: [\"Promise\"],\n      locals: {\n        asyncGeneratorStep: [\n          \"body.0.id\",\n          \"body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee\",\n          \"body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee\",\n        ],\n        _asyncToGenerator: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_asyncToGenerator\",\n      dependencies: {},\n    },\n  ),\n  // size: 63, gzip size: 83\n  awaitAsyncGenerator: helper(\n    \"7.0.0-beta.0\",\n    \"function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}\",\n    {\n      globals: [],\n      locals: { _awaitAsyncGenerator: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_awaitAsyncGenerator\",\n      dependencies: { OverloadYield: [\"body.0.body.body.0.argument.callee\"] },\n    },\n  ),\n  // size: 180, gzip size: 144\n  callSuper: helper(\n    \"7.23.8\",\n    \"function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}\",\n    {\n      globals: [\"Reflect\"],\n      locals: { _callSuper: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_callSuper\",\n      dependencies: {\n        getPrototypeOf: [\n          \"body.0.body.body.0.argument.expressions.0.right.callee\",\n          \"body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee\",\n        ],\n        isNativeReflectConstruct: [\n          \"body.0.body.body.0.argument.expressions.1.arguments.1.test.callee\",\n        ],\n        possibleConstructorReturn: [\n          \"body.0.body.body.0.argument.expressions.1.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 146, gzip size: 145\n  checkInRHS: helper(\n    \"7.20.5\",\n    'function _checkInRHS(e){if(Object(e)!==e)throw TypeError(\"right-hand side of \\'in\\' should be an object, got \"+(null!==e?typeof e:\"null\"));return e}',\n    {\n      globals: [\"Object\", \"TypeError\"],\n      locals: { _checkInRHS: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_checkInRHS\",\n      dependencies: {},\n    },\n  ),\n  // size: 139, gzip size: 132\n  checkPrivateRedeclaration: helper(\n    \"7.14.1\",\n    'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _checkPrivateRedeclaration: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_checkPrivateRedeclaration\",\n      dependencies: {},\n    },\n  ),\n  // size: 108, gzip size: 111\n  classCallCheck: helper(\n    \"7.0.0-beta.0\",\n    'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError(\"Cannot call a class as a function\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _classCallCheck: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classCallCheck\",\n      dependencies: {},\n    },\n  ),\n  // size: 121, gzip size: 122\n  classNameTDZError: helper(\n    \"7.0.0-beta.0\",\n    \"function _classNameTDZError(e){throw new ReferenceError('Class \\\"'+e+'\\\" cannot be referenced in computed property keys.')}\",\n    {\n      globals: [\"ReferenceError\"],\n      locals: { _classNameTDZError: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classNameTDZError\",\n      dependencies: {},\n    },\n  ),\n  // size: 73, gzip size: 88\n  classPrivateFieldGet2: helper(\n    \"7.24.0\",\n    \"function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}\",\n    {\n      globals: [],\n      locals: { _classPrivateFieldGet2: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateFieldGet2\",\n      dependencies: {\n        assertClassBrand: [\"body.0.body.body.0.argument.arguments.0.callee\"],\n      },\n    },\n  ),\n  // size: 85, gzip size: 96\n  classPrivateFieldInitSpec: helper(\n    \"7.14.1\",\n    \"function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}\",\n    {\n      globals: [],\n      locals: { _classPrivateFieldInitSpec: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateFieldInitSpec\",\n      dependencies: {\n        checkPrivateRedeclaration: [\n          \"body.0.body.body.0.expression.expressions.0.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 148, gzip size: 141\n  classPrivateFieldLooseBase: helper(\n    \"7.0.0-beta.0\",\n    'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError(\"attempted to use private field on non-instance\");return e}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _classPrivateFieldBase: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateFieldBase\",\n      dependencies: {},\n    },\n  ),\n  // size: 73, gzip size: 89\n  classPrivateFieldLooseKey: helper(\n    \"7.0.0-beta.0\",\n    'var id=0;function _classPrivateFieldKey(e){return\"__private_\"+id+++\"_\"+e}',\n    {\n      globals: [],\n      locals: {\n        id: [\n          \"body.0.declarations.0.id\",\n          \"body.1.body.body.0.argument.left.left.right.argument\",\n          \"body.1.body.body.0.argument.left.left.right.argument\",\n        ],\n        _classPrivateFieldKey: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateFieldKey\",\n      dependencies: {},\n    },\n  ),\n  // size: 79, gzip size: 95\n  classPrivateFieldSet2: helper(\n    \"7.24.0\",\n    \"function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}\",\n    {\n      globals: [],\n      locals: { _classPrivateFieldSet2: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateFieldSet2\",\n      dependencies: {\n        assertClassBrand: [\n          \"body.0.body.body.0.argument.expressions.0.arguments.0.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 68, gzip size: 84\n  classPrivateGetter: helper(\n    \"7.24.0\",\n    \"function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}\",\n    {\n      globals: [],\n      locals: { _classPrivateGetter: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateGetter\",\n      dependencies: {\n        assertClassBrand: [\"body.0.body.body.0.argument.arguments.0.callee\"],\n      },\n    },\n  ),\n  // size: 82, gzip size: 91\n  classPrivateMethodInitSpec: helper(\n    \"7.14.1\",\n    \"function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}\",\n    {\n      globals: [],\n      locals: { _classPrivateMethodInitSpec: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateMethodInitSpec\",\n      dependencies: {\n        checkPrivateRedeclaration: [\n          \"body.0.body.body.0.expression.expressions.0.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 74, gzip size: 89\n  classPrivateSetter: helper(\n    \"7.24.0\",\n    \"function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}\",\n    {\n      globals: [],\n      locals: { _classPrivateSetter: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classPrivateSetter\",\n      dependencies: {\n        assertClassBrand: [\n          \"body.0.body.body.0.argument.expressions.0.arguments.0.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 76, gzip size: 94\n  classStaticPrivateMethodGet: helper(\n    \"7.3.2\",\n    \"function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}\",\n    {\n      globals: [],\n      locals: { _classStaticPrivateMethodGet: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_classStaticPrivateMethodGet\",\n      dependencies: {\n        assertClassBrand: [\"body.0.body.body.0.argument.expressions.0.callee\"],\n      },\n    },\n  ),\n  // size: 206, gzip size: 160\n  construct: helper(\n    \"7.0.0-beta.0\",\n    \"function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}\",\n    {\n      globals: [\"Reflect\"],\n      locals: { _construct: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_construct\",\n      dependencies: {\n        isNativeReflectConstruct: [\"body.0.body.body.0.test.callee\"],\n        setPrototypeOf: [\n          \"body.0.body.body.4.argument.expressions.0.right.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 348, gzip size: 220\n  createClass: helper(\n    \"7.0.0-beta.0\",\n    'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,\"prototype\",{writable:!1}),e}',\n    {\n      globals: [\"Object\"],\n      locals: {\n        _defineProperties: [\n          \"body.0.id\",\n          \"body.1.body.body.0.argument.expressions.0.right.callee\",\n          \"body.1.body.body.0.argument.expressions.1.right.callee\",\n        ],\n        _createClass: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_createClass\",\n      dependencies: {\n        toPropertyKey: [\n          \"body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 692, gzip size: 423\n  createForOfIteratorHelper: helper(\n    \"7.9.0\",\n    'function _createForOfIteratorHelper(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}',\n    {\n      globals: [\"Symbol\", \"Array\", \"TypeError\"],\n      locals: { _createForOfIteratorHelper: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_createForOfIteratorHelper\",\n      dependencies: {\n        unsupportedIterableToArray: [\n          \"body.0.body.body.1.consequent.body.0.test.left.right.right.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 488, gzip size: 335\n  createForOfIteratorHelperLoose: helper(\n    \"7.9.0\",\n    'function _createForOfIteratorHelperLoose(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}',\n    {\n      globals: [\"Symbol\", \"Array\", \"TypeError\"],\n      locals: { _createForOfIteratorHelperLoose: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_createForOfIteratorHelperLoose\",\n      dependencies: {\n        unsupportedIterableToArray: [\n          \"body.0.body.body.2.test.left.right.right.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 255, gzip size: 172\n  createSuper: helper(\n    \"7.9.0\",\n    \"function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}\",\n    {\n      globals: [\"Reflect\"],\n      locals: { _createSuper: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_createSuper\",\n      dependencies: {\n        getPrototypeOf: [\n          \"body.0.body.body.1.argument.body.body.0.declarations.1.init.callee\",\n          \"body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee\",\n        ],\n        isNativeReflectConstruct: [\n          \"body.0.body.body.0.declarations.0.init.callee\",\n        ],\n        possibleConstructorReturn: [\n          \"body.0.body.body.1.argument.body.body.2.argument.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 7029, gzip size: 2057\n  decorate: helper(\n    \"7.1.5\",\n    'function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[[\"method\"],[\"field\"]],initializeInstanceElements:function(e,r){[\"method\",\"field\"].forEach((function(t){r.forEach((function(r){r.kind===t&&\"own\"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;[\"method\",\"field\"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&(\"static\"===o||\"prototype\"===o)){var n=\"static\"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if(\"field\"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError(\"Duplicated element (\"+e.key+\")\");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError(\"Duplicated element (\"+e[s].key+\")\")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),\"field\"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,\"finisher\",\"An element descriptor\"),this.disallowProperty(e,\"extras\",\"An element descriptor\"),r}),this)},toElementDescriptor:function(e){var r=e.kind+\"\";if(\"method\"!==r&&\"field\"!==r)throw new TypeError(\\'An element descriptor\\\\\\'s .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"\\'+r+\\'\"\\');var t=toPropertyKey(e.key),i=e.placement+\"\";if(\"static\"!==i&&\"prototype\"!==i&&\"own\"!==i)throw new TypeError(\\'An element descriptor\\\\\\'s .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"\\'+i+\\'\"\\');var o=e.descriptor;this.disallowProperty(e,\"elements\",\"An element descriptor\");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return\"field\"!==r?this.disallowProperty(e,\"initializer\",\"A method descriptor\"):(this.disallowProperty(o,\"get\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"set\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"value\",\"The property descriptor of a field descriptor\"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,\"finisher\"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:\"class\",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+\"\";if(\"class\"!==r)throw new TypeError(\\'A class descriptor\\\\\\'s .kind property must be \"class\", but a decorator created a class descriptor with .kind \"\\'+r+\\'\"\\');this.disallowProperty(e,\"key\",\"A class descriptor\"),this.disallowProperty(e,\"placement\",\"A class descriptor\"),this.disallowProperty(e,\"descriptor\",\"A class descriptor\"),this.disallowProperty(e,\"initializer\",\"A class descriptor\"),this.disallowProperty(e,\"extras\",\"A class descriptor\");var t=_optionalCallableProperty(e,\"finisher\");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if(\"function\"!=typeof i)throw new TypeError(\"Finishers must return a constructor.\");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+\" can\\'t have a .\"+r+\" property.\")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);\"method\"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:\"get\"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:\"set\"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:\"field\"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:\"field\"===e.kind?\"field\":\"method\",key:t,placement:e.static?\"static\":\"field\"===e.kind?\"own\":\"prototype\",descriptor:r};return e.decorators&&(i.decorators=e.decorators),\"field\"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return\"method\"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if(\"method\"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError(\"Duplicated methods (\"+o.key+\") can\\'t be decorated.\");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError(\"Decorators can\\'t be placed on different accessors with for the same property (\"+o.key+\").\");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&\"function\"!=typeof t)throw new TypeError(\"Expected \\'\"+r+\"\\' to be a function\");return t}',\n    {\n      globals: [\"Object\", \"TypeError\", \"Symbol\", \"ReferenceError\"],\n      locals: {\n        _decorate: [\"body.0.id\"],\n        _getDecoratorsApi: [\n          \"body.1.id\",\n          \"body.0.body.body.0.declarations.0.init.callee\",\n          \"body.1.body.body.0.expression.left\",\n        ],\n        _createElementDescriptor: [\n          \"body.2.id\",\n          \"body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0\",\n        ],\n        _coalesceGetterSetter: [\n          \"body.3.id\",\n          \"body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee\",\n        ],\n        _coalesceClassElements: [\n          \"body.4.id\",\n          \"body.0.body.body.2.declarations.1.init.arguments.0.callee\",\n        ],\n        _hasDecorators: [\n          \"body.5.id\",\n          \"body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee\",\n          \"body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee\",\n          \"body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee\",\n          \"body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee\",\n          \"body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee\",\n        ],\n        _isDataDescriptor: [\n          \"body.6.id\",\n          \"body.4.body.body.0.body.body.1.consequent.test.left.callee\",\n          \"body.4.body.body.0.body.body.1.consequent.test.right.callee\",\n        ],\n        _optionalCallableProperty: [\n          \"body.7.id\",\n          \"body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee\",\n          \"body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee\",\n        ],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_decorate\",\n      dependencies: {\n        toArray: [\n          \"body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee\",\n        ],\n        toPropertyKey: [\n          \"body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee\",\n          \"body.2.body.body.0.declarations.1.init.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 206, gzip size: 169\n  defaults: helper(\n    \"7.0.0-beta.0\",\n    \"function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}\",\n    {\n      globals: [\"Object\"],\n      locals: { _defaults: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_defaults\",\n      dependencies: {},\n    },\n  ),\n  // size: 115, gzip size: 120\n  defineAccessor: helper(\n    \"7.20.7\",\n    \"function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}\",\n    {\n      globals: [\"Object\"],\n      locals: { _defineAccessor: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_defineAccessor\",\n      dependencies: {},\n    },\n  ),\n  // size: 151, gzip size: 130\n  defineProperty: helper(\n    \"7.0.0-beta.0\",\n    \"function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}\",\n    {\n      globals: [\"Object\"],\n      locals: { _defineProperty: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_defineProperty\",\n      dependencies: {\n        toPropertyKey: [\n          \"body.0.body.body.0.argument.expressions.0.test.left.right.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 237, gzip size: 179\n  extends: helper(\n    \"7.0.0-beta.0\",\n    \"function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}\",\n    {\n      globals: [\"Object\"],\n      locals: {\n        _extends: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee.object\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.argument.expressions.0\"],\n      exportName: \"_extends\",\n      dependencies: {},\n    },\n  ),\n  // size: 263, gzip size: 202\n  get: helper(\n    \"7.0.0-beta.0\",\n    'function _get(){return _get=\"undefined\"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}',\n    {\n      globals: [\"Reflect\", \"Object\"],\n      locals: {\n        _get: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee.object\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.argument.expressions.0\"],\n      exportName: \"_get\",\n      dependencies: {\n        superPropBase: [\n          \"body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 179, gzip size: 106\n  getPrototypeOf: helper(\n    \"7.0.0-beta.0\",\n    \"function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}\",\n    {\n      globals: [\"Object\"],\n      locals: {\n        _getPrototypeOf: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.argument.expressions.0\"],\n      exportName: \"_getPrototypeOf\",\n      dependencies: {},\n    },\n  ),\n  // size: 31, gzip size: 51\n  identity: helper(\"7.17.0\", \"function _identity(t){return t}\", {\n    globals: [],\n    locals: { _identity: [\"body.0.id\"] },\n    exportBindingAssignments: [],\n    exportName: \"_identity\",\n    dependencies: {},\n  }),\n  // size: 537, gzip size: 258\n  importDeferProxy: helper(\n    \"7.23.0\",\n    \"function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}\",\n    {\n      globals: [\"Proxy\", \"Reflect\"],\n      locals: { _importDeferProxy: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_importDeferProxy\",\n      dependencies: {},\n    },\n  ),\n  // size: 300, gzip size: 219\n  inherits: helper(\n    \"7.0.0-beta.0\",\n    'function _inherits(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\"prototype\",{writable:!1}),e&&setPrototypeOf(t,e)}',\n    {\n      globals: [\"TypeError\", \"Object\"],\n      locals: { _inherits: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_inherits\",\n      dependencies: {\n        setPrototypeOf: [\n          \"body.0.body.body.1.expression.expressions.2.right.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 114, gzip size: 105\n  inheritsLoose: helper(\n    \"7.0.0-beta.0\",\n    \"function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}\",\n    {\n      globals: [\"Object\"],\n      locals: { _inheritsLoose: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_inheritsLoose\",\n      dependencies: {\n        setPrototypeOf: [\"body.0.body.body.0.expression.expressions.2.callee\"],\n      },\n    },\n  ),\n  // size: 198, gzip size: 141\n  initializerDefineProperty: helper(\n    \"7.0.0-beta.0\",\n    \"function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}\",\n    {\n      globals: [\"Object\"],\n      locals: { _initializerDefineProperty: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_initializerDefineProperty\",\n      dependencies: {},\n    },\n  ),\n  // size: 187, gzip size: 154\n  initializerWarningHelper: helper(\n    \"7.0.0-beta.0\",\n    'function _initializerWarningHelper(r,e){throw Error(\"Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.\")}',\n    {\n      globals: [\"Error\"],\n      locals: { _initializerWarningHelper: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_initializerWarningHelper\",\n      dependencies: {},\n    },\n  ),\n  // size: 134, gzip size: 118\n  instanceof: helper(\n    \"7.0.0-beta.0\",\n    'function _instanceof(n,e){return null!=e&&\"undefined\"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}',\n    {\n      globals: [\"Symbol\"],\n      locals: { _instanceof: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_instanceof\",\n      dependencies: {},\n    },\n  ),\n  // size: 72, gzip size: 88\n  interopRequireDefault: helper(\n    \"7.0.0-beta.0\",\n    \"function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}\",\n    {\n      globals: [],\n      locals: { _interopRequireDefault: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_interopRequireDefault\",\n      dependencies: {},\n    },\n  ),\n  // size: 664, gzip size: 351\n  interopRequireWildcard: helper(\n    \"7.14.0\",\n    'function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}',\n    {\n      globals: [\"WeakMap\", \"Object\"],\n      locals: {\n        _getRequireWildcardCache: [\n          \"body.0.id\",\n          \"body.1.body.body.2.declarations.0.init.callee\",\n          \"body.0.body.body.2.argument.callee.left\",\n        ],\n        _interopRequireWildcard: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_interopRequireWildcard\",\n      dependencies: {},\n    },\n  ),\n  // size: 133, gzip size: 128\n  isNativeFunction: helper(\n    \"7.0.0-beta.0\",\n    'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf(\"[native code]\")}catch(n){return\"function\"==typeof t}}',\n    {\n      globals: [\"Function\"],\n      locals: { _isNativeFunction: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_isNativeFunction\",\n      dependencies: {},\n    },\n  ),\n  // size: 193, gzip size: 144\n  isNativeReflectConstruct: helper(\n    \"7.9.0\",\n    \"function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}\",\n    {\n      globals: [\"Boolean\", \"Reflect\"],\n      locals: {\n        _isNativeReflectConstruct: [\n          \"body.0.id\",\n          \"body.0.body.body.1.argument.callee.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.1.argument.callee\"],\n      exportName: \"_isNativeReflectConstruct\",\n      dependencies: {},\n    },\n  ),\n  // size: 129, gzip size: 124\n  iterableToArray: helper(\n    \"7.0.0-beta.0\",\n    'function _iterableToArray(r){if(\"undefined\"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r[\"@@iterator\"])return Array.from(r)}',\n    {\n      globals: [\"Symbol\", \"Array\"],\n      locals: { _iterableToArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_iterableToArray\",\n      dependencies: {},\n    },\n  ),\n  // size: 416, gzip size: 293\n  iterableToArrayLimit: helper(\n    \"7.0.0-beta.0\",\n    'function _iterableToArrayLimit(r,l){var t=null==r?null:\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}',\n    {\n      globals: [\"Symbol\", \"Object\"],\n      locals: { _iterableToArrayLimit: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_iterableToArrayLimit\",\n      dependencies: {},\n    },\n  ),\n  // size: 520, gzip size: 341\n  jsx: helper(\n    \"7.0.0-beta.0\",\n    'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE=\"function\"==typeof Symbol&&Symbol.for&&Symbol.for(\"react.element\")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:\"\"+E,ref:null,props:r,_owner:null}}',\n    {\n      globals: [\"Symbol\", \"Array\"],\n      locals: {\n        REACT_ELEMENT_TYPE: [\n          \"body.0.declarations.0.id\",\n          \"body.1.body.body.0.expression.left\",\n          \"body.1.body.body.4.argument.properties.0.value\",\n          \"body.1.body.body.0.expression.right.left\",\n        ],\n        _createRawReactElement: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_createRawReactElement\",\n      dependencies: {},\n    },\n  ),\n  // size: 160, gzip size: 144\n  maybeArrayLike: helper(\n    \"7.9.0\",\n    'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&\"number\"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}',\n    {\n      globals: [\"Array\"],\n      locals: { _maybeArrayLike: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_maybeArrayLike\",\n      dependencies: {\n        arrayLikeToArray: [\n          \"body.0.body.body.0.consequent.body.1.argument.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 98, gzip size: 106\n  newArrowCheck: helper(\n    \"7.0.0-beta.0\",\n    'function _newArrowCheck(n,r){if(n!==r)throw new TypeError(\"Cannot instantiate an arrow function\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _newArrowCheck: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_newArrowCheck\",\n      dependencies: {},\n    },\n  ),\n  // size: 189, gzip size: 160\n  nonIterableRest: helper(\n    \"7.0.0-beta.0\",\n    'function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _nonIterableRest: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_nonIterableRest\",\n      dependencies: {},\n    },\n  ),\n  // size: 186, gzip size: 156\n  nonIterableSpread: helper(\n    \"7.0.0-beta.0\",\n    'function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _nonIterableSpread: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_nonIterableSpread\",\n      dependencies: {},\n    },\n  ),\n  // size: 99, gzip size: 108\n  nullishReceiverError: helper(\n    \"7.22.6\",\n    'function _nullishReceiverError(r){throw new TypeError(\"Cannot set property of null or undefined.\")}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _nullishReceiverError: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_nullishReceiverError\",\n      dependencies: {},\n    },\n  ),\n  // size: 94, gzip size: 103\n  objectDestructuringEmpty: helper(\n    \"7.0.0-beta.0\",\n    'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError(\"Cannot destructure \"+t)}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _objectDestructuringEmpty: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_objectDestructuringEmpty\",\n      dependencies: {},\n    },\n  ),\n  // size: 619, gzip size: 295\n  objectSpread2: helper(\n    \"7.5.0\",\n    \"function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}\",\n    {\n      globals: [\"Object\"],\n      locals: {\n        ownKeys: [\n          \"body.0.id\",\n          \"body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee\",\n          \"body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee\",\n        ],\n        _objectSpread2: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_objectSpread2\",\n      dependencies: {\n        defineProperty: [\n          \"body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 277, gzip size: 204\n  objectWithoutProperties: helper(\n    \"7.0.0-beta.0\",\n    \"function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}\",\n    {\n      globals: [\"Object\"],\n      locals: { _objectWithoutProperties: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_objectWithoutProperties\",\n      dependencies: {\n        objectWithoutPropertiesLoose: [\n          \"body.0.body.body.1.declarations.2.init.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 167, gzip size: 155\n  objectWithoutPropertiesLoose: helper(\n    \"7.0.0-beta.0\",\n    \"function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.indexOf(n)>=0)continue;t[n]=r[n]}return t}\",\n    {\n      globals: [],\n      locals: { _objectWithoutPropertiesLoose: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_objectWithoutPropertiesLoose\",\n      dependencies: {},\n    },\n  ),\n  // size: 225, gzip size: 180\n  possibleConstructorReturn: helper(\n    \"7.0.0-beta.0\",\n    'function _possibleConstructorReturn(t,e){if(e&&(\"object\"==typeof e||\"function\"==typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return assertThisInitialized(t)}',\n    {\n      globals: [\"TypeError\"],\n      locals: { _possibleConstructorReturn: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_possibleConstructorReturn\",\n      dependencies: {\n        assertThisInitialized: [\"body.0.body.body.2.argument.callee\"],\n      },\n    },\n  ),\n  // size: 71, gzip size: 85\n  readOnlyError: helper(\n    \"7.0.0-beta.0\",\n    \"function _readOnlyError(r){throw new TypeError('\\\"'+r+'\\\" is read-only')}\",\n    {\n      globals: [\"TypeError\"],\n      locals: { _readOnlyError: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_readOnlyError\",\n      dependencies: {},\n    },\n  ),\n  // size: 7616, gzip size: 2652\n  regeneratorRuntime: helper(\n    \"7.18.0\",\n    'function _regeneratorRuntime(){\"use strict\";\\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i=\"function\"==typeof Symbol?Symbol:{},a=i.iterator||\"@@iterator\",c=i.asyncIterator||\"@@asyncIterator\",u=i.toStringTag||\"@@toStringTag\";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},\"\")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,\"_invoke\",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}e.wrap=wrap;var h=\"suspendedStart\",l=\"suspendedYield\",f=\"executing\",s=\"completed\",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){[\"next\",\"throw\",\"return\"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if(\"throw\"!==c.type){var u=c.arg,h=u.value;return h&&\"object\"==typeof h&&n.call(h,\"__await\")?e.resolve(h.__await).then((function(t){invoke(\"next\",t,i,a)}),(function(t){invoke(\"throw\",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke(\"throw\",t,i,a)}))}a(c.arg)}var r;o(this,\"_invoke\",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error(\"Generator is already running\");if(o===s){if(\"throw\"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=f;var p=tryCatch(e,r,n);if(\"normal\"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}\"throw\"===p.type&&(o=s,n.method=\"throw\",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,\"throw\"===n&&e.iterator.return&&(r.method=\"return\",r.arg=t,maybeInvokeDelegate(e,r),\"throw\"===r.method)||\"return\"!==n&&(r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a \\'\"+n+\"\\' method\")),y;var i=tryCatch(o,e.iterator,r.arg);if(\"throw\"===i.type)return r.method=\"throw\",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,y):a:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||\"\"===e){var r=e[a];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+\" is not iterable\")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,\"GeneratorFunction\"),e.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||\"GeneratorFunction\"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,\"GeneratorFunction\")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,\"Generator\"),define(g,a,(function(){return this})),define(g,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)\"t\"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type=\"throw\",a.arg=e,r.next=n,o&&(r.method=\"next\",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return handle(\"end\");if(i.tryLoc<=this.prev){var c=n.call(i,\"catchLoc\"),u=n.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),y}},e}',\n    {\n      globals: [\"Object\", \"Symbol\", \"Error\", \"TypeError\", \"isNaN\", \"Promise\"],\n      locals: {\n        _regeneratorRuntime: [\n          \"body.0.id\",\n          \"body.0.body.body.0.expression.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.expression\"],\n      exportName: \"_regeneratorRuntime\",\n      dependencies: {},\n    },\n  ),\n  // size: 494, gzip size: 274\n  set: helper(\n    \"7.0.0-beta.0\",\n    'function set(e,r,t,o){return set=\"undefined\"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError(\"failed to set property\");return t}',\n    {\n      globals: [\"Reflect\", \"Object\", \"TypeError\"],\n      locals: {\n        set: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee\",\n          \"body.1.body.body.0.test.left.argument.callee\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n        _set: [\"body.1.id\"],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_set\",\n      dependencies: {\n        superPropBase: [\n          \"body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee\",\n        ],\n        defineProperty: [\n          \"body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 178, gzip size: 166\n  setFunctionName: helper(\n    \"7.23.6\",\n    'function setFunctionName(e,t,n){\"symbol\"==typeof t&&(t=(t=t.description)?\"[\"+t+\"]\":\"\");try{Object.defineProperty(e,\"name\",{configurable:!0,value:n?n+\" \"+t:t})}catch(e){}return e}',\n    {\n      globals: [\"Object\"],\n      locals: { setFunctionName: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"setFunctionName\",\n      dependencies: {},\n    },\n  ),\n  // size: 163, gzip size: 102\n  setPrototypeOf: helper(\n    \"7.0.0-beta.0\",\n    \"function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}\",\n    {\n      globals: [\"Object\"],\n      locals: {\n        _setPrototypeOf: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.argument.expressions.0\"],\n      exportName: \"_setPrototypeOf\",\n      dependencies: {},\n    },\n  ),\n  // size: 103, gzip size: 107\n  skipFirstGeneratorNext: helper(\n    \"7.0.0-beta.0\",\n    \"function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}\",\n    {\n      globals: [],\n      locals: { _skipFirstGeneratorNext: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_skipFirstGeneratorNext\",\n      dependencies: {},\n    },\n  ),\n  // size: 133, gzip size: 117\n  slicedToArray: helper(\n    \"7.0.0-beta.0\",\n    \"function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}\",\n    {\n      globals: [],\n      locals: { _slicedToArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_slicedToArray\",\n      dependencies: {\n        arrayWithHoles: [\"body.0.body.body.0.argument.left.left.left.callee\"],\n        iterableToArrayLimit: [\n          \"body.0.body.body.0.argument.left.left.right.callee\",\n        ],\n        unsupportedIterableToArray: [\n          \"body.0.body.body.0.argument.left.right.callee\",\n        ],\n        nonIterableRest: [\"body.0.body.body.0.argument.right.callee\"],\n      },\n    },\n  ),\n  // size: 104, gzip size: 113\n  superPropBase: helper(\n    \"7.0.0-beta.0\",\n    \"function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}\",\n    {\n      globals: [],\n      locals: { _superPropBase: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_superPropBase\",\n      dependencies: {\n        getPrototypeOf: [\"body.0.body.body.0.test.right.right.right.callee\"],\n      },\n    },\n  ),\n  // size: 135, gzip size: 128\n  taggedTemplateLiteral: helper(\n    \"7.0.0-beta.0\",\n    \"function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}\",\n    {\n      globals: [\"Object\"],\n      locals: { _taggedTemplateLiteral: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_taggedTemplateLiteral\",\n      dependencies: {},\n    },\n  ),\n  // size: 77, gzip size: 94\n  taggedTemplateLiteralLoose: helper(\n    \"7.0.0-beta.0\",\n    \"function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}\",\n    {\n      globals: [],\n      locals: { _taggedTemplateLiteralLoose: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_taggedTemplateLiteralLoose\",\n      dependencies: {},\n    },\n  ),\n  // size: 89, gzip size: 97\n  tdz: helper(\n    \"7.5.5\",\n    'function _tdzError(e){throw new ReferenceError(e+\" is not defined - temporal dead zone\")}',\n    {\n      globals: [\"ReferenceError\"],\n      locals: { _tdzError: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_tdzError\",\n      dependencies: {},\n    },\n  ),\n  // size: 53, gzip size: 73\n  temporalRef: helper(\n    \"7.0.0-beta.0\",\n    \"function _temporalRef(r,e){return r===undef?err(e):r}\",\n    {\n      globals: [],\n      locals: { _temporalRef: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_temporalRef\",\n      dependencies: {\n        temporalUndefined: [\"body.0.body.body.0.argument.test.right\"],\n        tdz: [\"body.0.body.body.0.argument.consequent.callee\"],\n      },\n    },\n  ),\n  // size: 31, gzip size: 51\n  temporalUndefined: helper(\"7.0.0-beta.0\", \"function _temporalUndefined(){}\", {\n    globals: [],\n    locals: { _temporalUndefined: [\"body.0.id\"] },\n    exportBindingAssignments: [],\n    exportName: \"_temporalUndefined\",\n    dependencies: {},\n  }),\n  // size: 116, gzip size: 102\n  toArray: helper(\n    \"7.0.0-beta.0\",\n    \"function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}\",\n    {\n      globals: [],\n      locals: { _toArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_toArray\",\n      dependencies: {\n        arrayWithHoles: [\"body.0.body.body.0.argument.left.left.left.callee\"],\n        iterableToArray: [\"body.0.body.body.0.argument.left.left.right.callee\"],\n        unsupportedIterableToArray: [\n          \"body.0.body.body.0.argument.left.right.callee\",\n        ],\n        nonIterableRest: [\"body.0.body.body.0.argument.right.callee\"],\n      },\n    },\n  ),\n  // size: 131, gzip size: 114\n  toConsumableArray: helper(\n    \"7.0.0-beta.0\",\n    \"function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}\",\n    {\n      globals: [],\n      locals: { _toConsumableArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_toConsumableArray\",\n      dependencies: {\n        arrayWithoutHoles: [\n          \"body.0.body.body.0.argument.left.left.left.callee\",\n        ],\n        iterableToArray: [\"body.0.body.body.0.argument.left.left.right.callee\"],\n        unsupportedIterableToArray: [\n          \"body.0.body.body.0.argument.left.right.callee\",\n        ],\n        nonIterableSpread: [\"body.0.body.body.0.argument.right.callee\"],\n      },\n    },\n  ),\n  // size: 270, gzip size: 201\n  toPrimitive: helper(\n    \"7.1.5\",\n    'function toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===r?String:Number)(t)}',\n    {\n      globals: [\"Symbol\", \"TypeError\", \"String\", \"Number\"],\n      locals: { toPrimitive: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"toPrimitive\",\n      dependencies: {},\n    },\n  ),\n  // size: 88, gzip size: 102\n  toPropertyKey: helper(\n    \"7.1.5\",\n    'function toPropertyKey(t){var i=toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\"}',\n    {\n      globals: [],\n      locals: { toPropertyKey: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"toPropertyKey\",\n      dependencies: {\n        toPrimitive: [\"body.0.body.body.0.declarations.0.init.callee\"],\n      },\n    },\n  ),\n  // size: 129, gzip size: 133\n  toSetter: helper(\n    \"7.24.0\",\n    'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},\"_\",{set:function(o){e[r]=o,t.apply(n,e)}})}',\n    {\n      globals: [\"Object\"],\n      locals: { _toSetter: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_toSetter\",\n      dependencies: {},\n    },\n  ),\n  // size: 274, gzip size: 157\n  typeof: helper(\n    \"7.0.0-beta.0\",\n    'function _typeof(o){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&\"function\"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?\"symbol\":typeof o},_typeof(o)}',\n    {\n      globals: [\"Symbol\"],\n      locals: {\n        _typeof: [\n          \"body.0.id\",\n          \"body.0.body.body.0.argument.expressions.1.callee\",\n          \"body.0.body.body.0.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.argument.expressions.0\"],\n      exportName: \"_typeof\",\n      dependencies: {},\n    },\n  ),\n  // size: 328, gzip size: 247\n  unsupportedIterableToArray: helper(\n    \"7.9.0\",\n    'function _unsupportedIterableToArray(r,a){if(r){if(\"string\"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return\"Object\"===t&&r.constructor&&(t=r.constructor.name),\"Map\"===t||\"Set\"===t?Array.from(r):\"Arguments\"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}',\n    {\n      globals: [\"Array\"],\n      locals: { _unsupportedIterableToArray: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_unsupportedIterableToArray\",\n      dependencies: {\n        arrayLikeToArray: [\n          \"body.0.body.body.0.consequent.body.0.consequent.argument.callee\",\n          \"body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 907, gzip size: 473\n  usingCtx: helper(\n    \"7.23.9\",\n    'function _usingCtx(){var r=\"function\"==typeof SuppressedError?SuppressedError:function(r,n){var e=Error();return e.name=\"SuppressedError\",e.error=r,e.suppressed=n,e},n={},e=[];function using(r,n){if(null!=n){if(Object(n)!==n)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(r)var o=n[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(null==o&&(o=n[Symbol.dispose||Symbol.for(\"Symbol.dispose\")]),\"function\"!=typeof o)throw new TypeError(\"Property [Symbol.dispose] is not a function.\");e.push({v:n,d:o,a:r})}else r&&e.push({d:n,a:r});return n}return{e:n,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o=this.e;function next(){for(;r=e.pop();)try{var r,t=r.d&&r.d.call(r.v);if(r.a)return Promise.resolve(t).then(next,err)}catch(r){return err(r)}if(o!==n)throw o}function err(e){return o=o!==n?new r(e,o):e,next()}return next()}}}',\n    {\n      globals: [\n        \"SuppressedError\",\n        \"Error\",\n        \"Object\",\n        \"TypeError\",\n        \"Symbol\",\n        \"Promise\",\n      ],\n      locals: { _usingCtx: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_usingCtx\",\n      dependencies: {},\n    },\n  ),\n  // size: 1172, gzip size: 526\n  wrapAsyncGenerator: helper(\n    \"7.0.0-beta.0\",\n    'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i=\"return\"===r?\"return\":\"next\";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?\"return\":\"normal\",t)}),(function(e){resume(\"throw\",e)}))}catch(e){settle(\"throw\",e)}}function settle(e,n){switch(e){case\"return\":r.resolve({value:n,done:!0});break;case\"throw\":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},\"function\"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype[\"function\"==typeof Symbol&&Symbol.asyncIterator||\"@@asyncIterator\"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke(\"next\",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke(\"throw\",e)},AsyncGenerator.prototype.return=function(e){return this._invoke(\"return\",e)};',\n    {\n      globals: [\"Promise\", \"Symbol\"],\n      locals: {\n        _wrapAsyncGenerator: [\"body.0.id\"],\n        AsyncGenerator: [\n          \"body.1.id\",\n          \"body.0.body.body.0.argument.body.body.0.argument.callee\",\n          \"body.2.expression.expressions.0.left.object.object\",\n          \"body.2.expression.expressions.1.left.object.object\",\n          \"body.2.expression.expressions.2.left.object.object\",\n          \"body.2.expression.expressions.3.left.object.object\",\n        ],\n      },\n      exportBindingAssignments: [],\n      exportName: \"_wrapAsyncGenerator\",\n      dependencies: {\n        OverloadYield: [\n          \"body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right\",\n        ],\n      },\n    },\n  ),\n  // size: 563, gzip size: 318\n  wrapNativeSuper: helper(\n    \"7.0.0-beta.0\",\n    'function _wrapNativeSuper(t){var r=\"function\"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}',\n    {\n      globals: [\"Map\", \"TypeError\", \"Object\"],\n      locals: {\n        _wrapNativeSuper: [\n          \"body.0.id\",\n          \"body.0.body.body.1.argument.expressions.1.callee\",\n          \"body.0.body.body.1.argument.expressions.0.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.1.argument.expressions.0\"],\n      exportName: \"_wrapNativeSuper\",\n      dependencies: {\n        getPrototypeOf: [\n          \"body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee\",\n        ],\n        setPrototypeOf: [\n          \"body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee\",\n        ],\n        isNativeFunction: [\n          \"body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee\",\n        ],\n        construct: [\n          \"body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee\",\n        ],\n      },\n    },\n  ),\n  // size: 1163, gzip size: 540\n  wrapRegExp: helper(\n    \"7.19.0\",\n    'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if(\"number\"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if(\"string\"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\\\$<([^>]+)>/g,(function(e,r){var t=o[r];return\"$\"+(Array.isArray(t)?t.join(\"$\"):t)})))}if(\"function\"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return\"object\"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}',\n    {\n      globals: [\"RegExp\", \"WeakMap\", \"Object\", \"Symbol\", \"Array\"],\n      locals: {\n        _wrapRegExp: [\n          \"body.0.id\",\n          \"body.0.body.body.4.argument.expressions.3.callee.object\",\n          \"body.0.body.body.0.expression.left\",\n        ],\n      },\n      exportBindingAssignments: [\"body.0.body.body.0.expression\"],\n      exportName: \"_wrapRegExp\",\n      dependencies: {\n        setPrototypeOf: [\n          \"body.0.body.body.2.body.body.1.argument.expressions.1.callee\",\n        ],\n        inherits: [\"body.0.body.body.4.argument.expressions.0.callee\"],\n      },\n    },\n  ),\n  // size: 73, gzip size: 86\n  writeOnlyError: helper(\n    \"7.12.13\",\n    \"function _writeOnlyError(r){throw new TypeError('\\\"'+r+'\\\" is write-only')}\",\n    {\n      globals: [\"TypeError\"],\n      locals: { _writeOnlyError: [\"body.0.id\"] },\n      exportBindingAssignments: [],\n      exportName: \"_writeOnlyError\",\n      dependencies: {},\n    },\n  ),\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(helpers, {\n    // size: 39, gzip size: 59\n    AwaitValue: helper(\n      \"7.0.0-beta.0\",\n      \"function _AwaitValue(t){this.wrapped=t}\",\n      {\n        globals: [],\n        locals: { _AwaitValue: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_AwaitValue\",\n        dependencies: {},\n      },\n    ),\n    // size: 5767, gzip size: 2181\n    applyDecs: helper(\n      \"7.17.8\",\n      'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,\"getMetadata\"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,\"constructor\"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,\"setMetadata\"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,\"addInitializer\"),old_assertCallable(a,\"An initializer\"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var d,u,f={kind:c,name:l?\"#\"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error(\"attempted to call \"+t+\" after decoration was finished\")}function old_assertMetadataKey(e){if(\"symbol\"!=typeof e)throw new TypeError(\"Metadata keys must be symbols, received: \"+e)}function old_assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if(\"object\"!==a||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&old_assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&old_assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&old_assertCallable(t.init,\"accessor.init\"),void 0!==t.initializer&&old_assertCallable(t.initializer,\"accessor.initializer\")}else if(\"function\"!==a)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(\".initializer has been renamed to .init as of March 2022\"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u=\"get\"):3===o?(c={get:a[3]},u=\"get\"):4===o?(c={set:a[3]},u=\"set\"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],\"#\"+r,\"set\"),setFunctionName(a[3],\"#\"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),\"function\"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:\"function\"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if(\"function\"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:\"class\",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}',\n      {\n        globals: [\n          \"Object\",\n          \"Map\",\n          \"Symbol\",\n          \"Array\",\n          \"Error\",\n          \"TypeError\",\n          \"console\",\n        ],\n        locals: {\n          old_createMetadataMethodsForProperty: [\n            \"body.0.id\",\n            \"body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee\",\n            \"body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee\",\n          ],\n          old_convertMetadataMapToFinal: [\n            \"body.1.id\",\n            \"body.13.body.body.1.argument.expressions.1.callee\",\n            \"body.13.body.body.1.argument.expressions.3.callee\",\n          ],\n          old_createAddInitializerMethod: [\n            \"body.2.id\",\n            \"body.3.body.body.3.test.expressions.0.right.right.callee\",\n            \"body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee\",\n          ],\n          old_memberDec: [\n            \"body.3.id\",\n            \"body.9.body.body.1.consequent.expression.left.right.right.callee\",\n            \"body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee\",\n          ],\n          old_assertNotFinished: [\n            \"body.4.id\",\n            \"body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee\",\n            \"body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee\",\n            \"body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee\",\n          ],\n          old_assertMetadataKey: [\n            \"body.5.id\",\n            \"body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee\",\n            \"body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee\",\n          ],\n          old_assertCallable: [\n            \"body.6.id\",\n            \"body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee\",\n            \"body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee\",\n            \"body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee\",\n            \"body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee\",\n            \"body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee\",\n          ],\n          old_assertValidReturnValue: [\n            \"body.7.id\",\n            \"body.9.body.body.1.consequent.expression.right.expressions.0.callee\",\n            \"body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee\",\n            \"body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee\",\n          ],\n          old_getInit: [\n            \"body.8.id\",\n            \"body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee\",\n            \"body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee\",\n          ],\n          old_applyMemberDec: [\n            \"body.9.id\",\n            \"body.10.body.body.0.body.body.1.consequent.body.2.expression.callee\",\n          ],\n          old_applyMemberDecs: [\n            \"body.10.id\",\n            \"body.13.body.body.1.argument.expressions.0.callee\",\n          ],\n          old_pushInitializers: [\n            \"body.11.id\",\n            \"body.10.body.body.1.expression.expressions.0.callee\",\n            \"body.10.body.body.1.expression.expressions.1.callee\",\n          ],\n          old_applyClassDecs: [\n            \"body.12.id\",\n            \"body.13.body.body.1.argument.expressions.2.callee\",\n          ],\n          applyDecs: [\"body.13.id\"],\n        },\n        exportBindingAssignments: [],\n        exportName: \"applyDecs\",\n        dependencies: {\n          setFunctionName: [\n            \"body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee\",\n            \"body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee\",\n          ],\n          toPropertyKey: [\n            \"body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 3845, gzip size: 1570\n    applyDecs2203: helper(\n      \"7.19.0\",\n      'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:s?\"#\"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),\"function\"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:\"function\"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:\"class\",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}',\n      {\n        globals: [\"Error\", \"TypeError\", \"Object\", \"Map\", \"Array\"],\n        locals: {\n          applyDecs2203Factory: [\n            \"body.0.id\",\n            \"body.2.body.body.0.argument.callee.right.right.callee\",\n          ],\n          applyDecs2203Impl: [\n            \"body.1.declarations.0.id\",\n            \"body.2.body.body.0.argument.callee.right.left\",\n            \"body.2.body.body.0.argument.callee.left\",\n          ],\n          applyDecs2203: [\"body.2.id\"],\n        },\n        exportBindingAssignments: [],\n        exportName: \"applyDecs2203\",\n        dependencies: {},\n      },\n    ),\n    // size: 3982, gzip size: 1621\n    applyDecs2203R: helper(\n      \"7.20.0\",\n      'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:o?\"#\"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u=\"get\"):3===a?(c={get:r[3]},u=\"get\"):4===a?(c={set:r[3]},u=\"set\"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],\"#\"+n,\"set\"),setFunctionName(r[3],\"#\"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),\"function\"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:\"function\"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}',\n      {\n        globals: [\"Error\", \"TypeError\", \"Object\", \"Map\", \"Array\"],\n        locals: {\n          applyDecs2203RFactory: [\n            \"body.0.id\",\n            \"body.1.body.body.0.argument.callee.right.callee\",\n          ],\n          applyDecs2203R: [\n            \"body.1.id\",\n            \"body.1.body.body.0.argument.callee.left\",\n          ],\n        },\n        exportBindingAssignments: [\"body.1.body.body.0.argument.callee\"],\n        exportName: \"applyDecs2203R\",\n        dependencies: {\n          setFunctionName: [\n            \"body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee\",\n            \"body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee\",\n          ],\n          toPropertyKey: [\n            \"body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 4526, gzip size: 1807\n    applyDecs2301: helper(\n      \"7.21.0\",\n      'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError(\"Attempted to access private element on non-instance\")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u=\"accessor\";break;case 2:u=\"method\";break;case 3:u=\"getter\";break;case 4:u=\"setter\";break;default:u=\"field\"}var l,f,p={kind:u,name:s?\"#\"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f=\"get\"):3===a?(u={get:r[3]},f=\"get\"):4===a?(u={set:r[3]},f=\"set\"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,\"#\"+n,\"set\"),setFunctionName(u[f||\"value\"],\"#\"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),\"function\"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:\"function\"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}',\n      {\n        globals: [\"Error\", \"TypeError\", \"Object\", \"Map\", \"Array\"],\n        locals: {\n          applyDecs2301Factory: [\n            \"body.0.id\",\n            \"body.1.body.body.0.argument.callee.right.callee\",\n          ],\n          applyDecs2301: [\n            \"body.1.id\",\n            \"body.1.body.body.0.argument.callee.left\",\n          ],\n        },\n        exportBindingAssignments: [\"body.1.body.body.0.argument.callee\"],\n        exportName: \"applyDecs2301\",\n        dependencies: {\n          checkInRHS: [\n            \"body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee\",\n          ],\n          setFunctionName: [\n            \"body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee\",\n            \"body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee\",\n          ],\n          toPropertyKey: [\n            \"body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 3109, gzip size: 1569\n    applyDecs2305: helper(\n      \"7.21.0\",\n      'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if(\"function\"!=typeof e&&(n||void 0!==e))throw new TypeError(t+\" must \"+(r||\"be\")+\" a function\"+(n?\"\":\" or undefined\"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?\"get\":4===o||d?\"set\":\"value\";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,\"get\"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?\"\":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\");s(t,\"An initializer\",\"be\",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),\"class decorators\",\"return\"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,\"get\",m)),3!==o&&(F=i(w,\"set\",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if(\"object\"==typeof P&&P)(y=s(P.get,\"accessor.get\"))&&(w.get=y),(y=s(P.set,\"accessor.set\"))&&(w.set=y),(y=s(P.init,\"accessor.init\"))&&S.push(y);else if(void 0!==P)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\")}else s(P,(p?\"field\":\"method\")+\" decorators\",\"return\")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,\"get\"),i(w,\"set\")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for(\"Symbol.metadata\"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for(\"Symbol.metadata\")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+\"/\"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?\"#\"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}',\n      {\n        globals: [\"TypeError\", \"Array\", \"Object\", \"Error\", \"Symbol\", \"Map\"],\n        locals: { applyDecs2305: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"applyDecs2305\",\n        dependencies: {\n          checkInRHS: [\n            \"body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee\",\n          ],\n          setFunctionName: [\n            \"body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee\",\n            \"body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee\",\n          ],\n          toPropertyKey: [\n            \"body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 231, gzip size: 189\n    classApplyDescriptorDestructureSet: helper(\n      \"7.13.10\",\n      'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return\"__destrObj\"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError(\"attempted to set read only private field\");return t}',\n      {\n        globals: [\"TypeError\"],\n        locals: { _classApplyDescriptorDestructureSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classApplyDescriptorDestructureSet\",\n        dependencies: {},\n      },\n    ),\n    // size: 74, gzip size: 90\n    classApplyDescriptorGet: helper(\n      \"7.13.10\",\n      \"function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}\",\n      {\n        globals: [],\n        locals: { _classApplyDescriptorGet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classApplyDescriptorGet\",\n        dependencies: {},\n      },\n    ),\n    // size: 161, gzip size: 149\n    classApplyDescriptorSet: helper(\n      \"7.13.10\",\n      'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError(\"attempted to set read only private field\");t.value=l}}',\n      {\n        globals: [\"TypeError\"],\n        locals: { _classApplyDescriptorSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classApplyDescriptorSet\",\n        dependencies: {},\n      },\n    ),\n    // size: 78, gzip size: 93\n    classCheckPrivateStaticAccess: helper(\n      \"7.13.10\",\n      \"function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}\",\n      {\n        globals: [],\n        locals: { _classCheckPrivateStaticAccess: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classCheckPrivateStaticAccess\",\n        dependencies: {\n          assertClassBrand: [\"body.0.body.body.0.argument.callee\"],\n        },\n      },\n    ),\n    // size: 154, gzip size: 145\n    classCheckPrivateStaticFieldDescriptor: helper(\n      \"7.13.10\",\n      'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError(\"attempted to \"+e+\" private static field before its declaration\")}',\n      {\n        globals: [\"TypeError\"],\n        locals: { _classCheckPrivateStaticFieldDescriptor: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classCheckPrivateStaticFieldDescriptor\",\n        dependencies: {},\n      },\n    ),\n    // size: 77, gzip size: 91\n    classExtractFieldDescriptor: helper(\n      \"7.13.10\",\n      \"function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}\",\n      {\n        globals: [],\n        locals: { _classExtractFieldDescriptor: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classExtractFieldDescriptor\",\n        dependencies: {\n          classPrivateFieldGet2: [\"body.0.body.body.0.argument.callee\"],\n        },\n      },\n    ),\n    // size: 127, gzip size: 111\n    classPrivateFieldDestructureSet: helper(\n      \"7.4.4\",\n      \"function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}\",\n      {\n        globals: [],\n        locals: { _classPrivateFieldDestructureSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classPrivateFieldDestructureSet\",\n        dependencies: {\n          classApplyDescriptorDestructureSet: [\n            \"body.0.body.body.1.argument.callee\",\n          ],\n          classPrivateFieldGet2: [\n            \"body.0.body.body.0.declarations.0.init.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 105, gzip size: 100\n    classPrivateFieldGet: helper(\n      \"7.0.0-beta.0\",\n      \"function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}\",\n      {\n        globals: [],\n        locals: { _classPrivateFieldGet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classPrivateFieldGet\",\n        dependencies: {\n          classApplyDescriptorGet: [\"body.0.body.body.1.argument.callee\"],\n          classPrivateFieldGet2: [\n            \"body.0.body.body.0.declarations.0.init.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 111, gzip size: 109\n    classPrivateFieldSet: helper(\n      \"7.0.0-beta.0\",\n      \"function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}\",\n      {\n        globals: [],\n        locals: { _classPrivateFieldSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classPrivateFieldSet\",\n        dependencies: {\n          classApplyDescriptorSet: [\n            \"body.0.body.body.1.argument.expressions.0.callee\",\n          ],\n          classPrivateFieldGet2: [\n            \"body.0.body.body.0.declarations.0.init.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 70, gzip size: 88\n    classPrivateMethodGet: helper(\n      \"7.1.6\",\n      \"function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}\",\n      {\n        globals: [],\n        locals: { _classPrivateMethodGet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classPrivateMethodGet\",\n        dependencies: {\n          assertClassBrand: [\n            \"body.0.body.body.0.argument.expressions.0.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 94, gzip size: 102\n    classPrivateMethodSet: helper(\n      \"7.1.6\",\n      'function _classPrivateMethodSet(){throw new TypeError(\"attempted to reassign private method\")}',\n      {\n        globals: [\"TypeError\"],\n        locals: { _classPrivateMethodSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classPrivateMethodSet\",\n        dependencies: {},\n      },\n    ),\n    // size: 172, gzip size: 135\n    classStaticPrivateFieldDestructureSet: helper(\n      \"7.13.10\",\n      'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,\"set\"),classApplyDescriptorDestructureSet(t,s)}',\n      {\n        globals: [],\n        locals: { _classStaticPrivateFieldDestructureSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classStaticPrivateFieldDestructureSet\",\n        dependencies: {\n          classApplyDescriptorDestructureSet: [\n            \"body.0.body.body.0.argument.expressions.2.callee\",\n          ],\n          assertClassBrand: [\n            \"body.0.body.body.0.argument.expressions.0.callee\",\n          ],\n          classCheckPrivateStaticFieldDescriptor: [\n            \"body.0.body.body.0.argument.expressions.1.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 154, gzip size: 133\n    classStaticPrivateFieldSpecGet: helper(\n      \"7.0.2\",\n      'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,\"get\"),classApplyDescriptorGet(t,r)}',\n      {\n        globals: [],\n        locals: { _classStaticPrivateFieldSpecGet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classStaticPrivateFieldSpecGet\",\n        dependencies: {\n          classApplyDescriptorGet: [\n            \"body.0.body.body.0.argument.expressions.2.callee\",\n          ],\n          assertClassBrand: [\n            \"body.0.body.body.0.argument.expressions.0.callee\",\n          ],\n          classCheckPrivateStaticFieldDescriptor: [\n            \"body.0.body.body.0.argument.expressions.1.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 160, gzip size: 134\n    classStaticPrivateFieldSpecSet: helper(\n      \"7.0.2\",\n      'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,\"set\"),classApplyDescriptorSet(s,r,e),e}',\n      {\n        globals: [],\n        locals: { _classStaticPrivateFieldSpecSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classStaticPrivateFieldSpecSet\",\n        dependencies: {\n          classApplyDescriptorSet: [\n            \"body.0.body.body.0.argument.expressions.2.callee\",\n          ],\n          assertClassBrand: [\n            \"body.0.body.body.0.argument.expressions.0.callee\",\n          ],\n          classCheckPrivateStaticFieldDescriptor: [\n            \"body.0.body.body.0.argument.expressions.1.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 111, gzip size: 114\n    classStaticPrivateMethodSet: helper(\n      \"7.3.2\",\n      'function _classStaticPrivateMethodSet(){throw new TypeError(\"attempted to set read only static private field\")}',\n      {\n        globals: [\"TypeError\"],\n        locals: { _classStaticPrivateMethodSet: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_classStaticPrivateMethodSet\",\n        dependencies: {},\n      },\n    ),\n    // size: 368, gzip size: 204\n    defineEnumerableProperties: helper(\n      \"7.0.0-beta.0\",\n      'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}',\n      {\n        globals: [\"Object\"],\n        locals: { _defineEnumerableProperties: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_defineEnumerableProperties\",\n        dependencies: {},\n      },\n    ),\n    // size: 653, gzip size: 319\n    dispose: helper(\n      \"7.22.0\",\n      'function dispose_SuppressedError(r,e){return\"undefined\"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}',\n      {\n        globals: [\"SuppressedError\", \"Error\", \"Object\", \"Promise\"],\n        locals: {\n          dispose_SuppressedError: [\n            \"body.0.id\",\n            \"body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object\",\n            \"body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value\",\n            \"body.0.body.body.0.argument.expressions.1.callee\",\n            \"body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee\",\n            \"body.0.body.body.0.argument.expressions.0.consequent.left\",\n            \"body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left\",\n          ],\n          _dispose: [\"body.1.id\"],\n        },\n        exportBindingAssignments: [],\n        exportName: \"_dispose\",\n        dependencies: {},\n      },\n    ),\n    // size: 363, gzip size: 237\n    objectSpread: helper(\n      \"7.0.0-beta.0\",\n      'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);\"function\"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}',\n      {\n        globals: [\"Object\"],\n        locals: { _objectSpread: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_objectSpread\",\n        dependencies: {\n          defineProperty: [\n            \"body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee\",\n          ],\n        },\n      },\n    ),\n    // size: 417, gzip size: 252\n    using: helper(\n      \"7.22.0\",\n      'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(e)var r=n[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(null==r&&(r=n[Symbol.dispose||Symbol.for(\"Symbol.dispose\")]),\"function\"!=typeof r)throw new TypeError(\"Property [Symbol.dispose] is not a function.\");return o.push({v:n,d:r,a:e}),n}',\n      {\n        globals: [\"Object\", \"TypeError\", \"Symbol\"],\n        locals: { _using: [\"body.0.id\"] },\n        exportBindingAssignments: [],\n        exportName: \"_using\",\n        dependencies: {},\n      },\n    ),\n  });\n}\n", "import { cloneNode, identifier } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport helpers from \"./helpers-generated.ts\";\nimport type { HelperMetadata } from \"./helpers-generated.ts\";\n\ntype GetDependency = (name: string) => t.Expression;\n\nfunction deep(obj: any, path: string, value?: unknown) {\n  try {\n    const parts = path.split(\".\");\n    let last = parts.shift();\n    while (parts.length > 0) {\n      obj = obj[last];\n      last = parts.shift();\n    }\n    if (arguments.length > 2) {\n      obj[last] = value;\n    } else {\n      return obj[last];\n    }\n  } catch (e) {\n    e.message += ` (when accessing ${path})`;\n    throw e;\n  }\n}\n\ntype AdjustAst = (\n  ast: t.Program,\n  exportName: string,\n  mapExportBindingAssignments: (\n    map: (node: t.Expression) => t.Expression,\n  ) => void,\n) => void;\n\n/**\n * Given a helper AST and information about how it will be used, update the AST to match the usage.\n */\nfunction permuteHelperAST(\n  ast: t.Program,\n  metadata: HelperMetadata,\n  bindingName: string | undefined,\n  localBindings: string[] | undefined,\n  getDependency: GetDependency | undefined,\n  adjustAst: AdjustAst | undefined,\n) {\n  const { locals, dependencies, exportBindingAssignments, exportName } =\n    metadata;\n\n  const bindings = new Set(localBindings || []);\n  if (bindingName) bindings.add(bindingName);\n  for (const [name, paths] of Object.entries(locals)) {\n    let newName = name;\n    if (bindingName && name === exportName) {\n      newName = bindingName;\n    } else {\n      while (bindings.has(newName)) newName = \"_\" + newName;\n    }\n\n    if (newName !== name) {\n      for (const path of paths) {\n        deep(ast, path, identifier(newName));\n      }\n    }\n  }\n\n  for (const [name, paths] of Object.entries(dependencies)) {\n    const ref =\n      (typeof getDependency === \"function\" && getDependency(name)) ||\n      identifier(name);\n    for (const path of paths) {\n      deep(ast, path, cloneNode(ref));\n    }\n  }\n\n  adjustAst?.(ast, exportName, map => {\n    exportBindingAssignments.forEach(p => deep(ast, p, map(deep(ast, p))));\n  });\n}\n\ninterface HelperData {\n  build: (\n    getDependency: GetDependency | undefined,\n    bindingName: string | undefined,\n    localBindings: string[] | undefined,\n    adjustAst: AdjustAst | undefined,\n  ) => {\n    nodes: t.Program[\"body\"];\n    globals: string[];\n  };\n  minVersion: string;\n  getDependencies: () => string[];\n}\n\nconst helperData: Record<string, HelperData> = Object.create(null);\nfunction loadHelper(name: string) {\n  if (!helperData[name]) {\n    const helper = helpers[name];\n    if (!helper) {\n      throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {\n        code: \"BABEL_HELPER_UNKNOWN\",\n        helper: name,\n      });\n    }\n\n    helperData[name] = {\n      minVersion: helper.minVersion,\n      build(getDependency, bindingName, localBindings, adjustAst) {\n        const ast = helper.ast();\n        permuteHelperAST(\n          ast,\n          helper.metadata,\n          bindingName,\n          localBindings,\n          getDependency,\n          adjustAst,\n        );\n\n        return {\n          nodes: ast.body,\n          globals: helper.metadata.globals,\n        };\n      },\n      getDependencies() {\n        return Object.keys(helper.metadata.dependencies);\n      },\n    };\n  }\n\n  return helperData[name];\n}\n\nexport function get(\n  name: string,\n  getDependency?: GetDependency,\n  bindingName?: string,\n  localBindings?: string[],\n  adjustAst?: AdjustAst,\n) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // In older versions, bindingName was a t.Identifier | t.MemberExpression\n    if (typeof bindingName === \"object\") {\n      const id = bindingName as t.Identifier | t.MemberExpression | null;\n      if (id?.type === \"Identifier\") {\n        bindingName = id.name;\n      } else {\n        bindingName = undefined;\n      }\n    }\n  }\n  return loadHelper(name).build(\n    getDependency,\n    bindingName,\n    localBindings,\n    adjustAst,\n  );\n}\n\nexport function minVersion(name: string) {\n  return loadHelper(name).minVersion;\n}\n\nexport function getDependencies(name: string): ReadonlyArray<string> {\n  return loadHelper(name).getDependencies();\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.ensure = (name: string) => {\n    loadHelper(name);\n  };\n}\n\nexport const list = Object.keys(helpers).map(name => name.replace(/^_/, \"\"));\n\nexport default get;\n", "import type * as t from \"@babel/types\";\n\nexport interface VirtualTypeAliases {\n  BindingIdentifier: t.Identifier;\n  BlockScoped: t.Node;\n  ExistentialTypeParam: t.ExistsTypeAnnotation;\n  Expression: t.Expression;\n  Flow: t.Flow | t.ImportDeclaration | t.ExportDeclaration | t.ImportSpecifier;\n  ForAwaitStatement: t.ForOfStatement;\n  Generated: t.Node;\n  NumericLiteralTypeAnnotation: t.NumberLiteralTypeAnnotation;\n  Pure: t.Node;\n  Referenced: t.Node;\n  ReferencedIdentifier: t.Identifier | t.JSXIdentifier;\n  ReferencedMemberExpression: t.MemberExpression;\n  RestProperty: t.RestElement;\n  Scope: t.Scopable | t.Pattern;\n  SpreadProperty: t.RestElement;\n  Statement: t.Statement;\n  User: t.Node;\n  Var: t.VariableDeclaration;\n}\n\ntype VirtualTypeMapping = readonly (t.Node[\"type\"] | keyof t.Aliases)[] | null;\n\nexport const ReferencedIdentifier: VirtualTypeMapping = [\n  \"Identifier\",\n  \"JSXIdentifier\",\n] as const;\n\nexport const ReferencedMemberExpression: VirtualTypeMapping = [\n  \"MemberExpression\",\n] as const;\n\nexport const BindingIdentifier: VirtualTypeMapping = [\"Identifier\"] as const;\n\nexport const Statement: VirtualTypeMapping = [\"Statement\"] as const;\n\nexport const Expression: VirtualTypeMapping = [\"Expression\"] as const;\n\nexport const Scope: VirtualTypeMapping = [\"Scopable\", \"Pattern\"] as const;\n\nexport const Referenced: VirtualTypeMapping = null;\n\nexport const BlockScoped: VirtualTypeMapping = null;\n\nexport const Var: VirtualTypeMapping = [\"VariableDeclaration\"];\n\nexport const User: VirtualTypeMapping = null;\n\nexport const Generated: VirtualTypeMapping = null;\n\nexport const Pure: VirtualTypeMapping = null;\n\nexport const Flow: VirtualTypeMapping = [\n  \"Flow\",\n  \"ImportDeclaration\",\n  \"ExportDeclaration\",\n  \"ImportSpecifier\",\n] as const;\n\n// TODO: 7.0 Backwards Compat\nexport const RestProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const SpreadProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const ExistentialTypeParam: VirtualTypeMapping = [\n  \"ExistsTypeAnnotation\",\n] as const;\n\nexport const NumericLiteralTypeAnnotation: VirtualTypeMapping = [\n  \"NumberLiteralTypeAnnotation\",\n] as const;\n\nexport const ForAwaitStatement: VirtualTypeMapping = [\n  \"ForOfStatement\",\n] as const;\n", "import type NodePath from \"../index.ts\";\nimport {\n  isBinding,\n  isBlockScoped as nodeIsBlockScoped,\n  isExportDeclaration,\n  isExpression as nodeIsExpression,\n  isFlow as nodeIsFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isRestElement as nodeIsRestElement,\n  isReferenced as nodeIsReferenced,\n  isScope as nodeIsScope,\n  isStatement as nodeIsStatement,\n  isVar as nodeIsVar,\n  isVariableDeclaration,\n  react,\n  isForOfStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nconst { isCompatTag } = react;\nimport type { VirtualTypeAliases } from \"./virtual-types.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport interface VirtualTypeNodePathValidators {\n  isBindingIdentifier(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"BindingIdentifier\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"BindingIdentifier\"]>;\n  isBlockScoped(opts?: Opts<VirtualTypeAliases[\"BlockScoped\"]>): boolean;\n  /**\n   * @deprecated\n   */\n  isExistentialTypeParam(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ExistentialTypeParam\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ExistentialTypeParam\"]>;\n  isExpression(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Expression\"]>,\n  ): this is NodePath<t.Expression>;\n  isFlow(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Flow\"]>,\n  ): this is NodePath<t.Flow>;\n  isForAwaitStatement(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ForAwaitStatement\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ForAwaitStatement\"]>;\n  isGenerated(opts?: VirtualTypeAliases[\"Generated\"]): boolean;\n  /**\n   * @deprecated\n   */\n  isNumericLiteralTypeAnnotation(\n    opts?: VirtualTypeAliases[\"NumericLiteralTypeAnnotation\"],\n  ): void;\n  isPure(opts?: VirtualTypeAliases[\"Pure\"]): boolean;\n  isReferenced(opts?: VirtualTypeAliases[\"Referenced\"]): boolean;\n  isReferencedIdentifier(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ReferencedIdentifier\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ReferencedIdentifier\"]>;\n  isReferencedMemberExpression(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ReferencedMemberExpression\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ReferencedMemberExpression\"]>;\n  isRestProperty(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"RestProperty\"]>,\n  ): this is NodePath<t.RestProperty>;\n  isScope(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Scope\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"Scope\"]>;\n  isSpreadProperty(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"SpreadProperty\"]>,\n  ): this is NodePath<t.SpreadProperty>;\n  isStatement(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Statement\"]>,\n  ): this is NodePath<t.Statement>;\n  isUser(opts?: VirtualTypeAliases[\"User\"]): boolean;\n  isVar(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Var\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"Var\"]>;\n}\n\nexport function isReferencedIdentifier(this: NodePath, opts?: any): boolean {\n  const { node, parent } = this;\n  if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n    if (isJSXIdentifier(node, opts)) {\n      if (isCompatTag(node.name)) return false;\n    } else {\n      // not a JSXIdentifier or an Identifier\n      return false;\n    }\n  }\n\n  // check if node is referenced\n  return nodeIsReferenced(node, parent, this.parentPath.parent);\n}\n\nexport function isReferencedMemberExpression(this: NodePath): boolean {\n  const { node, parent } = this;\n  return isMemberExpression(node) && nodeIsReferenced(node, parent);\n}\n\nexport function isBindingIdentifier(this: NodePath): boolean {\n  const { node, parent } = this;\n  const grandparent = this.parentPath.parent;\n  return isIdentifier(node) && isBinding(node, parent, grandparent);\n}\n\nexport function isStatement(this: NodePath): boolean {\n  const { node, parent } = this;\n  if (nodeIsStatement(node)) {\n    if (isVariableDeclaration(node)) {\n      if (isForXStatement(parent, { left: node })) return false;\n      if (isForStatement(parent, { init: node })) return false;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    return this.isReferencedIdentifier();\n  } else {\n    return nodeIsExpression(this.node);\n  }\n}\n\nexport function isScope(this: NodePath): boolean {\n  return nodeIsScope(this.node, this.parent);\n}\n\nexport function isReferenced(this: NodePath): boolean {\n  return nodeIsReferenced(this.node, this.parent);\n}\n\nexport function isBlockScoped(this: NodePath): boolean {\n  return nodeIsBlockScoped(this.node);\n}\n\nexport function isVar(this: NodePath): boolean {\n  return nodeIsVar(this.node);\n}\n\nexport function isUser(this: NodePath): boolean {\n  return this.node && !!this.node.loc;\n}\n\nexport function isGenerated(this: NodePath): boolean {\n  return !this.isUser();\n}\n\nexport function isPure(this: NodePath, constantsOnly?: boolean): boolean {\n  return this.scope.isPure(this.node, constantsOnly);\n}\n\nexport function isFlow(this: NodePath): boolean {\n  const { node } = this;\n  if (nodeIsFlow(node)) {\n    return true;\n  } else if (isImportDeclaration(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else if (isExportDeclaration(node)) {\n    return node.exportKind === \"type\";\n  } else if (isImportSpecifier(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else {\n    return false;\n  }\n}\n\n// TODO: 7.0 Backwards Compat\nexport function isRestProperty(this: NodePath): boolean {\n  return nodeIsRestElement(this.node) && this.parentPath?.isObjectPattern();\n}\n\nexport function isSpreadProperty(this: NodePath): boolean {\n  return nodeIsRestElement(this.node) && this.parentPath?.isObjectExpression();\n}\n\nexport function isForAwaitStatement(this: NodePath): boolean {\n  return isForOfStatement(this.node, { await: true });\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.isExistentialTypeParam = function isExistentialTypeParam(\n    this: NodePath,\n  ): void {\n    throw new Error(\n      \"`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.\",\n    );\n  };\n\n  // eslint-disable-next-line no-restricted-globals\n  exports.isNumericLiteralTypeAnnotation =\n    function isNumericLiteralTypeAnnotation(this: NodePath): void {\n      throw new Error(\n        \"`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.\",\n      );\n    };\n}\n", "import * as virtualTypes from \"./path/lib/virtual-types.ts\";\nimport * as virtualTypesValidators from \"./path/lib/virtual-types-validator.ts\";\nimport type { Node } from \"@babel/types\";\nimport {\n  DEPRECATED_KEYS,\n  DEPRECATED_ALIASES,\n  FLIPPED_ALIAS_KEYS,\n  TYPES,\n  __internal__deprecationWarning as deprecationWarning,\n} from \"@babel/types\";\nimport type { ExplodedVisitor, NodePath, Visitor } from \"./index.ts\";\nimport type { ExplVisitNode, VisitNodeFunction, VisitPhase } from \"./types.ts\";\n\ntype VIRTUAL_TYPES = keyof typeof virtualTypes;\nfunction isVirtualType(type: string): type is VIRTUAL_TYPES {\n  return type in virtualTypes;\n}\nexport type VisitWrapper<S = any> = (\n  stateName: string | undefined,\n  visitorType: VisitPhase,\n  callback: VisitNodeFunction<S, Node>,\n) => VisitNodeFunction<S, Node>;\n\nexport function isExplodedVisitor(\n  visitor: Visitor,\n): visitor is ExplodedVisitor {\n  // @ts-expect-error _exploded is not defined on non-exploded Visitor\n  return visitor?._exploded;\n}\n\n// We need to name this function `explode$1` because otherwise rollup-plugin-dts\n// will generate a `namespace traverse { var explode: typeof explode; }` when\n// bundling @babel/traverse's index.d.ts.\n// TODO: Just call it `explode` once https://github.com/Swatinem/rollup-plugin-dts/issues/307\n// is fixed.\nexport { explode$1 as explode };\n/**\n * explode() will take a visitor object with all of the various shorthands\n * that we support, and validates & normalizes it into a common format, ready\n * to be used in traversal\n *\n * The various shorthands are:\n * * `Identifier() { ... }` -> `Identifier: { enter() { ... } }`\n * * `\"Identifier|NumericLiteral\": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`\n * * Aliases in `@babel/types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`\n * Other normalizations are:\n * * Visitors of virtual types are wrapped, so that they are only visited when\n *   their dynamic check passes\n * * `enter` and `exit` functions are wrapped in arrays, to ease merging of\n *   visitors\n */\nfunction explode$1<S>(visitor: Visitor<S>): ExplodedVisitor<S> {\n  if (isExplodedVisitor(visitor)) return visitor;\n  // @ts-expect-error `visitor` will be cast to ExplodedVisitor by this function\n  visitor._exploded = true;\n\n  // normalise pipes\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    const parts: Array<string> = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n\n    for (const part of parts) {\n      // @ts-expect-error part will be verified by `verify` later\n      visitor[part] = fns;\n    }\n  }\n\n  // verify data structure\n  verify$1(visitor);\n\n  // make sure there's no __esModule type since this is because we're using loose mode\n  // and it sets __esModule to be enumerable on all modules :(\n  // @ts-expect-error ESModule interop\n  delete visitor.__esModule;\n\n  // ensure visitors are objects\n  ensureEntranceObjects(visitor);\n\n  // ensure enter/exit callbacks are arrays\n  ensureCallbackArrays(visitor);\n\n  // add type wrappers\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (!isVirtualType(nodeType)) continue;\n\n    // wrap all the functions\n    const fns = visitor[nodeType];\n    for (const type of Object.keys(fns)) {\n      // @ts-expect-error normalised as VisitNodeObject\n      fns[type] = wrapCheck(nodeType, fns[type]);\n    }\n\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    const types = virtualTypes[nodeType];\n    if (types !== null) {\n      for (const type of types) {\n        // merge the visitor if necessary or just put it back in\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          // @ts-expect-error Expression produces too complex union\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n\n  // add aliases\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n\n    if (nodeType in DEPRECATED_KEYS) {\n      const deprecatedKey = DEPRECATED_KEYS[nodeType];\n      deprecationWarning(nodeType, deprecatedKey, \"Visitor \");\n      aliases = [deprecatedKey];\n    } else if (nodeType in DEPRECATED_ALIASES) {\n      const deprecatedAlias =\n        DEPRECATED_ALIASES[nodeType as keyof typeof DEPRECATED_ALIASES];\n      deprecationWarning(nodeType, deprecatedAlias, \"Visitor \");\n      aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];\n    }\n\n    if (!aliases) continue;\n\n    const fns = visitor[nodeType];\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        visitor[alias] = { ...fns };\n      }\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    ensureCallbackArrays(\n      // @ts-expect-error nodeType must present in visitor after previous validations\n      visitor[nodeType],\n    );\n  }\n\n  // @ts-expect-error explosion has been performed\n  return visitor as ExplodedVisitor;\n}\n\n// We need to name this function `verify$1` because otherwise rollup-plugin-dts\n// will generate a `namespace traverse { var verify: typeof verify; }` when\n// bundling @babel/traverse's index.d.ts.\n// TODO: Just call it `verify` once https://github.com/Swatinem/rollup-plugin-dts/issues/307\n// is fixed.\nexport { verify$1 as verify };\nfunction verify$1(visitor: Visitor) {\n  // @ts-expect-error _verified is not defined on non-verified Visitor.\n  // TODO: unify _verified and _exploded.\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\n      \"You passed `traverse()` a function when it expected a visitor object, \" +\n        \"are you sure you didn't mean `{ enter: Function }`?\",\n    );\n  }\n\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (TYPES.indexOf(nodeType) < 0) {\n      throw new Error(\n        `You gave us a visitor for the node type ${nodeType} but it's not a valid type`,\n      );\n    }\n\n    const visitors = visitor[nodeType];\n    if (typeof visitors === \"object\") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          // verify that it just contains functions\n          validateVisitorMethods(\n            `${nodeType}.${visitorKey}`,\n            visitors[visitorKey],\n          );\n        } else {\n          throw new Error(\n            \"You passed `traverse()` a visitor object with the property \" +\n              `${nodeType} that has the invalid property ${visitorKey}`,\n          );\n        }\n      }\n    }\n  }\n\n  // @ts-expect-error _verified is not defined on non-verified Visitor.\n  // TODO: unify _verified and _exploded.\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(\n  path: string,\n  val: any,\n): asserts val is Function | Function[] {\n  const fns = [].concat(val);\n  for (const fn of fns) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(\n        `Non-function found defined in ${path} with type ${typeof fn}`,\n      );\n    }\n  }\n}\n\nexport function merge<State>(\n  visitors: Visitor<State>[],\n): ExplodedVisitor<State>;\nexport function merge(\n  visitors: Visitor<unknown>[],\n  states?: any[],\n  wrapper?: Function | null,\n): ExplodedVisitor<unknown>;\nexport function merge(\n  visitors: any[],\n  states: any[] = [],\n  wrapper?: VisitWrapper | null,\n): ExplodedVisitor {\n  // @ts-expect-error don't bother with internal flags so it can work with earlier @babel/core validations\n  const mergedVisitor: ExplodedVisitor = {};\n\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = explode$1(visitors[i]);\n    const state = states[i];\n\n    let topVisitor: ExplVisitNode<unknown, Node> = visitor;\n    if (state || wrapper) {\n      topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);\n    }\n    mergePair(mergedVisitor, topVisitor);\n\n    for (const key of Object.keys(visitor) as (keyof ExplodedVisitor)[]) {\n      if (shouldIgnoreKey(key)) continue;\n\n      let typeVisitor = visitor[key];\n\n      // if we have state or wrapper then overload the callbacks to take it\n      if (state || wrapper) {\n        typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);\n      }\n\n      const nodeVisitor = (mergedVisitor[key] ||= {});\n      mergePair(nodeVisitor, typeVisitor);\n    }\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    return {\n      ...mergedVisitor,\n      _exploded: true,\n      _verified: true,\n    };\n  }\n\n  return mergedVisitor;\n}\n\nfunction wrapWithStateOrWrapper<State>(\n  oldVisitor: ExplVisitNode<State, Node>,\n  state: State | null,\n  wrapper?: VisitWrapper<State> | null,\n): ExplVisitNode<State, Node> {\n  const newVisitor: ExplVisitNode<State, Node> = {};\n\n  for (const phase of [\"enter\", \"exit\"] as VisitPhase[]) {\n    let fns = oldVisitor[phase];\n\n    // not an enter/exit array of callbacks\n    if (!Array.isArray(fns)) continue;\n\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n\n      if (state) {\n        newFn = function (path: NodePath) {\n          fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        // @ts-expect-error Fixme: actually PluginPass.key (aka pluginAlias)?\n        newFn = wrapper(state?.key, phase, newFn);\n      }\n\n      // Override toString in case this function is printed, we want to print the wrapped function, same as we do in `wrapCheck`\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n\n      return newFn;\n    });\n\n    newVisitor[phase] = fns;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj: Visitor) {\n  for (const key of Object.keys(obj) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(key)) continue;\n\n    const fns = obj[key];\n    if (typeof fns === \"function\") {\n      // @ts-expect-error: Expression produces a union type that is too complex to represent.\n      obj[key] = { enter: fns };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj: Visitor) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(nodeType: VIRTUAL_TYPES, fn: Function) {\n  const fnKey = `is${nodeType}`;\n  // @ts-expect-error we know virtualTypesValidators will contain `fnKey`, but TS doesn't\n  const validator = virtualTypesValidators[fnKey];\n  const newFn = function (this: unknown, path: NodePath) {\n    if (validator.call(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n  newFn.toString = () => fn.toString();\n  return newFn;\n}\n\nfunction shouldIgnoreKey(\n  key: string,\n): key is\n  | `_${string}`\n  | \"enter\"\n  | \"exit\"\n  | \"shouldSkip\"\n  | \"denylist\"\n  | \"noScope\"\n  | \"skipKeys\"\n  | \"blacklist\" {\n  // internal/hidden key\n  if (key[0] === \"_\") return true;\n\n  // ignore function keys\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  // ignore other options\n  if (key === \"denylist\" || key === \"noScope\" || key === \"skipKeys\") {\n    return true;\n  }\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (key === \"blacklist\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/*\nfunction mergePair(\n  dest: ExplVisitNode<unknown, Node>,\n  src: ExplVisitNode<unknown, Node>,\n);\n*/\nfunction mergePair(dest: any, src: any) {\n  for (const phase of [\"enter\", \"exit\"] as VisitPhase[]) {\n    if (!src[phase]) continue;\n    dest[phase] = [].concat(dest[phase] || [], src[phase]);\n  }\n}\n", "import type { Node } from \"@babel/types\";\nimport type NodePath from \"./path/index.ts\";\nimport type Scope from \"./scope/index.ts\";\nimport type { HubInterface } from \"./hub.ts\";\n\nlet pathsCache: WeakMap<\n  HubInterface | typeof nullHub,\n  WeakMap<Node, Map<Node, NodePath>>\n> = new WeakMap();\nexport { pathsCache as path };\nexport let scope: WeakMap<Node, Scope> = new WeakMap();\n\nexport function clear() {\n  clearPath();\n  clearScope();\n}\n\nexport function clearPath() {\n  pathsCache = new WeakMap();\n}\n\nexport function clearScope() {\n  scope = new WeakMap();\n}\n\n// NodePath#hub can be null, but it's not a valid weakmap key because it\n// cannot be collected by GC. Use an object, knowing tht it will not be\n// collected anyway. It's not a memory leak because pathsCache.get(nullHub)\n// is itself a weakmap, so its entries can still be collected.\nconst nullHub = Object.freeze({} as const);\n\nexport function getCachedPaths(hub: HubInterface | null, parent: Node) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // Only use Hub as part of the cache key in Babel 8, because it is a\n    // breaking change (it causes incompatibilities with older `@babel/core`\n    // versions: see https://github.com/babel/babel/pull/15759)\n    hub = null;\n  }\n  return pathsCache.get(hub ?? nullHub)?.get(parent);\n}\n\nexport function getOrCreateCachedPaths(hub: HubInterface | null, parent: Node) {\n  if (!process.env.BABEL_8_BREAKING) {\n    hub = null;\n  }\n\n  let parents = pathsCache.get(hub ?? nullHub);\n  if (!parents) pathsCache.set(hub ?? nullHub, (parents = new WeakMap()));\n\n  let paths = parents.get(parent);\n  if (!paths) parents.set(parent, (paths = new Map()));\n\n  return paths;\n}\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "import {\n  cloneNode,\n  exportNamedDeclaration,\n  exportSpecifier,\n  identifier,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n// eslint-disable-next-line import/no-extraneous-dependencies -- TODO: Avoid cycle\nimport type { NodePath } from \"@babel/traverse\";\n\nexport default function splitExportDeclaration(\n  exportDeclaration: NodePath<\n    t.ExportDefaultDeclaration | t.ExportNamedDeclaration\n  >,\n) {\n  if (\n    !exportDeclaration.isExportDeclaration() ||\n    exportDeclaration.isExportAllDeclaration()\n  ) {\n    throw new Error(\"Only default and named export declarations can be split.\");\n  }\n\n  // build specifiers that point back to this export declaration\n\n  if (exportDeclaration.isExportDefaultDeclaration()) {\n    const declaration = exportDeclaration.get(\"declaration\");\n    const standaloneDeclaration =\n      declaration.isFunctionDeclaration() || declaration.isClassDeclaration();\n    const exportExpr =\n      declaration.isFunctionExpression() || declaration.isClassExpression();\n\n    const scope = declaration.isScope()\n      ? declaration.scope.parent\n      : declaration.scope;\n\n    // @ts-expect-error id is not defined in expressions other than function/class\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n\n    if (!id) {\n      needBindingRegistration = true;\n\n      id = scope.generateUidIdentifier(\"default\");\n\n      if (standaloneDeclaration || exportExpr) {\n        declaration.node.id = cloneNode(id);\n      }\n    } else if (exportExpr && scope.hasBinding(id.name)) {\n      needBindingRegistration = true;\n\n      id = scope.generateUidIdentifier(id.name);\n    }\n\n    const updatedDeclaration = standaloneDeclaration\n      ? declaration.node\n      : variableDeclaration(\"var\", [\n          variableDeclarator(\n            cloneNode(id),\n            // @ts-expect-error When `standaloneDeclaration` is false, declaration must not be a Function/ClassDeclaration\n            declaration.node,\n          ),\n        ]);\n\n    const updatedExportDeclaration = exportNamedDeclaration(null, [\n      exportSpecifier(cloneNode(id), identifier(\"default\")),\n    ]);\n\n    exportDeclaration.insertAfter(updatedExportDeclaration);\n    exportDeclaration.replaceWith(updatedDeclaration);\n\n    if (needBindingRegistration) {\n      scope.registerDeclaration(exportDeclaration);\n    }\n\n    return exportDeclaration;\n  } else if (exportDeclaration.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const declaration = exportDeclaration.get(\"declaration\");\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n\n  exportDeclaration.insertAfter(aliasDeclar);\n  exportDeclaration.replaceWith(declaration.node);\n  return exportDeclaration;\n}\n", "// eslint-disable-next-line import/no-extraneous-dependencies -- TODO: Avoid cycle\nimport type { NodePath, Visitor } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.skipAllButComputedKey = function skipAllButComputedKey(\n    path: NodePath<t.Method | t.ClassProperty>,\n  ) {\n    path.skip();\n    if (path.node.computed) {\n      // requeue the computed key\n      path.context.maybeQueue(path.get(\"key\"));\n    }\n  };\n}\n\nexport function requeueComputedKeyAndDecorators(\n  path: NodePath<t.Method | t.Property>,\n) {\n  const { context, node } = path;\n  // @ts-expect-error ClassPrivateProperty does not have computed\n  if (node.computed) {\n    // requeue the computed key\n    context.maybeQueue(path.get(\"key\"));\n  }\n  if (node.decorators) {\n    for (const decorator of path.get(\"decorators\")) {\n      // requeue the decorators\n      context.maybeQueue(decorator);\n    }\n  }\n}\n\n// environmentVisitor should be used when traversing the whole class and not for specific class elements/methods.\n// For perf reasons, the environmentVisitor might be traversed with `{ noScope: true }`, which means `path.scope` is undefined.\n// Avoid using `path.scope` here\nconst visitor: Visitor = {\n  FunctionParent(path) {\n    if (path.isArrowFunctionExpression()) {\n      // arrows are not skipped because they inherit the context.\n      return;\n    } else {\n      path.skip();\n      if (path.isMethod()) {\n        requeueComputedKeyAndDecorators(path);\n      }\n    }\n  },\n  Property(path) {\n    if (path.isObjectProperty()) {\n      return;\n    }\n    path.skip();\n    requeueComputedKeyAndDecorators(path);\n  },\n};\n\nexport default visitor;\n", "import type Binding from \"../binding.ts\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\nimport * as t from \"@babel/types\";\nimport type { NodePath, Visitor } from \"../../index.ts\";\nimport { requeueComputedKeyAndDecorators } from \"@babel/helper-environment-visitor\";\nimport { traverseNode } from \"../../traverse-node.ts\";\nimport { explode } from \"../../visitors.ts\";\nimport type { Identifier } from \"@babel/types\";\n\nconst renameVisitor: Visitor<Renamer> = {\n  ReferencedIdentifier({ node }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (\n      !path.scope.bindingIdentifierEquals(\n        state.oldName,\n        state.binding.identifier,\n      )\n    ) {\n      path.skip();\n      if (path.isMethod()) {\n        requeueComputedKeyAndDecorators(path);\n      }\n    }\n  },\n\n  ObjectProperty({ node, scope }, state) {\n    const { name } = node.key as Identifier;\n    if (\n      node.shorthand &&\n      // In destructuring the identifier is already renamed by the\n      // AssignmentExpression|Declaration|VariableDeclarator visitor,\n      // while in object literals it's renamed later by the\n      // ReferencedIdentifier visitor.\n      (name === state.oldName || name === state.newName) &&\n      // Ignore shadowed bindings\n      scope.getBindingIdentifier(name) === state.binding.identifier\n    ) {\n      node.shorthand = false;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (node.extra?.shorthand) node.extra.shorthand = false;\n      }\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(\n    path: NodePath<t.AssignmentPattern | t.Declaration | t.VariableDeclarator>,\n    state,\n  ) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  },\n};\n\nexport default class Renamer {\n  constructor(binding: Binding, oldName: string, newName: string) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  declare oldName: string;\n  declare newName: string;\n  declare binding: Binding;\n\n  maybeConvertFromExportDeclaration(parentDeclar: NodePath) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration()) {\n      const { declaration } = maybeExportDeclar.node;\n      if (t.isDeclaration(declaration) && !declaration.id) {\n        return;\n      }\n    }\n\n    if (maybeExportDeclar.isExportAllDeclaration()) {\n      return;\n    }\n\n    splitExportDeclaration(\n      maybeExportDeclar as NodePath<\n        Exclude<t.ExportDeclaration, t.ExportAllDeclaration>\n      >,\n    );\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function declaration\n\n    // if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    // if (this.binding.kind !== \"hoisted\") return;\n\n    // path.node.id = identifier(this.oldName);\n    // path.node._blockHoist = 3;\n\n    // path.replaceWith(\n    //   variableDeclaration(\"let\", [\n    //     variableDeclarator(identifier(this.newName), toExpression(path.node)),\n    //   ]),\n    // );\n  }\n\n  maybeConvertFromClassFunctionExpression(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function expression\n\n    // if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    // if (this.binding.kind !== \"local\") return;\n\n    // path.node.id = identifier(this.oldName);\n\n    // this.binding.scope.parent.push({\n    //   id: identifier(this.newName),\n    // });\n\n    // path.replaceWith(\n    //   assignmentExpression(\"=\", identifier(this.newName), path.node),\n    // );\n  }\n\n  rename(/* Babel 7 - block?: t.Pattern | t.Scopable */) {\n    const { binding, oldName, newName } = this;\n    const { scope, path } = binding;\n\n    const parentDeclar = path.find(\n      path =>\n        path.isDeclaration() ||\n        path.isFunctionExpression() ||\n        path.isClassExpression(),\n    );\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n      if (bindingIds[oldName] === binding.identifier) {\n        // When we are renaming an exported identifier, we need to ensure that\n        // the exported binding keeps the old name.\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = process.env.BABEL_8_BREAKING\n      ? scope.block\n      : (arguments[0] as t.Pattern | t.Scopable) || scope.block;\n    traverseNode(\n      blockToTraverse,\n      explode(renameVisitor),\n      scope,\n      this,\n      scope.path,\n      // When blockToTraverse is a SwitchStatement, the discriminant\n      // is not part of the current scope and thus should be skipped.\n      { discriminant: true },\n    );\n\n    if (process.env.BABEL_8_BREAKING) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    } else if (!arguments[0]) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(path);\n      this.maybeConvertFromClassFunctionExpression(path);\n    }\n  }\n}\n", "import type NodePath from \"../path/index.ts\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"./index.ts\";\n\nexport type BindingKind =\n  | \"var\" /* var declarator */\n  | \"let\" /* let declarator, class declaration id, catch clause parameters */\n  | \"const\" /* const/using declarator */\n  | \"module\" /* import specifiers */\n  | \"hoisted\" /* function declaration id */\n  | \"param\" /* function declaration parameters */\n  | \"local\" /* function expression id, class expression id */\n  | \"unknown\"; /* export specifiers */\n/**\n * This class is responsible for a binding inside of a scope.\n *\n * It tracks the following:\n *\n *  * Node path.\n *  * Amount of times referenced by other nodes.\n *  * Paths to nodes that reassign or modify this binding.\n *  * The kind of binding. (Is it a parameter, declaration etc)\n */\n\nexport default class Binding {\n  identifier: t.Identifier;\n  scope: Scope;\n  path: NodePath;\n  kind: BindingKind;\n\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind,\n  }: {\n    identifier: t.Identifier;\n    scope: Scope;\n    path: NodePath;\n    kind: BindingKind;\n  }) {\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n\n    if ((kind === \"var\" || kind === \"hoisted\") && isDeclaredInLoop(path)) {\n      this.reassign(path);\n    }\n\n    this.clearValue();\n  }\n\n  constantViolations: Array<NodePath> = [];\n  constant: boolean = true;\n\n  referencePaths: Array<NodePath> = [];\n  referenced: boolean = false;\n  references: number = 0;\n\n  declare hasDeoptedValue: boolean;\n  declare hasValue: boolean;\n  declare value: any;\n\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n\n  setValue(value: any) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n\n  /**\n   * Register a constant violation with the provided `path`.\n   */\n\n  reassign(path: NodePath) {\n    this.constant = false;\n    if (this.constantViolations.indexOf(path) !== -1) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n\n  /**\n   * Increment the amount of references to this binding.\n   */\n\n  reference(path: NodePath) {\n    if (this.referencePaths.indexOf(path) !== -1) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n\n  /**\n   * Decrement the amount of references to this binding.\n   */\n\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\n\nfunction isDeclaredInLoop(path: NodePath) {\n  for (\n    let { parentPath, key } = path;\n    parentPath;\n    { parentPath, key } = parentPath\n  ) {\n    if (parentPath.isFunctionParent()) return false;\n    if (\n      parentPath.isWhile() ||\n      parentPath.isForXStatement() ||\n      (parentPath.isForStatement() && key === \"body\")\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n", "{\n\t\"builtin\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Atomics\": false,\n\t\t\"BigInt\": false,\n\t\t\"BigInt64Array\": false,\n\t\t\"BigUint64Array\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"globalThis\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"SharedArrayBuffer\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"es5\": {\n\t\t\"Array\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"RegExp\": false,\n\t\t\"String\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false\n\t},\n\t\"es2015\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"es2017\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Atomics\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"SharedArrayBuffer\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"browser\": {\n\t\t\"AbortController\": false,\n\t\t\"AbortSignal\": false,\n\t\t\"addEventListener\": false,\n\t\t\"alert\": false,\n\t\t\"AnalyserNode\": false,\n\t\t\"Animation\": false,\n\t\t\"AnimationEffectReadOnly\": false,\n\t\t\"AnimationEffectTiming\": false,\n\t\t\"AnimationEffectTimingReadOnly\": false,\n\t\t\"AnimationEvent\": false,\n\t\t\"AnimationPlaybackEvent\": false,\n\t\t\"AnimationTimeline\": false,\n\t\t\"applicationCache\": false,\n\t\t\"ApplicationCache\": false,\n\t\t\"ApplicationCacheErrorEvent\": false,\n\t\t\"atob\": false,\n\t\t\"Attr\": false,\n\t\t\"Audio\": false,\n\t\t\"AudioBuffer\": false,\n\t\t\"AudioBufferSourceNode\": false,\n\t\t\"AudioContext\": false,\n\t\t\"AudioDestinationNode\": false,\n\t\t\"AudioListener\": false,\n\t\t\"AudioNode\": false,\n\t\t\"AudioParam\": false,\n\t\t\"AudioProcessingEvent\": false,\n\t\t\"AudioScheduledSourceNode\": false,\n\t\t\"AudioWorkletGlobalScope \": false,\n\t\t\"AudioWorkletNode\": false,\n\t\t\"AudioWorkletProcessor\": false,\n\t\t\"BarProp\": false,\n\t\t\"BaseAudioContext\": false,\n\t\t\"BatteryManager\": false,\n\t\t\"BeforeUnloadEvent\": false,\n\t\t\"BiquadFilterNode\": false,\n\t\t\"Blob\": false,\n\t\t\"BlobEvent\": false,\n\t\t\"blur\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"BudgetService\": false,\n\t\t\"ByteLengthQueuingStrategy\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"CacheStorage\": false,\n\t\t\"cancelAnimationFrame\": false,\n\t\t\"cancelIdleCallback\": false,\n\t\t\"CanvasCaptureMediaStreamTrack\": false,\n\t\t\"CanvasGradient\": false,\n\t\t\"CanvasPattern\": false,\n\t\t\"CanvasRenderingContext2D\": false,\n\t\t\"ChannelMergerNode\": false,\n\t\t\"ChannelSplitterNode\": false,\n\t\t\"CharacterData\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"clientInformation\": false,\n\t\t\"ClipboardEvent\": false,\n\t\t\"close\": false,\n\t\t\"closed\": false,\n\t\t\"CloseEvent\": false,\n\t\t\"Comment\": false,\n\t\t\"CompositionEvent\": false,\n\t\t\"confirm\": false,\n\t\t\"console\": false,\n\t\t\"ConstantSourceNode\": false,\n\t\t\"ConvolverNode\": false,\n\t\t\"CountQueuingStrategy\": false,\n\t\t\"createImageBitmap\": false,\n\t\t\"Credential\": false,\n\t\t\"CredentialsContainer\": false,\n\t\t\"crypto\": false,\n\t\t\"Crypto\": false,\n\t\t\"CryptoKey\": false,\n\t\t\"CSS\": false,\n\t\t\"CSSConditionRule\": false,\n\t\t\"CSSFontFaceRule\": false,\n\t\t\"CSSGroupingRule\": false,\n\t\t\"CSSImportRule\": false,\n\t\t\"CSSKeyframeRule\": false,\n\t\t\"CSSKeyframesRule\": false,\n\t\t\"CSSMediaRule\": false,\n\t\t\"CSSNamespaceRule\": false,\n\t\t\"CSSPageRule\": false,\n\t\t\"CSSRule\": false,\n\t\t\"CSSRuleList\": false,\n\t\t\"CSSStyleDeclaration\": false,\n\t\t\"CSSStyleRule\": false,\n\t\t\"CSSStyleSheet\": false,\n\t\t\"CSSSupportsRule\": false,\n\t\t\"CustomElementRegistry\": false,\n\t\t\"customElements\": false,\n\t\t\"CustomEvent\": false,\n\t\t\"DataTransfer\": false,\n\t\t\"DataTransferItem\": false,\n\t\t\"DataTransferItemList\": false,\n\t\t\"defaultstatus\": false,\n\t\t\"defaultStatus\": false,\n\t\t\"DelayNode\": false,\n\t\t\"DeviceMotionEvent\": false,\n\t\t\"DeviceOrientationEvent\": false,\n\t\t\"devicePixelRatio\": false,\n\t\t\"dispatchEvent\": false,\n\t\t\"document\": false,\n\t\t\"Document\": false,\n\t\t\"DocumentFragment\": false,\n\t\t\"DocumentType\": false,\n\t\t\"DOMError\": false,\n\t\t\"DOMException\": false,\n\t\t\"DOMImplementation\": false,\n\t\t\"DOMMatrix\": false,\n\t\t\"DOMMatrixReadOnly\": false,\n\t\t\"DOMParser\": false,\n\t\t\"DOMPoint\": false,\n\t\t\"DOMPointReadOnly\": false,\n\t\t\"DOMQuad\": false,\n\t\t\"DOMRect\": false,\n\t\t\"DOMRectReadOnly\": false,\n\t\t\"DOMStringList\": false,\n\t\t\"DOMStringMap\": false,\n\t\t\"DOMTokenList\": false,\n\t\t\"DragEvent\": false,\n\t\t\"DynamicsCompressorNode\": false,\n\t\t\"Element\": false,\n\t\t\"ErrorEvent\": false,\n\t\t\"event\": false,\n\t\t\"Event\": false,\n\t\t\"EventSource\": false,\n\t\t\"EventTarget\": false,\n\t\t\"external\": false,\n\t\t\"fetch\": false,\n\t\t\"File\": false,\n\t\t\"FileList\": false,\n\t\t\"FileReader\": false,\n\t\t\"find\": false,\n\t\t\"focus\": false,\n\t\t\"FocusEvent\": false,\n\t\t\"FontFace\": false,\n\t\t\"FontFaceSetLoadEvent\": false,\n\t\t\"FormData\": false,\n\t\t\"frameElement\": false,\n\t\t\"frames\": false,\n\t\t\"GainNode\": false,\n\t\t\"Gamepad\": false,\n\t\t\"GamepadButton\": false,\n\t\t\"GamepadEvent\": false,\n\t\t\"getComputedStyle\": false,\n\t\t\"getSelection\": false,\n\t\t\"HashChangeEvent\": false,\n\t\t\"Headers\": false,\n\t\t\"history\": false,\n\t\t\"History\": false,\n\t\t\"HTMLAllCollection\": false,\n\t\t\"HTMLAnchorElement\": false,\n\t\t\"HTMLAreaElement\": false,\n\t\t\"HTMLAudioElement\": false,\n\t\t\"HTMLBaseElement\": false,\n\t\t\"HTMLBodyElement\": false,\n\t\t\"HTMLBRElement\": false,\n\t\t\"HTMLButtonElement\": false,\n\t\t\"HTMLCanvasElement\": false,\n\t\t\"HTMLCollection\": false,\n\t\t\"HTMLContentElement\": false,\n\t\t\"HTMLDataElement\": false,\n\t\t\"HTMLDataListElement\": false,\n\t\t\"HTMLDetailsElement\": false,\n\t\t\"HTMLDialogElement\": false,\n\t\t\"HTMLDirectoryElement\": false,\n\t\t\"HTMLDivElement\": false,\n\t\t\"HTMLDListElement\": false,\n\t\t\"HTMLDocument\": false,\n\t\t\"HTMLElement\": false,\n\t\t\"HTMLEmbedElement\": false,\n\t\t\"HTMLFieldSetElement\": false,\n\t\t\"HTMLFontElement\": false,\n\t\t\"HTMLFormControlsCollection\": false,\n\t\t\"HTMLFormElement\": false,\n\t\t\"HTMLFrameElement\": false,\n\t\t\"HTMLFrameSetElement\": false,\n\t\t\"HTMLHeadElement\": false,\n\t\t\"HTMLHeadingElement\": false,\n\t\t\"HTMLHRElement\": false,\n\t\t\"HTMLHtmlElement\": false,\n\t\t\"HTMLIFrameElement\": false,\n\t\t\"HTMLImageElement\": false,\n\t\t\"HTMLInputElement\": false,\n\t\t\"HTMLLabelElement\": false,\n\t\t\"HTMLLegendElement\": false,\n\t\t\"HTMLLIElement\": false,\n\t\t\"HTMLLinkElement\": false,\n\t\t\"HTMLMapElement\": false,\n\t\t\"HTMLMarqueeElement\": false,\n\t\t\"HTMLMediaElement\": false,\n\t\t\"HTMLMenuElement\": false,\n\t\t\"HTMLMetaElement\": false,\n\t\t\"HTMLMeterElement\": false,\n\t\t\"HTMLModElement\": false,\n\t\t\"HTMLObjectElement\": false,\n\t\t\"HTMLOListElement\": false,\n\t\t\"HTMLOptGroupElement\": false,\n\t\t\"HTMLOptionElement\": false,\n\t\t\"HTMLOptionsCollection\": false,\n\t\t\"HTMLOutputElement\": false,\n\t\t\"HTMLParagraphElement\": false,\n\t\t\"HTMLParamElement\": false,\n\t\t\"HTMLPictureElement\": false,\n\t\t\"HTMLPreElement\": false,\n\t\t\"HTMLProgressElement\": false,\n\t\t\"HTMLQuoteElement\": false,\n\t\t\"HTMLScriptElement\": false,\n\t\t\"HTMLSelectElement\": false,\n\t\t\"HTMLShadowElement\": false,\n\t\t\"HTMLSlotElement\": false,\n\t\t\"HTMLSourceElement\": false,\n\t\t\"HTMLSpanElement\": false,\n\t\t\"HTMLStyleElement\": false,\n\t\t\"HTMLTableCaptionElement\": false,\n\t\t\"HTMLTableCellElement\": false,\n\t\t\"HTMLTableColElement\": false,\n\t\t\"HTMLTableElement\": false,\n\t\t\"HTMLTableRowElement\": false,\n\t\t\"HTMLTableSectionElement\": false,\n\t\t\"HTMLTemplateElement\": false,\n\t\t\"HTMLTextAreaElement\": false,\n\t\t\"HTMLTimeElement\": false,\n\t\t\"HTMLTitleElement\": false,\n\t\t\"HTMLTrackElement\": false,\n\t\t\"HTMLUListElement\": false,\n\t\t\"HTMLUnknownElement\": false,\n\t\t\"HTMLVideoElement\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"IdleDeadline\": false,\n\t\t\"IIRFilterNode\": false,\n\t\t\"Image\": false,\n\t\t\"ImageBitmap\": false,\n\t\t\"ImageBitmapRenderingContext\": false,\n\t\t\"ImageCapture\": false,\n\t\t\"ImageData\": false,\n\t\t\"indexedDB\": false,\n\t\t\"innerHeight\": false,\n\t\t\"innerWidth\": false,\n\t\t\"InputEvent\": false,\n\t\t\"IntersectionObserver\": false,\n\t\t\"IntersectionObserverEntry\": false,\n\t\t\"Intl\": false,\n\t\t\"isSecureContext\": false,\n\t\t\"KeyboardEvent\": false,\n\t\t\"KeyframeEffect\": false,\n\t\t\"KeyframeEffectReadOnly\": false,\n\t\t\"length\": false,\n\t\t\"localStorage\": false,\n\t\t\"location\": true,\n\t\t\"Location\": false,\n\t\t\"locationbar\": false,\n\t\t\"matchMedia\": false,\n\t\t\"MediaDeviceInfo\": false,\n\t\t\"MediaDevices\": false,\n\t\t\"MediaElementAudioSourceNode\": false,\n\t\t\"MediaEncryptedEvent\": false,\n\t\t\"MediaError\": false,\n\t\t\"MediaKeyMessageEvent\": false,\n\t\t\"MediaKeySession\": false,\n\t\t\"MediaKeyStatusMap\": false,\n\t\t\"MediaKeySystemAccess\": false,\n\t\t\"MediaList\": false,\n\t\t\"MediaQueryList\": false,\n\t\t\"MediaQueryListEvent\": false,\n\t\t\"MediaRecorder\": false,\n\t\t\"MediaSettingsRange\": false,\n\t\t\"MediaSource\": false,\n\t\t\"MediaStream\": false,\n\t\t\"MediaStreamAudioDestinationNode\": false,\n\t\t\"MediaStreamAudioSourceNode\": false,\n\t\t\"MediaStreamEvent\": false,\n\t\t\"MediaStreamTrack\": false,\n\t\t\"MediaStreamTrackEvent\": false,\n\t\t\"menubar\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessageEvent\": false,\n\t\t\"MessagePort\": false,\n\t\t\"MIDIAccess\": false,\n\t\t\"MIDIConnectionEvent\": false,\n\t\t\"MIDIInput\": false,\n\t\t\"MIDIInputMap\": false,\n\t\t\"MIDIMessageEvent\": false,\n\t\t\"MIDIOutput\": false,\n\t\t\"MIDIOutputMap\": false,\n\t\t\"MIDIPort\": false,\n\t\t\"MimeType\": false,\n\t\t\"MimeTypeArray\": false,\n\t\t\"MouseEvent\": false,\n\t\t\"moveBy\": false,\n\t\t\"moveTo\": false,\n\t\t\"MutationEvent\": false,\n\t\t\"MutationObserver\": false,\n\t\t\"MutationRecord\": false,\n\t\t\"name\": false,\n\t\t\"NamedNodeMap\": false,\n\t\t\"NavigationPreloadManager\": false,\n\t\t\"navigator\": false,\n\t\t\"Navigator\": false,\n\t\t\"NetworkInformation\": false,\n\t\t\"Node\": false,\n\t\t\"NodeFilter\": false,\n\t\t\"NodeIterator\": false,\n\t\t\"NodeList\": false,\n\t\t\"Notification\": false,\n\t\t\"OfflineAudioCompletionEvent\": false,\n\t\t\"OfflineAudioContext\": false,\n\t\t\"offscreenBuffering\": false,\n\t\t\"OffscreenCanvas\": true,\n\t\t\"onabort\": true,\n\t\t\"onafterprint\": true,\n\t\t\"onanimationend\": true,\n\t\t\"onanimationiteration\": true,\n\t\t\"onanimationstart\": true,\n\t\t\"onappinstalled\": true,\n\t\t\"onauxclick\": true,\n\t\t\"onbeforeinstallprompt\": true,\n\t\t\"onbeforeprint\": true,\n\t\t\"onbeforeunload\": true,\n\t\t\"onblur\": true,\n\t\t\"oncancel\": true,\n\t\t\"oncanplay\": true,\n\t\t\"oncanplaythrough\": true,\n\t\t\"onchange\": true,\n\t\t\"onclick\": true,\n\t\t\"onclose\": true,\n\t\t\"oncontextmenu\": true,\n\t\t\"oncuechange\": true,\n\t\t\"ondblclick\": true,\n\t\t\"ondevicemotion\": true,\n\t\t\"ondeviceorientation\": true,\n\t\t\"ondeviceorientationabsolute\": true,\n\t\t\"ondrag\": true,\n\t\t\"ondragend\": true,\n\t\t\"ondragenter\": true,\n\t\t\"ondragleave\": true,\n\t\t\"ondragover\": true,\n\t\t\"ondragstart\": true,\n\t\t\"ondrop\": true,\n\t\t\"ondurationchange\": true,\n\t\t\"onemptied\": true,\n\t\t\"onended\": true,\n\t\t\"onerror\": true,\n\t\t\"onfocus\": true,\n\t\t\"ongotpointercapture\": true,\n\t\t\"onhashchange\": true,\n\t\t\"oninput\": true,\n\t\t\"oninvalid\": true,\n\t\t\"onkeydown\": true,\n\t\t\"onkeypress\": true,\n\t\t\"onkeyup\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onload\": true,\n\t\t\"onloadeddata\": true,\n\t\t\"onloadedmetadata\": true,\n\t\t\"onloadstart\": true,\n\t\t\"onlostpointercapture\": true,\n\t\t\"onmessage\": true,\n\t\t\"onmessageerror\": true,\n\t\t\"onmousedown\": true,\n\t\t\"onmouseenter\": true,\n\t\t\"onmouseleave\": true,\n\t\t\"onmousemove\": true,\n\t\t\"onmouseout\": true,\n\t\t\"onmouseover\": true,\n\t\t\"onmouseup\": true,\n\t\t\"onmousewheel\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onpagehide\": true,\n\t\t\"onpageshow\": true,\n\t\t\"onpause\": true,\n\t\t\"onplay\": true,\n\t\t\"onplaying\": true,\n\t\t\"onpointercancel\": true,\n\t\t\"onpointerdown\": true,\n\t\t\"onpointerenter\": true,\n\t\t\"onpointerleave\": true,\n\t\t\"onpointermove\": true,\n\t\t\"onpointerout\": true,\n\t\t\"onpointerover\": true,\n\t\t\"onpointerup\": true,\n\t\t\"onpopstate\": true,\n\t\t\"onprogress\": true,\n\t\t\"onratechange\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onreset\": true,\n\t\t\"onresize\": true,\n\t\t\"onscroll\": true,\n\t\t\"onsearch\": true,\n\t\t\"onseeked\": true,\n\t\t\"onseeking\": true,\n\t\t\"onselect\": true,\n\t\t\"onstalled\": true,\n\t\t\"onstorage\": true,\n\t\t\"onsubmit\": true,\n\t\t\"onsuspend\": true,\n\t\t\"ontimeupdate\": true,\n\t\t\"ontoggle\": true,\n\t\t\"ontransitionend\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"onunload\": true,\n\t\t\"onvolumechange\": true,\n\t\t\"onwaiting\": true,\n\t\t\"onwheel\": true,\n\t\t\"open\": false,\n\t\t\"openDatabase\": false,\n\t\t\"opener\": false,\n\t\t\"Option\": false,\n\t\t\"origin\": false,\n\t\t\"OscillatorNode\": false,\n\t\t\"outerHeight\": false,\n\t\t\"outerWidth\": false,\n\t\t\"PageTransitionEvent\": false,\n\t\t\"pageXOffset\": false,\n\t\t\"pageYOffset\": false,\n\t\t\"PannerNode\": false,\n\t\t\"parent\": false,\n\t\t\"Path2D\": false,\n\t\t\"PaymentAddress\": false,\n\t\t\"PaymentRequest\": false,\n\t\t\"PaymentRequestUpdateEvent\": false,\n\t\t\"PaymentResponse\": false,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceLongTaskTiming\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceNavigationTiming\": false,\n\t\t\"PerformanceObserver\": false,\n\t\t\"PerformanceObserverEntryList\": false,\n\t\t\"PerformancePaintTiming\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"PeriodicWave\": false,\n\t\t\"Permissions\": false,\n\t\t\"PermissionStatus\": false,\n\t\t\"personalbar\": false,\n\t\t\"PhotoCapabilities\": false,\n\t\t\"Plugin\": false,\n\t\t\"PluginArray\": false,\n\t\t\"PointerEvent\": false,\n\t\t\"PopStateEvent\": false,\n\t\t\"postMessage\": false,\n\t\t\"Presentation\": false,\n\t\t\"PresentationAvailability\": false,\n\t\t\"PresentationConnection\": false,\n\t\t\"PresentationConnectionAvailableEvent\": false,\n\t\t\"PresentationConnectionCloseEvent\": false,\n\t\t\"PresentationConnectionList\": false,\n\t\t\"PresentationReceiver\": false,\n\t\t\"PresentationRequest\": false,\n\t\t\"print\": false,\n\t\t\"ProcessingInstruction\": false,\n\t\t\"ProgressEvent\": false,\n\t\t\"PromiseRejectionEvent\": false,\n\t\t\"prompt\": false,\n\t\t\"PushManager\": false,\n\t\t\"PushSubscription\": false,\n\t\t\"PushSubscriptionOptions\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"RadioNodeList\": false,\n\t\t\"Range\": false,\n\t\t\"ReadableStream\": false,\n\t\t\"registerProcessor\": false,\n\t\t\"RemotePlayback\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"requestAnimationFrame\": false,\n\t\t\"requestIdleCallback\": false,\n\t\t\"resizeBy\": false,\n\t\t\"ResizeObserver\": false,\n\t\t\"ResizeObserverEntry\": false,\n\t\t\"resizeTo\": false,\n\t\t\"Response\": false,\n\t\t\"RTCCertificate\": false,\n\t\t\"RTCDataChannel\": false,\n\t\t\"RTCDataChannelEvent\": false,\n\t\t\"RTCDtlsTransport\": false,\n\t\t\"RTCIceCandidate\": false,\n\t\t\"RTCIceGatherer\": false,\n\t\t\"RTCIceTransport\": false,\n\t\t\"RTCPeerConnection\": false,\n\t\t\"RTCPeerConnectionIceEvent\": false,\n\t\t\"RTCRtpContributingSource\": false,\n\t\t\"RTCRtpReceiver\": false,\n\t\t\"RTCRtpSender\": false,\n\t\t\"RTCSctpTransport\": false,\n\t\t\"RTCSessionDescription\": false,\n\t\t\"RTCStatsReport\": false,\n\t\t\"RTCTrackEvent\": false,\n\t\t\"screen\": false,\n\t\t\"Screen\": false,\n\t\t\"screenLeft\": false,\n\t\t\"ScreenOrientation\": false,\n\t\t\"screenTop\": false,\n\t\t\"screenX\": false,\n\t\t\"screenY\": false,\n\t\t\"ScriptProcessorNode\": false,\n\t\t\"scroll\": false,\n\t\t\"scrollbars\": false,\n\t\t\"scrollBy\": false,\n\t\t\"scrollTo\": false,\n\t\t\"scrollX\": false,\n\t\t\"scrollY\": false,\n\t\t\"SecurityPolicyViolationEvent\": false,\n\t\t\"Selection\": false,\n\t\t\"self\": false,\n\t\t\"ServiceWorker\": false,\n\t\t\"ServiceWorkerContainer\": false,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"sessionStorage\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"ShadowRoot\": false,\n\t\t\"SharedWorker\": false,\n\t\t\"SourceBuffer\": false,\n\t\t\"SourceBufferList\": false,\n\t\t\"speechSynthesis\": false,\n\t\t\"SpeechSynthesisEvent\": false,\n\t\t\"SpeechSynthesisUtterance\": false,\n\t\t\"StaticRange\": false,\n\t\t\"status\": false,\n\t\t\"statusbar\": false,\n\t\t\"StereoPannerNode\": false,\n\t\t\"stop\": false,\n\t\t\"Storage\": false,\n\t\t\"StorageEvent\": false,\n\t\t\"StorageManager\": false,\n\t\t\"styleMedia\": false,\n\t\t\"StyleSheet\": false,\n\t\t\"StyleSheetList\": false,\n\t\t\"SubtleCrypto\": false,\n\t\t\"SVGAElement\": false,\n\t\t\"SVGAngle\": false,\n\t\t\"SVGAnimatedAngle\": false,\n\t\t\"SVGAnimatedBoolean\": false,\n\t\t\"SVGAnimatedEnumeration\": false,\n\t\t\"SVGAnimatedInteger\": false,\n\t\t\"SVGAnimatedLength\": false,\n\t\t\"SVGAnimatedLengthList\": false,\n\t\t\"SVGAnimatedNumber\": false,\n\t\t\"SVGAnimatedNumberList\": false,\n\t\t\"SVGAnimatedPreserveAspectRatio\": false,\n\t\t\"SVGAnimatedRect\": false,\n\t\t\"SVGAnimatedString\": false,\n\t\t\"SVGAnimatedTransformList\": false,\n\t\t\"SVGAnimateElement\": false,\n\t\t\"SVGAnimateMotionElement\": false,\n\t\t\"SVGAnimateTransformElement\": false,\n\t\t\"SVGAnimationElement\": false,\n\t\t\"SVGCircleElement\": false,\n\t\t\"SVGClipPathElement\": false,\n\t\t\"SVGComponentTransferFunctionElement\": false,\n\t\t\"SVGDefsElement\": false,\n\t\t\"SVGDescElement\": false,\n\t\t\"SVGDiscardElement\": false,\n\t\t\"SVGElement\": false,\n\t\t\"SVGEllipseElement\": false,\n\t\t\"SVGFEBlendElement\": false,\n\t\t\"SVGFEColorMatrixElement\": false,\n\t\t\"SVGFEComponentTransferElement\": false,\n\t\t\"SVGFECompositeElement\": false,\n\t\t\"SVGFEConvolveMatrixElement\": false,\n\t\t\"SVGFEDiffuseLightingElement\": false,\n\t\t\"SVGFEDisplacementMapElement\": false,\n\t\t\"SVGFEDistantLightElement\": false,\n\t\t\"SVGFEDropShadowElement\": false,\n\t\t\"SVGFEFloodElement\": false,\n\t\t\"SVGFEFuncAElement\": false,\n\t\t\"SVGFEFuncBElement\": false,\n\t\t\"SVGFEFuncGElement\": false,\n\t\t\"SVGFEFuncRElement\": false,\n\t\t\"SVGFEGaussianBlurElement\": false,\n\t\t\"SVGFEImageElement\": false,\n\t\t\"SVGFEMergeElement\": false,\n\t\t\"SVGFEMergeNodeElement\": false,\n\t\t\"SVGFEMorphologyElement\": false,\n\t\t\"SVGFEOffsetElement\": false,\n\t\t\"SVGFEPointLightElement\": false,\n\t\t\"SVGFESpecularLightingElement\": false,\n\t\t\"SVGFESpotLightElement\": false,\n\t\t\"SVGFETileElement\": false,\n\t\t\"SVGFETurbulenceElement\": false,\n\t\t\"SVGFilterElement\": false,\n\t\t\"SVGForeignObjectElement\": false,\n\t\t\"SVGGElement\": false,\n\t\t\"SVGGeometryElement\": false,\n\t\t\"SVGGradientElement\": false,\n\t\t\"SVGGraphicsElement\": false,\n\t\t\"SVGImageElement\": false,\n\t\t\"SVGLength\": false,\n\t\t\"SVGLengthList\": false,\n\t\t\"SVGLinearGradientElement\": false,\n\t\t\"SVGLineElement\": false,\n\t\t\"SVGMarkerElement\": false,\n\t\t\"SVGMaskElement\": false,\n\t\t\"SVGMatrix\": false,\n\t\t\"SVGMetadataElement\": false,\n\t\t\"SVGMPathElement\": false,\n\t\t\"SVGNumber\": false,\n\t\t\"SVGNumberList\": false,\n\t\t\"SVGPathElement\": false,\n\t\t\"SVGPatternElement\": false,\n\t\t\"SVGPoint\": false,\n\t\t\"SVGPointList\": false,\n\t\t\"SVGPolygonElement\": false,\n\t\t\"SVGPolylineElement\": false,\n\t\t\"SVGPreserveAspectRatio\": false,\n\t\t\"SVGRadialGradientElement\": false,\n\t\t\"SVGRect\": false,\n\t\t\"SVGRectElement\": false,\n\t\t\"SVGScriptElement\": false,\n\t\t\"SVGSetElement\": false,\n\t\t\"SVGStopElement\": false,\n\t\t\"SVGStringList\": false,\n\t\t\"SVGStyleElement\": false,\n\t\t\"SVGSVGElement\": false,\n\t\t\"SVGSwitchElement\": false,\n\t\t\"SVGSymbolElement\": false,\n\t\t\"SVGTextContentElement\": false,\n\t\t\"SVGTextElement\": false,\n\t\t\"SVGTextPathElement\": false,\n\t\t\"SVGTextPositioningElement\": false,\n\t\t\"SVGTitleElement\": false,\n\t\t\"SVGTransform\": false,\n\t\t\"SVGTransformList\": false,\n\t\t\"SVGTSpanElement\": false,\n\t\t\"SVGUnitTypes\": false,\n\t\t\"SVGUseElement\": false,\n\t\t\"SVGViewElement\": false,\n\t\t\"TaskAttributionTiming\": false,\n\t\t\"Text\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"TextEvent\": false,\n\t\t\"TextMetrics\": false,\n\t\t\"TextTrack\": false,\n\t\t\"TextTrackCue\": false,\n\t\t\"TextTrackCueList\": false,\n\t\t\"TextTrackList\": false,\n\t\t\"TimeRanges\": false,\n\t\t\"toolbar\": false,\n\t\t\"top\": false,\n\t\t\"Touch\": false,\n\t\t\"TouchEvent\": false,\n\t\t\"TouchList\": false,\n\t\t\"TrackEvent\": false,\n\t\t\"TransitionEvent\": false,\n\t\t\"TreeWalker\": false,\n\t\t\"UIEvent\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"ValidityState\": false,\n\t\t\"visualViewport\": false,\n\t\t\"VisualViewport\": false,\n\t\t\"VTTCue\": false,\n\t\t\"WaveShaperNode\": false,\n\t\t\"WebAssembly\": false,\n\t\t\"WebGL2RenderingContext\": false,\n\t\t\"WebGLActiveInfo\": false,\n\t\t\"WebGLBuffer\": false,\n\t\t\"WebGLContextEvent\": false,\n\t\t\"WebGLFramebuffer\": false,\n\t\t\"WebGLProgram\": false,\n\t\t\"WebGLQuery\": false,\n\t\t\"WebGLRenderbuffer\": false,\n\t\t\"WebGLRenderingContext\": false,\n\t\t\"WebGLSampler\": false,\n\t\t\"WebGLShader\": false,\n\t\t\"WebGLShaderPrecisionFormat\": false,\n\t\t\"WebGLSync\": false,\n\t\t\"WebGLTexture\": false,\n\t\t\"WebGLTransformFeedback\": false,\n\t\t\"WebGLUniformLocation\": false,\n\t\t\"WebGLVertexArrayObject\": false,\n\t\t\"WebSocket\": false,\n\t\t\"WheelEvent\": false,\n\t\t\"window\": false,\n\t\t\"Window\": false,\n\t\t\"Worker\": false,\n\t\t\"WritableStream\": false,\n\t\t\"XMLDocument\": false,\n\t\t\"XMLHttpRequest\": false,\n\t\t\"XMLHttpRequestEventTarget\": false,\n\t\t\"XMLHttpRequestUpload\": false,\n\t\t\"XMLSerializer\": false,\n\t\t\"XPathEvaluator\": false,\n\t\t\"XPathExpression\": false,\n\t\t\"XPathResult\": false,\n\t\t\"XSLTProcessor\": false\n\t},\n\t\"worker\": {\n\t\t\"addEventListener\": false,\n\t\t\"applicationCache\": false,\n\t\t\"atob\": false,\n\t\t\"Blob\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"close\": true,\n\t\t\"console\": false,\n\t\t\"fetch\": false,\n\t\t\"FileReaderSync\": false,\n\t\t\"FormData\": false,\n\t\t\"Headers\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"ImageData\": false,\n\t\t\"importScripts\": true,\n\t\t\"indexedDB\": false,\n\t\t\"location\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessagePort\": false,\n\t\t\"name\": false,\n\t\t\"navigator\": false,\n\t\t\"Notification\": false,\n\t\t\"onclose\": true,\n\t\t\"onconnect\": true,\n\t\t\"onerror\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onmessage\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"postMessage\": true,\n\t\t\"Promise\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"Response\": false,\n\t\t\"self\": true,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"WebSocket\": false,\n\t\t\"Worker\": false,\n\t\t\"WorkerGlobalScope\": false,\n\t\t\"XMLHttpRequest\": false\n\t},\n\t\"node\": {\n\t\t\"__dirname\": false,\n\t\t\"__filename\": false,\n\t\t\"Buffer\": false,\n\t\t\"clearImmediate\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"console\": false,\n\t\t\"exports\": true,\n\t\t\"global\": false,\n\t\t\"Intl\": false,\n\t\t\"module\": false,\n\t\t\"process\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"require\": false,\n\t\t\"setImmediate\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false\n\t},\n\t\"commonjs\": {\n\t\t\"exports\": true,\n\t\t\"global\": false,\n\t\t\"module\": false,\n\t\t\"require\": false\n\t},\n\t\"amd\": {\n\t\t\"define\": false,\n\t\t\"require\": false\n\t},\n\t\"mocha\": {\n\t\t\"after\": false,\n\t\t\"afterEach\": false,\n\t\t\"before\": false,\n\t\t\"beforeEach\": false,\n\t\t\"context\": false,\n\t\t\"describe\": false,\n\t\t\"it\": false,\n\t\t\"mocha\": false,\n\t\t\"run\": false,\n\t\t\"setup\": false,\n\t\t\"specify\": false,\n\t\t\"suite\": false,\n\t\t\"suiteSetup\": false,\n\t\t\"suiteTeardown\": false,\n\t\t\"teardown\": false,\n\t\t\"test\": false,\n\t\t\"xcontext\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false,\n\t\t\"xspecify\": false\n\t},\n\t\"jasmine\": {\n\t\t\"afterAll\": false,\n\t\t\"afterEach\": false,\n\t\t\"beforeAll\": false,\n\t\t\"beforeEach\": false,\n\t\t\"describe\": false,\n\t\t\"expect\": false,\n\t\t\"fail\": false,\n\t\t\"fdescribe\": false,\n\t\t\"fit\": false,\n\t\t\"it\": false,\n\t\t\"jasmine\": false,\n\t\t\"pending\": false,\n\t\t\"runs\": false,\n\t\t\"spyOn\": false,\n\t\t\"spyOnProperty\": false,\n\t\t\"waits\": false,\n\t\t\"waitsFor\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false\n\t},\n\t\"jest\": {\n\t\t\"afterAll\": false,\n\t\t\"afterEach\": false,\n\t\t\"beforeAll\": false,\n\t\t\"beforeEach\": false,\n\t\t\"describe\": false,\n\t\t\"expect\": false,\n\t\t\"fdescribe\": false,\n\t\t\"fit\": false,\n\t\t\"it\": false,\n\t\t\"jest\": false,\n\t\t\"pit\": false,\n\t\t\"require\": false,\n\t\t\"test\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false,\n\t\t\"xtest\": false\n\t},\n\t\"qunit\": {\n\t\t\"asyncTest\": false,\n\t\t\"deepEqual\": false,\n\t\t\"equal\": false,\n\t\t\"expect\": false,\n\t\t\"module\": false,\n\t\t\"notDeepEqual\": false,\n\t\t\"notEqual\": false,\n\t\t\"notOk\": false,\n\t\t\"notPropEqual\": false,\n\t\t\"notStrictEqual\": false,\n\t\t\"ok\": false,\n\t\t\"propEqual\": false,\n\t\t\"QUnit\": false,\n\t\t\"raises\": false,\n\t\t\"start\": false,\n\t\t\"stop\": false,\n\t\t\"strictEqual\": false,\n\t\t\"test\": false,\n\t\t\"throws\": false\n\t},\n\t\"phantomjs\": {\n\t\t\"console\": true,\n\t\t\"exports\": true,\n\t\t\"phantom\": true,\n\t\t\"require\": true,\n\t\t\"WebPage\": true\n\t},\n\t\"couch\": {\n\t\t\"emit\": false,\n\t\t\"exports\": false,\n\t\t\"getRow\": false,\n\t\t\"log\": false,\n\t\t\"module\": false,\n\t\t\"provides\": false,\n\t\t\"require\": false,\n\t\t\"respond\": false,\n\t\t\"send\": false,\n\t\t\"start\": false,\n\t\t\"sum\": false\n\t},\n\t\"rhino\": {\n\t\t\"defineClass\": false,\n\t\t\"deserialize\": false,\n\t\t\"gc\": false,\n\t\t\"help\": false,\n\t\t\"importClass\": false,\n\t\t\"importPackage\": false,\n\t\t\"java\": false,\n\t\t\"load\": false,\n\t\t\"loadClass\": false,\n\t\t\"Packages\": false,\n\t\t\"print\": false,\n\t\t\"quit\": false,\n\t\t\"readFile\": false,\n\t\t\"readUrl\": false,\n\t\t\"runCommand\": false,\n\t\t\"seal\": false,\n\t\t\"serialize\": false,\n\t\t\"spawn\": false,\n\t\t\"sync\": false,\n\t\t\"toint32\": false,\n\t\t\"version\": false\n\t},\n\t\"nashorn\": {\n\t\t\"__DIR__\": false,\n\t\t\"__FILE__\": false,\n\t\t\"__LINE__\": false,\n\t\t\"com\": false,\n\t\t\"edu\": false,\n\t\t\"exit\": false,\n\t\t\"java\": false,\n\t\t\"Java\": false,\n\t\t\"javafx\": false,\n\t\t\"JavaImporter\": false,\n\t\t\"javax\": false,\n\t\t\"JSAdapter\": false,\n\t\t\"load\": false,\n\t\t\"loadWithNewGlobal\": false,\n\t\t\"org\": false,\n\t\t\"Packages\": false,\n\t\t\"print\": false,\n\t\t\"quit\": false\n\t},\n\t\"wsh\": {\n\t\t\"ActiveXObject\": true,\n\t\t\"Enumerator\": true,\n\t\t\"GetObject\": true,\n\t\t\"ScriptEngine\": true,\n\t\t\"ScriptEngineBuildVersion\": true,\n\t\t\"ScriptEngineMajorVersion\": true,\n\t\t\"ScriptEngineMinorVersion\": true,\n\t\t\"VBArray\": true,\n\t\t\"WScript\": true,\n\t\t\"WSH\": true,\n\t\t\"XDomainRequest\": true\n\t},\n\t\"jquery\": {\n\t\t\"$\": false,\n\t\t\"jQuery\": false\n\t},\n\t\"yui\": {\n\t\t\"YAHOO\": false,\n\t\t\"YAHOO_config\": false,\n\t\t\"YUI\": false,\n\t\t\"YUI_config\": false\n\t},\n\t\"shelljs\": {\n\t\t\"cat\": false,\n\t\t\"cd\": false,\n\t\t\"chmod\": false,\n\t\t\"config\": false,\n\t\t\"cp\": false,\n\t\t\"dirs\": false,\n\t\t\"echo\": false,\n\t\t\"env\": false,\n\t\t\"error\": false,\n\t\t\"exec\": false,\n\t\t\"exit\": false,\n\t\t\"find\": false,\n\t\t\"grep\": false,\n\t\t\"ln\": false,\n\t\t\"ls\": false,\n\t\t\"mkdir\": false,\n\t\t\"mv\": false,\n\t\t\"popd\": false,\n\t\t\"pushd\": false,\n\t\t\"pwd\": false,\n\t\t\"rm\": false,\n\t\t\"sed\": false,\n\t\t\"set\": false,\n\t\t\"target\": false,\n\t\t\"tempdir\": false,\n\t\t\"test\": false,\n\t\t\"touch\": false,\n\t\t\"which\": false\n\t},\n\t\"prototypejs\": {\n\t\t\"$\": false,\n\t\t\"$$\": false,\n\t\t\"$A\": false,\n\t\t\"$break\": false,\n\t\t\"$continue\": false,\n\t\t\"$F\": false,\n\t\t\"$H\": false,\n\t\t\"$R\": false,\n\t\t\"$w\": false,\n\t\t\"Abstract\": false,\n\t\t\"Ajax\": false,\n\t\t\"Autocompleter\": false,\n\t\t\"Builder\": false,\n\t\t\"Class\": false,\n\t\t\"Control\": false,\n\t\t\"Draggable\": false,\n\t\t\"Draggables\": false,\n\t\t\"Droppables\": false,\n\t\t\"Effect\": false,\n\t\t\"Element\": false,\n\t\t\"Enumerable\": false,\n\t\t\"Event\": false,\n\t\t\"Field\": false,\n\t\t\"Form\": false,\n\t\t\"Hash\": false,\n\t\t\"Insertion\": false,\n\t\t\"ObjectRange\": false,\n\t\t\"PeriodicalExecuter\": false,\n\t\t\"Position\": false,\n\t\t\"Prototype\": false,\n\t\t\"Scriptaculous\": false,\n\t\t\"Selector\": false,\n\t\t\"Sortable\": false,\n\t\t\"SortableObserver\": false,\n\t\t\"Sound\": false,\n\t\t\"Template\": false,\n\t\t\"Toggle\": false,\n\t\t\"Try\": false\n\t},\n\t\"meteor\": {\n\t\t\"_\": false,\n\t\t\"$\": false,\n\t\t\"Accounts\": false,\n\t\t\"AccountsClient\": false,\n\t\t\"AccountsCommon\": false,\n\t\t\"AccountsServer\": false,\n\t\t\"App\": false,\n\t\t\"Assets\": false,\n\t\t\"Blaze\": false,\n\t\t\"check\": false,\n\t\t\"Cordova\": false,\n\t\t\"DDP\": false,\n\t\t\"DDPRateLimiter\": false,\n\t\t\"DDPServer\": false,\n\t\t\"Deps\": false,\n\t\t\"EJSON\": false,\n\t\t\"Email\": false,\n\t\t\"HTTP\": false,\n\t\t\"Log\": false,\n\t\t\"Match\": false,\n\t\t\"Meteor\": false,\n\t\t\"Mongo\": false,\n\t\t\"MongoInternals\": false,\n\t\t\"Npm\": false,\n\t\t\"Package\": false,\n\t\t\"Plugin\": false,\n\t\t\"process\": false,\n\t\t\"Random\": false,\n\t\t\"ReactiveDict\": false,\n\t\t\"ReactiveVar\": false,\n\t\t\"Router\": false,\n\t\t\"ServiceConfiguration\": false,\n\t\t\"Session\": false,\n\t\t\"share\": false,\n\t\t\"Spacebars\": false,\n\t\t\"Template\": false,\n\t\t\"Tinytest\": false,\n\t\t\"Tracker\": false,\n\t\t\"UI\": false,\n\t\t\"Utils\": false,\n\t\t\"WebApp\": false,\n\t\t\"WebAppInternals\": false\n\t},\n\t\"mongo\": {\n\t\t\"_isWindows\": false,\n\t\t\"_rand\": false,\n\t\t\"BulkWriteResult\": false,\n\t\t\"cat\": false,\n\t\t\"cd\": false,\n\t\t\"connect\": false,\n\t\t\"db\": false,\n\t\t\"getHostName\": false,\n\t\t\"getMemInfo\": false,\n\t\t\"hostname\": false,\n\t\t\"ISODate\": false,\n\t\t\"listFiles\": false,\n\t\t\"load\": false,\n\t\t\"ls\": false,\n\t\t\"md5sumFile\": false,\n\t\t\"mkdir\": false,\n\t\t\"Mongo\": false,\n\t\t\"NumberInt\": false,\n\t\t\"NumberLong\": false,\n\t\t\"ObjectId\": false,\n\t\t\"PlanCache\": false,\n\t\t\"print\": false,\n\t\t\"printjson\": false,\n\t\t\"pwd\": false,\n\t\t\"quit\": false,\n\t\t\"removeFile\": false,\n\t\t\"rs\": false,\n\t\t\"sh\": false,\n\t\t\"UUID\": false,\n\t\t\"version\": false,\n\t\t\"WriteResult\": false\n\t},\n\t\"applescript\": {\n\t\t\"$\": false,\n\t\t\"Application\": false,\n\t\t\"Automation\": false,\n\t\t\"console\": false,\n\t\t\"delay\": false,\n\t\t\"Library\": false,\n\t\t\"ObjC\": false,\n\t\t\"ObjectSpecifier\": false,\n\t\t\"Path\": false,\n\t\t\"Progress\": false,\n\t\t\"Ref\": false\n\t},\n\t\"serviceworker\": {\n\t\t\"addEventListener\": false,\n\t\t\"applicationCache\": false,\n\t\t\"atob\": false,\n\t\t\"Blob\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"CacheStorage\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"Client\": false,\n\t\t\"clients\": false,\n\t\t\"Clients\": false,\n\t\t\"close\": true,\n\t\t\"console\": false,\n\t\t\"ExtendableEvent\": false,\n\t\t\"ExtendableMessageEvent\": false,\n\t\t\"fetch\": false,\n\t\t\"FetchEvent\": false,\n\t\t\"FileReaderSync\": false,\n\t\t\"FormData\": false,\n\t\t\"Headers\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"ImageData\": false,\n\t\t\"importScripts\": false,\n\t\t\"indexedDB\": false,\n\t\t\"location\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessagePort\": false,\n\t\t\"name\": false,\n\t\t\"navigator\": false,\n\t\t\"Notification\": false,\n\t\t\"onclose\": true,\n\t\t\"onconnect\": true,\n\t\t\"onerror\": true,\n\t\t\"onfetch\": true,\n\t\t\"oninstall\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onmessage\": true,\n\t\t\"onmessageerror\": true,\n\t\t\"onnotificationclick\": true,\n\t\t\"onnotificationclose\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onpush\": true,\n\t\t\"onpushsubscriptionchange\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onsync\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"postMessage\": true,\n\t\t\"Promise\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"registration\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"Response\": false,\n\t\t\"self\": false,\n\t\t\"ServiceWorker\": false,\n\t\t\"ServiceWorkerContainer\": false,\n\t\t\"ServiceWorkerGlobalScope\": false,\n\t\t\"ServiceWorkerMessageEvent\": false,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"skipWaiting\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"WebSocket\": false,\n\t\t\"WindowClient\": false,\n\t\t\"Worker\": false,\n\t\t\"WorkerGlobalScope\": false,\n\t\t\"XMLHttpRequest\": false\n\t},\n\t\"atomtest\": {\n\t\t\"advanceClock\": false,\n\t\t\"fakeClearInterval\": false,\n\t\t\"fakeClearTimeout\": false,\n\t\t\"fakeSetInterval\": false,\n\t\t\"fakeSetTimeout\": false,\n\t\t\"resetTimeouts\": false,\n\t\t\"waitsForPromise\": false\n\t},\n\t\"embertest\": {\n\t\t\"andThen\": false,\n\t\t\"click\": false,\n\t\t\"currentPath\": false,\n\t\t\"currentRouteName\": false,\n\t\t\"currentURL\": false,\n\t\t\"fillIn\": false,\n\t\t\"find\": false,\n\t\t\"findAll\": false,\n\t\t\"findWithAssert\": false,\n\t\t\"keyEvent\": false,\n\t\t\"pauseTest\": false,\n\t\t\"resumeTest\": false,\n\t\t\"triggerEvent\": false,\n\t\t\"visit\": false,\n\t\t\"wait\": false\n\t},\n\t\"protractor\": {\n\t\t\"$\": false,\n\t\t\"$$\": false,\n\t\t\"browser\": false,\n\t\t\"by\": false,\n\t\t\"By\": false,\n\t\t\"DartObject\": false,\n\t\t\"element\": false,\n\t\t\"protractor\": false\n\t},\n\t\"shared-node-browser\": {\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"console\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false\n\t},\n\t\"webextensions\": {\n\t\t\"browser\": false,\n\t\t\"chrome\": false,\n\t\t\"opr\": false\n\t},\n\t\"greasemonkey\": {\n\t\t\"cloneInto\": false,\n\t\t\"createObjectIn\": false,\n\t\t\"exportFunction\": false,\n\t\t\"GM\": false,\n\t\t\"GM_addStyle\": false,\n\t\t\"GM_deleteValue\": false,\n\t\t\"GM_getResourceText\": false,\n\t\t\"GM_getResourceURL\": false,\n\t\t\"GM_getValue\": false,\n\t\t\"GM_info\": false,\n\t\t\"GM_listValues\": false,\n\t\t\"GM_log\": false,\n\t\t\"GM_openInTab\": false,\n\t\t\"GM_registerMenuCommand\": false,\n\t\t\"GM_setClipboard\": false,\n\t\t\"GM_setValue\": false,\n\t\t\"GM_xmlhttpRequest\": false,\n\t\t\"unsafeWindow\": false\n\t},\n\t\"devtools\": {\n\t\t\"$\": false,\n\t\t\"$_\": false,\n\t\t\"$$\": false,\n\t\t\"$0\": false,\n\t\t\"$1\": false,\n\t\t\"$2\": false,\n\t\t\"$3\": false,\n\t\t\"$4\": false,\n\t\t\"$x\": false,\n\t\t\"chrome\": false,\n\t\t\"clear\": false,\n\t\t\"copy\": false,\n\t\t\"debug\": false,\n\t\t\"dir\": false,\n\t\t\"dirxml\": false,\n\t\t\"getEventListeners\": false,\n\t\t\"inspect\": false,\n\t\t\"keys\": false,\n\t\t\"monitor\": false,\n\t\t\"monitorEvents\": false,\n\t\t\"profile\": false,\n\t\t\"profileEnd\": false,\n\t\t\"queryObjects\": false,\n\t\t\"table\": false,\n\t\t\"undebug\": false,\n\t\t\"unmonitor\": false,\n\t\t\"unmonitorEvents\": false,\n\t\t\"values\": false\n\t}\n}\n", "'use strict';\nmodule.exports = require('./globals.json');\n", "import Renamer from \"./lib/renamer.ts\";\nimport type NodePath from \"../path/index.ts\";\nimport traverse from \"../index.ts\";\nimport type { TraverseOptions } from \"../index.ts\";\nimport Binding from \"./binding.ts\";\nimport type { BindingKind } from \"./binding.ts\";\nimport globals from \"globals\";\nimport {\n  NOT_LOCAL_BINDING,\n  callExpression,\n  cloneNode,\n  getBindingIdentifiers,\n  identifier,\n  isArrayExpression,\n  isBinary,\n  isCallExpression,\n  isClass,\n  isClassBody,\n  isClassDeclaration,\n  isExportAllDeclaration,\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n  isFunctionDeclaration,\n  isIdentifier,\n  isImportDeclaration,\n  isLiteral,\n  isMemberExpression,\n  isMethod,\n  isModuleSpecifier,\n  isNullLiteral,\n  isObjectExpression,\n  isProperty,\n  isPureish,\n  isRegExpLiteral,\n  isSuper,\n  isTaggedTemplateExpression,\n  isTemplateLiteral,\n  isThisExpression,\n  isUnaryExpression,\n  isVariableDeclaration,\n  matchesPattern,\n  memberExpression,\n  numericLiteral,\n  toIdentifier,\n  variableDeclaration,\n  variableDeclarator,\n  isRecordExpression,\n  isTupleExpression,\n  isObjectProperty,\n  isTopicReference,\n  isMetaProperty,\n  isPrivateName,\n  isExportDeclaration,\n  buildUndefinedNode,\n} from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport { scope as scopeCache } from \"../cache.ts\";\nimport type { Visitor } from \"../types.ts\";\nimport { isExplodedVisitor } from \"../visitors.ts\";\n\ntype NodePart = string | number | boolean;\n// Recursively gathers the identifying names of a node.\nfunction gatherNodeParts(node: t.Node, parts: NodePart[]) {\n  switch (node?.type) {\n    default:\n      if (isImportDeclaration(node) || isExportDeclaration(node)) {\n        if (\n          (isExportAllDeclaration(node) ||\n            isExportNamedDeclaration(node) ||\n            isImportDeclaration(node)) &&\n          node.source\n        ) {\n          gatherNodeParts(node.source, parts);\n        } else if (\n          (isExportNamedDeclaration(node) || isImportDeclaration(node)) &&\n          node.specifiers?.length\n        ) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (\n          (isExportDefaultDeclaration(node) ||\n            isExportNamedDeclaration(node)) &&\n          node.declaration\n        ) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (isModuleSpecifier(node)) {\n        // todo(flow->ts): should condition instead be:\n        //    ```\n        //    t.isExportSpecifier(node) ||\n        //    t.isImportDefaultSpecifier(node) ||\n        //    t.isImportNamespaceSpecifier(node) ||\n        //    t.isImportSpecifier(node)\n        //    ```\n        //    allowing only nodes with `.local`?\n        // @ts-expect-error todo(flow->ts)\n        gatherNodeParts(node.local, parts);\n      } else if (\n        isLiteral(node) &&\n        !isNullLiteral(node) &&\n        !isRegExpLiteral(node) &&\n        !isTemplateLiteral(node)\n      ) {\n        parts.push(node.value);\n      }\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      gatherNodeParts(node.name, parts);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\n//\ninterface CollectVisitorState {\n  assignments: NodePath<t.AssignmentExpression>[];\n  references: NodePath<t.Identifier | t.JSXIdentifier>[];\n  constantViolations: NodePath[];\n}\n\nconst collectorVisitor: Visitor<CollectVisitorState> = {\n  ForStatement(path) {\n    const declar = path.get(\"init\");\n    // delegate block scope handling to the `BlockScoped` method\n    if (declar.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", declar);\n    }\n  },\n\n  Declaration(path) {\n    // delegate block scope handling to the `BlockScoped` method\n    if (path.isBlockScoped()) return;\n\n    // delegate import handing to the `ImportDeclaration` method\n    if (path.isImportDeclaration()) return;\n\n    // this will be hit again once we traverse into it after this iteration\n    if (path.isExportDeclaration()) return;\n\n    // we've ran into a declaration!\n    const parent =\n      path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ImportDeclaration(path) {\n    // import may only appear in the top level or inside a module/namespace (for TS/flow)\n    const parent = path.scope.getBlockParent();\n\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n    // delegate block scope handling to the `BlockScoped` method\n    else if (left.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", left);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const { node, scope } = path;\n      // ExportAllDeclaration does not have `declaration`\n      if (isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n\n        const binding = scope.getBinding(id.name);\n        binding?.reference(path);\n      } else if (isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            binding?.reference(path);\n          }\n        }\n      }\n    },\n  },\n\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    // Register class identifier in class' scope if this is a class declaration.\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    const params: Array<NodePath> = path.get(\"params\");\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n\n    // Register function expression id after params. When the id\n    // collides with a function param, the id effectively can't be\n    // referenced: here we registered it as a constantViolation\n    if (\n      path.isFunctionExpression() &&\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n\n  ClassExpression(path) {\n    if (\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n  TSTypeAnnotation(path) {\n    path.skip();\n  },\n};\n\nlet uid = 0;\n\nexport type { Binding };\n\nexport { Scope as default };\nclass Scope {\n  uid;\n\n  path: NodePath;\n  block: t.Pattern | t.Scopable;\n\n  labels;\n  inited;\n\n  bindings: { [name: string]: Binding };\n  references: { [name: string]: true };\n  globals: { [name: string]: t.Identifier | t.JSXIdentifier };\n  uids: { [name: string]: boolean };\n  data: { [key: string | symbol]: unknown };\n  crawling: boolean;\n\n  /**\n   * This searches the current \"scope\" and collects all references/bindings\n   * within.\n   */\n  constructor(path: NodePath<t.Pattern | t.Scopable>) {\n    const { node } = path;\n    const cached = scopeCache.get(node);\n    // Sometimes, a scopable path is placed higher in the AST tree.\n    // In these cases, have to create a new Scope.\n    if (cached?.path === path) {\n      return cached;\n    }\n    scopeCache.set(node, this);\n\n    this.uid = uid++;\n\n    this.block = node;\n    this.path = path;\n\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  /**\n   * Globals.\n   */\n\n  static globals = Object.keys(globals.builtin);\n\n  /**\n   * Variables available in current context.\n   */\n\n  static contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];\n\n  get parent() {\n    let parent,\n      path = this.path;\n    do {\n      // Skip method scope if coming from inside computed key or decorator expression\n      const shouldSkip = path.key === \"key\" || path.listKey === \"decorators\";\n      path = path.parentPath;\n      if (shouldSkip && path.isMethod()) path = path.parentPath;\n      if (path?.isScope()) parent = path;\n    } while (path && !parent);\n\n    return parent?.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse<S>(\n    node: t.Node | t.Node[],\n    opts: TraverseOptions<S>,\n    state: S,\n  ): void;\n  traverse(node: t.Node | t.Node[], opts?: TraverseOptions, state?: any): void;\n  /**\n   * Traverse node with current scope and path.\n   *\n   * !!! WARNING !!!\n   * This method assumes that `this.path` is the NodePath representing `node`.\n   * After running the traversal, the `.parentPath` of the NodePaths\n   * corresponding to `node`'s children will be set to `this.path`.\n   *\n   * There is no good reason to use this method, since the only safe way to use\n   * it is equivalent to `scope.path.traverse(opts, state)`.\n   */\n  traverse<S>(node: any, opts: any, state?: S) {\n    traverse(node, opts, this, state, this.path);\n  }\n\n  /**\n   * Generate a unique identifier and add it to the current scope.\n   */\n\n  generateDeclaredUidIdentifier(name?: string) {\n    const id = this.generateUidIdentifier(name);\n    this.push({ id });\n    return cloneNode(id);\n  }\n\n  /**\n   * Generate a unique identifier.\n   */\n\n  generateUidIdentifier(name?: string) {\n    return identifier(this.generateUid(name));\n  }\n\n  /**\n   * Generate a unique `_id1` binding.\n   */\n\n  generateUid(name: string = \"temp\"): string {\n    name = toIdentifier(name)\n      .replace(/^_+/, \"\")\n      .replace(/[0-9]+$/g, \"\");\n\n    let uid;\n    let i = 1;\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (\n      this.hasLabel(uid) ||\n      this.hasBinding(uid) ||\n      this.hasGlobal(uid) ||\n      this.hasReference(uid)\n    );\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n\n    return uid;\n  }\n\n  /**\n   * Generate an `_id1`.\n   */\n\n  _generateUid(name: string, i: number) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node: t.Node, defaultName?: string) {\n    const parts: NodePart[] = [];\n    gatherNodeParts(node, parts);\n\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  /**\n   * Generate a unique identifier based on a node.\n   */\n\n  generateUidIdentifierBasedOnNode(node: t.Node, defaultName?: string) {\n    return identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  /**\n   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.\n   * evaluating it won't result in potentially arbitrary code from being ran. The following are\n   * allowed and determined not to cause side effects:\n   *\n   *  - `this` expressions\n   *  - `super` expressions\n   *  - Bound identifiers\n   */\n\n  isStatic(node: t.Node): boolean {\n    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {\n      return true;\n    }\n\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Possibly generate a memoised identifier if it is not static and has consequences.\n   */\n\n  maybeGenerateMemoised(node: t.Node, dontPush?: boolean) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n      if (!dontPush) {\n        this.push({ id });\n        return cloneNode(id);\n      }\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(\n    local: Binding,\n    kind: BindingKind,\n    name: string,\n    id: any,\n  ) {\n    // ignore parameters\n    if (kind === \"param\") return;\n\n    // Ignore existing binding if it's the name of the current function or\n    // class expression\n    if (local.kind === \"local\") return;\n\n    const duplicate =\n      // don't allow duplicate bindings to exist alongside\n      kind === \"let\" ||\n      local.kind === \"let\" ||\n      local.kind === \"const\" ||\n      local.kind === \"module\" ||\n      // don't allow a local of param with a kind of let\n      (local.kind === \"param\" && kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(\n        id,\n        `Duplicate declaration \"${name}\"`,\n        TypeError,\n      );\n    }\n  }\n\n  rename(\n    oldName: string,\n    newName?: string,\n    // prettier-ignore\n    /* Babel 7 - block?: t.Pattern | t.Scopable */\n  ) {\n    const binding = this.getBinding(oldName);\n    if (binding) {\n      newName ||= this.generateUidIdentifier(oldName).name;\n      const renamer = new Renamer(binding, oldName, newName);\n      if (process.env.BABEL_8_BREAKING) {\n        renamer.rename();\n      } else {\n        // @ts-ignore(Babel 7 vs Babel 8) TODO: Delete this\n        renamer.rename(arguments[2]);\n      }\n    }\n  }\n\n  /** @deprecated Not used in our codebase */\n  _renameFromMap(\n    map: Record<string | symbol, unknown>,\n    oldName: string | symbol,\n    newName: string | symbol,\n    value: unknown,\n  ) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope: Scope = this;\n    do {\n      console.log(\"#\", scope.block.type);\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind,\n        });\n      }\n    } while ((scope = scope.parent));\n    console.log(sep);\n  }\n\n  // TODO: (Babel 8) Split i in two parameters, and use an object of flags\n  toArray(\n    node: t.Node,\n    i?: number | boolean,\n    arrayLikeIsIterable?: boolean | void,\n  ) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding?.constant && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (isArrayExpression(node)) {\n      return node;\n    }\n\n    if (isIdentifier(node, { name: \"arguments\" })) {\n      return callExpression(\n        memberExpression(\n          memberExpression(\n            memberExpression(identifier(\"Array\"), identifier(\"prototype\")),\n            identifier(\"slice\"),\n          ),\n          identifier(\"call\"),\n        ),\n        [node],\n      );\n    }\n\n    let helperName;\n    const args = [node];\n    if (i === true) {\n      // Used in array-spread to create an array.\n      helperName = \"toConsumableArray\";\n    } else if (typeof i === \"number\") {\n      args.push(numericLiteral(i));\n\n      // Used in array-rest to create an array from a subset of an iterable.\n      helperName = \"slicedToArray\";\n      // TODO if (this.hub.isLoose(\"es6.forOf\")) helperName += \"-loose\";\n    } else {\n      // Used in array-rest to create an array\n      helperName = \"toArray\";\n    }\n\n    if (arrayLikeIsIterable) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    // @ts-expect-error todo(flow->ts): t.Node is not valid to use in args, function argument typeneeds to be clarified\n    return callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name: string) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name: string) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path: NodePath<t.LabeledStatement>) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path: NodePath) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n      const { kind } = path.node;\n      for (const declar of declarations) {\n        this.registerBinding(\n          kind === \"using\" || kind === \"await using\" ? \"const\" : kind,\n          declar,\n        );\n      }\n    } else if (path.isClassDeclaration()) {\n      if (path.node.declare) return;\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const isTypeDeclaration =\n        path.node.importKind === \"type\" || path.node.importKind === \"typeof\";\n      const specifiers = path.get(\"specifiers\");\n      for (const specifier of specifiers) {\n        const isTypeSpecifier =\n          isTypeDeclaration ||\n          (specifier.isImportSpecifier() &&\n            (specifier.node.importKind === \"type\" ||\n              specifier.node.importKind === \"typeof\"));\n\n        this.registerBinding(isTypeSpecifier ? \"unknown\" : \"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      // todo: improve babel-types\n      const declar = path.get(\"declaration\") as NodePath;\n      if (\n        declar.isClassDeclaration() ||\n        declar.isFunctionDeclaration() ||\n        declar.isVariableDeclaration()\n      ) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return buildUndefinedNode();\n  }\n\n  registerConstantViolation(path: NodePath) {\n    const ids = path.getBindingIdentifiers();\n    for (const name of Object.keys(ids)) {\n      this.getBinding(name)?.reassign(path);\n    }\n  }\n\n  registerBinding(\n    kind: Binding[\"kind\"],\n    path: NodePath,\n    bindingPath: NodePath = path,\n  ) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators: Array<NodePath> = path.get(\"declarations\");\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          // same identifier so continue safely as we're likely trying to register it\n          // multiple times\n          if (local.identifier === id) continue;\n\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        // A redeclaration of an existing variable is a modification\n        if (local) {\n          local.reassign(bindingPath);\n        } else {\n          this.bindings[name] = new Binding({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind,\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node: t.Identifier | t.JSXIdentifier) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasGlobal(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasReference(name: string): boolean {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node: t.Node, constantsOnly?: boolean): boolean {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (\n      isThisExpression(node) ||\n      isMetaProperty(node) ||\n      isTopicReference(node) ||\n      isPrivateName(node)\n    ) {\n      return true;\n    } else if (isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return this.isPure(node.body, constantsOnly);\n    } else if (isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isBinary(node)) {\n      return (\n        this.isPure(node.left, constantsOnly) &&\n        this.isPure(node.right, constantsOnly)\n      );\n    } else if (isArrayExpression(node) || isTupleExpression(node)) {\n      for (const elem of node.elements) {\n        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isObjectExpression(node) || isRecordExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return true;\n    } else if (isProperty(node)) {\n      // @ts-expect-error todo(flow->ts): computed in not present on private properties\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      if (isObjectProperty(node) || node.static) {\n        if (node.value !== null && !this.isPure(node.value, constantsOnly)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isTaggedTemplateExpression(node)) {\n      return (\n        matchesPattern(node.tag, \"String.raw\") &&\n        !this.hasBinding(\"String\", { noGlobals: true }) &&\n        this.isPure(node.quasi, constantsOnly)\n      );\n    } else if (isMemberExpression(node)) {\n      return (\n        !node.computed &&\n        isIdentifier(node.object) &&\n        node.object.name === \"Symbol\" &&\n        isIdentifier(node.property) &&\n        node.property.name !== \"for\" &&\n        !this.hasBinding(\"Symbol\", { noGlobals: true })\n      );\n    } else if (isCallExpression(node)) {\n      return (\n        matchesPattern(node.callee, \"Symbol.for\") &&\n        !this.hasBinding(\"Symbol\", { noGlobals: true }) &&\n        node.arguments.length === 1 &&\n        t.isStringLiteral(node.arguments[0])\n      );\n    } else {\n      return isPureish(node);\n    }\n  }\n\n  /**\n   * Set some arbitrary data on the current scope.\n   */\n\n  setData(key: string | symbol, val: any) {\n    return (this.data[key] = val);\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key`.\n   */\n\n  getData(key: string | symbol): any {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while ((scope = scope.parent));\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key` and if it exists,\n   * remove it.\n   */\n\n  removeData(key: string) {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while ((scope = scope.parent));\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n\n    const state: CollectVisitorState = {\n      references: [],\n      constantViolations: [],\n      assignments: [],\n    };\n\n    this.crawling = true;\n    // traverse does not visit the root node, here we explicitly collect\n    // root node binding info when the root is not a Program.\n    if (path.type !== \"Program\" && isExplodedVisitor(collectorVisitor)) {\n      for (const visit of collectorVisitor.enter) {\n        visit.call(state, path, state);\n      }\n      const typeVisitors = collectorVisitor[path.type];\n      if (typeVisitors) {\n        for (const visit of typeVisitors.enter) {\n          visit.call(state, path, state);\n        }\n      }\n    }\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    // register assignments\n    for (const path of state.assignments) {\n      // register undeclared bindings as globals\n      const ids = path.getBindingIdentifiers();\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      // register as constant violation\n      path.scope.registerConstantViolation(path);\n    }\n\n    // register references\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    // register constant violations\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts: {\n    id: t.LVal;\n    init?: t.Expression;\n    unique?: boolean;\n    _blockHoist?: number | undefined;\n    kind?: \"var\" | \"let\" | \"const\";\n  }) {\n    let path = this.path;\n\n    if (path.isPattern()) {\n      path = this.getPatternParent().path;\n    } else if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    const { init, unique, kind = \"var\", id } = opts;\n\n    // When injecting a non-const non-initialized binding inside\n    // an IIFE, if the number of call arguments is less than or\n    // equal to the number of function parameters, we can safely\n    // inject the binding into the parameter list.\n    if (\n      !init &&\n      !unique &&\n      (kind === \"var\" || kind === \"let\") &&\n      path.isFunction() &&\n      // @ts-expect-error ArrowFunctionExpression never has a name\n      !path.node.name &&\n      isCallExpression(path.parent, { callee: path.node }) &&\n      path.parent.arguments.length <= path.node.params.length &&\n      isIdentifier(id)\n    ) {\n      path.pushContainer(\"params\", id);\n      path.scope.registerBinding(\n        \"param\",\n        path.get(\"params\")[path.node.params.length - 1],\n      );\n      return;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = variableDeclaration(kind, []);\n      // @ts-expect-error todo(flow->ts): avoid modifying nodes\n      declar._blockHoist = blockHoist;\n\n      [declarPath] = (path as NodePath<t.BlockStatement>).unshiftContainer(\n        \"body\",\n        [declar],\n      );\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = variableDeclarator(id, init);\n    const len = declarPath.node.declarations.push(declarator);\n    path.scope.registerBinding(kind, declarPath.get(\"declarations\")[len - 1]);\n  }\n\n  /**\n   * Walk up to the top of the scope tree and get the `Program`.\n   */\n\n  getProgramParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a Function or return null.\n   */\n\n  getFunctionParent(): Scope | null {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    return null;\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the\n   * very top and hit Program.\n   */\n\n  getBlockParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walk up from a pattern scope (function param initializer) until we hit a non-pattern scope,\n   * then returns its block parent\n   * @returns An ancestry scope whose path is a block parent\n   */\n  getPatternParent() {\n    let scope: Scope = this;\n    do {\n      if (!scope.path.isPattern()) {\n        return scope.getBlockParent();\n      }\n    } while ((scope = scope.parent.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walks the scope tree and gathers **all** bindings.\n   */\n\n  getAllBindings(): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    let scope: Scope = this;\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  /**\n   * Walks the scope tree and gathers all declarations of `kind`.\n   */\n\n  getAllBindingsOfKind(...kinds: string[]): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    for (const kind of kinds) {\n      let scope: Scope = this;\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name: string, node: t.Node): boolean {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name: string): Binding | undefined {\n    let scope: Scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n      if (binding) {\n        // Check if a pattern is a part of parameter expressions.\n        // Note: for performance reason we skip checking previousPath.parentPath.isFunction()\n        // because `scope.path` is validated as scope in packages/babel-types/src/validators/isScope.js\n        // That is, if a scope path is pattern, its parent must be Function/CatchClause\n\n        // Spec 9.2.10.28: The closure created by this expression should not have visibility of\n        // declarations in the function body. If the binding is not a `param`-kind (as function parameters)\n        // or `local`-kind (as id in function expression),\n        // then it must be defined inside the function body, thus it should be skipped\n        if (\n          previousPath?.isPattern() &&\n          binding.kind !== \"param\" &&\n          binding.kind !== \"local\"\n        ) {\n          // do nothing\n        } else {\n          return binding;\n        }\n      } else if (\n        !binding &&\n        name === \"arguments\" &&\n        scope.path.isFunction() &&\n        !scope.path.isArrowFunctionExpression()\n      ) {\n        break;\n      }\n      previousPath = scope.path;\n    } while ((scope = scope.parent));\n  }\n\n  getOwnBinding(name: string): Binding | undefined {\n    return this.bindings[name];\n  }\n\n  // todo: return probably can be undefined…\n  getBindingIdentifier(name: string): t.Identifier {\n    return this.getBinding(name)?.identifier;\n  }\n\n  // todo: flow->ts return probably can be undefined\n  getOwnBindingIdentifier(name: string): t.Identifier {\n    const binding = this.bindings[name];\n    return binding?.identifier;\n  }\n\n  hasOwnBinding(name: string) {\n    return !!this.getOwnBinding(name);\n  }\n\n  // By default, we consider generated UIDs as bindings.\n  // This is because they are almost always used to declare variables,\n  // and since the scope isn't always up-to-date it's better to assume that\n  // there is a variable with that name. The `noUids` option can be used to\n  // turn off this behavior, for example if you know that the generate UID\n  // was used to declare a variable in a different scope.\n  hasBinding(\n    name: string,\n    opts?: boolean | { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    {\n      // TODO: Only accept the object form.\n      if (typeof opts === \"boolean\") opts = { noGlobals: opts };\n    }\n    if (this.parentHasBinding(name, opts)) return true;\n    if (!opts?.noUids && this.hasUid(name)) return true;\n    if (!opts?.noGlobals && Scope.globals.includes(name)) return true;\n    if (!opts?.noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(\n    name: string,\n    opts?: { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    return this.parent?.hasBinding(name, opts);\n  }\n\n  /**\n   * Move a binding of `name` to another `scope`.\n   */\n\n  moveBindingTo(name: string, scope: Scope) {\n    const info = this.getBinding(name);\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name: string) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name: string) {\n    // clear literal binding\n    this.getBinding(name)?.scope.removeOwnBinding(name);\n\n    // clear uids with this name - https://github.com/babel/babel/issues/2101\n    let scope: Scope = this;\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while ((scope = scope.parent));\n  }\n}\n\ntype _Binding = Binding;\nnamespace Scope {\n  export type Binding = _Binding;\n}\n", "type Key = string | number | symbol;\n\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nexport class SetArray<T extends Key = Key> {\n  private declare _indexes: Record<T, number | undefined>;\n  declare array: readonly T[];\n\n  constructor() {\n    this._indexes = { __proto__: null } as any;\n    this.array = [];\n  }\n}\n\ninterface PublicSet<T extends Key> {\n  array: T[];\n  _indexes: SetArray<T>['_indexes'];\n}\n\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the set into a type\n * with public access modifiers.\n */\nfunction cast<T extends Key>(set: SetArray<T>): PublicSet<T> {\n  return set as any;\n}\n\n/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nexport function get<T extends Key>(setarr: SetArray<T>, key: T): number | undefined {\n  return cast(setarr)._indexes[key];\n}\n\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nexport function put<T extends Key>(setarr: SetArray<T>, key: T): number {\n  // The key may or may not be present. If it is present, it's a number.\n  const index = get(setarr, key);\n  if (index !== undefined) return index;\n\n  const { array, _indexes: indexes } = cast(setarr);\n\n  const length = array.push(key);\n  return (indexes[key] = length - 1);\n}\n\n/**\n * Pops the last added item out of the SetArray.\n */\nexport function pop<T extends Key>(setarr: SetArray<T>): void {\n  const { array, _indexes: indexes } = cast(setarr);\n  if (array.length === 0) return;\n\n  const last = array.pop()!;\n  indexes[last] = undefined;\n}\n\n/**\n * Removes the key, if it exists in the set.\n */\nexport function remove<T extends Key>(setarr: SetArray<T>, key: T): void {\n  const index = get(setarr, key);\n  if (index === undefined) return;\n\n  const { array, _indexes: indexes } = cast(setarr);\n  for (let i = index + 1; i < array.length; i++) {\n    const k = array[i];\n    array[i - 1] = k;\n    indexes[k]!--;\n  }\n  indexes[key] = undefined;\n  array.pop();\n}\n", "export type SourceMapSegment =\n  | [number]\n  | [number, number, number, number]\n  | [number, number, number, number, number];\nexport type SourceMapLine = SourceMapSegment[];\nexport type SourceMapMappings = SourceMapLine[];\n\nconst comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInt = new Uint8Array(128); // z is 122 in ASCII\n\nfor (let i = 0; i < chars.length; i++) {\n  const c = chars.charCodeAt(i);\n  intToChar[i] = c;\n  charToInt[c] = i;\n}\n\n// Provide a fallback for older environments.\nconst td =\n  typeof TextDecoder !== 'undefined'\n    ? /* #__PURE__ */ new TextDecoder()\n    : typeof Buffer !== 'undefined'\n    ? {\n        decode(buf: Uint8Array) {\n          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n          return out.toString();\n        },\n      }\n    : {\n        decode(buf: Uint8Array) {\n          let out = '';\n          for (let i = 0; i < buf.length; i++) {\n            out += String.fromCharCode(buf[i]);\n          }\n          return out;\n        },\n      };\n\nexport function decode(mappings: string): SourceMapMappings {\n  const state: [number, number, number, number, number] = new Int32Array(5) as any;\n  const decoded: SourceMapMappings = [];\n\n  let index = 0;\n  do {\n    const semi = indexOf(mappings, index);\n    const line: SourceMapLine = [];\n    let sorted = true;\n    let lastCol = 0;\n    state[0] = 0;\n\n    for (let i = index; i < semi; i++) {\n      let seg: SourceMapSegment;\n\n      i = decodeInteger(mappings, i, state, 0); // genColumn\n      const col = state[0];\n      if (col < lastCol) sorted = false;\n      lastCol = col;\n\n      if (hasMoreVlq(mappings, i, semi)) {\n        i = decodeInteger(mappings, i, state, 1); // sourcesIndex\n        i = decodeInteger(mappings, i, state, 2); // sourceLine\n        i = decodeInteger(mappings, i, state, 3); // sourceColumn\n\n        if (hasMoreVlq(mappings, i, semi)) {\n          i = decodeInteger(mappings, i, state, 4); // namesIndex\n          seg = [col, state[1], state[2], state[3], state[4]];\n        } else {\n          seg = [col, state[1], state[2], state[3]];\n        }\n      } else {\n        seg = [col];\n      }\n\n      line.push(seg);\n    }\n\n    if (!sorted) sort(line);\n    decoded.push(line);\n    index = semi + 1;\n  } while (index <= mappings.length);\n\n  return decoded;\n}\n\nfunction indexOf(mappings: string, index: number): number {\n  const idx = mappings.indexOf(';', index);\n  return idx === -1 ? mappings.length : idx;\n}\n\nfunction decodeInteger(mappings: string, pos: number, state: SourceMapSegment, j: number): number {\n  let value = 0;\n  let shift = 0;\n  let integer = 0;\n\n  do {\n    const c = mappings.charCodeAt(pos++);\n    integer = charToInt[c];\n    value |= (integer & 31) << shift;\n    shift += 5;\n  } while (integer & 32);\n\n  const shouldNegate = value & 1;\n  value >>>= 1;\n\n  if (shouldNegate) {\n    value = -0x80000000 | -value;\n  }\n\n  state[j] += value;\n  return pos;\n}\n\nfunction hasMoreVlq(mappings: string, i: number, length: number): boolean {\n  if (i >= length) return false;\n  return mappings.charCodeAt(i) !== comma;\n}\n\nfunction sort(line: SourceMapSegment[]) {\n  line.sort(sortComparator);\n}\n\nfunction sortComparator(a: SourceMapSegment, b: SourceMapSegment): number {\n  return a[0] - b[0];\n}\n\nexport function encode(decoded: SourceMapMappings): string;\nexport function encode(decoded: Readonly<SourceMapMappings>): string;\nexport function encode(decoded: Readonly<SourceMapMappings>): string {\n  const state: [number, number, number, number, number] = new Int32Array(5) as any;\n  const bufLength = 1024 * 16;\n  const subLength = bufLength - 36;\n  const buf = new Uint8Array(bufLength);\n  const sub = buf.subarray(0, subLength);\n  let pos = 0;\n  let out = '';\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    if (i > 0) {\n      if (pos === bufLength) {\n        out += td.decode(buf);\n        pos = 0;\n      }\n      buf[pos++] = semicolon;\n    }\n    if (line.length === 0) continue;\n\n    state[0] = 0;\n\n    for (let j = 0; j < line.length; j++) {\n      const segment = line[j];\n      // We can push up to 5 ints, each int can take at most 7 chars, and we\n      // may push a comma.\n      if (pos > subLength) {\n        out += td.decode(sub);\n        buf.copyWithin(0, subLength, pos);\n        pos -= subLength;\n      }\n      if (j > 0) buf[pos++] = comma;\n\n      pos = encodeInteger(buf, pos, state, segment, 0); // genColumn\n\n      if (segment.length === 1) continue;\n      pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex\n      pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine\n      pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn\n\n      if (segment.length === 4) continue;\n      pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex\n    }\n  }\n\n  return out + td.decode(buf.subarray(0, pos));\n}\n\nfunction encodeInteger(\n  buf: Uint8Array,\n  pos: number,\n  state: SourceMapSegment,\n  segment: SourceMapSegment,\n  j: number,\n): number {\n  const next = segment[j];\n  let num = next - state[j];\n  state[j] = next;\n\n  num = num < 0 ? (-num << 1) | 1 : num << 1;\n  do {\n    let clamped = num & 0b011111;\n    num >>>= 5;\n    if (num > 0) clamped |= 0b100000;\n    buf[pos++] = intToChar[clamped];\n  } while (num > 0);\n\n  return pos;\n}\n", "// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n * 6. Query, including \"?\", optional.\n * 7. Hash, including \"#\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?(\\?[^#]*)?(#.*)?/;\n\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may include \"/\", guaranteed.\n * 3. Query, including \"?\", optional.\n * 4. Hash, including \"#\", optional.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/#?]*)?)?(\\/?[^#?]*)(\\?[^#]*)?(#.*)?/i;\n\ntype Url = {\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  query: string;\n  hash: string;\n  type: UrlType;\n};\n\nconst enum UrlType {\n  Empty = 1,\n  Hash = 2,\n  Query = 3,\n  RelativePath = 4,\n  AbsolutePath = 5,\n  SchemeRelative = 6,\n  Absolute = 7,\n}\n\nfunction isAbsoluteUrl(input: string): boolean {\n  return schemeRegex.test(input);\n}\n\nfunction isSchemeRelativeUrl(input: string): boolean {\n  return input.startsWith('//');\n}\n\nfunction isAbsolutePath(input: string): boolean {\n  return input.startsWith('/');\n}\n\nfunction isFileUrl(input: string): boolean {\n  return input.startsWith('file:');\n}\n\nfunction isRelative(input: string): boolean {\n  return /^[.?#]/.test(input);\n}\n\nfunction parseAbsoluteUrl(input: string): Url {\n  const match = urlRegex.exec(input)!;\n  return makeUrl(\n    match[1],\n    match[2] || '',\n    match[3],\n    match[4] || '',\n    match[5] || '/',\n    match[6] || '',\n    match[7] || '',\n  );\n}\n\nfunction parseFileUrl(input: string): Url {\n  const match = fileRegex.exec(input)!;\n  const path = match[2];\n  return makeUrl(\n    'file:',\n    '',\n    match[1] || '',\n    '',\n    isAbsolutePath(path) ? path : '/' + path,\n    match[3] || '',\n    match[4] || '',\n  );\n}\n\nfunction makeUrl(\n  scheme: string,\n  user: string,\n  host: string,\n  port: string,\n  path: string,\n  query: string,\n  hash: string,\n): Url {\n  return {\n    scheme,\n    user,\n    host,\n    port,\n    path,\n    query,\n    hash,\n    type: UrlType.Absolute,\n  };\n}\n\nfunction parseUrl(input: string): Url {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    url.type = UrlType.SchemeRelative;\n    return url;\n  }\n\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    url.type = UrlType.AbsolutePath;\n    return url;\n  }\n\n  if (isFileUrl(input)) return parseFileUrl(input);\n\n  if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);\n\n  const url = parseAbsoluteUrl('http://foo.com/' + input);\n  url.scheme = '';\n  url.host = '';\n  url.type = input\n    ? input.startsWith('?')\n      ? UrlType.Query\n      : input.startsWith('#')\n      ? UrlType.Hash\n      : UrlType.RelativePath\n    : UrlType.Empty;\n  return url;\n}\n\nfunction stripPathFilename(path: string): string {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n\nfunction mergePaths(url: Url, base: Url) {\n  normalizePath(base, base.type);\n\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n}\n\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url: Url, type: UrlType) {\n  const rel = type <= UrlType.RelativePath;\n  const pieces = url.path.split('/');\n\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (rel) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n    path += '/';\n  }\n  url.path = path;\n}\n\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nexport default function resolve(input: string, base: string | undefined): string {\n  if (!input && !base) return '';\n\n  const url = parseUrl(input);\n  let inputType = url.type;\n\n  if (base && inputType !== UrlType.Absolute) {\n    const baseUrl = parseUrl(base);\n    const baseType = baseUrl.type;\n\n    switch (inputType) {\n      case UrlType.Empty:\n        url.hash = baseUrl.hash;\n      // fall through\n\n      case UrlType.Hash:\n        url.query = baseUrl.query;\n      // fall through\n\n      case UrlType.Query:\n      case UrlType.RelativePath:\n        mergePaths(url, baseUrl);\n      // fall through\n\n      case UrlType.AbsolutePath:\n        // The host, user, and port are joined, you can't copy one without the others.\n        url.user = baseUrl.user;\n        url.host = baseUrl.host;\n        url.port = baseUrl.port;\n      // fall through\n\n      case UrlType.SchemeRelative:\n        // The input doesn't have a schema at least, so we need to copy at least that over.\n        url.scheme = baseUrl.scheme;\n    }\n    if (baseType > inputType) inputType = baseType;\n  }\n\n  normalizePath(url, inputType);\n\n  const queryHash = url.query + url.hash;\n  switch (inputType) {\n    // This is impossible, because of the empty checks at the start of the function.\n    // case UrlType.Empty:\n\n    case UrlType.Hash:\n    case UrlType.Query:\n      return queryHash;\n\n    case UrlType.RelativePath: {\n      // The first char is always a \"/\", and we need it to be relative.\n      const path = url.path.slice(1);\n\n      if (!path) return queryHash || '.';\n\n      if (isRelative(base || input) && !isRelative(path)) {\n        // If base started with a leading \".\", or there is no base and input started with a \".\",\n        // then we need to ensure that the relative path starts with a \".\". We don't know if\n        // relative starts with a \"..\", though, so check before prepending.\n        return './' + path + queryHash;\n      }\n\n      return path + queryHash;\n    }\n\n    case UrlType.AbsolutePath:\n      return url.path + queryHash;\n\n    default:\n      return url.scheme + '//' + url.user + url.host + url.port + url.path + queryHash;\n  }\n}\n", "import resolveUri from '@jridgewell/resolve-uri';\n\nexport default function resolve(input: string, base: string | undefined): string {\n  // The base is always treated as a directory, if it's not empty.\n  // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n  // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n  if (base && !base.endsWith('/')) base += '/';\n\n  return resolveUri(input, base);\n}\n", "/**\n * Removes everything after the last \"/\", but leaves the slash.\n */\nexport default function stripFilename(path: string | undefined | null): string {\n  if (!path) return '';\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n", "type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\ntype GeneratedLine = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport type ReverseSegment = [SourceColumn, GeneratedLine, GeneratedColumn];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n\nexport const REV_GENERATED_LINE = 1;\nexport const REV_GENERATED_COLUMN = 2;\n", "import { COLUMN } from './sourcemap-segment';\n\nimport type { SourceMapSegment } from './sourcemap-segment';\n\nexport default function maybeSort(\n  mappings: SourceMapSegment[][],\n  owned: boolean,\n): SourceMapSegment[][] {\n  const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n  if (unsortedIndex === mappings.length) return mappings;\n\n  // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n  // not, we do not want to modify the consumer's input array.\n  if (!owned) mappings = mappings.slice();\n\n  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n    mappings[i] = sortSegments(mappings[i], owned);\n  }\n  return mappings;\n}\n\nfunction nextUnsortedSegmentLine(mappings: SourceMapSegment[][], start: number): number {\n  for (let i = start; i < mappings.length; i++) {\n    if (!isSorted(mappings[i])) return i;\n  }\n  return mappings.length;\n}\n\nfunction isSorted(line: SourceMapSegment[]): boolean {\n  for (let j = 1; j < line.length; j++) {\n    if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction sortSegments(line: SourceMapSegment[], owned: boolean): SourceMapSegment[] {\n  if (!owned) line = line.slice();\n  return line.sort(sortComparator);\n}\n\nfunction sortComparator(a: SourceMapSegment, b: SourceMapSegment): number {\n  return a[COLUMN] - b[COLUMN];\n}\n", "import type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport { COLUMN } from './sourcemap-segment';\n\nexport type MemoState = {\n  lastKey: number;\n  lastNeedle: number;\n  lastIndex: number;\n};\n\nexport let found = false;\n\n/**\n * A binary search implementation that returns the index if a match is found.\n * If no match is found, then the left-index (the index associated with the item that comes just\n * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n * the next index:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, 0);\n * array.splice(index + 1, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */\nexport function binarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  low: number,\n  high: number,\n): number {\n  while (low <= high) {\n    const mid = low + ((high - low) >> 1);\n    const cmp = haystack[mid][COLUMN] - needle;\n\n    if (cmp === 0) {\n      found = true;\n      return mid;\n    }\n\n    if (cmp < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  found = false;\n  return low - 1;\n}\n\nexport function upperBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index + 1; i < haystack.length; index = i++) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function lowerBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index - 1; i >= 0; index = i--) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function memoizedState(): MemoState {\n  return {\n    lastKey: -1,\n    lastNeedle: -1,\n    lastIndex: -1,\n  };\n}\n\n/**\n * This overly complicated beast is just to record the last tested line/column and the resulting\n * index, allowing us to skip a few tests if mappings are monotonically increasing.\n */\nexport function memoizedBinarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  state: MemoState,\n  key: number,\n): number {\n  const { lastKey, lastNeedle, lastIndex } = state;\n\n  let low = 0;\n  let high = haystack.length - 1;\n  if (key === lastKey) {\n    if (needle === lastNeedle) {\n      found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n      return lastIndex;\n    }\n\n    if (needle >= lastNeedle) {\n      // lastIndex may be -1 if the previous needle was not found.\n      low = lastIndex === -1 ? 0 : lastIndex;\n    } else {\n      high = lastIndex;\n    }\n  }\n  state.lastKey = key;\n  state.lastNeedle = needle;\n\n  return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n", "import { COLUMN, SOURCES_INDEX, SOURCE_LINE, SOURCE_COLUMN } from './sourcemap-segment';\nimport { memoizedBinarySearch, upperBound } from './binary-search';\n\nimport type { ReverseSegment, SourceMapSegment } from './sourcemap-segment';\nimport type { MemoState } from './binary-search';\n\nexport type Source = {\n  __proto__: null;\n  [line: number]: Exclude<ReverseSegment, [number]>[];\n};\n\n// Rebuilds the original source files, with mappings that are ordered by source line/column instead\n// of generated line/column.\nexport default function buildBySources(\n  decoded: readonly SourceMapSegment[][],\n  memos: MemoState[],\n): Source[] {\n  const sources: Source[] = memos.map(buildNullArray);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      if (seg.length === 1) continue;\n\n      const sourceIndex = seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      const originalSource = sources[sourceIndex];\n      const originalLine = (originalSource[sourceLine] ||= []);\n      const memo = memos[sourceIndex];\n\n      // The binary search either found a match, or it found the left-index just before where the\n      // segment should go. Either way, we want to insert after that. And there may be multiple\n      // generated segments associated with an original location, so there may need to move several\n      // indexes before we find where we need to insert.\n      let index = upperBound(\n        originalLine,\n        sourceColumn,\n        memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine),\n      );\n\n      memo.lastIndex = ++index;\n      insert(originalLine, index, [sourceColumn, i, seg[COLUMN]]);\n    }\n  }\n\n  return sources;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\n// Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n// a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n// Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n// the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n// order when iterating with for-in.\nfunction buildNullArray<T extends { __proto__: null }>(): T {\n  return { __proto__: null } as T;\n}\n", "import { TraceMap, presortedDecodedMap, decodedMappings } from './trace-mapping';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type {\n  DecodedSourceMap,\n  DecodedSourceMapXInput,\n  EncodedSourceMapXInput,\n  SectionedSourceMapXInput,\n  SectionedSourceMapInput,\n  SectionXInput,\n} from './types';\nimport type { SourceMapSegment } from './sourcemap-segment';\n\ntype AnyMap = {\n  new (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n  (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n};\n\nexport const AnyMap: AnyMap = function (map, mapUrl) {\n  const parsed = parse(map);\n\n  if (!('sections' in parsed)) {\n    return new TraceMap(parsed as DecodedSourceMapXInput | EncodedSourceMapXInput, mapUrl);\n  }\n\n  const mappings: SourceMapSegment[][] = [];\n  const sources: string[] = [];\n  const sourcesContent: (string | null)[] = [];\n  const names: string[] = [];\n  const ignoreList: number[] = [];\n\n  recurse(\n    parsed,\n    mapUrl,\n    mappings,\n    sources,\n    sourcesContent,\n    names,\n    ignoreList,\n    0,\n    0,\n    Infinity,\n    Infinity,\n  );\n\n  const joined: DecodedSourceMap = {\n    version: 3,\n    file: parsed.file,\n    names,\n    sources,\n    sourcesContent,\n    mappings,\n    ignoreList,\n  };\n\n  return presortedDecodedMap(joined);\n} as AnyMap;\n\nfunction parse<T>(map: T): Exclude<T, string> {\n  return typeof map === 'string' ? JSON.parse(map) : map;\n}\n\nfunction recurse(\n  input: SectionedSourceMapXInput,\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  ignoreList: number[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  const { sections } = input;\n  for (let i = 0; i < sections.length; i++) {\n    const { map, offset } = sections[i];\n\n    let sl = stopLine;\n    let sc = stopColumn;\n    if (i + 1 < sections.length) {\n      const nextOffset = sections[i + 1].offset;\n      sl = Math.min(stopLine, lineOffset + nextOffset.line);\n\n      if (sl === stopLine) {\n        sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n      } else if (sl < stopLine) {\n        sc = columnOffset + nextOffset.column;\n      }\n    }\n\n    addSection(\n      map,\n      mapUrl,\n      mappings,\n      sources,\n      sourcesContent,\n      names,\n      ignoreList,\n      lineOffset + offset.line,\n      columnOffset + offset.column,\n      sl,\n      sc,\n    );\n  }\n}\n\nfunction addSection(\n  input: SectionXInput['map'],\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  ignoreList: number[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  const parsed = parse(input);\n  if ('sections' in parsed) return recurse(...(arguments as unknown as Parameters<typeof recurse>));\n\n  const map = new TraceMap(parsed, mapUrl);\n  const sourcesOffset = sources.length;\n  const namesOffset = names.length;\n  const decoded = decodedMappings(map);\n  const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;\n\n  append(sources, resolvedSources);\n  append(names, map.names);\n\n  if (contents) append(sourcesContent, contents);\n  else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);\n\n  if (ignores) for (let i = 0; i < ignores.length; i++) ignoreList.push(ignores[i] + sourcesOffset);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const lineI = lineOffset + i;\n\n    // We can only add so many lines before we step into the range that the next section's map\n    // controls. When we get to the last line, then we'll start checking the segments to see if\n    // they've crossed into the column range. But it may not have any columns that overstep, so we\n    // still need to check that we don't overstep lines, too.\n    if (lineI > stopLine) return;\n\n    // The out line may already exist in mappings (if we're continuing the line started by a\n    // previous section). Or, we may have jumped ahead several lines to start this section.\n    const out = getLine(mappings, lineI);\n    // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n    // map can be multiple lines), it doesn't.\n    const cOffset = i === 0 ? columnOffset : 0;\n\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      const column = cOffset + seg[COLUMN];\n\n      // If this segment steps into the column range that the next section's map controls, we need\n      // to stop early.\n      if (lineI === stopLine && column >= stopColumn) return;\n\n      if (seg.length === 1) {\n        out.push([column]);\n        continue;\n      }\n\n      const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      out.push(\n        seg.length === 4\n          ? [column, sourcesIndex, sourceLine, sourceColumn]\n          : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]],\n      );\n    }\n  }\n}\n\nfunction append<T>(arr: T[], other: T[]) {\n  for (let i = 0; i < other.length; i++) arr.push(other[i]);\n}\n\nfunction getLine<T>(arr: T[][], index: number): T[] {\n  for (let i = arr.length; i <= index; i++) arr[i] = [];\n  return arr[index];\n}\n", "import { encode, decode } from '@jridgewell/sourcemap-codec';\n\nimport resolve from './resolve';\nimport stripFilename from './strip-filename';\nimport maybeSort from './sort';\nimport buildBySources from './by-source';\nimport {\n  memoizedState,\n  memoizedBinarySearch,\n  upperBound,\n  lowerBound,\n  found as bsFound,\n} from './binary-search';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n  REV_GENERATED_LINE,\n  REV_GENERATED_COLUMN,\n} from './sourcemap-segment';\n\nimport type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport type {\n  SourceMapV3,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  InvalidOriginalMapping,\n  OriginalMapping,\n  InvalidGeneratedMapping,\n  GeneratedMapping,\n  SourceMapInput,\n  Needle,\n  SourceNeedle,\n  SourceMap,\n  EachMapping,\n  Bias,\n  XInput,\n} from './types';\nimport type { Source } from './by-source';\nimport type { MemoState } from './binary-search';\n\nexport type { SourceMapSegment } from './sourcemap-segment';\nexport type {\n  SourceMap,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  Section,\n  SectionedSourceMap,\n  SourceMapV3,\n  Bias,\n  EachMapping,\n  GeneratedMapping,\n  InvalidGeneratedMapping,\n  InvalidOriginalMapping,\n  Needle,\n  OriginalMapping,\n  OriginalMapping as Mapping,\n  SectionedSourceMapInput,\n  SourceMapInput,\n  SourceNeedle,\n  XInput,\n  EncodedSourceMapXInput,\n  DecodedSourceMapXInput,\n  SectionedSourceMapXInput,\n  SectionXInput,\n} from './types';\n\ninterface PublicMap {\n  _encoded: TraceMap['_encoded'];\n  _decoded: TraceMap['_decoded'];\n  _decodedMemo: TraceMap['_decodedMemo'];\n  _bySources: TraceMap['_bySources'];\n  _bySourceMemos: TraceMap['_bySourceMemos'];\n}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n\nexport const LEAST_UPPER_BOUND = -1;\nexport const GREATEST_LOWER_BOUND = 1;\n\nexport { AnyMap } from './any-map';\n\nexport class TraceMap implements SourceMap {\n  declare version: SourceMapV3['version'];\n  declare file: SourceMapV3['file'];\n  declare names: SourceMapV3['names'];\n  declare sourceRoot: SourceMapV3['sourceRoot'];\n  declare sources: SourceMapV3['sources'];\n  declare sourcesContent: SourceMapV3['sourcesContent'];\n  declare ignoreList: SourceMapV3['ignoreList'];\n\n  declare resolvedSources: string[];\n  private declare _encoded: string | undefined;\n\n  private declare _decoded: SourceMapSegment[][] | undefined;\n  private declare _decodedMemo: MemoState;\n\n  private declare _bySources: Source[] | undefined;\n  private declare _bySourceMemos: MemoState[] | undefined;\n\n  constructor(map: SourceMapInput, mapUrl?: string | null) {\n    const isString = typeof map === 'string';\n\n    if (!isString && (map as unknown as { _decodedMemo: any })._decodedMemo) return map as TraceMap;\n\n    const parsed = (isString ? JSON.parse(map) : map) as DecodedSourceMap | EncodedSourceMap;\n\n    const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n    this.version = version;\n    this.file = file;\n    this.names = names || [];\n    this.sourceRoot = sourceRoot;\n    this.sources = sources;\n    this.sourcesContent = sourcesContent;\n    this.ignoreList = parsed.ignoreList || (parsed as XInput).x_google_ignoreList || undefined;\n\n    const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n    this.resolvedSources = sources.map((s) => resolve(s || '', from));\n\n    const { mappings } = parsed;\n    if (typeof mappings === 'string') {\n      this._encoded = mappings;\n      this._decoded = undefined;\n    } else {\n      this._encoded = undefined;\n      this._decoded = maybeSort(mappings, isString);\n    }\n\n    this._decodedMemo = memoizedState();\n    this._bySources = undefined;\n    this._bySourceMemos = undefined;\n  }\n}\n\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map: unknown): PublicMap {\n  return map as any;\n}\n\n/**\n * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n */\nexport function encodedMappings(map: TraceMap): EncodedSourceMap['mappings'] {\n  return (cast(map)._encoded ??= encode(cast(map)._decoded!));\n}\n\n/**\n * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n */\nexport function decodedMappings(map: TraceMap): Readonly<DecodedSourceMap['mappings']> {\n  return (cast(map)._decoded ||= decode(cast(map)._encoded!));\n}\n\n/**\n * A low-level API to find the segment associated with a generated line/column (think, from a\n * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n */\nexport function traceSegment(\n  map: TraceMap,\n  line: number,\n  column: number,\n): Readonly<SourceMapSegment> | null {\n  const decoded = decodedMappings(map);\n\n  // It's common for parent source maps to have pointers to lines that have no\n  // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n  if (line >= decoded.length) return null;\n\n  const segments = decoded[line];\n  const index = traceSegmentInternal(\n    segments,\n    cast(map)._decodedMemo,\n    line,\n    column,\n    GREATEST_LOWER_BOUND,\n  );\n\n  return index === -1 ? null : segments[index];\n}\n\n/**\n * A higher-level API to find the source/line/column associated with a generated line/column\n * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n * `source-map` library.\n */\nexport function originalPositionFor(\n  map: TraceMap,\n  needle: Needle,\n): OriginalMapping | InvalidOriginalMapping {\n  let { line, column, bias } = needle;\n  line--;\n  if (line < 0) throw new Error(LINE_GTR_ZERO);\n  if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n  const decoded = decodedMappings(map);\n\n  // It's common for parent source maps to have pointers to lines that have no\n  // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n  if (line >= decoded.length) return OMapping(null, null, null, null);\n\n  const segments = decoded[line];\n  const index = traceSegmentInternal(\n    segments,\n    cast(map)._decodedMemo,\n    line,\n    column,\n    bias || GREATEST_LOWER_BOUND,\n  );\n\n  if (index === -1) return OMapping(null, null, null, null);\n\n  const segment = segments[index];\n  if (segment.length === 1) return OMapping(null, null, null, null);\n\n  const { names, resolvedSources } = map;\n  return OMapping(\n    resolvedSources[segment[SOURCES_INDEX]],\n    segment[SOURCE_LINE] + 1,\n    segment[SOURCE_COLUMN],\n    segment.length === 5 ? names[segment[NAMES_INDEX]] : null,\n  );\n}\n\n/**\n * Finds the generated line/column position of the provided source/line/column source position.\n */\nexport function generatedPositionFor(\n  map: TraceMap,\n  needle: SourceNeedle,\n): GeneratedMapping | InvalidGeneratedMapping {\n  const { source, line, column, bias } = needle;\n  return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n}\n\n/**\n * Finds all generated line/column positions of the provided source/line/column source position.\n */\nexport function allGeneratedPositionsFor(map: TraceMap, needle: SourceNeedle): GeneratedMapping[] {\n  const { source, line, column, bias } = needle;\n  // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n  return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n}\n\n/**\n * Iterates each mapping in generated position order.\n */\nexport function eachMapping(map: TraceMap, cb: (mapping: EachMapping) => void): void {\n  const decoded = decodedMappings(map);\n  const { names, resolvedSources } = map;\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n\n      const generatedLine = i + 1;\n      const generatedColumn = seg[0];\n      let source = null;\n      let originalLine = null;\n      let originalColumn = null;\n      let name = null;\n      if (seg.length !== 1) {\n        source = resolvedSources[seg[1]];\n        originalLine = seg[2] + 1;\n        originalColumn = seg[3];\n      }\n      if (seg.length === 5) name = names[seg[4]];\n\n      cb({\n        generatedLine,\n        generatedColumn,\n        source,\n        originalLine,\n        originalColumn,\n        name,\n      } as EachMapping);\n    }\n  }\n}\n\nfunction sourceIndex(map: TraceMap, source: string): number {\n  const { sources, resolvedSources } = map;\n  let index = sources.indexOf(source);\n  if (index === -1) index = resolvedSources.indexOf(source);\n  return index;\n}\n\n/**\n * Retrieves the source content for a particular source, if its found. Returns null if not.\n */\nexport function sourceContentFor(map: TraceMap, source: string): string | null {\n  const { sourcesContent } = map;\n  if (sourcesContent == null) return null;\n  const index = sourceIndex(map, source);\n  return index === -1 ? null : sourcesContent[index];\n}\n\n/**\n * Determines if the source is marked to ignore by the source map.\n */\nexport function isIgnored(map: TraceMap, source: string): boolean {\n  const { ignoreList } = map;\n  if (ignoreList == null) return false;\n  const index = sourceIndex(map, source);\n  return index === -1 ? false : ignoreList.includes(index);\n}\n\n/**\n * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n * maps.\n */\nexport function presortedDecodedMap(map: DecodedSourceMap, mapUrl?: string): TraceMap {\n  const tracer = new TraceMap(clone(map, []), mapUrl);\n  cast(tracer)._decoded = map.mappings;\n  return tracer;\n}\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function decodedMap(\n  map: TraceMap,\n): Omit<DecodedSourceMap, 'mappings'> & { mappings: readonly SourceMapSegment[][] } {\n  return clone(map, decodedMappings(map));\n}\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function encodedMap(map: TraceMap): EncodedSourceMap {\n  return clone(map, encodedMappings(map));\n}\n\nfunction clone<T extends string | readonly SourceMapSegment[][]>(\n  map: TraceMap | DecodedSourceMap,\n  mappings: T,\n): T extends string ? EncodedSourceMap : DecodedSourceMap {\n  return {\n    version: map.version,\n    file: map.file,\n    names: map.names,\n    sourceRoot: map.sourceRoot,\n    sources: map.sources,\n    sourcesContent: map.sourcesContent,\n    mappings,\n    ignoreList: map.ignoreList || (map as XInput).x_google_ignoreList,\n  } as any;\n}\n\nfunction OMapping(source: null, line: null, column: null, name: null): InvalidOriginalMapping;\nfunction OMapping(\n  source: string,\n  line: number,\n  column: number,\n  name: string | null,\n): OriginalMapping;\nfunction OMapping(\n  source: string | null,\n  line: number | null,\n  column: number | null,\n  name: string | null,\n): OriginalMapping | InvalidOriginalMapping {\n  return { source, line, column, name } as any;\n}\n\nfunction GMapping(line: null, column: null): InvalidGeneratedMapping;\nfunction GMapping(line: number, column: number): GeneratedMapping;\nfunction GMapping(\n  line: number | null,\n  column: number | null,\n): GeneratedMapping | InvalidGeneratedMapping {\n  return { line, column } as any;\n}\n\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[] | ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number {\n  let index = memoizedBinarySearch(segments, column, memo, line);\n  if (bsFound) {\n    index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n  } else if (bias === LEAST_UPPER_BOUND) index++;\n\n  if (index === -1 || index === segments.length) return -1;\n  return index;\n}\n\nfunction sliceGeneratedPositions(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): GeneratedMapping[] {\n  let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);\n\n  // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n  // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n  // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n  // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n  // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n  // match LEAST_UPPER_BOUND.\n  if (!bsFound && bias === LEAST_UPPER_BOUND) min++;\n\n  if (min === -1 || min === segments.length) return [];\n\n  // We may have found the segment that started at an earlier column. If this is the case, then we\n  // need to slice all generated segments that match _that_ column, because all such segments span\n  // to our desired column.\n  const matchedColumn = bsFound ? column : segments[min][COLUMN];\n\n  // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n  if (!bsFound) min = lowerBound(segments, matchedColumn, min);\n  const max = upperBound(segments, matchedColumn, min);\n\n  const result = [];\n  for (; min <= max; min++) {\n    const segment = segments[min];\n    result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n  }\n  return result;\n}\n\nfunction generatedPosition(\n  map: TraceMap,\n  source: string,\n  line: number,\n  column: number,\n  bias: Bias,\n  all: false,\n): GeneratedMapping | InvalidGeneratedMapping;\nfunction generatedPosition(\n  map: TraceMap,\n  source: string,\n  line: number,\n  column: number,\n  bias: Bias,\n  all: true,\n): GeneratedMapping[];\nfunction generatedPosition(\n  map: TraceMap,\n  source: string,\n  line: number,\n  column: number,\n  bias: Bias,\n  all: boolean,\n): GeneratedMapping | InvalidGeneratedMapping | GeneratedMapping[] {\n  line--;\n  if (line < 0) throw new Error(LINE_GTR_ZERO);\n  if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n  const { sources, resolvedSources } = map;\n  let sourceIndex = sources.indexOf(source);\n  if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);\n  if (sourceIndex === -1) return all ? [] : GMapping(null, null);\n\n  const generated = (cast(map)._bySources ||= buildBySources(\n    decodedMappings(map),\n    (cast(map)._bySourceMemos = sources.map(memoizedState)),\n  ));\n\n  const segments = generated[sourceIndex][line];\n  if (segments == null) return all ? [] : GMapping(null, null);\n\n  const memo = cast(map)._bySourceMemos![sourceIndex];\n\n  if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);\n\n  const index = traceSegmentInternal(segments, memo, line, column, bias);\n  if (index === -1) return GMapping(null, null);\n\n  const segment = segments[index];\n  return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n}\n", "type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n", "import { SetArray, put, remove } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private declare _names: SetArray<string>;\n  private declare _sources: SetArray<string>;\n  private declare _sourcesContent: (string | null)[];\n  private declare _mappings: SourceMapSegment[][];\n  private declare _ignoreList: SetArray<number>;\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this._names = new SetArray();\n    this._sources = new SetArray();\n    this._sourcesContent = [];\n    this._mappings = [];\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n    this._ignoreList = new SetArray();\n  }\n}\n\ninterface PublicMap {\n  _names: GenMapping['_names'];\n  _sources: GenMapping['_sources'];\n  _sourcesContent: GenMapping['_sourcesContent'];\n  _mappings: GenMapping['_mappings'];\n  _ignoreList: GenMapping['_ignoreList'];\n}\n\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map: unknown): PublicMap {\n  return map as any;\n}\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: null,\n  sourceLine?: null,\n  sourceColumn?: null,\n  name?: null,\n  content?: null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name?: null,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name: string,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: string | null,\n  sourceLine?: number | null,\n  sourceColumn?: number | null,\n  name?: string | null,\n  content?: string | null,\n): void {\n  return addSegmentInternal(\n    false,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n}\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: null;\n    original?: null;\n    name?: null;\n    content?: null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name?: null;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name: string;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: string | null;\n    original?: Pos | null;\n    name?: string | null;\n    content?: string | null;\n  },\n): void {\n  return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n}\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport const maybeAddSegment: typeof addSegment = (\n  map,\n  genLine,\n  genColumn,\n  source,\n  sourceLine,\n  sourceColumn,\n  name,\n  content,\n) => {\n  return addSegmentInternal(\n    true,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n};\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport const maybeAddMapping: typeof addMapping = (map, mapping) => {\n  return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n};\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport function setSourceContent(map: GenMapping, source: string, content: string | null): void {\n  const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);\n  const index = put(sources, source);\n  sourcesContent[index] = content;\n}\n\nexport function setIgnore(map: GenMapping, source: string, ignore = true) {\n  const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);\n  const index = put(sources, source);\n  if (index === sourcesContent.length) sourcesContent[index] = null;\n  if (ignore) put(ignoreList, index);\n  else remove(ignoreList, index);\n}\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toDecodedMap(map: GenMapping): DecodedSourceMap {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n    _ignoreList: ignoreList,\n  } = cast(map);\n  removeEmptyFinalLines(mappings);\n\n  return {\n    version: 3,\n    file: map.file || undefined,\n    names: names.array,\n    sourceRoot: map.sourceRoot || undefined,\n    sources: sources.array,\n    sourcesContent,\n    mappings,\n    ignoreList: ignoreList.array,\n  };\n}\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toEncodedMap(map: GenMapping): EncodedSourceMap {\n  const decoded = toDecodedMap(map);\n  return {\n    ...decoded,\n    mappings: encode(decoded.mappings as SourceMapSegment[][]),\n  };\n}\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport function fromMap(input: SourceMapInput): GenMapping {\n  const map = new TraceMap(input);\n  const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n  putAll(cast(gen)._names, map.names);\n  putAll(cast(gen)._sources, map.sources as string[]);\n  cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n  cast(gen)._mappings = decodedMappings(map) as GenMapping['_mappings'];\n  if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);\n\n  return gen;\n}\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport function allMappings(map: GenMapping): Mapping[] {\n  const out: Mapping[] = [];\n  const { _mappings: mappings, _sources: sources, _names: names } = cast(map);\n\n  for (let i = 0; i < mappings.length; i++) {\n    const line = mappings[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n\n      const generated = { line: i + 1, column: seg[COLUMN] };\n      let source: string | undefined = undefined;\n      let original: Pos | undefined = undefined;\n      let name: string | undefined = undefined;\n\n      if (seg.length !== 1) {\n        source = sources.array[seg[SOURCES_INDEX]];\n        original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n        if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n      }\n\n      out.push({ generated, source, original, name } as Mapping);\n    }\n  }\n\n  return out;\n}\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nfunction addSegmentInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n): void {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n  } = cast(map);\n  const line = getLine(mappings, genLine);\n  const index = getColumnIndex(line, genColumn);\n\n  if (!source) {\n    if (skipable && skipSourceless(line, index)) return;\n    return insert(line, index, [genColumn]);\n  }\n\n  // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n  // isn't nullish.\n  assert<number>(sourceLine);\n  assert<number>(sourceColumn);\n\n  const sourcesIndex = put(sources, source);\n  const namesIndex = name ? put(names, name) : NO_NAME;\n  if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n  if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n    return;\n  }\n\n  return insert(\n    line,\n    index,\n    name\n      ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n      : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n  );\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll<T extends string | number>(setarr: SetArray<T>, array: T[]) {\n  for (let i = 0; i < array.length; i++) put(setarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    source as string,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n", "import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\nimport {\n  type SourceMapInput,\n  originalPositionFor,\n  TraceMap,\n} from \"@jridgewell/trace-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we only check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  public _inputMap: TraceMap;\n\n  constructor(\n    opts: {\n      sourceFileName?: string;\n      sourceRoot?: string;\n      inputSourceMap?: SourceMapInput;\n    },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (opts.inputSourceMap) {\n      this._inputMap = new TraceMap(opts.inputSourceMap);\n      const resolvedSources = this._inputMap.resolvedSources;\n      if (resolvedSources.length) {\n        for (let i = 0; i < resolvedSources.length; i++) {\n          setSourceContent(\n            map,\n            resolvedSources[i],\n            this._inputMap.sourcesContent?.[i],\n          );\n        }\n      }\n    }\n\n    if (typeof code === \"string\" && !opts.inputSourceMap) {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      for (const sourceFileName of Object.keys(code)) {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      }\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    identifierNamePos?: { line: number; column: number },\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    let originalMapping: {\n      source: string | null;\n      name?: string | null;\n      line: number | null;\n      column: number | null;\n    };\n\n    if (line != null) {\n      if (this._inputMap) {\n        // This is the lookup for this mark\n        originalMapping = originalPositionFor(this._inputMap, {\n          line,\n          column,\n        });\n\n        // If the we found a name, nothing else needs to be done\n        // Maybe we're marking a `(` and the input map already had a name attached there,\n        // or we're marking a `(` and the sourcemap spanned a `foo(`,\n        // or we're marking an identifier, etc.\n        if (!originalMapping.name && identifierNamePos) {\n          // We're trying to mark a `(` (as that's the only thing that provides\n          // an identifierNamePos currently), and we the AST had an identifier attached.\n          // Lookup it's original name.\n          const originalIdentifierMapping = originalPositionFor(\n            this._inputMap,\n            identifierNamePos,\n          );\n          if (originalIdentifierMapping.name) {\n            identifierName = originalIdentifierMapping.name;\n          }\n        }\n      } else {\n        originalMapping = {\n          source: filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n          line: line,\n          column: column,\n        };\n      }\n    }\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source: originalMapping?.source,\n      original: originalMapping,\n    });\n  }\n}\n", "import type SourceMap from \"./source-map.ts\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charcodes from \"charcodes\";\n\nexport type Pos = {\n  line: number;\n  column: number;\n};\nexport type Loc = {\n  start?: Pos;\n  end?: Pos;\n  filename?: string;\n};\ntype SourcePos = {\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: string | undefined;\n  filename: string | undefined;\n};\ntype InternalSourcePos = SourcePos & { identifierNamePos: Pos };\n\ntype QueueItem = {\n  char: number;\n  repeat: number;\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: undefined; // Not used, it always undefined.\n  identifierNamePos: undefined; // Not used, it always undefined.\n  filename: string | undefined;\n};\n\nexport default class Buffer {\n  constructor(map: SourceMap | null, indentChar: string) {\n    this._map = map;\n    this._indentChar = indentChar;\n\n    for (let i = 0; i < 64; i++) {\n      this._fastIndentations.push(indentChar.repeat(i));\n    }\n\n    this._allocQueue();\n  }\n\n  _map: SourceMap = null;\n  _buf = \"\";\n  _str = \"\";\n  _appendCount = 0;\n  _last = 0;\n  _queue: QueueItem[] = [];\n  _queueCursor = 0;\n  _canMarkIdName = true;\n  _indentChar = \"\";\n  _fastIndentations: string[] = [];\n\n  _position = {\n    line: 1,\n    column: 0,\n  };\n  _sourcePosition: InternalSourcePos = {\n    identifierName: undefined,\n    identifierNamePos: undefined,\n    line: undefined,\n    column: undefined,\n    filename: undefined,\n  };\n\n  _allocQueue() {\n    const queue = this._queue;\n\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        identifierNamePos: undefined,\n        filename: \"\",\n      });\n    }\n  }\n\n  _pushQueue(\n    char: number,\n    repeat: number,\n    line: number | undefined,\n    column: number | undefined,\n    filename: string | undefined,\n  ) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.filename = filename;\n\n    this._queueCursor++;\n  }\n\n  _popQueue(): QueueItem {\n    if (this._queueCursor === 0) {\n      throw new Error(\"Cannot pop from empty queue\");\n    }\n    return this._queue[--this._queueCursor];\n  }\n\n  /**\n   * Get the final string output from the buffer, along with the sourcemap if one exists.\n   */\n\n  get() {\n    this._flush();\n\n    const map = this._map;\n    const result = {\n      // Whatever trim is used here should not execute a regex against the\n      // source string since it may be arbitrarily large after all transformations\n      code: (this._buf + this._str).trimRight(),\n      // Decoded sourcemap is free to generate.\n      decodedMap: map?.getDecoded(),\n      // Used as a marker for backwards compatibility. We moved input map merging\n      // into the generator. We cannot merge the input map a second time, so the\n      // presence of this field tells us we've already done the work.\n      get __mergedMap() {\n        return this.map;\n      },\n      // Encoding the sourcemap is moderately CPU expensive.\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, \"map\", { value, writable: true });\n      },\n      // Retrieving the raw mappings is very memory intensive.\n      get rawMappings() {\n        const mappings = map?.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, \"rawMappings\", { value, writable: true });\n      },\n    };\n\n    return result;\n  }\n\n  /**\n   * Add a string to the buffer that cannot be reverted.\n   */\n\n  append(str: string, maybeNewline: boolean): void {\n    this._flush();\n\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n\n  appendChar(char: number): void {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n\n  /**\n   * Add a string to the buffer than can be reverted.\n   */\n  queue(char: number): void {\n    // Drop trailing spaces when a newline is inserted.\n    if (char === charcodes.lineFeed) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== charcodes.space && char !== charcodes.tab) {\n          break;\n        }\n\n        this._queueCursor--;\n      }\n    }\n\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(\n      char,\n      1,\n      sourcePosition.line,\n      sourcePosition.column,\n      sourcePosition.filename,\n    );\n  }\n\n  /**\n   * Same as queue, but this indentation will never have a sourcemap marker.\n   */\n  queueIndentation(repeat: number): void {\n    if (repeat === 0) return;\n    this._pushQueue(-1, repeat, undefined, undefined, undefined);\n  }\n\n  _flush(): void {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item: QueueItem = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n\n  _appendChar(\n    char: number,\n    repeat: number,\n    sourcePos: InternalSourcePos,\n  ): void {\n    this._last = char;\n\n    if (char === -1) {\n      const fastIndentation = this._fastIndentations[repeat];\n      if (fastIndentation !== undefined) {\n        this._str += fastIndentation;\n      } else {\n        this._str +=\n          repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;\n      }\n    } else {\n      this._str +=\n        repeat > 1\n          ? String.fromCharCode(char).repeat(repeat)\n          : String.fromCharCode(char);\n    }\n\n    if (char !== charcodes.lineFeed) {\n      this._mark(\n        sourcePos.line,\n        sourcePos.column,\n        sourcePos.identifierName,\n        sourcePos.identifierNamePos,\n        sourcePos.filename,\n      );\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n\n    if (this._canMarkIdName) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n  }\n\n  _append(\n    str: string,\n    sourcePos: InternalSourcePos,\n    maybeNewline: boolean,\n  ): void {\n    const len = str.length;\n    const position = this._position;\n\n    this._last = str.charCodeAt(len - 1);\n\n    if (++this._appendCount > 4096) {\n      +this._str; // Unexplainable huge performance boost. Ref: https://github.com/davidmarkclements/flatstr License: MIT\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n\n    const { column, identifierName, identifierNamePos, filename } = sourcePos;\n    let line = sourcePos.line;\n\n    if (\n      (identifierName != null || identifierNamePos != null) &&\n      this._canMarkIdName\n    ) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n\n    // Search for newline chars. We search only for `\\n`, since both `\\r` and\n    // `\\r\\n` are normalized to `\\n` during parse. We exclude `\\u2028` and\n    // `\\u2029` for performance reasons, they're so uncommon that it's probably\n    // ok. It's also unclear how other sourcemap utilities handle them...\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n\n    // If the string starts with a newline char, then adding a mark is redundant.\n    // This catches both \"no newlines\" and \"newline after several chars\".\n    if (i !== 0) {\n      this._mark(line, column, identifierName, identifierNamePos, filename);\n    }\n\n    // Now, find each remaining newline char in the string.\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n\n      // We mark the start of each line, which happens directly after this newline char\n      // unless this is the last char.\n      // When manually adding multi-line content (such as a comment), `line` will be `undefined`.\n      if (last < len && line !== undefined) {\n        this._mark(++line, 0, null, null, filename);\n      }\n      i = str.indexOf(\"\\n\", last);\n    }\n    position.column += len - last;\n  }\n\n  _mark(\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    identifierNamePos: Pos | undefined,\n    filename: string | undefined,\n  ): void {\n    this._map?.mark(\n      this._position,\n      line,\n      column,\n      identifierName,\n      identifierNamePos,\n      filename,\n    );\n  }\n\n  removeTrailingNewline(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.lineFeed\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  removeLastSemicolon(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.semicolon\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  getLastChar(): number {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n\n  /**\n   * This will only detect at most 1 newline after a call to `flush()`,\n   * but this has not been found so far, and an accurate count can be achieved if needed later.\n   */\n  getNewlineCount(): number {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === charcodes.lineFeed ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== charcodes.lineFeed) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === charcodes.lineFeed\n      ? count + 1\n      : count;\n  }\n\n  /**\n   * check if current _last + queue ends with newline, return the character before newline\n   */\n  endsWithCharAndNewline(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      // every element in queue is one-length whitespace string\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== charcodes.lineFeed) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n    // We assume that everything being matched is at most a single token plus some whitespace,\n    // which everything currently is, but otherwise we'd have to expand _last or check _buf.\n  }\n\n  hasContent(): boolean {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n\n  /**\n   * Certain sourcemap usecases expect mappings to be more accurate than\n   * Babel's generic sourcemap handling allows. For now, we special-case\n   * identifiers to allow for the primary cases to work.\n   * The goal of this line is to ensure that the map output from Babel will\n   * have an exact range on identifiers in the output code. Without this\n   * line, Babel would potentially include some number of trailing tokens\n   * that are printed after the identifier, but before another location has\n   * been assigned.\n   * This allows tooling like Rollup and Webpack to more accurately perform\n   * their own transformations. Most importantly, this allows the import/export\n   * transformations performed by those tools to loose less information when\n   * applying their own transformations on top of the code and map results\n   * generated by Babel itself.\n   *\n   * The primary example of this is the snippet:\n   *\n   *   import mod from \"mod\";\n   *   mod();\n   *\n   * With this line, there will be one mapping range over \"mod\" and another\n   * over \"();\", where previously it would have been a single mapping.\n   */\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!this._map) {\n      cb();\n      return;\n    }\n\n    this.source(\"start\", loc);\n    // @ts-expect-error identifierName is not defined\n    const identifierName = loc.identifierName;\n    const sourcePos = this._sourcePosition;\n    if (identifierName) {\n      this._canMarkIdName = false;\n      sourcePos.identifierName = identifierName;\n    }\n    cb();\n\n    if (identifierName) {\n      this._canMarkIdName = true;\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n    this.source(\"end\", loc);\n  }\n\n  /**\n   * Sets a given position as the current source location so generated code after this call\n   * will be given this position in the sourcemap.\n   */\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!this._map) return;\n\n    // Since this is called extremely often, we reuse the same _sourcePosition\n    // object for the whole lifetime of the buffer.\n    this._normalizePosition(prop, loc, 0);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    columnOffset: number,\n  ): void {\n    if (!this._map) return;\n\n    this._normalizePosition(prop, loc, columnOffset);\n  }\n\n  /**\n   * Call a callback with a specific source location\n   */\n\n  withSource(prop: \"start\" | \"end\", loc: Loc, cb: () => void): void {\n    if (this._map) {\n      this.source(prop, loc);\n    }\n\n    cb();\n  }\n\n  _normalizePosition(prop: \"start\" | \"end\", loc: Loc, columnOffset: number) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n\n    if (pos) {\n      target.line = pos.line;\n      // TODO: Fix https://github.com/babel/babel/issues/15712 in downstream\n      target.column = Math.max(pos.column + columnOffset, 0);\n      target.filename = loc.filename;\n    }\n  }\n\n  getCurrentColumn(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === charcodes.lineFeed) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n\n  getCurrentLine(): number {\n    let count = 0;\n\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === charcodes.lineFeed) {\n        count++;\n      }\n    }\n\n    return this._position.line + count;\n  }\n}\n", "import {\n  FLIPPED_ALIAS_KEYS,\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral,\n} from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nimport type { NodeHandlers } from \"./index.ts\";\n\nimport type * as t from \"@babel/types\";\n\nconst enum WhitespaceFlag {\n  before = 1 << 0,\n  after = 1 << 1,\n}\n\nexport type { WhitespaceFlag };\n\nfunction crawlInternal(\n  node: t.Node,\n  state: { hasCall: boolean; hasFunction: boolean; hasHelper: boolean },\n) {\n  if (!node) return state;\n\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawlInternal(node.object, state);\n    if (node.computed) crawlInternal(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawlInternal(node.left, state);\n    crawlInternal(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawlInternal(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper =\n      // @ts-expect-error todo(flow->ts): node.callee is not really expected here…\n      state.hasHelper || (node.callee && isHelper(node.callee));\n  }\n\n  return state;\n}\n\n/**\n * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.\n *\n * @example\n * crawl(node)\n * // { hasCall: false, hasFunction: true, hasHelper: false }\n */\n\nfunction crawl(node: t.Node) {\n  return crawlInternal(node, {\n    hasCall: false,\n    hasFunction: false,\n    hasHelper: false,\n  });\n}\n\n/**\n * Test if a node is or has a helper.\n */\n\nfunction isHelper(node: t.Node): boolean {\n  if (!node) return false;\n\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return (\n      node.name === \"require\" ||\n      node.name.charCodeAt(0) === charCodes.underscore\n    );\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return (\n      (isIdentifier(node.left) && isHelper(node.left)) || isHelper(node.right)\n    );\n  } else {\n    return false;\n  }\n}\n\nfunction isType(node: t.Node) {\n  return (\n    isLiteral(node) ||\n    isObjectExpression(node) ||\n    isArrayExpression(node) ||\n    isIdentifier(node) ||\n    isMemberExpression(node)\n  );\n}\n\n/**\n * Tests for node types that need whitespace.\n */\n\nexport const nodes: NodeHandlers<WhitespaceFlag> = {\n  /**\n   * Test if AssignmentExpression needs whitespace.\n   */\n\n  AssignmentExpression(node: t.AssignmentExpression): WhitespaceFlag {\n    const state = crawl(node.right);\n    if ((state.hasCall && state.hasHelper) || state.hasFunction) {\n      return state.hasFunction\n        ? WhitespaceFlag.before | WhitespaceFlag.after\n        : WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if SwitchCase needs whitespace.\n   */\n\n  SwitchCase(node: t.SwitchCase, parent: t.SwitchStatement): WhitespaceFlag {\n    return (\n      (!!node.consequent.length || parent.cases[0] === node\n        ? WhitespaceFlag.before\n        : 0) |\n      (!node.consequent.length && parent.cases[parent.cases.length - 1] === node\n        ? WhitespaceFlag.after\n        : 0)\n    );\n  },\n\n  /**\n   * Test if LogicalExpression needs whitespace.\n   */\n\n  LogicalExpression(node: t.LogicalExpression): WhitespaceFlag {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if Literal needs whitespace.\n   */\n\n  Literal(node: t.Literal): WhitespaceFlag {\n    if (isStringLiteral(node) && node.value === \"use strict\") {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if CallExpressionish needs whitespace.\n   */\n\n  CallExpression(node: t.CallExpression): WhitespaceFlag {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  OptionalCallExpression(node: t.OptionalCallExpression): WhitespaceFlag {\n    if (isFunction(node.callee)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if VariableDeclaration needs whitespace.\n   */\n\n  VariableDeclaration(node: t.VariableDeclaration): WhitespaceFlag {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n      if (!enabled && declar.init) {\n        const state = crawl(declar.init);\n        enabled = (isHelper(declar.init) && state.hasCall) || state.hasFunction;\n      }\n\n      if (enabled) {\n        return WhitespaceFlag.before | WhitespaceFlag.after;\n      }\n    }\n  },\n\n  /**\n   * Test if IfStatement needs whitespace.\n   */\n\n  IfStatement(node: t.IfStatement): WhitespaceFlag {\n    if (isBlockStatement(node.consequent)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n};\n\n/**\n * Test if Property needs whitespace.\n */\n\nnodes.ObjectProperty =\n  nodes.ObjectTypeProperty =\n  nodes.ObjectMethod =\n    function (\n      node: t.ObjectProperty | t.ObjectTypeProperty | t.ObjectMethod,\n      parent: t.ObjectExpression,\n    ): WhitespaceFlag {\n      if (parent.properties[0] === node) {\n        return WhitespaceFlag.before;\n      }\n    };\n\nnodes.ObjectTypeCallProperty = function (\n  node: t.ObjectTypeCallProperty,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (parent.callProperties[0] === node && !parent.properties?.length) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeIndexer = function (\n  node: t.ObjectTypeIndexer,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.indexers[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeInternalSlot = function (\n  node: t.ObjectTypeInternalSlot,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.internalSlots[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length &&\n    !parent.indexers?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\n/**\n * Add whitespace tests for nodes and their aliases.\n */\n\n(\n  [\n    [\"Function\", true],\n    [\"Class\", true],\n    [\"Loop\", true],\n    [\"LabeledStatement\", true],\n    [\"SwitchStatement\", true],\n    [\"TryStatement\", true],\n  ] as const\n).forEach(function ([type, amounts]) {\n  [type as string]\n    .concat(FLIPPED_ALIAS_KEYS[type] || [])\n    .forEach(function (type) {\n      const ret = amounts ? WhitespaceFlag.before | WhitespaceFlag.after : 0;\n      nodes[type] = () => ret;\n    });\n});\n", "import {\n  isArrayTypeAnnotation,\n  isArrowFunctionExpression,\n  isBinaryExpression,\n  isCallExpression,\n  isExportDeclaration,\n  isForOfStatement,\n  isIndexedAccessType,\n  isMemberExpression,\n  isObjectPattern,\n  isOptionalMemberExpression,\n  isYieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nconst PRECEDENCE = new Map([\n  [\"||\", 0],\n  [\"??\", 0],\n  [\"|>\", 0],\n  [\"&&\", 1],\n  [\"|\", 2],\n  [\"^\", 3],\n  [\"&\", 4],\n  [\"==\", 5],\n  [\"===\", 5],\n  [\"!=\", 5],\n  [\"!==\", 5],\n  [\"<\", 6],\n  [\">\", 6],\n  [\"<=\", 6],\n  [\">=\", 6],\n  [\"in\", 6],\n  [\"instanceof\", 6],\n  [\">>\", 7],\n  [\"<<\", 7],\n  [\">>>\", 7],\n  [\"+\", 8],\n  [\"-\", 8],\n  [\"*\", 9],\n  [\"/\", 9],\n  [\"%\", 9],\n  [\"**\", 10],\n]);\n\nconst enum CheckParam {\n  expressionStatement = 1 << 0,\n  arrowBody = 1 << 1,\n  exportDefault = 1 << 2,\n  forHead = 1 << 3,\n  forInHead = 1 << 4,\n  forOfHead = 1 << 5,\n}\n\nfunction isTSTypeExpression(nodeType: string) {\n  return (\n    nodeType === \"TSAsExpression\" ||\n    nodeType === \"TSSatisfiesExpression\" ||\n    nodeType === \"TSTypeAssertion\"\n  );\n}\n\nconst isClassExtendsClause = (\n  node: t.Node,\n  parent: t.Node,\n): parent is t.Class => {\n  const parentType = parent.type;\n  return (\n    (parentType === \"ClassDeclaration\" || parentType === \"ClassExpression\") &&\n    parent.superClass === node\n  );\n};\n\nconst hasPostfixPart = (node: t.Node, parent: t.Node) => {\n  const parentType = parent.type;\n  return (\n    ((parentType === \"MemberExpression\" ||\n      parentType === \"OptionalMemberExpression\") &&\n      parent.object === node) ||\n    ((parentType === \"CallExpression\" ||\n      parentType === \"OptionalCallExpression\" ||\n      parentType === \"NewExpression\") &&\n      parent.callee === node) ||\n    (parentType === \"TaggedTemplateExpression\" && parent.tag === node) ||\n    parentType === \"TSNonNullExpression\"\n  );\n};\n\nexport function NullableTypeAnnotation(\n  node: t.NullableTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  return isArrayTypeAnnotation(parent);\n}\n\nexport function FunctionTypeAnnotation(\n  node: t.FunctionTypeAnnotation,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  if (printStack.length < 3) return;\n\n  const parentType = parent.type;\n  return (\n    // (() => A) | (() => B)\n    parentType === \"UnionTypeAnnotation\" ||\n    // (() => A) & (() => B)\n    parentType === \"IntersectionTypeAnnotation\" ||\n    // (() => A)[]\n    parentType === \"ArrayTypeAnnotation\" ||\n    // <T>(A: T): (T => T[]) => B => [A, B]\n    (parentType === \"TypeAnnotation\" &&\n      // Check grandparent\n      isArrowFunctionExpression(printStack[printStack.length - 3]))\n  );\n}\n\nexport function UpdateExpression(\n  node: t.UpdateExpression,\n  parent: t.Node,\n): boolean {\n  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);\n}\n\nexport function ObjectExpression(\n  node: t.ObjectExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.arrowBody,\n  );\n}\n\nexport function DoExpression(\n  node: t.DoExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  // `async do` can start an expression statement\n  return (\n    !node.async && isFirstInContext(printStack, CheckParam.expressionStatement)\n  );\n}\n\nexport function Binary(\n  node: t.BinaryExpression,\n  parent: t.Node,\n): boolean | undefined {\n  const parentType = parent.type;\n  if (\n    node.operator === \"**\" &&\n    parentType === \"BinaryExpression\" &&\n    parent.operator === \"**\"\n  ) {\n    return parent.left === node;\n  }\n\n  if (isClassExtendsClause(node, parent)) {\n    return true;\n  }\n\n  if (\n    hasPostfixPart(node, parent) ||\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    parentType === \"AwaitExpression\"\n  ) {\n    return true;\n  }\n\n  if (parentType === \"BinaryExpression\" || parentType === \"LogicalExpression\") {\n    const parentPos = PRECEDENCE.get(parent.operator);\n    const nodePos = PRECEDENCE.get(node.operator);\n\n    if (\n      // Logical expressions with the same precedence don't need parens.\n      (parentPos === nodePos &&\n        parent.right === node &&\n        parentType !== \"LogicalExpression\") ||\n      parentPos > nodePos\n    ) {\n      return true;\n    }\n  }\n\n  return undefined;\n}\n\nexport function UnionTypeAnnotation(\n  node: t.UnionTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"ArrayTypeAnnotation\" ||\n    parentType === \"NullableTypeAnnotation\" ||\n    parentType === \"IntersectionTypeAnnotation\" ||\n    parentType === \"UnionTypeAnnotation\"\n  );\n}\n\nexport { UnionTypeAnnotation as IntersectionTypeAnnotation };\n\nexport function OptionalIndexedAccessType(\n  node: t.OptionalIndexedAccessType,\n  parent: t.Node,\n): boolean {\n  return isIndexedAccessType(parent) && parent.objectType === node;\n}\n\nexport function TSAsExpression() {\n  return true;\n}\n\nexport {\n  TSAsExpression as TSSatisfiesExpression,\n  TSAsExpression as TSTypeAssertion,\n};\n\nexport function TSUnionType(node: t.TSUnionType, parent: t.Node): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"TSArrayType\" ||\n    parentType === \"TSOptionalType\" ||\n    parentType === \"TSIntersectionType\" ||\n    parentType === \"TSUnionType\" ||\n    parentType === \"TSRestType\"\n  );\n}\n\nexport { TSUnionType as TSIntersectionType };\n\nexport function TSInferType(node: t.TSInferType, parent: t.Node): boolean {\n  const parentType = parent.type;\n  return parentType === \"TSArrayType\" || parentType === \"TSOptionalType\";\n}\n\nexport function TSInstantiationExpression(\n  node: t.TSInstantiationExpression,\n  parent: t.Node,\n) {\n  const parentType = parent.type;\n  return (\n    (parentType === \"CallExpression\" ||\n      parentType === \"OptionalCallExpression\" ||\n      parentType === \"NewExpression\" ||\n      parentType === \"TSInstantiationExpression\") &&\n    !!parent.typeParameters\n  );\n}\n\nexport function BinaryExpression(\n  node: t.BinaryExpression,\n  parent: t.Node,\n): boolean {\n  // let i = (1 in []);\n  // for ((1 in []);;);\n  if (node.operator === \"in\") {\n    const parentType = parent.type;\n    return (\n      parentType === \"VariableDeclarator\" ||\n      parentType === \"ForStatement\" ||\n      parentType === \"ForInStatement\" ||\n      parentType === \"ForOfStatement\"\n    );\n  }\n  return false;\n}\n\nexport function SequenceExpression(\n  node: t.SequenceExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (\n    // Although parentheses wouldn't hurt around sequence\n    // expressions in the head of for loops, traditional style\n    // dictates that e.g. i++, j++ should not be wrapped with\n    // parentheses.\n    parentType === \"ForStatement\" ||\n    parentType === \"ThrowStatement\" ||\n    parentType === \"ReturnStatement\" ||\n    (parentType === \"IfStatement\" && parent.test === node) ||\n    (parentType === \"WhileStatement\" && parent.test === node) ||\n    (parentType === \"ForInStatement\" && parent.right === node) ||\n    (parentType === \"SwitchStatement\" && parent.discriminant === node) ||\n    (parentType === \"ExpressionStatement\" && parent.expression === node)\n  ) {\n    return false;\n  }\n\n  // Otherwise err on the side of overparenthesization, adding\n  // explicit exceptions above if this proves overzealous.\n  return true;\n}\n\nexport function YieldExpression(\n  node: t.YieldExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"BinaryExpression\" ||\n    parentType === \"LogicalExpression\" ||\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    hasPostfixPart(node, parent) ||\n    (parentType === \"AwaitExpression\" && isYieldExpression(node)) ||\n    (parentType === \"ConditionalExpression\" && node === parent.test) ||\n    isClassExtendsClause(node, parent)\n  );\n}\n\nexport { YieldExpression as AwaitExpression };\n\nexport function ClassExpression(\n  node: t.ClassExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.exportDefault,\n  );\n}\n\nexport function UnaryLike(\n  node:\n    | t.UnaryLike\n    | t.ArrowFunctionExpression\n    | t.ConditionalExpression\n    | t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    hasPostfixPart(node, parent) ||\n    (isBinaryExpression(parent) &&\n      parent.operator === \"**\" &&\n      parent.left === node) ||\n    isClassExtendsClause(node, parent)\n  );\n}\n\nexport function FunctionExpression(\n  node: t.FunctionExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.exportDefault,\n  );\n}\n\nexport function ArrowFunctionExpression(\n  node: t.ArrowFunctionExpression,\n  parent: t.Node,\n): boolean {\n  return isExportDeclaration(parent) || ConditionalExpression(node, parent);\n}\n\nexport function ConditionalExpression(\n  node:\n    | t.ConditionalExpression\n    | t.ArrowFunctionExpression\n    | t.AssignmentExpression,\n  parent?: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    parentType === \"BinaryExpression\" ||\n    parentType === \"LogicalExpression\" ||\n    (parentType === \"ConditionalExpression\" && parent.test === node) ||\n    parentType === \"AwaitExpression\" ||\n    isTSTypeExpression(parentType)\n  ) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nexport function OptionalMemberExpression(\n  node: t.OptionalMemberExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    (isCallExpression(parent) && parent.callee === node) ||\n    (isMemberExpression(parent) && parent.object === node)\n  );\n}\n\nexport { OptionalMemberExpression as OptionalCallExpression };\n\nexport function AssignmentExpression(\n  node: t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  if (isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression(node, parent);\n  }\n}\n\nexport function LogicalExpression(\n  node: t.LogicalExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (isTSTypeExpression(parentType)) return true;\n  if (parentType !== \"LogicalExpression\") return false;\n  switch (node.operator) {\n    case \"||\":\n      return parent.operator === \"??\" || parent.operator === \"&&\";\n    case \"&&\":\n      return parent.operator === \"??\";\n    case \"??\":\n      return parent.operator !== \"??\";\n  }\n}\n\nexport function Identifier(\n  node: t.Identifier,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  const parentType = parent.type;\n  // 13.15.2 AssignmentExpression RS: Evaluation\n  // (fn) = function () {};\n  if (\n    node.extra?.parenthesized &&\n    parentType === \"AssignmentExpression\" &&\n    parent.left === node\n  ) {\n    const rightType = parent.right.type;\n    if (\n      (rightType === \"FunctionExpression\" || rightType === \"ClassExpression\") &&\n      parent.right.id == null\n    ) {\n      return true;\n    }\n  }\n  // Non-strict code allows the identifier `let`, but it cannot occur as-is in\n  // certain contexts to avoid ambiguity with contextual keyword `let`.\n  if (node.name === \"let\") {\n    // Some contexts only forbid `let [`, so check if the next token would\n    // be the left bracket of a computed member expression.\n    const isFollowedByBracket =\n      isMemberExpression(parent, {\n        object: node,\n        computed: true,\n      }) ||\n      isOptionalMemberExpression(parent, {\n        object: node,\n        computed: true,\n        optional: false,\n      });\n    return isFirstInContext(\n      printStack,\n      isFollowedByBracket\n        ? CheckParam.expressionStatement |\n            CheckParam.forHead |\n            CheckParam.forInHead |\n            CheckParam.forOfHead\n        : CheckParam.forOfHead,\n    );\n  }\n\n  // ECMAScript specifically forbids a for-of loop from starting with the\n  // token sequence `for (async of`, because it would be ambiguous with\n  // `for (async of => {};;)`, so we need to add extra parentheses.\n  //\n  // If the parent is a for-await-of loop (i.e. parent.await === true), the\n  // parentheses aren't strictly needed, but we add them anyway because\n  // some tools (including earlier Babel versions) can't parse\n  // `for await (async of [])` without them.\n  return (\n    node.name === \"async\" && isForOfStatement(parent) && node === parent.left\n  );\n}\n\n// Walk up the print stack to determine if our node can come first\n// in a particular context.\nfunction isFirstInContext(\n  printStack: Array<t.Node>,\n  checkParam: CheckParam,\n): boolean {\n  const expressionStatement = checkParam & CheckParam.expressionStatement;\n  const arrowBody = checkParam & CheckParam.arrowBody;\n  const exportDefault = checkParam & CheckParam.exportDefault;\n  const forHead = checkParam & CheckParam.forHead;\n  const forInHead = checkParam & CheckParam.forInHead;\n  const forOfHead = checkParam & CheckParam.forOfHead;\n\n  let i = printStack.length - 1;\n  if (i <= 0) return;\n  let node = printStack[i];\n  i--;\n  let parent = printStack[i];\n  while (i >= 0) {\n    const parentType = parent.type;\n    if (\n      (expressionStatement &&\n        parentType === \"ExpressionStatement\" &&\n        parent.expression === node) ||\n      (exportDefault &&\n        parentType === \"ExportDefaultDeclaration\" &&\n        node === parent.declaration) ||\n      (arrowBody &&\n        parentType === \"ArrowFunctionExpression\" &&\n        parent.body === node) ||\n      (forHead && parentType === \"ForStatement\" && parent.init === node) ||\n      (forInHead && parentType === \"ForInStatement\" && parent.left === node) ||\n      (forOfHead && parentType === \"ForOfStatement\" && parent.left === node)\n    ) {\n      return true;\n    }\n\n    if (\n      i > 0 &&\n      ((hasPostfixPart(node, parent) && parentType !== \"NewExpression\") ||\n        (parentType === \"SequenceExpression\" &&\n          parent.expressions[0] === node) ||\n        (parentType === \"UpdateExpression\" && !parent.prefix) ||\n        (parentType === \"ConditionalExpression\" && parent.test === node) ||\n        ((parentType === \"BinaryExpression\" ||\n          parentType === \"LogicalExpression\") &&\n          parent.left === node) ||\n        (parentType === \"AssignmentExpression\" && parent.left === node))\n    ) {\n      node = parent;\n      i--;\n      parent = printStack[i];\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n}\n", "import * as whitespace from \"./whitespace.ts\";\nimport * as parens from \"./parentheses.ts\";\nimport {\n  FLIPPED_ALIAS_KEYS,\n  isCallExpression,\n  isExpressionStatement,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { WhitespaceFlag } from \"./whitespace.ts\";\n\ntype NodeHandler<R> = (\n  node: t.Node,\n  // todo:\n  // node: K extends keyof typeof t\n  //   ? Extract<typeof t[K], { type: \"string\" }>\n  //   : t.Node,\n  parent: t.Node,\n  stack?: t.Node[],\n) => R;\n\nexport type NodeHandlers<R> = {\n  [K in string]?: NodeHandler<R>;\n};\n\nfunction expandAliases<R>(obj: NodeHandlers<R>) {\n  const map = new Map<string, NodeHandler<R>>();\n\n  function add(type: string, func: NodeHandler<R>) {\n    const fn = map.get(type);\n    map.set(\n      type,\n      fn\n        ? function (node, parent, stack) {\n            return fn(node, parent, stack) ?? func(node, parent, stack);\n          }\n        : func,\n    );\n  }\n\n  for (const type of Object.keys(obj)) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      for (const alias of aliases) {\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n\n  return map;\n}\n\n// Rather than using `t.is` on each object property, we pre-expand any type aliases\n// into concrete types so that the 'find' call below can be as fast as possible.\nconst expandedParens = expandAliases(parens);\nconst expandedWhitespaceNodes = expandAliases(whitespace.nodes);\n\nfunction isOrHasCallExpression(node: t.Node): boolean {\n  if (isCallExpression(node)) {\n    return true;\n  }\n\n  return isMemberExpression(node) && isOrHasCallExpression(node.object);\n}\n\nexport function needsWhitespace(\n  node: t.Node,\n  parent: t.Node,\n  type: WhitespaceFlag,\n): boolean {\n  if (!node) return false;\n\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  const flag = expandedWhitespaceNodes.get(node.type)?.(node, parent);\n\n  if (typeof flag === \"number\") {\n    return (flag & type) !== 0;\n  }\n\n  return false;\n}\n\nexport function needsWhitespaceBefore(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 1);\n}\n\nexport function needsWhitespaceAfter(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 2);\n}\n\nexport function needsParens(\n  node: t.Node,\n  parent: t.Node,\n  printStack?: t.Node[],\n) {\n  if (!parent) return false;\n\n  if (isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n\n  return expandedParens.get(node.type)?.(node, parent, printStack);\n}\n", "import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function TaggedTemplateExpression(\n  this: Printer,\n  node: t.TaggedTemplateExpression,\n) {\n  this.print(node.tag, node);\n  this.print(node.typeParameters, node); // TS\n  this.print(node.quasi, node);\n}\n\nexport function TemplateElement(this: Printer) {\n  throw new Error(\"TemplateElement printing is handled in TemplateLiteral\");\n}\n\nexport function TemplateLiteral(this: Printer, node: t.TemplateLiteral) {\n  const quasis = node.quasis;\n\n  let partRaw = \"`\";\n\n  for (let i = 0; i < quasis.length; i++) {\n    partRaw += quasis[i].value.raw;\n\n    if (i + 1 < quasis.length) {\n      this.token(partRaw + \"${\", true);\n      this.print(node.expressions[i], node);\n      partRaw = \"}\";\n    }\n  }\n\n  this.token(partRaw + \"`\", true);\n}\n", "import type Printer from \"../printer.ts\";\nimport {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as n from \"../node/index.ts\";\n\nexport function UnaryExpression(this: Printer, node: t.UnaryExpression) {\n  const { operator } = node;\n  if (\n    operator === \"void\" ||\n    operator === \"delete\" ||\n    operator === \"typeof\" ||\n    // throwExpressions\n    operator === \"throw\"\n  ) {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nexport function DoExpression(this: Printer, node: t.DoExpression) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ParenthesizedExpression(\n  this: Printer,\n  node: t.ParenthesizedExpression,\n) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.rightParens(node);\n}\n\nexport function UpdateExpression(this: Printer, node: t.UpdateExpression) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.printTerminatorless(node.argument, node, true);\n    this.token(node.operator);\n  }\n}\n\nexport function ConditionalExpression(\n  this: Printer,\n  node: t.ConditionalExpression,\n) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nexport function NewExpression(\n  this: Printer,\n  node: t.NewExpression,\n  parent: t.Node,\n) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n  if (\n    this.format.minified &&\n    node.arguments.length === 0 &&\n    !node.optional &&\n    !isCallExpression(parent, { callee: node }) &&\n    !isMemberExpression(parent) &&\n    !isNewExpression(parent)\n  ) {\n    return;\n  }\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    // TODO: This can never happen\n    this.token(\"?.\");\n  }\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function SequenceExpression(this: Printer, node: t.SequenceExpression) {\n  this.printList(node.expressions, node);\n}\n\nexport function ThisExpression(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function Super(this: Printer) {\n  this.word(\"super\");\n}\n\nfunction isDecoratorMemberExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n): boolean {\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return (\n        !node.computed &&\n        node.property.type === \"Identifier\" &&\n        isDecoratorMemberExpression(node.object)\n      );\n    default:\n      return false;\n  }\n}\nfunction shouldParenthesizeDecoratorExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n) {\n  if (node.type === \"ParenthesizedExpression\") {\n    // We didn't check extra?.parenthesized here because we don't track decorators in needsParen\n    return false;\n  }\n  return !isDecoratorMemberExpression(\n    node.type === \"CallExpression\" ? node.callee : node,\n  );\n}\n\nexport function _shouldPrintDecoratorsBeforeExport(\n  this: Printer,\n  node: t.ExportDeclaration & { declaration: t.ClassDeclaration },\n) {\n  if (typeof this.format.decoratorsBeforeExport === \"boolean\") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return (\n    typeof node.start === \"number\" && node.start === node.declaration.start\n  );\n}\n\nexport function Decorator(this: Printer, node: t.Decorator) {\n  this.token(\"@\");\n  const { expression } = node;\n  if (shouldParenthesizeDecoratorExpression(expression)) {\n    this.token(\"(\");\n    this.print(expression, node);\n    this.token(\")\");\n  } else {\n    this.print(expression, node);\n  }\n  this.newline();\n}\n\nexport function OptionalMemberExpression(\n  this: Printer,\n  node: t.OptionalMemberExpression,\n) {\n  let { computed } = node;\n  const { optional, property } = node;\n\n  this.print(node.object, node);\n\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  // @ts-expect-error todo(flow->ts) maybe instead of typeof check specific literal types?\n  if (isLiteral(property) && typeof property.value === \"number\") {\n    computed = true;\n  }\n  if (optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(property, node);\n    this.token(\"]\");\n  } else {\n    if (!optional) {\n      this.token(\".\");\n    }\n    this.print(property, node);\n  }\n}\n\nexport function OptionalCallExpression(\n  this: Printer,\n  node: t.OptionalCallExpression,\n) {\n  this.print(node.callee, node);\n\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.print(node.typeArguments, node); // Flow\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function CallExpression(this: Printer, node: t.CallExpression) {\n  this.print(node.callee, node);\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function Import(this: Printer) {\n  this.word(\"import\");\n}\n\nexport function AwaitExpression(this: Printer, node: t.AwaitExpression) {\n  this.word(\"await\");\n\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument, node, false);\n  }\n}\n\nexport function YieldExpression(this: Printer, node: t.YieldExpression) {\n  this.word(\"yield\", true);\n\n  if (node.delegate) {\n    this.token(\"*\");\n    if (node.argument) {\n      this.space();\n      // line terminators are allowed after yield*\n      this.print(node.argument, node);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument, node, false);\n    }\n  }\n}\n\nexport function EmptyStatement(this: Printer) {\n  this.semicolon(true /* force */);\n}\n\nexport function ExpressionStatement(\n  this: Printer,\n  node: t.ExpressionStatement,\n) {\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nexport function AssignmentPattern(this: Printer, node: t.AssignmentPattern) {\n  this.print(node.left, node);\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  if (node.left.optional) this.token(\"?\");\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  this.print(node.left.typeAnnotation, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nexport function AssignmentExpression(\n  this: Printer,\n  node: t.AssignmentExpression,\n  parent: t.Node,\n) {\n  // Somewhere inside a for statement `init` node but doesn't usually\n  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`\n  const parens =\n    this.inForStatementInitCounter &&\n    node.operator === \"in\" &&\n    !n.needsParens(node, parent);\n\n  if (parens) {\n    this.token(\"(\");\n  }\n\n  this.print(node.left, node);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n  this.space();\n\n  this.print(node.right, node);\n\n  if (parens) {\n    this.token(\")\");\n  }\n}\n\nexport function BindExpression(this: Printer, node: t.BindExpression) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nexport {\n  AssignmentExpression as BinaryExpression,\n  AssignmentExpression as LogicalExpression,\n};\n\nexport function MemberExpression(this: Printer, node: t.MemberExpression) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe use specific literal types\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nexport function MetaProperty(this: Printer, node: t.MetaProperty) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function PrivateName(this: Printer, node: t.PrivateName) {\n  this.token(\"#\");\n  this.print(node.id, node);\n}\n\nexport function V8IntrinsicIdentifier(\n  this: Printer,\n  node: t.V8IntrinsicIdentifier,\n) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nexport function ModuleExpression(this: Printer, node: t.ModuleExpression) {\n  this.word(\"module\", true);\n  this.space();\n  this.token(\"{\");\n  this.indent();\n  const { body } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body, node);\n  this.dedent();\n  this.rightBrace(node);\n}\n", "import type Printer from \"../printer.ts\";\nimport {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nexport function WithStatement(this: Printer, node: t.WithStatement) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function IfStatement(this: Printer, node: t.IfStatement) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n\n  const needsBlock =\n    node.alternate && isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(charCodes.rightCurlyBrace)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\n// Recursively get the last statement.\nfunction getLastStatement(statement: t.Statement): t.Statement {\n  // @ts-expect-error: If statement.body is empty or not a Node, isStatement will return false\n  const { body } = statement;\n  if (isStatement(body) === false) {\n    return statement;\n  }\n\n  return getLastStatement(body);\n}\n\nexport function ForStatement(this: Printer, node: t.ForStatement) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function WhileStatement(this: Printer, node: t.WhileStatement) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction ForXStatement(this: Printer, node: t.ForXStatement) {\n  this.word(\"for\");\n  this.space();\n  const isForOf = node.type === \"ForOfStatement\";\n  if (isForOf && node.await) {\n    this.word(\"await\");\n    this.space();\n  }\n  this.noIndentInnerCommentsHere();\n  this.token(\"(\");\n  this.print(node.left, node);\n  this.space();\n  this.word(isForOf ? \"of\" : \"in\");\n  this.space();\n  this.print(node.right, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport const ForInStatement = ForXStatement;\nexport const ForOfStatement = ForXStatement;\n\nexport function DoWhileStatement(this: Printer, node: t.DoWhileStatement) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction printStatementAfterKeyword(\n  printer: Printer,\n  node: t.Node,\n  parent: t.Node,\n  isLabel: boolean,\n) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node, parent, isLabel);\n  }\n\n  printer.semicolon();\n}\n\nexport function BreakStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"break\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ContinueStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"continue\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ReturnStatement(this: Printer, node: t.ReturnStatement) {\n  this.word(\"return\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function ThrowStatement(this: Printer, node: t.ThrowStatement) {\n  this.word(\"throw\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function LabeledStatement(this: Printer, node: t.LabeledStatement) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function TryStatement(this: Printer, node: t.TryStatement) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  // Esprima bug puts the catch clause in a `handlers` array.\n  // see https://code.google.com/p/esprima/issues/detail?id=433\n  // We run into this from regenerator generated ast.\n  // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n  if (node.handlers) {\n    // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nexport function CatchClause(this: Printer, node: t.CatchClause) {\n  this.word(\"catch\");\n  this.space();\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n  this.print(node.body, node);\n}\n\nexport function SwitchStatement(this: Printer, node: t.SwitchStatement) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    },\n  });\n\n  this.rightBrace(node);\n}\n\nexport function SwitchCase(this: Printer, node: t.SwitchCase) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, { indent: true });\n  }\n}\n\nexport function DebuggerStatement(this: Printer) {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nexport function VariableDeclaration(\n  this: Printer,\n  node: t.VariableDeclaration,\n  parent: t.Node,\n) {\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  const { kind } = node;\n  this.word(kind, kind === \"using\" || kind === \"await using\");\n  this.space();\n\n  let hasInits = false;\n  // don't add whitespace to loop heads\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        // has an init so let's split it up over multiple lines\n        hasInits = true;\n      }\n    }\n  }\n\n  //\n  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on\n  // this will format declarations like:\n  //\n  //   let foo = \"bar\", bar = \"foo\";\n  //\n  // into\n  //\n  //   let foo = \"bar\",\n  //       bar = \"foo\";\n  //\n\n  this.printList(node.declarations, node, {\n    separator: hasInits\n      ? function (this: Printer) {\n          this.token(\",\");\n          this.newline();\n        }\n      : undefined,\n    indent: node.declarations.length > 1 ? true : false,\n  });\n\n  if (isFor(parent)) {\n    // don't give semicolons to these nodes since they'll be inserted in the parent generator\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nexport function VariableDeclarator(this: Printer, node: t.VariableDeclarator) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\"); // TS\n  // @ts-expect-error todo(flow-ts) Property 'typeAnnotation' does not exist on type 'MemberExpression'.\n  this.print(node.id.typeAnnotation, node);\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}\n", "import type Printer from \"../printer.ts\";\nimport {\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nexport function ClassDeclaration(\n  this: Printer,\n  node: t.ClassDeclaration,\n  parent: t.Node,\n) {\n  const inExport =\n    isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);\n\n  if (\n    !inExport ||\n    !this._shouldPrintDecoratorsBeforeExport(\n      parent as t.ExportDeclaration & { declaration: t.ClassDeclaration },\n    )\n  ) {\n    this.printJoin(node.decorators, node);\n  }\n\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    // TS\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"class\");\n\n  if (node.id) {\n    this.space();\n    this.print(node.id, node);\n  }\n\n  this.print(node.typeParameters, node);\n\n  if (node.superClass) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.superClass, node);\n    this.print(node.superTypeParameters, node);\n  }\n\n  if (node.implements) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { ClassDeclaration as ClassExpression };\n\nexport function ClassBody(this: Printer, node: t.ClassBody) {\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n\n    this.printSequence(node.body, node, { indent: true });\n\n    if (!this.endsWith(charCodes.lineFeed)) this.newline();\n\n    this.rightBrace(node);\n  }\n}\n\nexport function ClassProperty(this: Printer, node: t.ClassProperty) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassAccessorProperty(\n  this: Printer,\n  node: t.ClassAccessorProperty,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  // TS does not support class accessor property yet\n  this.tsPrintClassMemberModifiers(node);\n\n  this.word(\"accessor\", true);\n  this.space();\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // Todo: Flow does not support class accessor property yet.\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassPrivateProperty(\n  this: Printer,\n  node: t.ClassPrivateProperty,\n) {\n  this.printJoin(node.decorators, node);\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassMethod(this: Printer, node: t.ClassMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ClassPrivateMethod(this: Printer, node: t.ClassPrivateMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _classMethodHead(\n  this: Printer,\n  node: t.ClassMethod | t.ClassPrivateMethod | t.TSDeclareMethod,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to method key, avoid line break\n  // between member modifiers/method heads and the method key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n  this._methodHead(node);\n}\n\nexport function StaticBlock(this: Printer, node: t.StaticBlock) {\n  this.word(\"static\");\n  this.space();\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n    this.printSequence(node.body, node, {\n      indent: true,\n    });\n    this.rightBrace(node);\n  }\n}\n", "import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\nimport { isIdentifier, type ParentMaps } from \"@babel/types\";\n\ntype ParentsOf<T extends t.Node> = ParentMaps[T[\"type\"]];\n\nexport function _params(\n  this: Printer,\n  node: t.Function | t.TSDeclareMethod | t.TSDeclareFunction,\n  idNode: t.Expression | t.PrivateName,\n  parentNode: ParentsOf<typeof node>,\n) {\n  this.print(node.typeParameters, node);\n\n  const nameInfo = _getFuncIdName.call(this, idNode, parentNode);\n  if (nameInfo) {\n    this.sourceIdentifierName(nameInfo.name, nameInfo.pos);\n  }\n\n  this.token(\"(\");\n  this._parameters(node.params, node);\n  this.token(\")\");\n\n  const noLineTerminator = node.type === \"ArrowFunctionExpression\";\n  this.print(node.returnType, node, noLineTerminator);\n\n  this._noLineTerminator = noLineTerminator;\n}\n\nexport function _parameters(\n  this: Printer,\n  parameters: t.Function[\"params\"],\n  parent:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  const paramLength = parameters.length;\n  for (let i = 0; i < paramLength; i++) {\n    this._param(parameters[i], parent);\n\n    if (i < parameters.length - 1) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n}\n\nexport function _param(\n  this: Printer,\n  parameter: t.Identifier | t.RestElement | t.Pattern | t.TSParameterProperty,\n  parent?:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  this.printJoin(parameter.decorators, parameter);\n  this.print(parameter, parent);\n  if (\n    // @ts-expect-error optional is not in TSParameterProperty\n    parameter.optional\n  ) {\n    this.token(\"?\"); // TS / flow\n  }\n\n  this.print(\n    // @ts-expect-error typeAnnotation is not in TSParameterProperty\n    parameter.typeAnnotation,\n    parameter,\n  ); // TS / flow\n}\n\nexport function _methodHead(this: Printer, node: t.Method | t.TSDeclareMethod) {\n  const kind = node.kind;\n  const key = node.key;\n\n  if (kind === \"get\" || kind === \"set\") {\n    this.word(kind);\n    this.space();\n  }\n\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  if (\n    kind === \"method\" ||\n    // @ts-expect-error Fixme: kind: \"init\" is not defined\n    kind === \"init\"\n  ) {\n    if (node.generator) {\n      this.token(\"*\");\n    }\n  }\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(key, node);\n    this.token(\"]\");\n  } else {\n    this.print(key, node);\n  }\n\n  if (\n    // @ts-expect-error optional is not in ObjectMethod\n    node.optional\n  ) {\n    // TS\n    this.token(\"?\");\n  }\n\n  this._params(\n    node,\n    node.computed && node.key.type !== \"StringLiteral\" ? undefined : node.key,\n    undefined,\n  );\n}\n\nexport function _predicate(\n  this: Printer,\n  node:\n    | t.FunctionDeclaration\n    | t.FunctionExpression\n    | t.ArrowFunctionExpression,\n  noLineTerminatorAfter?: boolean,\n) {\n  if (node.predicate) {\n    if (!node.returnType) {\n      this.token(\":\");\n    }\n    this.space();\n    this.print(node.predicate, node, noLineTerminatorAfter);\n  }\n}\n\nexport function _functionHead(\n  this: Printer,\n  node: t.FunctionDeclaration | t.FunctionExpression | t.TSDeclareFunction,\n  parent: ParentsOf<typeof node>,\n) {\n  if (node.async) {\n    this.word(\"async\");\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.space();\n  }\n  this.word(\"function\");\n  if (node.generator) {\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.token(\"*\");\n  }\n\n  this.space();\n  if (node.id) {\n    this.print(node.id, node);\n  }\n\n  this._params(node, node.id, parent);\n  if (node.type !== \"TSDeclareFunction\") {\n    this._predicate(node);\n  }\n}\n\nexport function FunctionExpression(\n  this: Printer,\n  node: t.FunctionExpression,\n  parent: ParentsOf<typeof node>,\n) {\n  this._functionHead(node, parent);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { FunctionExpression as FunctionDeclaration };\n\nexport function ArrowFunctionExpression(\n  this: Printer,\n  node: t.ArrowFunctionExpression,\n  parent: ParentsOf<typeof node>,\n) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  // Try to avoid printing parens in simple cases, but only if we're pretty\n  // sure that they aren't needed by type annotations or potential newlines.\n  let firstParam;\n  if (\n    !this.format.retainLines &&\n    node.params.length === 1 &&\n    isIdentifier((firstParam = node.params[0])) &&\n    !hasTypesOrComments(node, firstParam)\n  ) {\n    this.print(firstParam, node, true);\n  } else {\n    this._params(node, undefined, parent);\n  }\n\n  this._predicate(node, true);\n  this.space();\n  // When printing (x)/*1*/=>{}, we remove the parentheses\n  // and thus there aren't two contiguous inner tokens.\n  // We forcefully print inner comments here.\n  this.printInnerComments();\n  this.token(\"=>\");\n\n  this.space();\n\n  this.print(node.body, node);\n}\n\nfunction hasTypesOrComments(\n  node: t.ArrowFunctionExpression,\n  param: t.Identifier,\n): boolean {\n  return !!(\n    node.typeParameters ||\n    node.returnType ||\n    node.predicate ||\n    param.typeAnnotation ||\n    param.optional ||\n    // Flow does not support `foo /*: string*/ => {};`\n    param.leadingComments?.length ||\n    param.trailingComments?.length\n  );\n}\n\nfunction _getFuncIdName(\n  this: Printer,\n  idNode: t.Expression | t.PrivateName,\n  parent: ParentsOf<t.Function | t.TSDeclareMethod | t.TSDeclareFunction>,\n) {\n  let id: t.Expression | t.PrivateName | t.LVal = idNode;\n\n  if (!id && parent) {\n    const parentType = parent.type;\n\n    if (parentType === \"VariableDeclarator\") {\n      id = parent.id;\n    } else if (\n      parentType === \"AssignmentExpression\" ||\n      parentType === \"AssignmentPattern\"\n    ) {\n      id = parent.left;\n    } else if (\n      parentType === \"ObjectProperty\" ||\n      parentType === \"ClassProperty\"\n    ) {\n      if (!parent.computed || parent.key.type === \"StringLiteral\") {\n        id = parent.key;\n      }\n    } else if (\n      parentType === \"ClassPrivateProperty\" ||\n      parentType === \"ClassAccessorProperty\"\n    ) {\n      id = parent.key;\n    }\n  }\n\n  if (!id) return;\n\n  let nameInfo;\n\n  if (id.type === \"Identifier\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: id.loc?.identifierName || id.name,\n    };\n  } else if (id.type === \"PrivateName\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: \"#\" + id.id.name,\n    };\n  } else if (id.type === \"StringLiteral\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: id.value,\n    };\n  }\n\n  return nameInfo;\n}\n", "import type Printer from \"../printer.ts\";\nimport {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function ImportSpecifier(this: Printer, node: t.ImportSpecifier) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nexport function ImportDefaultSpecifier(\n  this: Printer,\n  node: t.ImportDefaultSpecifier,\n) {\n  this.print(node.local, node);\n}\n\nexport function ExportDefaultSpecifier(\n  this: Printer,\n  node: t.ExportDefaultSpecifier,\n) {\n  this.print(node.exported, node);\n}\n\nexport function ExportSpecifier(this: Printer, node: t.ExportSpecifier) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nexport function ExportNamespaceSpecifier(\n  this: Printer,\n  node: t.ExportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nlet warningShown = false;\n\nexport function _printAttributes(\n  this: Printer,\n  node: Extract<t.Node, { attributes?: t.ImportAttribute[] }>,\n) {\n  const { importAttributesKeyword } = this.format;\n  const { attributes, assertions } = node;\n\n  if (\n    attributes &&\n    !importAttributesKeyword &&\n    // In the production build only show the warning once.\n    // We want to show it per-usage locally for tests.\n    (!process.env.IS_PUBLISH || !warningShown)\n  ) {\n    warningShown = true;\n    console.warn(`\\\nYou are using import attributes, without specifying the desired output syntax.\nPlease specify the \"importAttributesKeyword\" generator option, whose value can be one of:\n - \"with\"        : \\`import { a } from \"b\" with { type: \"json\" };\\`\n - \"assert\"      : \\`import { a } from \"b\" assert { type: \"json\" };\\`\n - \"with-legacy\" : \\`import { a } from \"b\" with type: \"json\";\\`\n`);\n  }\n\n  const useAssertKeyword =\n    importAttributesKeyword === \"assert\" ||\n    (!importAttributesKeyword && assertions);\n\n  this.word(useAssertKeyword ? \"assert\" : \"with\");\n  this.space();\n\n  if (!useAssertKeyword && importAttributesKeyword !== \"with\") {\n    // with-legacy\n    this.printList(attributes || assertions, node);\n    return;\n  }\n\n  this.token(\"{\");\n  this.space();\n  this.printList(attributes || assertions, node);\n  this.space();\n  this.token(\"}\");\n}\n\nexport function ExportAllDeclaration(\n  this: Printer,\n  node: t.ExportAllDeclaration | t.DeclareExportAllDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  // @ts-expect-error Fixme: attributes is not defined in DeclareExportAllDeclaration\n  if (node.attributes?.length || node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    // @ts-expect-error Fixme: attributes is not defined in DeclareExportAllDeclaration\n    this._printAttributes(node);\n  } else {\n    this.print(node.source, node);\n  }\n\n  this.semicolon();\n}\n\nfunction maybePrintDecoratorsBeforeExport(\n  printer: Printer,\n  node: t.ExportNamedDeclaration | t.ExportDefaultDeclaration,\n) {\n  if (\n    isClassDeclaration(node.declaration) &&\n    printer._shouldPrintDecoratorsBeforeExport(\n      node as t.ExportNamedDeclaration & { declaration: t.ClassDeclaration },\n    )\n  ) {\n    printer.printJoin(node.declaration.decorators, node);\n  }\n}\n\nexport function ExportNamedDeclaration(\n  this: Printer,\n  node: t.ExportNamedDeclaration,\n) {\n  maybePrintDecoratorsBeforeExport(this, node);\n\n  this.word(\"export\");\n  this.space();\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n\n    // print \"special\" specifiers first\n    let hasSpecial = false;\n    for (;;) {\n      const first = specifiers[0];\n      if (\n        isExportDefaultSpecifier(first) ||\n        isExportNamespaceSpecifier(first)\n      ) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || (!specifiers.length && !hasSpecial)) {\n      this.token(\"{\");\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      if (node.attributes?.length || node.assertions?.length) {\n        this.print(node.source, node, true);\n        this.space();\n        this._printAttributes(node);\n      } else {\n        this.print(node.source, node);\n      }\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExportDefaultDeclaration(\n  this: Printer,\n  node: t.ExportDefaultDeclaration,\n) {\n  maybePrintDecoratorsBeforeExport(this, node);\n\n  this.word(\"export\");\n  this.noIndentInnerCommentsHere();\n  this.space();\n  this.word(\"default\");\n  this.space();\n  const declar = node.declaration;\n  this.print(declar, node);\n  if (!isStatement(declar)) this.semicolon();\n}\n\nexport function ImportDeclaration(this: Printer, node: t.ImportDeclaration) {\n  this.word(\"import\");\n  this.space();\n\n  const isTypeKind = node.importKind === \"type\" || node.importKind === \"typeof\";\n  if (isTypeKind) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.importKind);\n    this.space();\n  } else if (node.module) {\n    this.noIndentInnerCommentsHere();\n    this.word(\"module\");\n    this.space();\n  } else if (node.phase) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.phase);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n  // print \"special\" specifiers first. The loop condition is constant,\n  // but there is a \"break\" in the body.\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift(), node);\n      if (specifiers.length) {\n        this.token(\",\");\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (specifiers.length) {\n    this.token(\"{\");\n    this.space();\n    this.printList(specifiers, node);\n    this.space();\n    this.token(\"}\");\n  } else if (isTypeKind && !hasSpecifiers) {\n    this.token(\"{\");\n    this.token(\"}\");\n  }\n\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  if (node.attributes?.length || node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    this._printAttributes(node);\n  } else {\n    this.print(node.source, node);\n  }\n\n  this.semicolon();\n}\n\nexport function ImportAttribute(this: Printer, node: t.ImportAttribute) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nexport function ImportNamespaceSpecifier(\n  this: Printer,\n  node: t.ImportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}\n\nexport function ImportExpression(this: Printer, node: t.ImportExpression) {\n  this.word(\"import\");\n  if (node.phase) {\n    this.token(\".\");\n    this.word(node.phase);\n  }\n  this.token(\"(\");\n  this.print(node.source, node);\n  if (node.options != null) {\n    this.token(\",\");\n    this.space();\n    this.print(node.options, node);\n  }\n  this.token(\")\");\n}\n", "'use strict';\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst forOwn = (object, callback) => {\n\tfor (const key in object) {\n\t\tif (hasOwnProperty.call(object, key)) {\n\t\t\tcallback(key, object[key]);\n\t\t}\n\t}\n};\n\nconst extend = (destination, source) => {\n\tif (!source) {\n\t\treturn destination;\n\t}\n\tforOwn(source, (key, value) => {\n\t\tdestination[key] = value;\n\t});\n\treturn destination;\n};\n\nconst forEach = (array, callback) => {\n\tconst length = array.length;\n\tlet index = -1;\n\twhile (++index < length) {\n\t\tcallback(array[index]);\n\t}\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = Buffer.isBuffer;\nconst isObject = (value) => {\n\t// This is a very simple check, but it’s good enough for what we need.\n\treturn toString.call(value) == '[object Object]';\n};\nconst isString = (value) => {\n\treturn typeof value == 'string' ||\n\t\ttoString.call(value) == '[object String]';\n};\nconst isNumber = (value) => {\n\treturn typeof value == 'number' ||\n\t\ttoString.call(value) == '[object Number]';\n};\nconst isFunction = (value) => {\n\treturn typeof value == 'function';\n};\nconst isMap = (value) => {\n\treturn toString.call(value) == '[object Map]';\n};\nconst isSet = (value) => {\n\treturn toString.call(value) == '[object Set]';\n};\n\n/*--------------------------------------------------------------------------*/\n\n// https://mathiasbynens.be/notes/javascript-escapes#single\nconst singleEscapes = {\n\t'\"': '\\\\\"',\n\t'\\'': '\\\\\\'',\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t'\n\t// `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n\t// '\\v': '\\\\x0B'\n};\nconst regexSingleEscape = /[\"'\\\\\\b\\f\\n\\r\\t]/;\n\nconst regexDigit = /[0-9]/;\nconst regexWhitelist = /[ !#-&\\(-\\[\\]-_a-~]/;\n\nconst jsesc = (argument, options) => {\n\tconst increaseIndentation = () => {\n\t\toldIndent = indent;\n\t\t++options.indentLevel;\n\t\tindent = options.indent.repeat(options.indentLevel)\n\t};\n\t// Handle options\n\tconst defaults = {\n\t\t'escapeEverything': false,\n\t\t'minimal': false,\n\t\t'isScriptContext': false,\n\t\t'quotes': 'single',\n\t\t'wrap': false,\n\t\t'es6': false,\n\t\t'json': false,\n\t\t'compact': true,\n\t\t'lowercaseHex': false,\n\t\t'numbers': 'decimal',\n\t\t'indent': '\\t',\n\t\t'indentLevel': 0,\n\t\t'__inline1__': false,\n\t\t'__inline2__': false\n\t};\n\tconst json = options && options.json;\n\tif (json) {\n\t\tdefaults.quotes = 'double';\n\t\tdefaults.wrap = true;\n\t}\n\toptions = extend(defaults, options);\n\tif (\n\t\toptions.quotes != 'single' &&\n\t\toptions.quotes != 'double' &&\n\t\toptions.quotes != 'backtick'\n\t) {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ?\n\t\t'\"' :\n\t\t(options.quotes == 'backtick' ?\n\t\t\t'`' :\n\t\t\t'\\''\n\t\t);\n\tconst compact = options.compact;\n\tconst lowercaseHex = options.lowercaseHex;\n\tlet indent = options.indent.repeat(options.indentLevel);\n\tlet oldIndent = '';\n\tconst inline1 = options.__inline1__;\n\tconst inline2 = options.__inline2__;\n\tconst newLine = compact ? '' : '\\n';\n\tlet result;\n\tlet isEmpty = true;\n\tconst useBinNumbers = options.numbers == 'binary';\n\tconst useOctNumbers = options.numbers == 'octal';\n\tconst useDecNumbers = options.numbers == 'decimal';\n\tconst useHexNumbers = options.numbers == 'hexadecimal';\n\n\tif (json && argument && isFunction(argument.toJSON)) {\n\t\targument = argument.toJSON();\n\t}\n\n\tif (!isString(argument)) {\n\t\tif (isMap(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Map()';\n\t\t\t}\n\t\t\tif (!compact) {\n\t\t\t\toptions.__inline1__ = true;\n\t\t\t\toptions.__inline2__ = false;\n\t\t\t}\n\t\t\treturn 'new Map(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isSet(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Set()';\n\t\t\t}\n\t\t\treturn 'new Set(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isBuffer(argument)) {\n\t\t\tif (argument.length == 0) {\n\t\t\t\treturn 'Buffer.from([])';\n\t\t\t}\n\t\t\treturn 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isArray(argument)) {\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tif (inline1) {\n\t\t\t\toptions.__inline1__ = false;\n\t\t\t\toptions.__inline2__ = true;\n\t\t\t}\n\t\t\tif (!inline2) {\n\t\t\t\tincreaseIndentation();\n\t\t\t}\n\t\t\tforEach(argument, (value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tif (inline2) {\n\t\t\t\t\toptions.__inline2__ = false;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact || inline2 ? '' : indent) +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\tif (inline2) {\n\t\t\t\treturn '[' + result.join(', ') + ']';\n\t\t\t}\n\t\t\treturn '[' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + ']';\n\t\t} else if (isNumber(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// Some number values (e.g. `Infinity`) cannot be represented in JSON.\n\t\t\t\treturn JSON.stringify(argument);\n\t\t\t}\n\t\t\tif (useDecNumbers) {\n\t\t\t\treturn String(argument);\n\t\t\t}\n\t\t\tif (useHexNumbers) {\n\t\t\t\tlet hexadecimal = argument.toString(16);\n\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t}\n\t\t\t\treturn '0x' + hexadecimal;\n\t\t\t}\n\t\t\tif (useBinNumbers) {\n\t\t\t\treturn '0b' + argument.toString(2);\n\t\t\t}\n\t\t\tif (useOctNumbers) {\n\t\t\t\treturn '0o' + argument.toString(8);\n\t\t\t}\n\t\t} else if (!isObject(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// For some values (e.g. `undefined`, `function` objects),\n\t\t\t\t// `JSON.stringify(value)` returns `undefined` (which isn’t valid\n\t\t\t\t// JSON) instead of `'null'`.\n\t\t\t\treturn JSON.stringify(argument) || 'null';\n\t\t\t}\n\t\t\treturn String(argument);\n\t\t} else { // it’s an object\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tincreaseIndentation();\n\t\t\tforOwn(argument, (key, value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact ? '' : indent) +\n\t\t\t\t\tjsesc(key, options) + ':' +\n\t\t\t\t\t(compact ? '' : ' ') +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + '}';\n\t\t}\n\t}\n\n\tconst string = argument;\n\t// Loop over each code unit in the string and escape it\n\tlet index = -1;\n\tconst length = string.length;\n\tresult = '';\n\twhile (++index < length) {\n\t\tconst character = string.charAt(index);\n\t\tif (options.es6) {\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tlength > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tconst second = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tconst codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\tlet hexadecimal = codePoint.toString(16);\n\t\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tresult += '\\\\u{' + hexadecimal + '}';\n\t\t\t\t\t++index;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!options.escapeEverything) {\n\t\t\tif (regexWhitelist.test(character)) {\n\t\t\t\t// It’s a printable ASCII character that is not `\"`, `'` or `\\`,\n\t\t\t\t// so don’t escape it.\n\t\t\t\tresult += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\"') {\n\t\t\t\tresult += quote == character ? '\\\\\"' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '`') {\n\t\t\t\tresult += quote == character ? '\\\\`' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\\'') {\n\t\t\t\tresult += quote == character ? '\\\\\\'' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tcharacter == '\\0' &&\n\t\t\t!json &&\n\t\t\t!regexDigit.test(string.charAt(index + 1))\n\t\t) {\n\t\t\tresult += '\\\\0';\n\t\t\tcontinue;\n\t\t}\n\t\tif (regexSingleEscape.test(character)) {\n\t\t\t// no need for a `hasOwnProperty` check here\n\t\t\tresult += singleEscapes[character];\n\t\t\tcontinue;\n\t\t}\n\t\tconst charCode = character.charCodeAt(0);\n\t\tif (options.minimal && charCode != 0x2028 && charCode != 0x2029) {\n\t\t\tresult += character;\n\t\t\tcontinue;\n\t\t}\n\t\tlet hexadecimal = charCode.toString(16);\n\t\tif (!lowercaseHex) {\n\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t}\n\t\tconst longhand = hexadecimal.length > 2 || json;\n\t\tconst escaped = '\\\\' + (longhand ? 'u' : 'x') +\n\t\t\t('0000' + hexadecimal).slice(longhand ? -4 : -2);\n\t\tresult += escaped;\n\t\tcontinue;\n\t}\n\tif (options.wrap) {\n\t\tresult = quote + result + quote;\n\t}\n\tif (quote == '`') {\n\t\tresult = result.replace(/\\$\\{/g, '\\\\\\$\\{');\n\t}\n\tif (options.isScriptContext) {\n\t\t// https://mathiasbynens.be/notes/etago\n\t\treturn result\n\t\t\t.replace(/<\\/(script|style)/gi, '<\\\\/$1')\n\t\t\t.replace(/<!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n\t}\n\treturn result;\n};\n\njsesc.version = '2.5.2';\n\nmodule.exports = jsesc;\n", "import type Printer from \"../printer.ts\";\nimport { isAssignmentPattern, isIdentifier } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport jsesc from \"jsesc\";\n\nexport function Identifier(this: Printer, node: t.Identifier) {\n  this.sourceIdentifierName(node.loc?.identifierName || node.name);\n  this.word(node.name);\n}\n\nexport function ArgumentPlaceholder(this: Printer) {\n  this.token(\"?\");\n}\n\nexport function RestElement(this: Printer, node: t.RestElement) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport { RestElement as SpreadElement };\n\nexport function ObjectExpression(this: Printer, node: t.ObjectExpression) {\n  const props = node.properties;\n\n  this.token(\"{\");\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n  }\n\n  this.sourceWithOffset(\"end\", node.loc, -1);\n\n  this.token(\"}\");\n}\n\nexport { ObjectExpression as ObjectPattern };\n\nexport function ObjectMethod(this: Printer, node: t.ObjectMethod) {\n  this.printJoin(node.decorators, node);\n  this._methodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ObjectProperty(this: Printer, node: t.ObjectProperty) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`\n    if (\n      isAssignmentPattern(node.value) &&\n      isIdentifier(node.key) &&\n      // @ts-expect-error todo(flow->ts) `.name` does not exist on some types in union\n      node.key.name === node.value.left.name\n    ) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    // shorthand!\n    if (\n      node.shorthand &&\n      isIdentifier(node.key) &&\n      isIdentifier(node.value) &&\n      node.key.name === node.value.name\n    ) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ArrayExpression(this: Printer, node: t.ArrayExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  this.token(\"[\");\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      // If the array expression ends with a hole, that hole\n      // will be ignored by the interpreter, but if it ends with\n      // two (or more) holes, we need to write out two (or more)\n      // commas so that the resulting code is interpreted with\n      // both (all) of the holes.\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nexport { ArrayExpression as ArrayPattern };\n\nexport function RecordExpression(this: Printer, node: t.RecordExpression) {\n  const props = node.properties;\n\n  let startToken;\n  let endToken;\n  if (process.env.BABEL_8_BREAKING) {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    if (this.format.recordAndTupleSyntaxType === \"bar\") {\n      startToken = \"{|\";\n      endToken = \"|}\";\n    } else if (\n      this.format.recordAndTupleSyntaxType !== \"hash\" &&\n      this.format.recordAndTupleSyntaxType != null\n    ) {\n      throw new Error(\n        `The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(\n          this.format.recordAndTupleSyntaxType,\n        )} received).`,\n      );\n    } else {\n      startToken = \"#{\";\n      endToken = \"}\";\n    }\n  }\n\n  this.token(startToken);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n  }\n  this.token(endToken);\n}\n\nexport function TupleExpression(this: Printer, node: t.TupleExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  let startToken;\n  let endToken;\n  if (process.env.BABEL_8_BREAKING) {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    if (this.format.recordAndTupleSyntaxType === \"bar\") {\n      startToken = \"[|\";\n      endToken = \"|]\";\n    } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n      startToken = \"#[\";\n      endToken = \"]\";\n    } else {\n      throw new Error(\n        `${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`,\n      );\n    }\n  }\n\n  this.token(startToken);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nexport function RegExpLiteral(this: Printer, node: t.RegExpLiteral) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nexport function BooleanLiteral(this: Printer, node: t.BooleanLiteral) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteral(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function NumericLiteral(this: Printer, node: t.NumericLiteral) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value;\n  const str = value + \"\";\n  if (opts.numbers) {\n    this.number(jsesc(value, opts), value);\n  } else if (raw == null) {\n    this.number(str, value); // normalize\n  } else if (this.format.minified) {\n    this.number(raw.length < str.length ? raw : str, value);\n  } else {\n    this.number(raw, value);\n  }\n}\n\nexport function StringLiteral(this: Printer, node: t.StringLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const val = jsesc(node.value, this.format.jsescOption);\n\n  this.token(val);\n}\n\nexport function BigIntLiteral(this: Printer, node: t.BigIntLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"n\");\n}\n\nexport function DecimalLiteral(this: Printer, node: t.DecimalLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"m\");\n}\n\n// Hack pipe operator\nconst validTopicTokenSet = new Set([\"^^\", \"@@\", \"^\", \"%\", \"#\"]);\nexport function TopicReference(this: Printer) {\n  const { topicToken } = this.format;\n\n  if (validTopicTokenSet.has(topicToken)) {\n    this.token(topicToken);\n  } else {\n    const givenTopicTokenJSON = JSON.stringify(topicToken);\n    const validTopics = Array.from(validTopicTokenSet, v => JSON.stringify(v));\n    throw new Error(\n      `The \"topicToken\" generator option must be one of ` +\n        `${validTopics.join(\", \")} (${givenTopicTokenJSON} received instead).`,\n    );\n  }\n}\n\n// Smart-mix pipe operator\nexport function PipelineTopicExpression(\n  this: Printer,\n  node: t.PipelineTopicExpression,\n) {\n  this.print(node.expression, node);\n}\n\nexport function PipelineBareFunction(\n  this: Printer,\n  node: t.PipelineBareFunction,\n) {\n  this.print(node.callee, node);\n}\n\nexport function PipelinePrimaryTopicReference(this: Printer) {\n  this.token(\"#\");\n}\n", "import type Printer from \"../printer.ts\";\nimport { isDeclareExportDeclaration, isStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { ExportAllDeclaration } from \"./modules.ts\";\n\nexport function AnyTypeAnnotation(this: Printer) {\n  this.word(\"any\");\n}\n\nexport function ArrayTypeAnnotation(\n  this: Printer,\n  node: t.ArrayTypeAnnotation,\n) {\n  this.print(node.elementType, node, true);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nexport function BooleanTypeAnnotation(this: Printer) {\n  this.word(\"boolean\");\n}\n\nexport function BooleanLiteralTypeAnnotation(\n  this: Printer,\n  node: t.BooleanLiteralTypeAnnotation,\n) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteralTypeAnnotation(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function DeclareClass(\n  this: Printer,\n  node: t.DeclareClass,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"class\");\n  this.space();\n  this._interfaceish(node);\n}\n\nexport function DeclareFunction(\n  this: Printer,\n  node: t.DeclareFunction,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  // @ts-ignore(Babel 7 vs Babel 8) TODO(Babel 8) Remove this comment, since we'll remove the Noop node\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\nexport function InferredPredicate(this: Printer) {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\nexport function DeclaredPredicate(this: Printer, node: t.DeclaredPredicate) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\nexport function DeclareInterface(this: Printer, node: t.DeclareInterface) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nexport function DeclareModule(this: Printer, node: t.DeclareModule) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function DeclareModuleExports(\n  this: Printer,\n  node: t.DeclareModuleExports,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function DeclareTypeAlias(this: Printer, node: t.DeclareTypeAlias) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nexport function DeclareOpaqueType(\n  this: Printer,\n  node: t.DeclareOpaqueType,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.OpaqueType(node);\n}\n\nexport function DeclareVariable(\n  this: Printer,\n  node: t.DeclareVariable,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nexport function DeclareExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.call(this, node);\n}\n\nexport function DeclareExportAllDeclaration(\n  this: Printer,\n  node: t.DeclareExportAllDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  ExportAllDeclaration.call(this, node);\n}\n\nexport function EnumDeclaration(this: Printer, node: t.EnumDeclaration) {\n  const { id, body } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\nfunction enumExplicitType(\n  context: Printer,\n  name: string,\n  hasExplicitType: boolean,\n) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n  context.space();\n}\n\nfunction enumBody(context: Printer, node: t.EnumBody) {\n  const { members } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n  context.dedent();\n  context.token(\"}\");\n}\n\nexport function EnumBooleanBody(this: Printer, node: t.EnumBooleanBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumNumberBody(this: Printer, node: t.EnumNumberBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumStringBody(this: Printer, node: t.EnumStringBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumSymbolBody(this: Printer, node: t.EnumSymbolBody) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\nexport function EnumDefaultedMember(\n  this: Printer,\n  node: t.EnumDefaultedMember,\n) {\n  const { id } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\nfunction enumInitializedMember(\n  context: Printer,\n  node: t.EnumBooleanMember | t.EnumNumberMember | t.EnumStringMember,\n) {\n  const { id, init } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nexport function EnumBooleanMember(this: Printer, node: t.EnumBooleanMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumNumberMember(this: Printer, node: t.EnumNumberMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumStringMember(this: Printer, node: t.EnumStringMember) {\n  enumInitializedMember(this, node);\n}\n\nfunction FlowExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExistsTypeAnnotation(this: Printer) {\n  this.token(\"*\");\n}\n\nexport function FunctionTypeAnnotation(\n  this: Printer,\n  node: t.FunctionTypeAnnotation,\n  parent?: t.Node,\n) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying\n\n  const type = parent?.type;\n  if (\n    type != null &&\n    (type === \"ObjectTypeCallProperty\" ||\n      type === \"ObjectTypeInternalSlot\" ||\n      type === \"DeclareFunction\" ||\n      (type === \"ObjectTypeProperty\" && parent.method))\n  ) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nexport function FunctionTypeParam(this: Printer, node: t.FunctionTypeParam) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.typeAnnotation, node);\n}\n\nexport function InterfaceExtends(this: Printer, node: t.InterfaceExtends) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node, true);\n}\n\nexport {\n  InterfaceExtends as ClassImplements,\n  InterfaceExtends as GenericTypeAnnotation,\n};\n\nexport function _interfaceish(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface | t.DeclareClass,\n) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.extends?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  if (node.type === \"DeclareClass\") {\n    if (node.mixins?.length) {\n      this.space();\n      this.word(\"mixins\");\n      this.space();\n      this.printList(node.mixins, node);\n    }\n    if (node.implements?.length) {\n      this.space();\n      this.word(\"implements\");\n      this.space();\n      this.printList(node.implements, node);\n    }\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _variance(\n  this: Printer,\n  node:\n    | t.TypeParameter\n    | t.ObjectTypeIndexer\n    | t.ObjectTypeProperty\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty,\n) {\n  const kind = node.variance?.kind;\n  if (kind != null) {\n    if (kind === \"plus\") {\n      this.token(\"+\");\n    } else if (kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nexport function InterfaceDeclaration(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface,\n) {\n  this.word(\"interface\");\n  this.space();\n  this._interfaceish(node);\n}\n\nfunction andSeparator(this: Printer) {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nexport function InterfaceTypeAnnotation(\n  this: Printer,\n  node: t.InterfaceTypeAnnotation,\n) {\n  this.word(\"interface\");\n  if (node.extends?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function IntersectionTypeAnnotation(\n  this: Printer,\n  node: t.IntersectionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: andSeparator });\n}\n\nexport function MixedTypeAnnotation(this: Printer) {\n  this.word(\"mixed\");\n}\n\nexport function EmptyTypeAnnotation(this: Printer) {\n  this.word(\"empty\");\n}\n\nexport function NullableTypeAnnotation(\n  this: Printer,\n  node: t.NullableTypeAnnotation,\n) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport {\n  NumericLiteral as NumberLiteralTypeAnnotation,\n  StringLiteral as StringLiteralTypeAnnotation,\n} from \"./types.ts\";\n\nexport function NumberTypeAnnotation(this: Printer) {\n  this.word(\"number\");\n}\n\nexport function StringTypeAnnotation(this: Printer) {\n  this.word(\"string\");\n}\n\nexport function ThisTypeAnnotation(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TupleTypeAnnotation(\n  this: Printer,\n  node: t.TupleTypeAnnotation,\n) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nexport function TypeofTypeAnnotation(\n  this: Printer,\n  node: t.TypeofTypeAnnotation,\n) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nexport function TypeAlias(\n  this: Printer,\n  node: t.TypeAlias | t.DeclareTypeAlias,\n) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\nexport function TypeAnnotation(this: Printer, node: t.TypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TypeParameterInstantiation(\n  this: Printer,\n  node: t.TypeParameterInstantiation,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nexport { TypeParameterInstantiation as TypeParameterDeclaration };\n\nexport function TypeParameter(this: Printer, node: t.TypeParameter) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function OpaqueType(\n  this: Printer,\n  node: t.OpaqueType | t.DeclareOpaqueType,\n) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n  this.semicolon();\n}\n\nexport function ObjectTypeAnnotation(\n  this: Printer,\n  node: t.ObjectTypeAnnotation,\n) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  // TODO: remove the array fallbacks and instead enforce the types to require an array\n  const props = [\n    ...node.properties,\n    ...(node.callProperties || []),\n    ...(node.indexers || []),\n    ...(node.internalSlots || []),\n  ];\n\n  if (props.length) {\n    this.newline();\n\n    this.space();\n\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      },\n    });\n\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n    if (props.length) {\n      this.newline();\n    }\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nexport function ObjectTypeInternalSlot(\n  this: Printer,\n  node: t.ObjectTypeInternalSlot,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeCallProperty(\n  this: Printer,\n  node: t.ObjectTypeCallProperty,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeIndexer(this: Printer, node: t.ObjectTypeIndexer) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this._variance(node);\n  this.token(\"[\");\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeProperty(this: Printer, node: t.ObjectTypeProperty) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n  this._variance(node);\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeSpreadProperty(\n  this: Printer,\n  node: t.ObjectTypeSpreadProperty,\n) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport function QualifiedTypeIdentifier(\n  this: Printer,\n  node: t.QualifiedTypeIdentifier,\n) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nexport function SymbolTypeAnnotation(this: Printer) {\n  this.word(\"symbol\");\n}\n\nfunction orSeparator(this: Printer) {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nexport function UnionTypeAnnotation(\n  this: Printer,\n  node: t.UnionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: orSeparator });\n}\n\nexport function TypeCastExpression(this: Printer, node: t.TypeCastExpression) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function Variance(this: Printer, node: t.Variance) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\nexport function VoidTypeAnnotation(this: Printer) {\n  this.word(\"void\");\n}\n\nexport function IndexedAccessType(this: Printer, node: t.IndexedAccessType) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function OptionalIndexedAccessType(\n  this: Printer,\n  node: t.OptionalIndexedAccessType,\n) {\n  this.print(node.objectType, node);\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n", "import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function File(this: Printer, node: t.File) {\n  if (node.program) {\n    // Print this here to ensure that Program node 'leadingComments' still\n    // get printed after the hashbang.\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nexport function Program(this: Printer, node: t.Program) {\n  // An empty Program doesn't have any inner tokens, so\n  // we must explicitly print its inner comments.\n  this.noIndentInnerCommentsHere();\n  this.printInnerComments();\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  this.printSequence(node.body, node);\n}\n\nexport function BlockStatement(this: Printer, node: t.BlockStatement) {\n  this.token(\"{\");\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      indent: true,\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  this.printSequence(node.body, node, { indent: true });\n\n  this.rightBrace(node);\n}\n\nexport function Directive(this: Printer, node: t.Directive) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\n// These regexes match an even number of \\ followed by a quote\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nexport function DirectiveLiteral(this: Printer, node: t.DirectiveLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const { value } = node;\n\n  // NOTE: In directives we can't change escapings,\n  // because they change the behavior.\n  // e.g. \"us\\x65 strict\" (\\x65 is e) is not a \"use strict\" directive.\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\n      \"Malformed AST: it is not possible to print a directive containing\" +\n        \" both unescaped single and double quotes.\",\n    );\n  }\n}\n\nexport function InterpreterDirective(\n  this: Printer,\n  node: t.InterpreterDirective,\n) {\n  this.token(`#!${node.value}`);\n  this.newline(1, true);\n}\n\nexport function Placeholder(this: Printer, node: t.Placeholder) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}\n", "import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function JSXAttribute(this: Printer, node: t.JSXAttribute) {\n  this.print(node.name, node);\n  if (node.value) {\n    this.token(\"=\");\n    this.print(node.value, node);\n  }\n}\n\nexport function JSXIdentifier(this: Printer, node: t.JSXIdentifier) {\n  this.word(node.name);\n}\n\nexport function JSXNamespacedName(this: Printer, node: t.JSXNamespacedName) {\n  this.print(node.namespace, node);\n  this.token(\":\");\n  this.print(node.name, node);\n}\n\nexport function JSXMemberExpression(\n  this: Printer,\n  node: t.JSXMemberExpression,\n) {\n  this.print(node.object, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function JSXSpreadAttribute(this: Printer, node: t.JSXSpreadAttribute) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.argument, node);\n  this.token(\"}\");\n}\n\nexport function JSXExpressionContainer(\n  this: Printer,\n  node: t.JSXExpressionContainer,\n) {\n  this.token(\"{\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXSpreadChild(this: Printer, node: t.JSXSpreadChild) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXText(this: Printer, node: t.JSXText) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw !== undefined) {\n    this.token(raw, true);\n  } else {\n    this.token(node.value, true);\n  }\n}\n\nexport function JSXElement(this: Printer, node: t.JSXElement) {\n  const open = node.openingElement;\n  this.print(open, node);\n  if (open.selfClosing) return;\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingElement, node);\n}\n\nfunction spaceSeparator(this: Printer) {\n  this.space();\n}\n\nexport function JSXOpeningElement(this: Printer, node: t.JSXOpeningElement) {\n  this.token(\"<\");\n  this.print(node.name, node);\n  this.print(node.typeParameters, node); // TS\n  if (node.attributes.length > 0) {\n    this.space();\n    this.printJoin(node.attributes, node, { separator: spaceSeparator });\n  }\n  if (node.selfClosing) {\n    this.space();\n    this.token(\"/>\");\n  } else {\n    this.token(\">\");\n  }\n}\n\nexport function JSXClosingElement(this: Printer, node: t.JSXClosingElement) {\n  this.token(\"</\");\n  this.print(node.name, node);\n  this.token(\">\");\n}\n\nexport function JSXEmptyExpression(this: Printer) {\n  // This node is empty, so forcefully print its inner comments.\n  this.printInnerComments();\n}\n\nexport function JSXFragment(this: Printer, node: t.JSXFragment) {\n  this.print(node.openingFragment, node);\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingFragment, node);\n}\n\nexport function JSXOpeningFragment(this: Printer) {\n  this.token(\"<\");\n  this.token(\">\");\n}\n\nexport function JSXClosingFragment(this: Printer) {\n  this.token(\"</\");\n  this.token(\">\");\n}\n", "import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function TSTypeAnnotation(this: Printer, node: t.TSTypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSTypeParameterInstantiation(\n  this: Printer,\n  node: t.TSTypeParameterInstantiation,\n  parent: t.Node,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n  this.token(\">\");\n}\n\nexport { TSTypeParameterInstantiation as TSTypeParameterDeclaration };\n\nexport function TSTypeParameter(this: Printer, node: t.TSTypeParameter) {\n  if (node.in) {\n    this.word(\"in\");\n    this.space();\n  }\n\n  if (node.out) {\n    this.word(\"out\");\n    this.space();\n  }\n\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (node.name as unknown as string)\n      : (node.name as unknown as t.Identifier).name,\n  );\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function TSParameterProperty(\n  this: Printer,\n  node: t.TSParameterProperty,\n) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nexport function TSDeclareFunction(\n  this: Printer,\n  node: t.TSDeclareFunction,\n  parent: t.ParentMaps[\"TSDeclareFunction\"],\n) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this._functionHead(node, parent);\n  this.token(\";\");\n}\n\nexport function TSDeclareMethod(this: Printer, node: t.TSDeclareMethod) {\n  this._classMethodHead(node);\n  this.token(\";\");\n}\n\nexport function TSQualifiedName(this: Printer, node: t.TSQualifiedName) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nexport function TSCallSignatureDeclaration(\n  this: Printer,\n  node: t.TSCallSignatureDeclaration,\n) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSConstructSignatureDeclaration(\n  this: Printer,\n  node: t.TSConstructSignatureDeclaration,\n) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSPropertySignature(\n  this: Printer,\n  node: t.TSPropertySignature,\n) {\n  const { readonly } = node;\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function tsPrintPropertyOrMethodName(\n  this: Printer,\n  node: t.TSPropertySignature | t.TSMethodSignature,\n) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n  this.print(node.key, node);\n  if (node.computed) {\n    this.token(\"]\");\n  }\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nexport function TSMethodSignature(this: Printer, node: t.TSMethodSignature) {\n  const { kind } = node;\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSIndexSignature(this: Printer, node: t.TSIndexSignature) {\n  const { readonly, static: isStatic } = node;\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.token(\"[\");\n  this._parameters(node.parameters, node);\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function TSAnyKeyword(this: Printer) {\n  this.word(\"any\");\n}\nexport function TSBigIntKeyword(this: Printer) {\n  this.word(\"bigint\");\n}\nexport function TSUnknownKeyword(this: Printer) {\n  this.word(\"unknown\");\n}\nexport function TSNumberKeyword(this: Printer) {\n  this.word(\"number\");\n}\nexport function TSObjectKeyword(this: Printer) {\n  this.word(\"object\");\n}\nexport function TSBooleanKeyword(this: Printer) {\n  this.word(\"boolean\");\n}\nexport function TSStringKeyword(this: Printer) {\n  this.word(\"string\");\n}\nexport function TSSymbolKeyword(this: Printer) {\n  this.word(\"symbol\");\n}\nexport function TSVoidKeyword(this: Printer) {\n  this.word(\"void\");\n}\nexport function TSUndefinedKeyword(this: Printer) {\n  this.word(\"undefined\");\n}\nexport function TSNullKeyword(this: Printer) {\n  this.word(\"null\");\n}\nexport function TSNeverKeyword(this: Printer) {\n  this.word(\"never\");\n}\nexport function TSIntrinsicKeyword(this: Printer) {\n  this.word(\"intrinsic\");\n}\n\nexport function TSThisType(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TSFunctionType(this: Printer, node: t.TSFunctionType) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function TSConstructorType(this: Printer, node: t.TSConstructorType) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function tsPrintFunctionOrConstructorType(\n  this: Printer,\n  node: t.TSFunctionType | t.TSConstructorType,\n) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.params\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.returnType\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nexport function TSTypeReference(this: Printer, node: t.TSTypeReference) {\n  this.print(node.typeName, node, true);\n  this.print(node.typeParameters, node, true);\n}\n\nexport function TSTypePredicate(this: Printer, node: t.TSTypePredicate) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n  this.print(node.parameterName);\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nexport function TSTypeQuery(this: Printer, node: t.TSTypeQuery) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n\n  if (node.typeParameters) {\n    this.print(node.typeParameters, node);\n  }\n}\n\nexport function TSTypeLiteral(this: Printer, node: t.TSTypeLiteral) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nexport function tsPrintTypeLiteralOrInterfaceBody(\n  this: Printer,\n  members: t.TSTypeElement[],\n  node: t.TSType | t.TSInterfaceBody,\n) {\n  tsPrintBraced(this, members, node);\n}\n\nfunction tsPrintBraced(printer: Printer, members: t.Node[], node: t.Node) {\n  printer.token(\"{\");\n  if (members.length) {\n    printer.indent();\n    printer.newline();\n    for (const member of members) {\n      printer.print(member, node);\n      //this.token(sep);\n      printer.newline();\n    }\n    printer.dedent();\n  }\n\n  printer.rightBrace(node);\n}\n\nexport function TSArrayType(this: Printer, node: t.TSArrayType) {\n  this.print(node.elementType, node, true);\n\n  this.token(\"[]\");\n}\n\nexport function TSTupleType(this: Printer, node: t.TSTupleType) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nexport function TSOptionalType(this: Printer, node: t.TSOptionalType) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nexport function TSRestType(this: Printer, node: t.TSRestType) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSNamedTupleMember(this: Printer, node: t.TSNamedTupleMember) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nexport function TSUnionType(this: Printer, node: t.TSUnionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"|\");\n}\n\nexport function TSIntersectionType(this: Printer, node: t.TSIntersectionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(\n  printer: Printer,\n  node: t.TSUnionType | t.TSIntersectionType,\n  sep: \"|\" | \"&\",\n) {\n  printer.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    },\n  });\n}\n\nexport function TSConditionalType(this: Printer, node: t.TSConditionalType) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nexport function TSInferType(this: Printer, node: t.TSInferType) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nexport function TSParenthesizedType(\n  this: Printer,\n  node: t.TSParenthesizedType,\n) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function TSTypeOperator(this: Printer, node: t.TSTypeOperator) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSIndexedAccessType(\n  this: Printer,\n  node: t.TSIndexedAccessType,\n) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function TSMappedType(this: Printer, node: t.TSMappedType) {\n  const { nameType, optional, readonly, typeParameter, typeAnnotation } = node;\n  this.token(\"{\");\n  this.space();\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (typeParameter.name as unknown as string)\n      : (typeParameter.name as unknown as t.Identifier).name,\n  );\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  if (typeAnnotation) {\n    this.token(\":\");\n    this.space();\n    this.print(typeAnnotation, node);\n  }\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self: Printer, tok: true | \"+\" | \"-\") {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nexport function TSLiteralType(this: Printer, node: t.TSLiteralType) {\n  this.print(node.literal, node);\n}\n\nexport function TSExpressionWithTypeArguments(\n  this: Printer,\n  node: t.TSExpressionWithTypeArguments,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSInterfaceDeclaration(\n  this: Printer,\n  node: t.TSInterfaceDeclaration,\n) {\n  const { declare, id, typeParameters, extends: extendz, body } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  if (extendz?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSInterfaceBody(this: Printer, node: t.TSInterfaceBody) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nexport function TSTypeAliasDeclaration(\n  this: Printer,\n  node: t.TSTypeAliasDeclaration,\n) {\n  const { declare, id, typeParameters, typeAnnotation } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSTypeExpression(\n  this: Printer,\n  node: t.TSAsExpression | t.TSSatisfiesExpression,\n) {\n  const { type, expression, typeAnnotation } = node;\n  const forceParens = !!expression.trailingComments?.length;\n  this.print(expression, node, true, undefined, forceParens);\n  this.space();\n  this.word(type === \"TSAsExpression\" ? \"as\" : \"satisfies\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nexport {\n  TSTypeExpression as TSAsExpression,\n  TSTypeExpression as TSSatisfiesExpression,\n};\n\nexport function TSTypeAssertion(this: Printer, node: t.TSTypeAssertion) {\n  const { typeAnnotation, expression } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nexport function TSInstantiationExpression(\n  this: Printer,\n  node: t.TSInstantiationExpression,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSEnumDeclaration(this: Printer, node: t.TSEnumDeclaration) {\n  const { declare, const: isConst, id, members } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  tsPrintBraced(this, members, node);\n}\n\nexport function TSEnumMember(this: Printer, node: t.TSEnumMember) {\n  const { id, initializer } = node;\n  this.print(id, node);\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n  this.token(\",\");\n}\n\nexport function TSModuleDeclaration(\n  this: Printer,\n  node: t.TSModuleDeclaration,\n) {\n  const { declare, id } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSModuleBlock(this: Printer, node: t.TSModuleBlock) {\n  tsPrintBraced(this, node.body, node);\n}\n\nexport function TSImportType(this: Printer, node: t.TSImportType) {\n  const { argument, qualifier, typeParameters } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nexport function TSImportEqualsDeclaration(\n  this: Printer,\n  node: t.TSImportEqualsDeclaration,\n) {\n  const { isExport, id, moduleReference } = node;\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nexport function TSExternalModuleReference(\n  this: Printer,\n  node: t.TSExternalModuleReference,\n) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nexport function TSNonNullExpression(\n  this: Printer,\n  node: t.TSNonNullExpression,\n) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nexport function TSExportAssignment(this: Printer, node: t.TSExportAssignment) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nexport function TSNamespaceExportDeclaration(\n  this: Printer,\n  node: t.TSNamespaceExportDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nexport function tsPrintSignatureDeclarationBase(this: Printer, node: any) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? node.params\n    : node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  const returnType = process.env.BABEL_8_BREAKING\n    ? node.returnType\n    : node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nexport function tsPrintClassMemberModifiers(\n  this: Printer,\n  node:\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.TSDeclareMethod,\n) {\n  const isField =\n    node.type === \"ClassAccessorProperty\" || node.type === \"ClassProperty\";\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}\n", "export * from \"./template-literals.ts\";\nexport * from \"./expressions.ts\";\nexport * from \"./statements.ts\";\nexport * from \"./classes.ts\";\nexport * from \"./methods.ts\";\nexport * from \"./modules.ts\";\nexport * from \"./types.ts\";\nexport * from \"./flow.ts\";\nexport * from \"./base.ts\";\nexport * from \"./jsx.ts\";\nexport * from \"./typescript.ts\";\n", "import Buffer, { type Pos } from \"./buffer.ts\";\nimport type { Loc } from \"./buffer.ts\";\nimport * as n from \"./node/index.ts\";\nimport type * as t from \"@babel/types\";\nimport {\n  isFunction,\n  isStatement,\n  isClassBody,\n  isTSInterfaceBody,\n  isTSEnumDeclaration,\n} from \"@babel/types\";\nimport type { Opts as jsescOptions } from \"jsesc\";\n\nimport type { GeneratorOptions } from \"./index.ts\";\nimport * as generatorFunctions from \"./generators/index.ts\";\nimport type SourceMap from \"./source-map.ts\";\nimport type { TraceMap } from \"@jridgewell/trace-mapping\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst HAS_NEWLINE = /[\\n\\r\\u2028\\u2029]/;\nconst HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\\n\\r\\u2028\\u2029]|\\*\\//;\n\nconst { needsParens } = n;\n\nconst enum COMMENT_TYPE {\n  LEADING,\n  INNER,\n  TRAILING,\n}\n\nconst enum COMMENT_SKIP_NEWLINE {\n  DEFAULT,\n  ALL,\n  LEADING,\n  TRAILING,\n}\n\nconst enum PRINT_COMMENT_HINT {\n  SKIP,\n  ALLOW,\n  DEFER,\n}\n\nexport type Format = {\n  shouldPrintComment: (comment: string) => boolean;\n  retainLines: boolean;\n  retainFunctionParens: boolean;\n  comments: boolean;\n  auxiliaryCommentBefore: string;\n  auxiliaryCommentAfter: string;\n  compact: boolean | \"auto\";\n  minified: boolean;\n  concise: boolean;\n  indent: {\n    adjustMultilineComment: boolean;\n    style: string;\n  };\n  /**\n   * @deprecated Removed in Babel 8, syntax type is always 'hash'\n   */\n  recordAndTupleSyntaxType?: GeneratorOptions[\"recordAndTupleSyntaxType\"];\n  jsescOption: jsescOptions;\n  /**\n   * @deprecated Removed in Babel 8, use `jsescOption` instead\n   */\n  jsonCompatibleStrings?: boolean;\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: GeneratorOptions[\"topicToken\"];\n  /**\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n  /**\n   * The import attributes syntax style:\n   * - \"with\"        : `import { a } from \"b\" with { type: \"json\" };`\n   * - \"assert\"      : `import { a } from \"b\" assert { type: \"json\" };`\n   * - \"with-legacy\" : `import { a } from \"b\" with type: \"json\";`\n   */\n  importAttributesKeyword?: \"with\" | \"assert\" | \"with-legacy\";\n};\n\ninterface AddNewlinesOptions {\n  addNewlines(leading: boolean, node: t.Node): number;\n  nextNodeStartLine: number;\n}\n\ninterface PrintSequenceOptions extends Partial<AddNewlinesOptions> {\n  statement?: boolean;\n  indent?: boolean;\n  trailingCommentsLineOffset?: number;\n}\n\ninterface PrintListOptions {\n  separator?: (this: Printer) => void;\n  iterator?: (node: t.Node, index: number) => void;\n  statement?: boolean;\n  indent?: boolean;\n}\n\nexport type PrintJoinOptions = PrintListOptions & PrintSequenceOptions;\nclass Printer {\n  constructor(format: Format, map: SourceMap) {\n    this.format = format;\n\n    this._indentRepeat = format.indent.style.length;\n\n    this._inputMap = map?._inputMap;\n\n    this._buf = new Buffer(map, format.indent.style[0]);\n  }\n  declare _inputMap: TraceMap;\n\n  declare format: Format;\n  inForStatementInitCounter: number = 0;\n\n  declare _buf: Buffer;\n  _printStack: Array<t.Node> = [];\n  _indent: number = 0;\n  _indentRepeat: number = 0;\n  _insideAux: boolean = false;\n  _parenPushNewlineState: { printed: boolean } | null = null;\n  _noLineTerminator: boolean = false;\n  _printAuxAfterOnNextUserNode: boolean = false;\n  _printedComments = new Set<t.Comment>();\n  _endsWithInteger = false;\n  _endsWithWord = false;\n  _lastCommentLine = 0;\n  _endsWithInnerRaw: boolean = false;\n  _indentInnerComments: boolean = true;\n\n  generate(ast: t.Node) {\n    this.print(ast);\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  /**\n   * Increment indent size.\n   */\n\n  indent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent++;\n  }\n\n  /**\n   * Decrement indent size.\n   */\n\n  dedent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent--;\n  }\n\n  /**\n   * Add a semicolon to the buffer.\n   */\n\n  semicolon(force: boolean = false): void {\n    this._maybeAddAuxComment();\n    if (force) {\n      this._appendChar(charCodes.semicolon);\n    } else {\n      this._queue(charCodes.semicolon);\n    }\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a right brace to the buffer.\n   */\n\n  rightBrace(node: t.Node): void {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.sourceWithOffset(\"end\", node.loc, -1);\n    this.token(\"}\");\n  }\n\n  rightParens(node: t.Node): void {\n    this.sourceWithOffset(\"end\", node.loc, -1);\n    this.token(\")\");\n  }\n\n  /**\n   * Add a space to the buffer unless it is compact.\n   */\n\n  space(force: boolean = false): void {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n      if (lastCp !== charCodes.space && lastCp !== charCodes.lineFeed) {\n        this._space();\n      }\n    }\n  }\n\n  /**\n   * Writes a token that can't be safely parsed without taking whitespace into account.\n   */\n\n  word(str: string, noLineTerminatorAfter: boolean = false): void {\n    this._maybePrintInnerComments();\n\n    // prevent concatenating words and creating // comment out of division and regex\n    if (\n      this._endsWithWord ||\n      (str.charCodeAt(0) === charCodes.slash && this.endsWith(charCodes.slash))\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, false);\n\n    this._endsWithWord = true;\n    this._noLineTerminator = noLineTerminatorAfter;\n  }\n\n  /**\n   * Writes a number token so that we can validate if it is an integer.\n   */\n\n  number(str: string, number?: number): void {\n    // const NON_DECIMAL_LITERAL = /^0[box]/;\n    function isNonDecimalLiteral(str: string) {\n      if (str.length > 2 && str.charCodeAt(0) === charCodes.digit0) {\n        const secondChar = str.charCodeAt(1);\n        return (\n          secondChar === charCodes.lowercaseB ||\n          secondChar === charCodes.lowercaseO ||\n          secondChar === charCodes.lowercaseX\n        );\n      }\n      return false;\n    }\n    this.word(str);\n\n    // Integer tokens need special handling because they cannot have '.'s inserted\n    // immediately after them.\n    this._endsWithInteger =\n      Number.isInteger(number) &&\n      !isNonDecimalLiteral(str) &&\n      !SCIENTIFIC_NOTATION.test(str) &&\n      !ZERO_DECIMAL_INTEGER.test(str) &&\n      str.charCodeAt(str.length - 1) !== charCodes.dot;\n  }\n\n  /**\n   * Writes a simple token.\n   */\n  token(str: string, maybeNewline = false): void {\n    this._maybePrintInnerComments();\n\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n    if (\n      (lastChar === charCodes.exclamationMark &&\n        // space is mandatory to avoid outputting <!--\n        // http://javascript.spec.whatwg.org/#comment-syntax\n        (str === \"--\" ||\n          // Needs spaces to avoid changing a! == 0 to a!== 0\n          strFirst === charCodes.equalsTo)) ||\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (strFirst === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (strFirst === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (strFirst === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, maybeNewline);\n    this._noLineTerminator = false;\n  }\n\n  tokenChar(char: number): void {\n    this._maybePrintInnerComments();\n\n    const lastChar = this.getLastChar();\n    if (\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (char === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (char === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (char === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._appendChar(char);\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a newline (or many newlines), maintaining formatting.\n   * This function checks the number of newlines in the queue and subtracts them.\n   * It currently has some limitations.\n   * @see {Buffer#getNewlineCount}\n   */\n  newline(i: number = 1, force?: boolean): void {\n    if (i <= 0) return;\n\n    if (!force) {\n      if (this.format.retainLines || this.format.compact) return;\n\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n    }\n\n    if (i > 2) i = 2; // Max two lines\n\n    i -= this._buf.getNewlineCount();\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n\n    return;\n  }\n\n  endsWith(char: number): boolean {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar(): number {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline(): number {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline(): void {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!loc) {\n      cb();\n      return;\n    }\n\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    columnOffset: number,\n  ): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.sourceWithOffset(prop, loc, columnOffset);\n  }\n\n  withSource(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    cb: () => void,\n  ): void {\n    if (!loc) {\n      cb();\n      return;\n    }\n\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  sourceIdentifierName(identifierName: string, pos?: Pos): void {\n    if (!this._buf._canMarkIdName) return;\n\n    const sourcePosition = this._buf._sourcePosition;\n    sourcePosition.identifierNamePos = pos;\n    sourcePosition.identifierName = identifierName;\n  }\n\n  _space(): void {\n    this._queue(charCodes.space);\n  }\n\n  _newline(): void {\n    this._queue(charCodes.lineFeed);\n  }\n\n  _append(str: string, maybeNewline: boolean): void {\n    this._maybeAddParen(str);\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char: number): void {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char: number) {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar: number): void {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      this._buf.queueIndentation(this._getIndent());\n    }\n  }\n\n  _shouldIndent(firstChar: number) {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      return true;\n    }\n  }\n\n  _maybeAddParenChar(char: number): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    if (char === charCodes.space) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    if (char !== charCodes.lineFeed) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str: string): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    const len = str.length;\n\n    let i;\n    for (i = 0; i < len && str.charCodeAt(i) === charCodes.space; i++) continue;\n    if (i === len) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    const cha = str.charCodeAt(i);\n    if (cha !== charCodes.lineFeed) {\n      if (\n        // This is not a comment (it doesn't start with /)\n        cha !== charCodes.slash ||\n        // This is not a comment (it's a / operator)\n        i + 1 === len\n      ) {\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === charCodes.asterisk) {\n        // This is a block comment\n        return;\n      } else if (chaPost !== charCodes.slash) {\n        // This is neither a block comment, nor a line comment.\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  catchUp(line: number) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const count = line - this._buf.getCurrentLine();\n\n    for (let i = 0; i < count; i++) {\n      this._newline();\n    }\n  }\n\n  _catchUp(prop: \"start\" | \"end\", loc?: Loc) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const line = loc?.[prop]?.line;\n    if (line != null) {\n      const count = line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  /**\n   * Get the current indent.\n   */\n\n  _getIndent(): number {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node: t.Node, parent: t.Node, isLabel: boolean) {\n    /**\n     * Set some state that will be modified if a newline has been inserted before any\n     * non-space characters.\n     *\n     * This is to prevent breaking semantics for terminatorless separator nodes. eg:\n     *\n     *   return foo;\n     *\n     * returns `foo`. But if we do:\n     *\n     *   return\n     *   foo;\n     *\n     *  `undefined` will be returned and not `foo` due to the terminator.\n     */\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n    } else {\n      const terminatorState = {\n        printed: false,\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n      /**\n       * Print an ending parentheses if a starting one has been printed.\n       */\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.token(\")\");\n      }\n    }\n  }\n\n  print(\n    node: t.Node | null,\n    parent?: t.Node,\n    noLineTerminatorAfter?: boolean,\n    // trailingCommentsLineOffset also used to check if called from printJoin\n    // it will be ignored if `noLineTerminatorAfter||this._noLineTerminator`\n    trailingCommentsLineOffset?: number,\n    forceParens?: boolean,\n  ) {\n    if (!node) return;\n\n    this._endsWithInnerRaw = false;\n\n    const nodeType = node.type;\n    const format = this.format;\n\n    const oldConcise = format.concise;\n    if (\n      // @ts-expect-error document _compact AST properties\n      node._compact\n    ) {\n      format.concise = true;\n    }\n\n    const printMethod =\n      this[\n        nodeType as Exclude<\n          t.Node[\"type\"],\n          // removed\n          | \"Noop\"\n          // renamed\n          | t.DeprecatedAliases[\"type\"]\n        >\n      ];\n    if (printMethod === undefined) {\n      throw new ReferenceError(\n        `unknown node of type ${JSON.stringify(\n          nodeType,\n        )} with constructor ${JSON.stringify(node.constructor.name)}`,\n      );\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == null;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    const parenthesized = node.extra?.parenthesized as boolean | undefined;\n    let shouldPrintParens =\n      forceParens ||\n      (parenthesized &&\n        format.retainFunctionParens &&\n        nodeType === \"FunctionExpression\") ||\n      needsParens(node, parent, this._printStack);\n\n    if (\n      !shouldPrintParens &&\n      parenthesized &&\n      node.leadingComments?.length &&\n      node.leadingComments[0].type === \"CommentBlock\"\n    ) {\n      const parentType = parent?.type;\n      switch (parentType) {\n        case \"ExpressionStatement\":\n        case \"VariableDeclarator\":\n        case \"AssignmentExpression\":\n        case \"ReturnStatement\":\n          break;\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n        case \"NewExpression\":\n          if (parent.callee !== node) break;\n        // falls through\n        default:\n          shouldPrintParens = true;\n      }\n    }\n\n    if (shouldPrintParens) {\n      this.token(\"(\");\n      this._endsWithInnerRaw = false;\n    }\n\n    this._lastCommentLine = 0;\n\n    this._printLeadingComments(node, parent);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n\n    this.exactSource(\n      loc,\n      // We must use @ts-ignore because this error appears in VSCode but not\n      // when doing a full build?\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore https://github.com/microsoft/TypeScript/issues/58468\n      printMethod.bind(this, node, parent),\n    );\n\n    if (shouldPrintParens) {\n      this._printTrailingComments(node, parent);\n      this.token(\")\");\n      this._noLineTerminator = noLineTerminatorAfter;\n    } else if (noLineTerminatorAfter && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n      this._printTrailingComments(node, parent);\n    } else {\n      this._printTrailingComments(node, parent, trailingCommentsLineOffset);\n    }\n\n    // end\n    this._printStack.pop();\n\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n\n    this._endsWithInnerRaw = false;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode?: boolean) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n\n    const comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n\n    const comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  getPossibleRaw(\n    node:\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral\n      | t.DecimalLiteral\n      | t.DirectiveLiteral\n      | t.JSXText,\n  ): string | undefined {\n    const extra = node.extra;\n    if (\n      extra?.raw != null &&\n      extra.rawValue != null &&\n      node.value === extra.rawValue\n    ) {\n      // @ts-expect-error: The extra.raw of these AST node types must be a string\n      return extra.raw;\n    }\n  }\n\n  printJoin(\n    nodes: Array<t.Node> | undefined | null,\n    parent: t.Node,\n    opts: PrintJoinOptions = {},\n  ) {\n    if (!nodes?.length) return;\n\n    let { indent } = opts;\n\n    if (indent == null && this.format.retainLines) {\n      const startLine = nodes[0].loc?.start.line;\n      if (startLine != null && startLine !== this._buf.getCurrentLine()) {\n        indent = true;\n      }\n    }\n\n    if (indent) this.indent();\n\n    const newlineOpts: AddNewlinesOptions = {\n      addNewlines: opts.addNewlines,\n      nextNodeStartLine: 0,\n    };\n\n    const separator = opts.separator ? opts.separator.bind(this) : null;\n\n    const len = nodes.length;\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n\n      if (opts.statement) this._printNewline(i === 0, newlineOpts);\n\n      this.print(node, parent, undefined, opts.trailingCommentsLineOffset || 0);\n\n      opts.iterator?.(node, i);\n\n      if (i < len - 1) separator?.();\n\n      if (opts.statement) {\n        if (!node.trailingComments?.length) {\n          this._lastCommentLine = 0;\n        }\n\n        if (i + 1 === len) {\n          this.newline(1);\n        } else {\n          const nextNode = nodes[i + 1];\n          newlineOpts.nextNodeStartLine = nextNode.loc?.start.line || 0;\n\n          this._printNewline(true, newlineOpts);\n        }\n      }\n    }\n\n    if (indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node: t.Node, parent: t.Node) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent: Extract<t.Node, { body: t.Statement }>) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node: t.Node, parent?: t.Node, lineOffset?: number) {\n    const { innerComments, trailingComments } = node;\n    // We print inner comments here, so that if for some reason they couldn't\n    // be printed in earlier locations they are still printed *somewhere*,\n    // even if at the end of the node.\n    if (innerComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        innerComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n    if (trailingComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        trailingComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n  }\n\n  _printLeadingComments(node: t.Node, parent: t.Node) {\n    const comments = node.leadingComments;\n    if (!comments?.length) return;\n    this._printComments(COMMENT_TYPE.LEADING, comments, node, parent);\n  }\n\n  _maybePrintInnerComments() {\n    if (this._endsWithInnerRaw) this.printInnerComments();\n    this._endsWithInnerRaw = true;\n    this._indentInnerComments = true;\n  }\n\n  printInnerComments() {\n    const node = this._printStack[this._printStack.length - 1];\n    const comments = node.innerComments;\n    if (!comments?.length) return;\n\n    const hasSpace = this.endsWith(charCodes.space);\n    const indent = this._indentInnerComments;\n    const printedCommentsCount = this._printedComments.size;\n    if (indent) this.indent();\n    this._printComments(COMMENT_TYPE.INNER, comments, node);\n    if (hasSpace && printedCommentsCount !== this._printedComments.size) {\n      this.space();\n    }\n    if (indent) this.dedent();\n  }\n\n  noIndentInnerCommentsHere() {\n    this._indentInnerComments = false;\n  }\n\n  printSequence(\n    nodes: t.Node[],\n    parent: t.Node,\n    opts: PrintSequenceOptions = {},\n  ) {\n    opts.statement = true;\n    opts.indent ??= false;\n    this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items: t.Node[], parent: t.Node, opts: PrintListOptions = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(newLine: boolean, opts: AddNewlinesOptions) {\n    const format = this.format;\n\n    // Fast path since 'this.newline' does nothing when not tracking lines.\n    if (format.retainLines || format.compact) return;\n\n    // Fast path for concise since 'this.newline' just inserts a space when\n    // concise formatting is in use.\n    if (format.concise) {\n      this.space();\n      return;\n    }\n\n    if (!newLine) {\n      return;\n    }\n\n    const startLine = opts.nextNodeStartLine;\n    const lastCommentLine = this._lastCommentLine;\n    if (startLine > 0 && lastCommentLine > 0) {\n      const offset = startLine - lastCommentLine;\n      if (offset >= 0) {\n        this.newline(offset || 1);\n        return;\n      }\n    }\n\n    // don't add newlines at the beginning of the file\n    if (this._buf.hasContent()) {\n      // Here is the logic of the original line wrapping according to the node layout, we are not using it now.\n      // We currently add at most one newline to each node in the list, ignoring `opts.addNewlines`.\n\n      // let lines = 0;\n      // if (!leading) lines++; // always include at least a single line after\n      // if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n\n      // const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      // if (needs(node, parent)) lines++;\n\n      // this.newline(Math.min(2, lines));\n\n      this.newline(1);\n    }\n  }\n\n  // Returns `PRINT_COMMENT_HINT.DEFER` if the comment cannot be printed in this position due to\n  // line terminators, signaling that the print comments loop can stop and\n  // resume printing comments at the next possible position. This happens when\n  // printing inner comments, since if we have an inner comment with a multiline\n  // there is at least one inner position where line terminators are allowed.\n  _shouldPrintComment(comment: t.Comment): PRINT_COMMENT_HINT {\n    // Some plugins (such as flow-strip-types) use this to mark comments as removed using the AST-root 'comments' property,\n    // where they can't manually mutate the AST node comment lists.\n    if (comment.ignore) return PRINT_COMMENT_HINT.SKIP;\n\n    if (this._printedComments.has(comment)) return PRINT_COMMENT_HINT.SKIP;\n\n    if (\n      this._noLineTerminator &&\n      HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)\n    ) {\n      return PRINT_COMMENT_HINT.DEFER;\n    }\n\n    this._printedComments.add(comment);\n\n    if (!this.format.shouldPrintComment(comment.value)) {\n      return PRINT_COMMENT_HINT.SKIP;\n    }\n\n    return PRINT_COMMENT_HINT.ALLOW;\n  }\n\n  _printComment(comment: t.Comment, skipNewLines: COMMENT_SKIP_NEWLINE) {\n    const noLineTerminator = this._noLineTerminator;\n    const isBlockComment = comment.type === \"CommentBlock\";\n\n    // Add a newline before and after a block comment, unless explicitly\n    // disallowed\n    const printNewLines =\n      isBlockComment &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.ALL &&\n      !this._noLineTerminator;\n\n    if (\n      printNewLines &&\n      this._buf.hasContent() &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.LEADING\n    ) {\n      this.newline(1);\n    }\n\n    const lastCharCode = this.getLastChar();\n    if (\n      lastCharCode !== charCodes.leftSquareBracket &&\n      lastCharCode !== charCodes.leftCurlyBrace\n    ) {\n      this.space();\n    }\n\n    let val;\n    if (isBlockComment) {\n      const { _parenPushNewlineState } = this;\n      if (\n        _parenPushNewlineState?.printed === false &&\n        HAS_NEWLINE.test(comment.value)\n      ) {\n        this.token(\"(\");\n        this.indent();\n        _parenPushNewlineState.printed = true;\n      }\n      val = `/*${comment.value}*/`;\n      if (this.format.indent.adjustMultilineComment) {\n        const offset = comment.loc?.start.column;\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n        if (this.format.concise) {\n          val = val.replace(/\\n(?!$)/g, `\\n`);\n        } else {\n          let indentSize = this.format.retainLines\n            ? 0\n            : this._buf.getCurrentColumn();\n\n          if (this._shouldIndent(charCodes.slash) || this.format.retainLines) {\n            indentSize += this._getIndent();\n          }\n\n          val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n        }\n      }\n    } else if (!noLineTerminator) {\n      val = `//${comment.value}`;\n    } else {\n      // It was a single-line comment, so it's guaranteed to not\n      // contain newlines and it can be safely printed as a block\n      // comment.\n      val = `/*${comment.value}*/`;\n    }\n\n    // Avoid creating //* comments\n    if (this.endsWith(charCodes.slash)) this._space();\n\n    this.source(\"start\", comment.loc);\n    this._append(val, isBlockComment);\n\n    if (!isBlockComment && !noLineTerminator) {\n      this.newline(1, true);\n    }\n\n    if (printNewLines && skipNewLines !== COMMENT_SKIP_NEWLINE.TRAILING) {\n      this.newline(1);\n    }\n  }\n\n  _printComments(\n    type: COMMENT_TYPE,\n    comments: readonly t.Comment[],\n    node: t.Node,\n    parent?: t.Node,\n    lineOffset: number = 0,\n  ) {\n    const nodeLoc = node.loc;\n    const len = comments.length;\n    let hasLoc = !!nodeLoc;\n    const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;\n    const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;\n    let lastLine = 0;\n    let leadingCommentNewline = 0;\n\n    const maybeNewline = this._noLineTerminator\n      ? function () {}\n      : this.newline.bind(this);\n\n    for (let i = 0; i < len; i++) {\n      const comment = comments[i];\n\n      const shouldPrint = this._shouldPrintComment(comment);\n      if (shouldPrint === PRINT_COMMENT_HINT.DEFER) {\n        hasLoc = false;\n        break;\n      }\n      if (hasLoc && comment.loc && shouldPrint === PRINT_COMMENT_HINT.ALLOW) {\n        const commentStartLine = comment.loc.start.line;\n        const commentEndLine = comment.loc.end.line;\n        if (type === COMMENT_TYPE.LEADING) {\n          let offset = 0;\n          if (i === 0) {\n            // Because currently we cannot handle blank lines before leading comments,\n            // we always wrap before and after multi-line comments.\n            if (\n              this._buf.hasContent() &&\n              (comment.type === \"CommentLine\" ||\n                commentStartLine !== commentEndLine)\n            ) {\n              offset = leadingCommentNewline = 1;\n            }\n          } else {\n            offset = commentStartLine - lastLine;\n          }\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(\n              Math.max(nodeStartLine - lastLine, leadingCommentNewline),\n            );\n            lastLine = nodeStartLine;\n          }\n        } else if (type === COMMENT_TYPE.INNER) {\n          const offset =\n            commentStartLine - (i === 0 ? nodeStartLine : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(Math.min(1, nodeEndLine - lastLine)); // TODO: Improve here when inner comments processing is stronger\n            lastLine = nodeEndLine;\n          }\n        } else {\n          const offset =\n            commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n        }\n      } else {\n        hasLoc = false;\n        if (shouldPrint !== PRINT_COMMENT_HINT.ALLOW) {\n          continue;\n        }\n\n        if (len === 1) {\n          const singleLine = comment.loc\n            ? comment.loc.start.line === comment.loc.end.line\n            : !HAS_NEWLINE.test(comment.value);\n\n          const shouldSkipNewline =\n            singleLine &&\n            !isStatement(node) &&\n            !isClassBody(parent) &&\n            !isTSInterfaceBody(parent) &&\n            !isTSEnumDeclaration(parent);\n\n          if (type === COMMENT_TYPE.LEADING) {\n            this._printComment(\n              comment,\n              (shouldSkipNewline && node.type !== \"ObjectExpression\") ||\n                (singleLine && isFunction(parent, { body: node }))\n                ? COMMENT_SKIP_NEWLINE.ALL\n                : COMMENT_SKIP_NEWLINE.DEFAULT,\n            );\n          } else if (shouldSkipNewline && type === COMMENT_TYPE.TRAILING) {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n          } else {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n          }\n        } else if (\n          type === COMMENT_TYPE.INNER &&\n          !(node.type === \"ObjectExpression\" && node.properties.length > 1) &&\n          node.type !== \"ClassBody\" &&\n          node.type !== \"TSInterfaceBody\"\n        ) {\n          // class X {\n          //   /*:: a: number*/\n          //   /*:: b: ?string*/\n          // }\n\n          this._printComment(\n            comment,\n            i === 0\n              ? COMMENT_SKIP_NEWLINE.LEADING\n              : i === len - 1\n                ? COMMENT_SKIP_NEWLINE.TRAILING\n                : COMMENT_SKIP_NEWLINE.DEFAULT,\n          );\n        } else {\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n        }\n      }\n    }\n\n    if (type === COMMENT_TYPE.TRAILING && hasLoc && lastLine) {\n      this._lastCommentLine = lastLine;\n    }\n  }\n}\n\n// Expose the node type functions and helpers on the prototype for easy usage.\nObject.assign(Printer.prototype, generatorFunctions);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-ignore(Babel 7 vs Babel 8) Babel 7 has Noop print method\n  Printer.prototype.Noop = function Noop(this: Printer) {};\n}\n\ntype GeneratorFunctions = typeof generatorFunctions;\ninterface Printer extends GeneratorFunctions {}\nexport default Printer;\n\nfunction commaSeparator(this: Printer) {\n  this.token(\",\");\n  this.space();\n}\n", "import SourceMap from \"./source-map.ts\";\nimport Printer from \"./printer.ts\";\nimport type * as t from \"@babel/types\";\nimport type { Opts as jsescOptions } from \"jsesc\";\nimport type { Format } from \"./printer.ts\";\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\n/**\n * Normalize generator options, setting defaults.\n *\n * - Detects code indentation.\n * - If `opts.compact = \"auto\"` and the code is over 500KB, `compact` will be set to `true`.\n */\n\nfunction normalizeOptions(\n  code: string | { [filename: string]: string },\n  opts: GeneratorOptions,\n): Format {\n  const format: Format = {\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    shouldPrintComment: opts.shouldPrintComment,\n    retainLines: opts.retainLines,\n    retainFunctionParens: opts.retainFunctionParens,\n    comments: opts.comments == null || opts.comments,\n    compact: opts.compact,\n    minified: opts.minified,\n    concise: opts.concise,\n    indent: {\n      adjustMultilineComment: true,\n      style: \"  \",\n    },\n    jsescOption: {\n      quotes: \"double\",\n      wrap: true,\n      minimal: process.env.BABEL_8_BREAKING ? true : false,\n      ...opts.jsescOption,\n    },\n    topicToken: opts.topicToken,\n    importAttributesKeyword: opts.importAttributesKeyword,\n  };\n\n  if (!process.env.BABEL_8_BREAKING) {\n    format.decoratorsBeforeExport = opts.decoratorsBeforeExport;\n    format.jsescOption.json = opts.jsonCompatibleStrings;\n    format.recordAndTupleSyntaxType = opts.recordAndTupleSyntaxType ?? \"hash\";\n  }\n\n  if (format.minified) {\n    format.compact = true;\n\n    format.shouldPrintComment =\n      format.shouldPrintComment || (() => format.comments);\n  } else {\n    format.shouldPrintComment =\n      format.shouldPrintComment ||\n      (value =>\n        format.comments ||\n        value.includes(\"@license\") ||\n        value.includes(\"@preserve\"));\n  }\n\n  if (format.compact === \"auto\") {\n    format.compact = typeof code === \"string\" && code.length > 500_000; // 500KB\n\n    if (format.compact) {\n      console.error(\n        \"[BABEL] Note: The code generator has deoptimised the styling of \" +\n          `${opts.filename} as it exceeds the max of ${\"500KB\"}.`,\n      );\n    }\n  }\n\n  if (format.compact) {\n    format.indent.adjustMultilineComment = false;\n  }\n\n  const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } =\n    format;\n\n  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {\n    format.auxiliaryCommentBefore = undefined;\n  }\n  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {\n    format.auxiliaryCommentAfter = undefined;\n  }\n\n  return format;\n}\n\nexport interface GeneratorOptions {\n  /**\n   * Optional string to add as a block comment at the start of the output file.\n   */\n  auxiliaryCommentBefore?: string;\n\n  /**\n   * Optional string to add as a block comment at the end of the output file.\n   */\n  auxiliaryCommentAfter?: string;\n\n  /**\n   * Function that takes a comment (as a string) and returns true if the comment should be included in the output.\n   * By default, comments are included if `opts.comments` is `true` or if `opts.minified` is `false` and the comment\n   * contains `@preserve` or `@license`.\n   */\n  shouldPrintComment?(comment: string): boolean;\n\n  /**\n   * Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).\n   * Defaults to `false`.\n   */\n  retainLines?: boolean;\n\n  /**\n   * Retain parens around function expressions (could be used to change engine parsing behavior)\n   * Defaults to `false`.\n   */\n  retainFunctionParens?: boolean;\n\n  /**\n   * Should comments be included in output? Defaults to `true`.\n   */\n  comments?: boolean;\n\n  /**\n   * Set to true to avoid adding whitespace for formatting. Defaults to the value of `opts.minified`.\n   */\n  compact?: boolean | \"auto\";\n\n  /**\n   * Should the output be minified. Defaults to `false`.\n   */\n  minified?: boolean;\n\n  /**\n   * Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.\n   */\n  concise?: boolean;\n\n  /**\n   * Used in warning messages\n   */\n  filename?: string;\n\n  /**\n   * Enable generating source maps. Defaults to `false`.\n   */\n  sourceMaps?: boolean;\n\n  inputSourceMap?: any;\n\n  /**\n   * A root for all relative URLs in the source map.\n   */\n  sourceRoot?: string;\n\n  /**\n   * The filename for the source code (i.e. the code in the `code` argument).\n   * This will only be used if `code` is a string.\n   */\n  sourceFileName?: string;\n\n  /**\n   * Set to true to run jsesc with \"json\": true to print \"\\u00A9\" vs. \"©\";\n   * @deprecated use `jsescOptions: { json: true }` instead\n   */\n  jsonCompatibleStrings?: boolean;\n\n  /**\n   * Set to true to enable support for experimental decorators syntax before\n   * module exports. If not specified, decorators will be printed in the same\n   * position as they were in the input source code.\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n\n  /**\n   * Options for outputting jsesc representation.\n   */\n  jsescOption?: jsescOptions;\n\n  /**\n   * For use with the recordAndTuple token.\n   * @deprecated It will be removed in Babel 8.\n   */\n  recordAndTupleSyntaxType?: \"bar\" | \"hash\";\n\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: \"%\" | \"#\" | \"@@\" | \"^^\" | \"^\";\n\n  /**\n   * The import attributes syntax style:\n   * - \"with\"        : `import { a } from \"b\" with { type: \"json\" };`\n   * - \"assert\"      : `import { a } from \"b\" assert { type: \"json\" };`\n   * - \"with-legacy\" : `import { a } from \"b\" with type: \"json\";`\n   */\n  importAttributesKeyword?: \"with\" | \"assert\" | \"with-legacy\";\n}\n\nexport interface GeneratorResult {\n  code: string;\n  map: EncodedSourceMap | null;\n  decodedMap: DecodedSourceMap | undefined;\n  rawMappings: Mapping[] | undefined;\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * We originally exported the Generator class above, but to make it extra clear that it is a private API,\n   * we have moved that to an internal class instance and simplified the interface to the two public methods\n   * that we wish to support.\n   */\n\n  // eslint-disable-next-line no-restricted-globals\n  exports.CodeGenerator = class CodeGenerator {\n    private _ast: t.Node;\n    private _format: Format | undefined;\n    private _map: SourceMap | null;\n    constructor(ast: t.Node, opts: GeneratorOptions = {}, code?: string) {\n      this._ast = ast;\n      this._format = normalizeOptions(code, opts);\n      this._map = opts.sourceMaps ? new SourceMap(opts, code) : null;\n    }\n    generate(): GeneratorResult {\n      const printer = new Printer(this._format, this._map);\n\n      return printer.generate(this._ast);\n    }\n  };\n}\n\n/**\n * Turns an AST into code, maintaining sourcemaps, user preferences, and valid output.\n * @param ast - the abstract syntax tree from which to generate output code.\n * @param opts - used for specifying options for code generation.\n * @param code - the original source code, used for source maps.\n * @returns - an object containing the output code and source map.\n */\nexport default function generate(\n  ast: t.Node,\n  opts: GeneratorOptions = {},\n  code?: string | { [filename: string]: string },\n): GeneratorResult {\n  const format = normalizeOptions(code, opts);\n  const map = opts.sourceMaps ? new SourceMap(opts, code) : null;\n\n  const printer = new Printer(format, map);\n\n  return printer.generate(ast);\n}\n", "// This file contains that retrieve or validate anything related to the current paths ancestry.\n\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index.ts\";\n\n/**\n * Starting at the parent path of the current `NodePath` and going up the\n * tree, return the first `NodePath` that causes the provided `callback`\n * to return a truthy value, or `null` if the `callback` never returns a\n * truthy value.\n */\n\nexport function findParent(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  while ((path = path.parentPath)) {\n    if (callback(path)) return path;\n  }\n  return null;\n}\n\n/**\n * Starting at current `NodePath` and going up the tree, return the first\n * `NodePath` that causes the provided `callback` to return a truthy value,\n * or `null` if the `callback` never returns a truthy value.\n */\n\nexport function find(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  do {\n    if (callback(path)) return path;\n  } while ((path = path.parentPath));\n  return null;\n}\n\n/**\n * Get the parent function of the current path.\n */\n\nexport function getFunctionParent(this: NodePath): NodePath<t.Function> | null {\n  return this.findParent(p => p.isFunction()) as NodePath<t.Function> | null;\n}\n\n/**\n * Walk up the tree until we hit a parent node path in a list.\n */\n\nexport function getStatementParent(this: NodePath): NodePath<t.Statement> {\n  let path = this;\n\n  do {\n    if (\n      !path.parentPath ||\n      (Array.isArray(path.container) && path.isStatement())\n    ) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\n      \"File/Program node, we can't possibly find a statement parent to this\",\n    );\n  }\n\n  return path as NodePath<t.Statement>;\n}\n\n/**\n * Get the deepest common ancestor and then from it, get the earliest relationship path\n * to that ancestor.\n *\n * Earliest is defined as being \"before\" all the other nodes in terms of list container\n * position and visiting key.\n */\n\nexport function getEarliestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n): NodePath {\n  return this.getDeepestCommonAncestorFrom(\n    paths,\n    function (deepest, i, ancestries) {\n      let earliest;\n      const keys = VISITOR_KEYS[deepest.type];\n\n      for (const ancestry of ancestries) {\n        const path = ancestry[i + 1];\n\n        // first path\n        if (!earliest) {\n          earliest = path;\n          continue;\n        }\n\n        // handle containers\n        if (path.listKey && earliest.listKey === path.listKey) {\n          // we're in the same container so check if we're earlier\n          if (path.key < earliest.key) {\n            earliest = path;\n            continue;\n          }\n        }\n\n        // handle keys\n        const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n        const currentKeyIndex = keys.indexOf(path.parentKey);\n        if (earliestKeyIndex > currentKeyIndex) {\n          // key appears before so it's earlier\n          earliest = path;\n        }\n      }\n\n      return earliest;\n    },\n  );\n}\n\n/**\n * Get the earliest path in the tree where the provided `paths` intersect.\n *\n * TODO: Possible optimisation target.\n */\n\nexport function getDeepestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n  filter?: (deepest: NodePath, i: number, ancestries: NodePath[][]) => NodePath,\n): NodePath {\n  if (!paths.length) {\n    return this;\n  }\n\n  if (paths.length === 1) {\n    return paths[0];\n  }\n\n  // minimum depth of the tree so we know the highest node\n  let minDepth = Infinity;\n\n  // last common ancestor\n  let lastCommonIndex, lastCommon;\n\n  // get the ancestors of the path, breaking when the parent exceeds ourselves\n  const ancestries = paths.map(path => {\n    const ancestry: NodePath[] = [];\n\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n\n    // save min depth to avoid going too far in\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n\n    return ancestry;\n  });\n\n  // get the first ancestry so we have a seed to assess all other ancestries with\n  const first = ancestries[0];\n\n  // check ancestor equality\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        // we've hit a snag\n        break depthLoop;\n      }\n    }\n\n    // next iteration may break so store these so they can be returned\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\n\n/**\n * Build an array of node paths containing the entire ancestry of the current node path.\n *\n * NOTE: The current node path is included in this.\n */\n\nexport function getAncestry(this: NodePath): Array<NodePath> {\n  let path = this;\n  const paths = [];\n  do {\n    paths.push(path);\n  } while ((path = path.parentPath));\n  return paths;\n}\n\n/**\n * A helper to find if `this` path is an ancestor of @param maybeDescendant\n */\nexport function isAncestor(this: NodePath, maybeDescendant: NodePath): boolean {\n  return maybeDescendant.isDescendant(this);\n}\n\n/**\n * A helper to find if `this` path is a descendant of @param maybeAncestor\n */\nexport function isDescendant(this: NodePath, maybeAncestor: NodePath): boolean {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\n\nexport function inType(this: NodePath, ...candidateTypes: string[]): boolean {\n  let path = this;\n  while (path) {\n    for (const type of candidateTypes) {\n      if (path.node.type === type) return true;\n    }\n    path = path.parentPath;\n  }\n\n  return false;\n}\n", "import {\n  createFlowUnionType,\n  createTSUnionType,\n  createUnionTypeAnnotation,\n  isFlowType,\n  isTSType,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function createUnionType(\n  types: (t.FlowType | t.TSType)[],\n): t.FlowType | t.TSType | undefined {\n  if (process.env.BABEL_8_BREAKING) {\n    if (types.every(v => isFlowType(v))) {\n      return createFlowUnionType(types as t.FlowType[]);\n    }\n    if (types.every(v => isTSType(v))) {\n      return createTSUnionType(types as t.TSType[]);\n    }\n  } else {\n    if (types.every(v => isFlowType(v))) {\n      if (createFlowUnionType) {\n        return createFlowUnionType(types as t.FlowType[]);\n      }\n\n      return createUnionTypeAnnotation(types as t.FlowType[]);\n    } else if (types.every(v => isTSType(v))) {\n      if (createTSUnionType) {\n        return createTSUnionType(types as t.TSType[]);\n      }\n    }\n  }\n}\n", "import type NodePath from \"../index.ts\";\nimport {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createTypeAnnotationBasedOnTypeof,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Binding from \"../../scope/binding.ts\";\n\nimport { createUnionType } from \"./util.ts\";\n\nexport default function (this: NodePath<t.Identifier>, node: t.Identifier) {\n  if (!this.isReferenced()) return;\n\n  // check if a binding exists of this value and if so then return a union type of all\n  // possible types that the binding could be\n  const binding = this.scope.getBinding(node.name);\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(\n        binding,\n        this,\n        node.name,\n      );\n    }\n  }\n\n  // built-in values\n  if (node.name === \"undefined\") {\n    return voidTypeAnnotation();\n  } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n    return numberTypeAnnotation();\n  } else if (node.name === \"arguments\") {\n    // todo\n  }\n}\n\nfunction getTypeAnnotationBindingConstantViolations(\n  binding: Binding,\n  path: NodePath<t.Identifier>,\n  name: string,\n) {\n  const types = [];\n\n  const functionConstantViolations: NodePath[] = [];\n  let constantViolations = getConstantViolationsBefore(\n    binding,\n    path,\n    functionConstantViolations,\n  );\n\n  const testType = getConditionalAnnotation(binding, path, name);\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(\n      binding,\n      testType.ifStatement,\n    );\n\n    // remove constant violations observed before the IfStatement\n    constantViolations = constantViolations.filter(\n      path => testConstantViolations.indexOf(path) < 0,\n    );\n\n    // clear current types and add in observed test type\n    types.push(testType.typeAnnotation);\n  }\n\n  if (constantViolations.length) {\n    // pick one constant from each scope which will represent the last possible\n    // control flow path that it could've taken/been\n    /* This code is broken for the following problems:\n     * It thinks that assignments can only happen in scopes.\n     * What about conditionals, if statements without block,\n     * or guarded assignments.\n     * It also checks to see if one of the assignments is in the\n     * same scope and uses that as the only \"violation\". However,\n     * the binding is returned by `getConstantViolationsBefore` so we for\n     * sure always going to return that as the only \"violation\".\n    let rawConstantViolations = constantViolations.reverse();\n    let visitedScopes = [];\n    constantViolations = [];\n    for (let violation of (rawConstantViolations: Array<NodePath>)) {\n      let violationScope = violation.scope;\n      if (visitedScopes.indexOf(violationScope) >= 0) continue;\n\n      visitedScopes.push(violationScope);\n      constantViolations.push(violation);\n\n      if (violationScope === path.scope) {\n        constantViolations = [violation];\n        break;\n      }\n    }*/\n\n    // add back on function constant violations since we can't track calls\n    constantViolations.push(...functionConstantViolations);\n\n    // push on inferred types of violated paths\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n\n  if (!types.length) {\n    return;\n  }\n\n  return createUnionType(types);\n}\n\nfunction getConstantViolationsBefore(\n  binding: Binding,\n  path: NodePath,\n  functions?: NodePath[],\n) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n    const status = violation._guessExecutionStatusRelativeTo(path);\n    if (functions && status === \"unknown\") functions.push(violation);\n    return status === \"before\";\n  });\n}\n\nfunction inferAnnotationFromBinaryExpression(\n  name: string,\n  path: NodePath<t.BinaryExpression>,\n) {\n  const operator = path.node.operator;\n\n  const right = path.get(\"right\").resolve();\n  const left = path.get(\"left\").resolve();\n\n  let target;\n  if (left.isIdentifier({ name })) {\n    target = right;\n  } else if (right.isIdentifier({ name })) {\n    target = left;\n  }\n\n  if (target) {\n    if (operator === \"===\") {\n      return target.getTypeAnnotation();\n    }\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return numberTypeAnnotation();\n    }\n\n    return;\n  }\n\n  if (operator !== \"===\" && operator !== \"==\") return;\n\n  let typeofPath: NodePath<t.UnaryExpression>;\n  let typePath: NodePath<t.Expression>;\n  if (left.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = left;\n    typePath = right as NodePath<t.Expression>;\n  } else if (right.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = right;\n    typePath = left as NodePath<t.Expression>;\n  }\n\n  if (!typeofPath) return;\n  // and that the argument of the typeof path references us!\n  if (!typeofPath.get(\"argument\").isIdentifier({ name })) return;\n\n  // ensure that the type path is a Literal\n  typePath = typePath.resolve() as NodePath<t.Expression>;\n  if (!typePath.isLiteral()) return;\n\n  // and that it's a string so we can infer it\n  // @ts-expect-error todo(flow->ts): value is not defined for NullLiteral and some other\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== \"string\") return;\n\n  // turn type value into a type annotation\n  // @ts-expect-error todo(flow->ts): move validation from helper or relax type constraint to just a string\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\n\nfunction getParentConditionalPath(\n  binding: Binding,\n  path: NodePath,\n  name: string,\n) {\n  let parentPath;\n  while ((parentPath = path.parentPath)) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === \"test\") {\n        return;\n      }\n\n      return parentPath as NodePath<t.IfStatement | t.ConditionalExpression>;\n    }\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n\n    path = parentPath;\n  }\n}\n\nfunction getConditionalAnnotation<T extends t.Node>(\n  binding: Binding,\n  path: NodePath<T>,\n  name?: string,\n): {\n  typeAnnotation: t.FlowType | t.TSType;\n  ifStatement: NodePath<t.IfStatement | t.ConditionalExpression>;\n} {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n\n  const test = ifStatement.get(\"test\");\n  const paths = [test];\n  const types = [];\n\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === \"&&\") {\n        paths.push(path.get(\"left\"));\n        paths.push(path.get(\"right\"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n\n  if (types.length) {\n    return {\n      typeAnnotation: createUnionType(types),\n      ifStatement,\n    };\n  }\n\n  return getConditionalAnnotation(binding, ifStatement, name);\n}\n", "import {\n  BOOLEAN_BINARY_OPERATORS,\n  BOOLEAN_UNARY_OPERATORS,\n  NUMBER_BINARY_OPERATORS,\n  NUMBER_UNARY_OPERATORS,\n  STRING_UNARY_OPERATORS,\n  anyTypeAnnotation,\n  arrayTypeAnnotation,\n  booleanTypeAnnotation,\n  buildMatchMemberExpression,\n  genericTypeAnnotation,\n  identifier,\n  nullLiteralTypeAnnotation,\n  numberTypeAnnotation,\n  stringTypeAnnotation,\n  tupleTypeAnnotation,\n  unionTypeAnnotation,\n  voidTypeAnnotation,\n  isIdentifier,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport { default as Identifier } from \"./inferer-reference.ts\";\n\nimport { createUnionType } from \"./util.ts\";\nimport type NodePath from \"../index.ts\";\n\nexport function VariableDeclarator(this: NodePath<t.VariableDeclarator>) {\n  if (!this.get(\"id\").isIdentifier()) return;\n  return this.get(\"init\").getTypeAnnotation();\n}\n\nexport function TypeCastExpression(node: t.TypeCastExpression) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nexport function TSAsExpression(node: t.TSAsExpression) {\n  return node.typeAnnotation;\n}\n\nTSAsExpression.validParent = true;\n\nexport function TSNonNullExpression(this: NodePath<t.TSNonNullExpression>) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function NewExpression(\n  this: NodePath<t.NewExpression>,\n  node: t.NewExpression,\n) {\n  if (node.callee.type === \"Identifier\") {\n    // only resolve identifier callee\n    return genericTypeAnnotation(node.callee);\n  }\n}\n\nexport function TemplateLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function UnaryExpression(node: t.UnaryExpression) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return voidTypeAnnotation();\n  } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return numberTypeAnnotation();\n  } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return stringTypeAnnotation();\n  } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return booleanTypeAnnotation();\n  }\n}\n\nexport function BinaryExpression(\n  this: NodePath<t.BinaryExpression>,\n  node: t.BinaryExpression,\n) {\n  const operator = node.operator;\n\n  if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return numberTypeAnnotation();\n  } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      // both numbers so this will be a number\n      return numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      // one is a string so the result will be a string\n      return stringTypeAnnotation();\n    }\n\n    // unsure if left and right are strings or numbers so stay on the safe side\n    return unionTypeAnnotation([\n      stringTypeAnnotation(),\n      numberTypeAnnotation(),\n    ]);\n  }\n}\n\nexport function LogicalExpression(this: NodePath<t.LogicalExpression>) {\n  const argumentTypes = [\n    this.get(\"left\").getTypeAnnotation(),\n    this.get(\"right\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function ConditionalExpression(this: NodePath<t.ConditionalExpression>) {\n  const argumentTypes = [\n    this.get(\"consequent\").getTypeAnnotation(),\n    this.get(\"alternate\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function SequenceExpression(this: NodePath<t.SequenceExpression>) {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nexport function ParenthesizedExpression(\n  this: NodePath<t.ParenthesizedExpression>,\n) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function AssignmentExpression(this: NodePath<t.AssignmentExpression>) {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nexport function UpdateExpression(\n  this: NodePath<t.UpdateExpression>,\n  node: t.UpdateExpression,\n) {\n  const operator = node.operator;\n  if (operator === \"++\" || operator === \"--\") {\n    return numberTypeAnnotation();\n  }\n}\n\nexport function StringLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function NumericLiteral() {\n  return numberTypeAnnotation();\n}\n\nexport function BooleanLiteral() {\n  return booleanTypeAnnotation();\n}\n\nexport function NullLiteral() {\n  return nullLiteralTypeAnnotation();\n}\n\nexport function RegExpLiteral() {\n  return genericTypeAnnotation(identifier(\"RegExp\"));\n}\n\nexport function ObjectExpression() {\n  return genericTypeAnnotation(identifier(\"Object\"));\n}\n\nexport function ArrayExpression() {\n  return genericTypeAnnotation(identifier(\"Array\"));\n}\n\nexport function RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return genericTypeAnnotation(identifier(\"Function\"));\n}\n\nexport {\n  Func as FunctionExpression,\n  Func as ArrowFunctionExpression,\n  Func as FunctionDeclaration,\n  Func as ClassExpression,\n  Func as ClassDeclaration,\n};\n\nconst isArrayFrom = buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = buildMatchMemberExpression(\"Object.entries\");\nexport function CallExpression(this: NodePath<t.CallExpression>) {\n  const { callee } = this.node;\n  if (isObjectKeys(callee)) {\n    return arrayTypeAnnotation(stringTypeAnnotation());\n  } else if (\n    isArrayFrom(callee) ||\n    isObjectValues(callee) ||\n    // Detect \"var foo = Array()\" calls so we can optimize for arrays vs iterables.\n    isIdentifier(callee, { name: \"Array\" })\n  ) {\n    return arrayTypeAnnotation(anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return arrayTypeAnnotation(\n      tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]),\n    );\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nexport function TaggedTemplateExpression(\n  this: NodePath<t.TaggedTemplateExpression>,\n) {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee: NodePath) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    const { node } = callee;\n    if (node.async) {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"AsyncIterator\"));\n      } else {\n        return genericTypeAnnotation(identifier(\"Promise\"));\n      }\n    } else {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"Iterator\"));\n      } else if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {\n        // todo: get union type of all return arguments\n      }\n    }\n  }\n}\n", "import type NodePath from \"../index.ts\";\nimport * as inferers from \"./inferers.ts\";\nimport {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Infer the type of the current `NodePath`.\n */\n\nexport function getTypeAnnotation(this: NodePath): t.FlowType | t.TSType {\n  let type = this.getData(\"typeAnnotation\");\n  if (type != null) {\n    return type;\n  }\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\n// Used to avoid infinite recursion in cases like\n//   var b, c; if (0) { c = 1; b = c; } c = b;\n// It also works with indirect recursion.\nconst typeAnnotationInferringNodes = new WeakSet();\n\n/**\n * todo: split up this method\n */\n\nexport function _getTypeAnnotation(this: NodePath): any {\n  const node = this.node;\n\n  if (!node) {\n    // handle initializerless variables, add in checks for loop initializers too\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      // for (let NODE in bar) {}\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      // for (let NODE of bar) {}\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  // @ts-expect-error typeAnnotation may not index node\n  if (node.typeAnnotation) {\n    // @ts-expect-error typeAnnotation may not index node\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    // Bail out from type inference to avoid infinite loops\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    let inferer =\n      // @ts-expect-error inferers do not cover all AST types\n      inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    // @ts-expect-error inferers do not cover all AST types\n    inferer = inferers[this.parentPath.type];\n    if (inferer?.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nexport function isBaseType(\n  this: NodePath,\n  baseName: string,\n  soft?: boolean,\n): boolean {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(\n  baseName: string,\n  type?: t.FlowType | t.TSType,\n  soft?: boolean,\n): boolean {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nexport function couldBeBaseType(this: NodePath, name: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nexport function baseTypeStrictlyMatches(\n  this: NodePath,\n  rightArg: NodePath,\n): boolean {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\n\nexport function isGenericType(this: NodePath, genericName: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (genericName === \"Array\") {\n    // T[]\n    if (\n      isTSArrayType(type) ||\n      isArrayTypeAnnotation(type) ||\n      isTupleTypeAnnotation(type)\n    ) {\n      return true;\n    }\n  }\n  return (\n    (isGenericTypeAnnotation(type) &&\n      isIdentifier(type.id, {\n        name: genericName,\n      })) ||\n    (isTSTypeReference(type) &&\n      isIdentifier(type.typeName, {\n        name: genericName,\n      }))\n  );\n}\n", "import {\n  assignmentExpression,\n  expressionStatement,\n  identifier,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n// eslint-disable-next-line import/no-extraneous-dependencies -- TODO: Avoid cycle\nimport type { NodePath, Visitor } from \"@babel/traverse\";\n\nexport type EmitFunction = (\n  id: t.Identifier,\n  idName: string,\n  hasInit: boolean,\n) => any;\n\ntype State = {\n  kind: \"var\" | \"let\";\n  emit: EmitFunction;\n};\n\ntype Unpacked<T> = T extends (infer U)[] ? U : T;\n\nconst visitor: Visitor<State> = {\n  Scope(path, state) {\n    if (state.kind === \"let\") path.skip();\n  },\n\n  FunctionParent(path) {\n    path.skip();\n  },\n\n  VariableDeclaration(path, state) {\n    if (state.kind && path.node.kind !== state.kind) return;\n\n    const nodes = [];\n\n    const declarations: ReadonlyArray<\n      NodePath<Unpacked<t.VariableDeclaration[\"declarations\"]>>\n    > = path.get(\"declarations\");\n    let firstId;\n\n    for (const declar of declarations) {\n      firstId = declar.node.id;\n\n      if (declar.node.init) {\n        nodes.push(\n          expressionStatement(\n            assignmentExpression(\"=\", declar.node.id, declar.node.init),\n          ),\n        );\n      }\n\n      for (const name of Object.keys(declar.getBindingIdentifiers())) {\n        state.emit(identifier(name), name, declar.node.init !== null);\n      }\n    }\n\n    // for (var i in test)\n    if (path.parentPath.isFor({ left: path.node })) {\n      path.replaceWith(firstId);\n    } else {\n      path.replaceWithMultiple(nodes);\n    }\n  },\n};\n\nexport default function hoistVariables(\n  path: NodePath,\n  emit: EmitFunction,\n  kind: \"var\" | \"let\" = \"var\",\n) {\n  path.traverse(visitor, { kind, emit });\n}\n", "// This file contains methods responsible for replacing a node with another.\n\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport traverse from \"../index.ts\";\nimport NodePath from \"./index.ts\";\nimport { getCachedPaths } from \"../cache.ts\";\nimport { parse } from \"@babel/parser\";\nimport {\n  FUNCTION_TYPES,\n  arrowFunctionExpression,\n  assignmentExpression,\n  awaitExpression,\n  blockStatement,\n  buildUndefinedNode,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  expressionStatement,\n  getBindingIdentifiers,\n  identifier,\n  inheritLeadingComments,\n  inheritTrailingComments,\n  inheritsComments,\n  isBlockStatement,\n  isEmptyStatement,\n  isExpression,\n  isExpressionStatement,\n  isIfStatement,\n  isProgram,\n  isStatement,\n  isVariableDeclaration,\n  removeComments,\n  returnStatement,\n  sequenceExpression,\n  validate,\n  yieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport hoistVariables from \"@babel/helper-hoist-variables\";\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nexport function replaceWithMultiple(\n  this: NodePath,\n  nodes: t.Node | t.Node[],\n): NodePath[] {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  inheritLeadingComments(nodes[0], this.node);\n  inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  getCachedPaths(this.hub, this.parent)?.delete(this.node);\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n  return paths;\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nexport function replaceWithSourceString(this: NodePath, replacement: string) {\n  this.resync();\n  let ast: t.File;\n\n  try {\n    replacement = `(${replacement})`;\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = parse(replacement);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message +=\n        \" - make sure this is an expression.\\n\" +\n        codeFrameColumns(replacement, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n    throw err;\n  }\n\n  const expressionAST = (ast.program.body[0] as t.ExpressionStatement)\n    .expression;\n  traverse.removeProperties(expressionAST);\n  return this.replaceWith(expressionAST);\n}\n\n/**\n * Replace the current node with another.\n */\nexport function replaceWith<R extends t.Node>(\n  this: NodePath,\n  replacementPath: R,\n): [NodePath<R>];\nexport function replaceWith<R extends NodePath>(\n  this: NodePath,\n  replacementPath: R,\n): [R];\nexport function replaceWith(\n  this: NodePath,\n  replacementPath: t.Node | NodePath,\n): [NodePath] {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  let replacement: t.Node =\n    replacementPath instanceof NodePath\n      ? replacementPath.node\n      : replacementPath;\n\n  if (!replacement) {\n    throw new Error(\n      \"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\",\n    );\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !isProgram(replacement)) {\n    throw new Error(\n      \"You can only replace a Program root node with another Program node\",\n    );\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\",\n    );\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\",\n    );\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && isExpression(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement) &&\n      !this.parentPath.isExportDefaultDeclaration()\n    ) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && isStatement(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement)\n    ) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]) as [NodePath];\n    }\n  }\n\n  const oldNode = this.node;\n  if (oldNode) {\n    inheritsComments(replacement, oldNode);\n    removeComments(oldNode);\n  }\n\n  // replace the node\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n\n  // requeue for visiting\n  this.requeue();\n\n  return [nodePath ? this.get(nodePath) : this];\n}\n\n/**\n * Description\n */\n\nexport function _replaceWith(this: NodePath, node: t.Node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    // @ts-expect-error todo(flow->ts): check if validate accepts a numeric key\n    validate(this.parent, this.key, [node]);\n  } else {\n    validate(this.parent, this.key as string, node);\n  }\n\n  this.debug(`Replace with ${node?.type}`);\n  getCachedPaths(this.hub, this.parent)?.set(node, this).delete(this.node);\n\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = node;\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nexport function replaceExpressionWithStatements(\n  this: NodePath,\n  nodes: Array<t.Statement>,\n) {\n  this.resync();\n\n  const declars: t.Identifier[] = [];\n  const nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);\n  if (nodesAsSingleExpression) {\n    for (const id of declars) this.scope.push({ id });\n    return this.replaceWith(nodesAsSingleExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent?.is(\"async\");\n  const isParentGenerator = functionParent?.is(\"generator\");\n\n  const container = arrowFunctionExpression([], blockStatement(nodes));\n\n  this.replaceWith(callExpression(container, []));\n  // replaceWith changes the type of \"this\", but it isn't trackable by TS\n  type ThisType = NodePath<\n    t.CallExpression & {\n      callee: t.ArrowFunctionExpression & { body: t.BlockStatement };\n    }\n  >;\n\n  // hoist variable declaration in do block\n  // `(do { var x = 1; x;})` -> `var x; (() => { x = 1; return x; })()`\n  const callee = (this as ThisType).get(\"callee\");\n  hoistVariables(\n    callee.get(\"body\"),\n    (id: t.Identifier) => {\n      this.scope.push({ id });\n    },\n    \"var\",\n  );\n\n  // add implicit returns to all ending expression statements\n  const completionRecords: Array<NodePath> = (this as ThisType)\n    .get(\"callee\")\n    .getCompletionRecords();\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n\n    const loop = path.findParent(path => path.isLoop());\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee\n          .get(\"body\")\n          .pushContainer(\"body\", returnStatement(cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = identifier(uid.name);\n      }\n\n      path\n        .get(\"expression\")\n        .replaceWith(\n          assignmentExpression(\"=\", cloneNode(uid), path.node.expression),\n        );\n    } else {\n      path.replaceWith(returnStatement(path.node.expression));\n    }\n  }\n\n  // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n  callee.arrowFunctionToExpression();\n  // Fixme: we can not `assert this is NodePath<t.FunctionExpression>` in `arrowFunctionToExpression`\n  // because it is not a class method known at compile time.\n  const newCallee = callee as unknown as NodePath<t.FunctionExpression>;\n\n  // (() => await xxx)() -> await (async () => await xxx)();\n  const needToAwaitFunction =\n    isParentAsync &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"AwaitExpression\",\n      FUNCTION_TYPES,\n    );\n  const needToYieldFunction =\n    isParentGenerator &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"YieldExpression\",\n      FUNCTION_TYPES,\n    );\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n    // yield* will await the generator return result\n    if (!needToYieldFunction) {\n      this.replaceWith(awaitExpression((this as ThisType).node));\n    }\n  }\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(yieldExpression((this as ThisType).node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nfunction gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  declars: Array<t.Identifier>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push(cloneNode(bindings[key]));\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], declars)\n        : buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], declars)\n        : buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) exprs.push(buildUndefinedNode());\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n\nexport function replaceInline(this: NodePath, nodes: t.Node | Array<t.Node>) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      const paths = this._containerInsertAfter(nodes);\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}\n", "import type NodePath from \"./index.ts\";\nimport type * as t from \"@babel/types\";\n\n// This file contains Babels metainterpreter that can evaluate static code.\n\nconst VALID_OBJECT_CALLEES = [\"Number\", \"String\", \"Math\"] as const;\nconst VALID_IDENTIFIER_CALLEES = [\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  process.env.BABEL_8_BREAKING ? \"btoa\" : null,\n  process.env.BABEL_8_BREAKING ? \"atob\" : null,\n] as const;\n\nconst INVALID_METHODS = [\"random\"] as const;\n\nfunction isValidObjectCallee(\n  val: string,\n): val is (typeof VALID_OBJECT_CALLEES)[number] {\n  return VALID_OBJECT_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\nfunction isValidIdentifierCallee(\n  val: string,\n): val is (typeof VALID_IDENTIFIER_CALLEES)[number] {\n  return VALID_IDENTIFIER_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\nfunction isInvalidMethod(val: string): val is (typeof INVALID_METHODS)[number] {\n  return INVALID_METHODS.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\n/**\n * Walk the input `node` and statically evaluate if it's truthy.\n *\n * Returning `true` when we're sure that the expression will evaluate to a\n * truthy value, `false` if we're sure that it will evaluate to a falsy\n * value and `undefined` if we aren't sure. Because of this please do not\n * rely on coercion when using this method and check with === if it's false.\n *\n * For example do:\n *\n *   if (t.evaluateTruthy(node) === false) falsyLogic();\n *\n * **AND NOT**\n *\n *   if (!t.evaluateTruthy(node)) falsyLogic();\n *\n */\n\nexport function evaluateTruthy(this: NodePath): boolean {\n  const res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\n\ntype State = {\n  confident: boolean;\n  deoptPath: NodePath | null;\n  seen: Map<t.Node, Result>;\n};\n\ntype Result = {\n  resolved: boolean;\n  value?: any;\n};\n/**\n * Deopts the evaluation\n */\nfunction deopt(path: NodePath, state: State) {\n  if (!state.confident) return;\n  state.deoptPath = path;\n  state.confident = false;\n}\n\nconst Globals = new Map([\n  [\"undefined\", undefined],\n  [\"Infinity\", Infinity],\n  [\"NaN\", NaN],\n]);\n\n/**\n * We wrap the _evaluate method so we can track `seen` nodes, we push an item\n * to the map before we actually evaluate it so we can deopt on self recursive\n * nodes such as:\n *\n *   var g = a ? 1 : 2,\n *       a = g * this.foo\n */\nfunction evaluateCached(path: NodePath, state: State): any {\n  const { node } = path;\n  const { seen } = state;\n\n  if (seen.has(node)) {\n    const existing = seen.get(node);\n    if (existing.resolved) {\n      return existing.value;\n    } else {\n      deopt(path, state);\n      return;\n    }\n  } else {\n    const item: Result = { resolved: false };\n    seen.set(node, item);\n\n    const val = _evaluate(path, state);\n    if (state.confident) {\n      item.resolved = true;\n      item.value = val;\n    }\n    return val;\n  }\n}\n\nfunction _evaluate(path: NodePath, state: State): any {\n  if (!state.confident) return;\n\n  if (path.isSequenceExpression()) {\n    const exprs = path.get(\"expressions\");\n    return evaluateCached(exprs[exprs.length - 1], state);\n  }\n\n  if (\n    path.isStringLiteral() ||\n    path.isNumericLiteral() ||\n    path.isBooleanLiteral()\n  ) {\n    return path.node.value;\n  }\n\n  if (path.isNullLiteral()) {\n    return null;\n  }\n\n  if (path.isTemplateLiteral()) {\n    return evaluateQuasis(path, path.node.quasis, state);\n  }\n\n  if (\n    path.isTaggedTemplateExpression() &&\n    path.get(\"tag\").isMemberExpression()\n  ) {\n    const object = path.get(\"tag.object\") as NodePath;\n    const {\n      // @ts-expect-error todo(flow->ts): possible bug, object is can be any expression and so name might be undefined\n      node: { name },\n    } = object;\n    const property = path.get(\"tag.property\") as NodePath;\n\n    if (\n      object.isIdentifier() &&\n      name === \"String\" &&\n      // todo(flow->ts): was changed from getBinding(name, true)\n      //  should this be hasBinding(name, true) as the binding is never used later?\n      !path.scope.getBinding(name) &&\n      property.isIdentifier() &&\n      property.node.name === \"raw\"\n    ) {\n      return evaluateQuasis(path, path.node.quasi.quasis, state, true);\n    }\n  }\n\n  if (path.isConditionalExpression()) {\n    const testResult = evaluateCached(path.get(\"test\"), state);\n    if (!state.confident) return;\n    if (testResult) {\n      return evaluateCached(path.get(\"consequent\"), state);\n    } else {\n      return evaluateCached(path.get(\"alternate\"), state);\n    }\n  }\n\n  if (path.isExpressionWrapper()) {\n    // TypeCastExpression, ExpressionStatement etc\n    return evaluateCached(path.get(\"expression\"), state);\n  }\n\n  // \"foo\".length, \"foo\"[0]\n  if (\n    path.isMemberExpression() &&\n    !path.parentPath.isCallExpression({ callee: path.node })\n  ) {\n    const property = path.get(\"property\");\n    const object = path.get(\"object\");\n\n    if (object.isLiteral()) {\n      // @ts-expect-error todo(flow->ts): instead of typeof - would it be better to check type of ast node?\n      const value = object.node.value;\n      const type = typeof value;\n\n      let key = null;\n      if (path.node.computed) {\n        key = evaluateCached(property, state);\n        if (!state.confident) return;\n      } else if (property.isIdentifier()) {\n        key = property.node.name;\n      }\n      if (\n        (type === \"number\" || type === \"string\") &&\n        key != null &&\n        (typeof key === \"number\" || typeof key === \"string\")\n      ) {\n        return value[key];\n      }\n    }\n  }\n\n  if (path.isReferencedIdentifier()) {\n    const binding = path.scope.getBinding(path.node.name);\n\n    if (binding) {\n      if (\n        binding.constantViolations.length > 0 ||\n        path.node.start < binding.path.node.end\n      ) {\n        deopt(binding.path, state);\n        return;\n      }\n      if (binding.hasValue) {\n        return binding.value;\n      }\n    }\n\n    const name = path.node.name;\n    if (Globals.has(name)) {\n      if (!binding) {\n        return Globals.get(name);\n      }\n      deopt(binding.path, state);\n      return;\n    }\n\n    const resolved = path.resolve();\n    if (resolved === path) {\n      deopt(path, state);\n      return;\n    } else {\n      return evaluateCached(resolved, state);\n    }\n  }\n\n  if (path.isUnaryExpression({ prefix: true })) {\n    if (path.node.operator === \"void\") {\n      // we don't need to evaluate the argument to know what this will return\n      return undefined;\n    }\n\n    const argument = path.get(\"argument\");\n    if (\n      path.node.operator === \"typeof\" &&\n      (argument.isFunction() || argument.isClass())\n    ) {\n      return \"function\";\n    }\n\n    const arg = evaluateCached(argument, state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case \"!\":\n        return !arg;\n      case \"+\":\n        return +arg;\n      case \"-\":\n        return -arg;\n      case \"~\":\n        return ~arg;\n      case \"typeof\":\n        return typeof arg;\n    }\n  }\n\n  if (path.isArrayExpression()) {\n    const arr = [];\n    const elems: Array<NodePath> = path.get(\"elements\");\n    for (const elem of elems) {\n      const elemValue = elem.evaluate();\n\n      if (elemValue.confident) {\n        arr.push(elemValue.value);\n      } else {\n        deopt(elemValue.deopt, state);\n        return;\n      }\n    }\n    return arr;\n  }\n\n  if (path.isObjectExpression()) {\n    const obj = {};\n    const props = path.get(\"properties\");\n    for (const prop of props) {\n      if (prop.isObjectMethod() || prop.isSpreadElement()) {\n        deopt(prop, state);\n        return;\n      }\n      const keyPath = prop.get(\"key\");\n      let key;\n      if (prop.node.computed) {\n        key = keyPath.evaluate();\n        if (!key.confident) {\n          deopt(key.deopt, state);\n          return;\n        }\n        key = key.value;\n      } else if (keyPath.isIdentifier()) {\n        key = keyPath.node.name;\n      } else {\n        key = (\n          keyPath.node as t.StringLiteral | t.NumericLiteral | t.BigIntLiteral\n        ).value;\n      }\n      const valuePath = prop.get(\"value\");\n      let value = valuePath.evaluate();\n      if (!value.confident) {\n        deopt(value.deopt, state);\n        return;\n      }\n      value = value.value;\n      // @ts-expect-error key is any type\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  if (path.isLogicalExpression()) {\n    // If we are confident that the left side of an && is false, or the left\n    // side of an || is true, we can be confident about the entire expression\n    const wasConfident = state.confident;\n    const left = evaluateCached(path.get(\"left\"), state);\n    const leftConfident = state.confident;\n    state.confident = wasConfident;\n    const right = evaluateCached(path.get(\"right\"), state);\n    const rightConfident = state.confident;\n\n    switch (path.node.operator) {\n      case \"||\":\n        // TODO consider having a \"truthy type\" that doesn't bail on\n        // left uncertainty but can still evaluate to truthy.\n        state.confident = leftConfident && (!!left || rightConfident);\n        if (!state.confident) return;\n\n        return left || right;\n      case \"&&\":\n        state.confident = leftConfident && (!left || rightConfident);\n        if (!state.confident) return;\n\n        return left && right;\n      case \"??\":\n        state.confident = leftConfident && (left != null || rightConfident);\n        if (!state.confident) return;\n\n        return left ?? right;\n    }\n  }\n\n  if (path.isBinaryExpression()) {\n    const left = evaluateCached(path.get(\"left\"), state);\n    if (!state.confident) return;\n    const right = evaluateCached(path.get(\"right\"), state);\n    if (!state.confident) return;\n\n    switch (path.node.operator) {\n      case \"-\":\n        return left - right;\n      case \"+\":\n        return left + right;\n      case \"/\":\n        return left / right;\n      case \"*\":\n        return left * right;\n      case \"%\":\n        return left % right;\n      case \"**\":\n        return left ** right;\n      case \"<\":\n        return left < right;\n      case \">\":\n        return left > right;\n      case \"<=\":\n        return left <= right;\n      case \">=\":\n        return left >= right;\n      case \"==\":\n        return left == right; // eslint-disable-line eqeqeq\n      case \"!=\":\n        return left != right; // eslint-disable-line eqeqeq\n      case \"===\":\n        return left === right;\n      case \"!==\":\n        return left !== right;\n      case \"|\":\n        return left | right;\n      case \"&\":\n        return left & right;\n      case \"^\":\n        return left ^ right;\n      case \"<<\":\n        return left << right;\n      case \">>\":\n        return left >> right;\n      case \">>>\":\n        return left >>> right;\n    }\n  }\n\n  if (path.isCallExpression()) {\n    const callee = path.get(\"callee\");\n    let context;\n    let func;\n\n    // Number(1);\n    if (\n      callee.isIdentifier() &&\n      !path.scope.getBinding(callee.node.name) &&\n      (isValidObjectCallee(callee.node.name) ||\n        isValidIdentifierCallee(callee.node.name))\n    ) {\n      func = global[callee.node.name];\n    }\n\n    if (callee.isMemberExpression()) {\n      const object = callee.get(\"object\");\n      const property = callee.get(\"property\");\n\n      // Math.min(1, 2)\n      if (\n        object.isIdentifier() &&\n        property.isIdentifier() &&\n        isValidObjectCallee(object.node.name) &&\n        !isInvalidMethod(property.node.name)\n      ) {\n        context = global[object.node.name];\n        const key = property.node.name;\n        if (Object.hasOwn(context, key)) {\n          func = context[key as keyof typeof context];\n        }\n      }\n\n      // \"abc\".charCodeAt(4)\n      if (object.isLiteral() && property.isIdentifier()) {\n        // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type (StringLiteral and NumberLiteral)\n        const type = typeof object.node.value;\n        if (type === \"string\" || type === \"number\") {\n          // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type\n          context = object.node.value;\n          func = context[property.node.name];\n        }\n      }\n    }\n\n    if (func) {\n      const args = path.get(\"arguments\").map(arg => evaluateCached(arg, state));\n      if (!state.confident) return;\n\n      return func.apply(context, args);\n    }\n  }\n\n  deopt(path, state);\n}\n\nfunction evaluateQuasis(\n  path: NodePath<t.TaggedTemplateExpression | t.TemplateLiteral>,\n  quasis: Array<any>,\n  state: State,\n  raw = false,\n) {\n  let str = \"\";\n\n  let i = 0;\n  const exprs: Array<NodePath<t.Node>> = path.isTemplateLiteral()\n    ? path.get(\"expressions\")\n    : path.get(\"quasi.expressions\");\n\n  for (const elem of quasis) {\n    // not confident, evaluated an expression we don't like\n    if (!state.confident) break;\n\n    // add on element\n    str += raw ? elem.value.raw : elem.value.cooked;\n\n    // add on interpolated expression if it's present\n    const expr = exprs[i++];\n    if (expr) str += String(evaluateCached(expr, state));\n  }\n\n  if (!state.confident) return;\n  return str;\n}\n\n/**\n * Walk the input `node` and statically evaluate it.\n *\n * Returns an object in the form `{ confident, value, deopt }`. `confident`\n * indicates whether or not we had to drop out of evaluating the expression\n * because of hitting an unknown node that we couldn't confidently find the\n * value of, in which case `deopt` is the path of said node.\n *\n * Example:\n *\n *   t.evaluate(parse(\"5 + 5\")) // { confident: true, value: 10 }\n *   t.evaluate(parse(\"!true\")) // { confident: true, value: false }\n *   t.evaluate(parse(\"foo + foo\")) // { confident: false, value: undefined, deopt: NodePath }\n *\n */\n\nexport function evaluate(this: NodePath): {\n  confident: boolean;\n  value: any;\n  deopt?: NodePath;\n} {\n  const state: State = {\n    confident: true,\n    deoptPath: null,\n    seen: new Map(),\n  };\n  let value = evaluateCached(this, state);\n  if (!state.confident) value = undefined;\n\n  return {\n    confident: state.confident,\n    deopt: state.deoptPath,\n    value: value,\n  };\n}\n", "import template from \"@babel/template\";\nimport {\n  NOT_LOCAL_BINDING,\n  cloneNode,\n  identifier,\n  isAssignmentExpression,\n  isAssignmentPattern,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isNullLiteral,\n  isObjectMethod,\n  isObjectProperty,\n  isRegExpLiteral,\n  isRestElement,\n  isTemplateLiteral,\n  isVariableDeclarator,\n  toBindingIdentifierName,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n// eslint-disable-next-line import/no-extraneous-dependencies -- TODO: Avoid cycle\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\n\nfunction getFunctionArity(node: t.Function): number {\n  const count = node.params.findIndex(\n    param => isAssignmentPattern(param) || isRestElement(param),\n  );\n  return count === -1 ? node.params.length : count;\n}\n\nconst buildPropertyMethodAssignmentWrapper = template.statement(`\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n`);\n\nconst buildGeneratorPropertyMethodAssignmentWrapper = template.statement(`\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n`);\n\ntype State = {\n  name: string;\n  outerDeclar: t.Identifier;\n  selfAssignment: boolean;\n  selfReference: boolean;\n};\n\nconst visitor: Visitor<State> = {\n  \"ReferencedIdentifier|BindingIdentifier\"(\n    path: NodePath<t.Identifier>,\n    state,\n  ) {\n    // check if this node matches our function id\n    if (path.node.name !== state.name) return;\n\n    // check that we don't have a local variable declared as that removes the need\n    // for the wrapper\n    const localDeclar = path.scope.getBindingIdentifier(state.name);\n    if (localDeclar !== state.outerDeclar) return;\n\n    state.selfReference = true;\n    path.stop();\n  },\n};\n\nfunction getNameFromLiteralId(id: t.Literal) {\n  if (isNullLiteral(id)) {\n    return \"null\";\n  }\n\n  if (isRegExpLiteral(id)) {\n    return `_${id.pattern}_${id.flags}`;\n  }\n\n  if (isTemplateLiteral(id)) {\n    return id.quasis.map(quasi => quasi.value.raw).join(\"\");\n  }\n\n  if (id.value !== undefined) {\n    return id.value + \"\";\n  }\n\n  return \"\";\n}\n\nfunction wrap(\n  state: State,\n  method: t.FunctionExpression | t.Class,\n  id: t.Identifier,\n  scope: Scope,\n) {\n  if (state.selfReference) {\n    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {\n      // we can just munge the local binding\n      scope.rename(id.name);\n    } else {\n      // we don't currently support wrapping class expressions\n      if (!isFunction(method)) return;\n\n      // need to add a wrapper since we can't change the references\n      let build = buildPropertyMethodAssignmentWrapper;\n      if (method.generator) {\n        build = buildGeneratorPropertyMethodAssignmentWrapper;\n      }\n\n      const template = (\n        build({\n          FUNCTION: method,\n          FUNCTION_ID: id,\n          FUNCTION_KEY: scope.generateUidIdentifier(id.name),\n        }) as t.ExpressionStatement\n      ).expression as t.CallExpression;\n\n      // shim in dummy params to retain function arity, if you try to read the\n      // source then you'll get the original since it's proxied so it's all good\n      const params = (\n        (template.callee as t.FunctionExpression).body\n          .body[0] as any as t.FunctionExpression\n      ).params;\n\n      for (let i = 0, len = getFunctionArity(method); i < len; i++) {\n        params.push(scope.generateUidIdentifier(\"x\"));\n      }\n\n      return template;\n    }\n  }\n\n  method.id = id;\n  scope.getProgramParent().references[id.name] = true;\n}\n\nfunction visit(\n  node: t.FunctionExpression | t.Class,\n  name: string,\n  scope: Scope,\n) {\n  const state: State = {\n    selfAssignment: false,\n    selfReference: false,\n    outerDeclar: scope.getBindingIdentifier(name),\n    name: name,\n  };\n\n  // check to see if we have a local binding of the id we're setting inside of\n  // the function, this is important as there are caveats associated\n\n  const binding = scope.getOwnBinding(name);\n\n  if (binding) {\n    if (binding.kind === \"param\") {\n      // safari will blow up in strict mode with code like:\n      //\n      //   let t = function t(t) {};\n      //\n      // with the error:\n      //\n      //   Cannot declare a parameter named 't' as it shadows the name of a\n      //   strict mode function.\n      //\n      // this isn't to the spec and they've invented this behaviour which is\n      // **extremely** annoying so we avoid setting the name if it has a param\n      // with the same id\n      state.selfReference = true;\n    } else {\n      // otherwise it's defined somewhere in scope like:\n      //\n      //   let t = function () {\n      //     let t = 2;\n      //   };\n      //\n      // so we can safely just set the id and move along as it shadows the\n      // bound function id\n    }\n  } else if (state.outerDeclar || scope.hasGlobal(name)) {\n    scope.traverse(node, visitor, state);\n  }\n\n  return state;\n}\n\n/**\n * Add id to function/class expression inferred from the AST\n *\n * @export\n * @template N The unnamed expression type\n * @param {Object} nodePathLike The NodePath-like input\n * @param {N} nodePathLike.node an AST node\n * @param {NodePath<N>[\"parent\"]} [nodePathLike.parent] The parent of the AST node\n * @param {Scope} nodePathLike.scope The scope associated to the AST node\n * @param {t.LVal | t.StringLiteral | t.NumericLiteral | t.BigIntLiteral} [nodePathLike.id] the fallback naming source when the helper\n * can not infer the function name from the AST\n * @param {boolean} [localBinding=false] whether a name could shadow a self-reference (e.g. converting arrow function)\n * @param {boolean} [supportUnicodeId=false] whether the compilation target supports unicodeId (non-BMP characters) or not\n * @returns {(N | t.CallExpression | void)}\n * - modified node when name can be inferred,\n * - an IIFE when `node` contains a binding shadowing the inferred function name (e.g. `let f = function (f) {}`),\n * - `void` when `node` has `id` property or the helper can not inferred the name or the inferred name contains non-BMP characters that is not supported by current target\n */\nexport default function <N extends t.FunctionExpression | t.Class>(\n  {\n    node,\n    parent,\n    scope,\n    id,\n  }: {\n    node: N;\n    parent?: NodePath<N>[\"parent\"];\n    scope: Scope;\n    id?:\n      | t.AssignmentExpression[\"left\"]\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral;\n  },\n  localBinding = false,\n  supportUnicodeId = false,\n): N | t.CallExpression | void {\n  // has an `id` so we don't need to infer one\n  if (node.id) return;\n\n  if (\n    (isObjectProperty(parent) || isObjectMethod(parent, { kind: \"method\" })) &&\n    (!parent.computed || isLiteral(parent.key))\n  ) {\n    // { foo() {} };\n    id = parent.key as\n      | t.Identifier\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral;\n  } else if (isVariableDeclarator(parent)) {\n    // let foo = function () {};\n    id = parent.id;\n\n    // but not \"let foo = () => {};\" being converted to function expression\n    if (isIdentifier(id) && !localBinding) {\n      const binding = scope.parent.getBinding(id.name);\n      if (\n        binding &&\n        binding.constant &&\n        scope.getBinding(id.name) === binding\n      ) {\n        // always going to reference this method\n        node.id = cloneNode(id);\n        // @ts-expect-error Fixme: avoid mutating AST nodes\n        node.id[NOT_LOCAL_BINDING] = true;\n        return;\n      }\n    }\n  } else if (isAssignmentExpression(parent, { operator: \"=\" })) {\n    // foo = function () {};\n    id = parent.left;\n  } else if (!id) {\n    return;\n  }\n\n  let name;\n  if (id && isLiteral(id)) {\n    name = getNameFromLiteralId(id);\n  } else if (id && isIdentifier(id)) {\n    name = id.name;\n  }\n\n  if (name === undefined) {\n    return;\n  }\n\n  if (!supportUnicodeId && isFunction(node) && /[\\uD800-\\uDFFF]/.test(name)) {\n    return;\n  }\n\n  name = toBindingIdentifierName(name);\n  const newId = identifier(name);\n\n  // The id shouldn't be considered a local binding to the function because\n  // we are simply trying to set the function name and not actually create\n  // a local binding.\n  // @ts-expect-error Fixme: avoid mutating AST nodes\n  newId[NOT_LOCAL_BINDING] = true;\n\n  const state = visit(node, name, scope);\n  return wrap(state, node, newId, scope) || node;\n}\n", "// This file contains methods that convert the path node into another node or some other type of data.\n\nimport {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  logicalExpression,\n  LOGICAL_OPERATORS,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super as _super,\n  thisExpression,\n  toExpression,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport { merge as mergeVisitors } from \"../visitors.ts\";\nimport type NodePath from \"./index.ts\";\n\nexport function toComputedKey(this: NodePath) {\n  let key;\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  // @ts-expect-error todo(flow->ts) computed does not exist in ClassPrivateProperty\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nexport function ensureBlock(\n  this: NodePath<\n    t.Loop | t.WithStatement | t.Function | t.LabeledStatement | t.CatchClause\n  >,\n): void {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    // @ts-expect-error TS throws because ensureBlock returns the body node path\n    // however, we don't use the return value and treat it as a transform and\n    // assertion utilities. For better type inference we annotate it as an\n    // assertion method\n    // TODO: Unify the implementation with the type definition\n    return bodyNode;\n  }\n\n  const statements: Array<t.Statement> = [];\n\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node as t.Expression));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node as t.Expression));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath) as NodePath;\n  body.setup(\n    parentPath,\n    listKey\n      ? // @ts-expect-error listKey must present in parent path\n        parentPath.node[listKey]\n      : parentPath.node,\n    listKey,\n    key,\n  );\n\n  // @ts-expect-error TS throws because ensureBlock returns the body node path\n  // however, we don't use the return value and treat it as a transform and\n  // assertion utilities. For better type inference we annotate it as an\n  // assertion method\n  // TODO: Unify the implementation with the type definition\n  return this.node;\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * Keeping this for backward-compatibility. You should use arrowFunctionToExpression() for >=7.x.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.arrowFunctionToShadowed = function (this: NodePath) {\n    if (!this.isArrowFunctionExpression()) return;\n\n    this.arrowFunctionToExpression();\n  };\n}\n\n/**\n * Given an arbitrary function, process its content as if it were an arrow function, moving references\n * to \"this\", \"arguments\", \"super\", and such into the function's parent scope. This method is useful if\n * you have wrapped some set of items in an IIFE or other function, but want \"this\", \"arguments\", and super\"\n * to continue behaving as expected.\n */\nexport function unwrapFunctionEnvironment(this: NodePath) {\n  if (\n    !this.isArrowFunctionExpression() &&\n    !this.isFunctionExpression() &&\n    !this.isFunctionDeclaration()\n  ) {\n    throw this.buildCodeFrameError(\n      \"Can only unwrap the environment of a function.\",\n    );\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction setType<N extends t.Node, T extends N[\"type\"]>(\n  path: NodePath<N>,\n  type: T,\n): asserts path is NodePath<Extract<N, { type: T }>> {\n  path.node.type = type;\n}\n\n/**\n * Convert a given arrow function into a normal ES5 function expression.\n */\nexport function arrowFunctionToExpression(\n  this: NodePath<t.ArrowFunctionExpression>,\n  {\n    allowInsertArrow = true,\n    allowInsertArrowWithRest = allowInsertArrow,\n    noNewArrows = process.env.BABEL_8_BREAKING\n      ? // TODO(Babel 8): Consider defaulting to `false` for spec compliance\n        true\n      : !arguments[0]?.specCompliant,\n  }: {\n    allowInsertArrow?: boolean | void;\n    allowInsertArrowWithRest?: boolean | void;\n    noNewArrows?: boolean;\n  } = {},\n): NodePath<\n  Exclude<t.Function, t.Method | t.ArrowFunctionExpression> | t.CallExpression\n> {\n  if (!this.isArrowFunctionExpression()) {\n    throw (this as NodePath).buildCodeFrameError(\n      \"Cannot convert non-arrow function to a function expression.\",\n    );\n  }\n\n  const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(\n    this,\n    noNewArrows,\n    allowInsertArrow,\n    allowInsertArrowWithRest,\n  );\n\n  fn.ensureBlock();\n  setType(fn, \"FunctionExpression\");\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding\n      ? null\n      : fn.scope.generateUidIdentifier(\"arrowCheckId\");\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([]),\n      });\n    }\n\n    fn.get(\"body\").unshiftContainer(\n      \"body\",\n      expressionStatement(\n        callExpression(this.hub.addHelper(\"newArrowCheck\"), [\n          thisExpression(),\n          checkBinding\n            ? identifier(checkBinding.name)\n            : identifier(thisBinding),\n        ]),\n      ),\n    );\n\n    fn.replaceWith(\n      callExpression(\n        memberExpression(\n          // @ts-expect-error TS can't infer nameFunction returns CallExpression | ArrowFunctionExpression here\n          nameFunction(this, true) || fn.node,\n          identifier(\"bind\"),\n        ),\n        [checkBinding ? identifier(checkBinding.name) : thisExpression()],\n      ),\n    );\n\n    return fn.get(\"callee.object\");\n  }\n\n  return fn;\n}\n\nconst getSuperCallsVisitor = mergeVisitors<{\n  allSuperCalls: NodePath<t.CallExpression>[];\n}>([\n  {\n    CallExpression(child, { allSuperCalls }) {\n      if (!child.get(\"callee\").isSuper()) return;\n      allSuperCalls.push(child);\n    },\n  },\n  environmentVisitor,\n]);\n\n/**\n * Given a function, traverse its contents, and if there are references to \"this\", \"arguments\", \"super\",\n * or \"new.target\", ensure that these references reference the parent environment around this function.\n *\n * @returns `thisBinding`: the name of the injected reference to `this`; for example \"_this\"\n * @returns `fnPath`: the new path to the function node. This is different from the fnPath\n *                    parameter when the function node is wrapped in another node.\n */\nfunction hoistFunctionEnvironment(\n  fnPath: NodePath<t.Function>,\n  // TODO(Babel 8): Consider defaulting to `false` for spec compliance\n  noNewArrows: boolean | void = true,\n  allowInsertArrow: boolean | void = true,\n  allowInsertArrowWithRest: boolean | void = true,\n): { thisBinding: string; fnPath: NodePath<t.Function> } {\n  let arrowParent;\n  let thisEnvFn: NodePath<t.Function> = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      arrowParent ??= p;\n      return false;\n    }\n    return (\n      p.isFunction() ||\n      p.isProgram() ||\n      p.isClassProperty({ static: false }) ||\n      p.isClassPrivateProperty({ static: false })\n    );\n  }) as NodePath<t.Function>;\n  const inConstructor = thisEnvFn.isClassMethod({ kind: \"constructor\" });\n\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      // It's safe to wrap this function in another and not hoist to the\n      // top level because the 'this' binding is constant in class\n      // properties (since 'super()' has already been called), so we don't\n      // need to capture/reassign it at the top level.\n      fnPath.replaceWith(\n        callExpression(\n          arrowFunctionExpression([], toExpression(fnPath.node)),\n          [],\n        ),\n      );\n      thisEnvFn = fnPath.get(\"callee\") as NodePath<t.ArrowFunctionExpression>;\n      fnPath = thisEnvFn.get(\"body\") as NodePath<t.FunctionExpression>;\n    } else {\n      throw fnPath.buildCodeFrameError(\n        \"Unable to transform arrow inside class property\",\n      );\n    }\n  }\n\n  const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } =\n    getScopeInformation(fnPath);\n\n  // Convert all super() calls in the constructor, if super is used in an arrow.\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super()` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    if (!allowInsertArrowWithRest) {\n      // preset-env with target `since 2017` enables `transform-parameters` without `transform-classes`.\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-parameters', \" +\n          \"it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    const allSuperCalls: NodePath<t.CallExpression>[] = [];\n    thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  // Convert all \"arguments\" references in the arrow to point at the alias.\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", args()),\n            stringLiteral(\"undefined\"),\n          ),\n          thisEnvFn.scope.buildUndefinedNode(),\n          args(),\n        );\n      } else {\n        return args();\n      }\n    });\n\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  // Convert all \"new.target\" references in the arrow to point at the alias.\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () =>\n      metaProperty(identifier(\"new\"), identifier(\"target\")),\n    );\n\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  // Convert all \"super.prop\" references to point at aliases.\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super.prop` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n\n    const flatSuperProps: NodePath<t.MemberExpression>[] = superProps.reduce(\n      (acc, superProp) => acc.concat(standardizeSuperProperty(superProp)),\n      [],\n    );\n\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed\n        ? \"\"\n        : // @ts-expect-error super property must not contain private name\n          superProp.get(\"property\").node.name;\n\n      const superParentPath = superProp.parentPath;\n\n      const isAssignment = superParentPath.isAssignmentExpression({\n        left: superProp.node,\n      });\n      const isCall = superParentPath.isCallExpression({\n        callee: superProp.node,\n      });\n      const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({\n        tag: superProp.node,\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n\n      const args: t.Expression[] = [];\n      if (superProp.node.computed) {\n        // SuperProperty must not be a private name\n        args.push(superProp.get(\"property\").node as t.Expression);\n      }\n\n      if (isAssignment) {\n        const value = superParentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superParentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n\n        thisPaths.push(\n          superParentPath.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else if (isAssignment) {\n        // Replace not only the super.prop, but the whole assignment\n        superParentPath.replaceWith(call);\n      } else if (isTaggedTemplate) {\n        superProp.replaceWith(\n          callExpression(memberExpression(call, identifier(\"bind\"), false), [\n            thisExpression(),\n          ]),\n        );\n\n        thisPaths.push(\n          superProp.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  // Convert all \"this\" references in the arrow to point at the alias.\n  let thisBinding: string | null;\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (\n      noNewArrows ||\n      // In subclass constructors, still need to rewrite because \"this\" can't be bound in spec mode\n      // because it might not have been initialized yet.\n      (inConstructor && hasSuperClass(thisEnvFn))\n    ) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX()\n          ? jsxIdentifier(thisBinding)\n          : identifier(thisBinding);\n\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return { thisBinding, fnPath };\n}\n\ntype LogicalOp = Parameters<typeof logicalExpression>[0];\ntype BinaryOp = Parameters<typeof binaryExpression>[0];\n\nfunction isLogicalOp(op: string): op is LogicalOp {\n  return LOGICAL_OPERATORS.includes(op);\n}\n\nfunction standardizeSuperProperty(\n  superProp: NodePath<t.MemberExpression>,\n):\n  | [NodePath<t.MemberExpression>]\n  | [NodePath<t.MemberExpression>, NodePath<t.MemberExpression>] {\n  if (\n    superProp.parentPath.isAssignmentExpression() &&\n    superProp.parentPath.node.operator !== \"=\"\n  ) {\n    const assignmentPath = superProp.parentPath;\n\n    const op = assignmentPath.node.operator.slice(0, -1) as\n      | LogicalOp\n      | BinaryOp;\n\n    const value = assignmentPath.node.right;\n\n    const isLogicalAssignment = isLogicalOp(op);\n\n    if (superProp.node.computed) {\n      // from: super[foo] **= 4;\n      // to:   super[tmp = foo] = super[tmp] ** 4;\n\n      // from: super[foo] ??= 4;\n      // to:   super[tmp = foo] ?? super[tmp] = 4;\n\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Expression;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(\n          memberExpression(\n            object,\n            assignmentExpression(\"=\", tmp, property),\n            true /* computed */,\n          ),\n        );\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(tmp.name), true /* computed */),\n            value,\n          ),\n        );\n    } else {\n      // from: super.foo **= 4;\n      // to:   super.foo = super.foo ** 4;\n\n      // from: super.foo ??= 4;\n      // to:   super.foo ?? super.foo = 4;\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Identifier;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(memberExpression(object, property));\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(property.name)),\n            value,\n          ),\n        );\n    }\n\n    if (isLogicalAssignment) {\n      assignmentPath.replaceWith(\n        logicalExpression(\n          op,\n          assignmentPath.node.left as t.MemberExpression,\n          assignmentPath.node.right,\n        ),\n      );\n    } else {\n      assignmentPath.node.operator = \"=\";\n    }\n\n    return [\n      assignmentPath.get(\"left\") as NodePath<t.MemberExpression>,\n      assignmentPath.get(\"right\").get(\"left\") as NodePath<t.MemberExpression>,\n    ];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed\n      ? superProp.scope.generateDeclaredUidIdentifier(\"prop\")\n      : null;\n\n    const parts: t.Expression[] = [\n      assignmentExpression(\n        \"=\",\n        tmp,\n        memberExpression(\n          superProp.node.object,\n          computedKey\n            ? assignmentExpression(\n                \"=\",\n                computedKey,\n                superProp.node.property as t.Expression,\n              )\n            : superProp.node.property,\n          superProp.node.computed,\n        ),\n      ),\n      assignmentExpression(\n        \"=\",\n        memberExpression(\n          superProp.node.object,\n          computedKey ? identifier(computedKey.name) : superProp.node.property,\n          superProp.node.computed,\n        ),\n        binaryExpression(\n          // map `++` to `+`, and `--` to `-`\n          superProp.parentPath.node.operator[0] as \"+\" | \"-\",\n          identifier(tmp.name),\n          numericLiteral(1),\n        ),\n      ),\n    ];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n\n    const left = updateExpr.get(\n      \"expressions.0.right\",\n    ) as NodePath<t.MemberExpression>;\n    const right = updateExpr.get(\n      \"expressions.1.left\",\n    ) as NodePath<t.MemberExpression>;\n    return [left, right];\n  }\n\n  return [superProp];\n\n  function rightExpression(\n    op: BinaryOp | \"=\",\n    left: t.MemberExpression,\n    right: t.Expression,\n  ) {\n    if (op === \"=\") {\n      return assignmentExpression(\"=\", left, right);\n    } else {\n      return binaryExpression(op, left, right);\n    }\n  }\n}\n\nfunction hasSuperClass(thisEnvFn: NodePath<t.Function>) {\n  return (\n    thisEnvFn.isClassMethod() &&\n    !!(thisEnvFn.parentPath.parentPath.node as t.Class).superClass\n  );\n}\n\nconst assignSuperThisVisitor = mergeVisitors<{\n  supers: WeakSet<t.CallExpression>;\n  thisBinding: string;\n}>([\n  {\n    CallExpression(child, { supers, thisBinding }) {\n      if (!child.get(\"callee\").isSuper()) return;\n      if (supers.has(child.node)) return;\n      supers.add(child.node);\n\n      child.replaceWithMultiple([\n        child.node,\n        assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\")),\n      ]);\n    },\n  },\n  environmentVisitor,\n]);\n\n// Create a binding that evaluates to the \"this\" of the given function.\nfunction getThisBinding(\n  thisEnvFn: NodePath<t.Function>,\n  inConstructor: boolean,\n) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n\n    thisEnvFn.traverse(assignSuperThisVisitor, {\n      supers: new WeakSet(),\n      thisBinding,\n    });\n  });\n}\n\n// Create a binding for a function that will call \"super()\" with arguments passed through.\nfunction getSuperBinding(thisEnvFn: NodePath<t.Function>) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression(\n      [restElement(argsBinding)],\n      callExpression(_super(), [spreadElement(identifier(argsBinding.name))]),\n    );\n  });\n}\n\n// Create a binding for a function that will call \"super.foo\" or \"super[foo]\".\nfunction getSuperPropBinding(\n  thisEnvFn: NodePath<t.Function>,\n  isAssignment: boolean,\n  propName: string,\n) {\n  const op = isAssignment ? \"set\" : \"get\";\n\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n\n    let fnBody;\n    if (propName) {\n      // () => super.foo\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      // (method) => super[method]\n      argsList.unshift(method);\n      fnBody = memberExpression(\n        _super(),\n        identifier(method.name),\n        true /* computed */,\n      );\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(\n  thisEnvFn: NodePath,\n  key: string,\n  init: (name: string) => t.Expression,\n) {\n  const cacheKey = \"binding:\" + key;\n  let data: string | undefined = thisEnvFn.getData(cacheKey);\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data),\n    });\n  }\n\n  return data;\n}\n\ntype ScopeInfo = {\n  thisPaths: NodePath<t.ThisExpression | t.JSXIdentifier>[];\n  superCalls: NodePath<t.CallExpression>[];\n  superProps: NodePath<t.MemberExpression>[];\n  argumentsPaths: NodePath<t.Identifier | t.JSXIdentifier>[];\n  newTargetPaths: NodePath<t.MetaProperty>[];\n};\n\nconst getScopeInformationVisitor = mergeVisitors<ScopeInfo>([\n  {\n    ThisExpression(child, { thisPaths }) {\n      thisPaths.push(child);\n    },\n    JSXIdentifier(child, { thisPaths }) {\n      if (child.node.name !== \"this\") return;\n      if (\n        !child.parentPath.isJSXMemberExpression({ object: child.node }) &&\n        !child.parentPath.isJSXOpeningElement({ name: child.node })\n      ) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n    CallExpression(child, { superCalls }) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n    MemberExpression(child, { superProps }) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n    Identifier(child, { argumentsPaths }) {\n      if (!child.isReferencedIdentifier({ name: \"arguments\" })) return;\n\n      let curr = child.scope;\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while ((curr = curr.parent));\n\n      argumentsPaths.push(child);\n    },\n    MetaProperty(child, { newTargetPaths }) {\n      if (!child.get(\"meta\").isIdentifier({ name: \"new\" })) return;\n      if (!child.get(\"property\").isIdentifier({ name: \"target\" })) return;\n\n      newTargetPaths.push(child);\n    },\n  },\n  environmentVisitor,\n]);\n\nfunction getScopeInformation(fnPath: NodePath) {\n  const thisPaths: ScopeInfo[\"thisPaths\"] = [];\n  const argumentsPaths: ScopeInfo[\"argumentsPaths\"] = [];\n  const newTargetPaths: ScopeInfo[\"newTargetPaths\"] = [];\n  const superProps: ScopeInfo[\"superProps\"] = [];\n  const superCalls: ScopeInfo[\"superCalls\"] = [];\n\n  fnPath.traverse(getScopeInformationVisitor, {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  });\n\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  };\n}\n", "// This file contains methods responsible for introspecting the current path for certain values.\n\nimport type NodePath from \"./index.ts\";\nimport {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern as _matchesPattern,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Match the current node if it matches the provided `pattern`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\n\nexport function matchesPattern(\n  this: NodePath,\n  pattern: string,\n  allowPartial?: boolean,\n): boolean {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\n/**\n * Check whether we have the input `key`. If the `key` references an array then we check\n * if the array has any items, otherwise we just check if it's falsy.\n */\n\nexport function has<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n): boolean {\n  const val = (this.node as N)?.[key];\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\n\n/**\n * Description\n */\n\nexport function isStatic(this: NodePath): boolean {\n  return this.scope.isStatic(this.node);\n}\n\n/**\n * Alias of `has`.\n */\n\nexport const is = has;\n\n/**\n * Opposite of `has`.\n */\n\nexport function isnt<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n): boolean {\n  return !this.has(key);\n}\n\n/**\n * Check whether the path node `key` strict equals `value`.\n */\n\nexport function equals<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n  value: any,\n): boolean {\n  return (this.node as N)[key] === value;\n}\n\n/**\n * Check the type against our stored internal type of the node. This is handy when a node has\n * been removed yet we still internally know the type and need it to calculate node replacement.\n */\n\nexport function isNodeType(this: NodePath, type: string): boolean {\n  return isType(this.type, type);\n}\n\n/**\n * This checks whether or not we're in one of the following positions:\n *\n *   for (KEY in right);\n *   for (KEY;;);\n *\n * This is because these spots allow VariableDeclarations AND normal expressions so we need\n * to tell the path replacement that it's ok to replace this with an expression.\n */\n\nexport function canHaveVariableDeclarationOrExpression(this: NodePath) {\n  return (\n    (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor()\n  );\n}\n\n/**\n * This checks whether we are swapping an arrow function's body between an\n * expression and a block statement (or vice versa).\n *\n * This is because arrow functions may implicitly return an expression, which\n * is the same as containing a block statement.\n */\n\nexport function canSwapBetweenExpressionAndStatement(\n  this: NodePath,\n  replacement: t.Node,\n): boolean {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\n/**\n * Check whether the current path references a completion record\n */\n\nexport function isCompletionRecord(\n  this: NodePath,\n  allowInsideFunction?: boolean,\n): boolean {\n  let path = this;\n  let first = true;\n\n  do {\n    const { type, container } = path;\n\n    // we're in a function so can't be a completion record\n    if (!first && (path.isFunction() || type === \"StaticBlock\")) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    // check to see if we're the last item in the container and if we are\n    // we're a completion record!\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while (\n    (path = path.parentPath) &&\n    !path.isProgram() &&\n    !path.isDoExpression()\n  );\n\n  return true;\n}\n\n/**\n * Check whether or not the current `key` allows either a single statement or block statement\n * so we can explode it if necessary.\n */\n\nexport function isStatementOrBlock(this: NodePath): boolean {\n  if (\n    this.parentPath.isLabeledStatement() ||\n    isBlockStatement(this.container as t.Node)\n  ) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key as string);\n  }\n}\n\n/**\n * Check if the currently assigned path references the `importName` of `moduleSource`.\n */\n\nexport function referencesImport(\n  this: NodePath,\n  moduleSource: string,\n  importName: string,\n): boolean {\n  if (!this.isReferencedIdentifier()) {\n    if (\n      (this.isJSXMemberExpression() &&\n        this.node.property.name === importName) ||\n      ((this.isMemberExpression() || this.isOptionalMemberExpression()) &&\n        (this.node.computed\n          ? isStringLiteral(this.node.property, { value: importName })\n          : (this.node.property as t.Identifier).name === importName))\n    ) {\n      const object = (\n        this as NodePath<t.MemberExpression | t.OptionalMemberExpression>\n      ).get(\"object\");\n      return (\n        object.isReferencedIdentifier() &&\n        object.referencesImport(moduleSource, \"*\")\n      );\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding((this.node as t.Identifier).name);\n  if (!binding || binding.kind !== \"module\") return false;\n\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  // check moduleSource\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (\n    path.isImportSpecifier() &&\n    isIdentifier(path.node.imported, { name: importName })\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Get the source code associated with this node.\n */\n\nexport function getSource(this: NodePath): string {\n  const node = this.node;\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n  return \"\";\n}\n\nexport function willIMaybeExecuteBefore(\n  this: NodePath,\n  target: NodePath,\n): boolean {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path: NodePath) {\n  return path.isProgram()\n    ? path\n    : (\n        path.parentPath.scope.getFunctionParent() ||\n        path.parentPath.scope.getProgramParent()\n      ).path;\n}\n\nfunction isExecutionUncertain(type: t.Node[\"type\"], key: string) {\n  switch (type) {\n    // a && FOO\n    // a || FOO\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    // a ? FOO : FOO\n    // if (a) FOO; else FOO;\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    // while (a) FOO;\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    // for (a; b; FOO) FOO;\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    // switch (a) { FOO }\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    // try { a } catch FOO finally { b }\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    // var [ x = FOO ]\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    // a?.[FOO]\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    // a?.(FOO)\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths: NodePath[], maxIndex: number) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO(Babel 8)\n// This can be { before: boolean, after: boolean, unknown: boolean }.\n// This allows transforms like the tdz one to treat cases when the status\n// is both before and unknown/after like if it were before.\ntype RelativeExecutionStatus = \"before\" | \"after\" | \"unknown\";\n\n// Used to avoid infinite recursion in cases like\n//   function f() { if (false) f(); }\n//   f();\n// It also works with indirect recursion.\nconst SYMBOL_CHECKING = Symbol();\n\ntype ExecutionStatusCache = Map<\n  t.Node,\n  Map<t.Node, RelativeExecutionStatus | typeof SYMBOL_CHECKING>\n>;\n\n/**\n * Given a `target` check the execution status of it relative to the current path.\n *\n * \"Execution status\" simply refers to where or not we **think** this will execute\n * before or after the input `target` element.\n */\n\nexport function _guessExecutionStatusRelativeTo(\n  this: NodePath,\n  target: NodePath,\n): RelativeExecutionStatus {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\n\nfunction _guessExecutionStatusRelativeToCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  // check if the two paths are in different functions, we can't track execution of these\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target),\n  };\n\n  // here we check the `node` equality as sometimes we may have different paths for the\n  // same node due to path thrashing\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(\n      base,\n      funcParent.target,\n      cache,\n    );\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry(),\n  };\n\n  // If this is an ancestor of the target path,\n  // e.g. f(g); where this is f and target is g.\n  if (paths.target.indexOf(base) >= 0) return \"after\";\n  if (paths.this.indexOf(target) >= 0) return \"before\";\n\n  // get ancestor where the branches intersect\n  let commonPath;\n  const commonIndex = { target: 0, this: 0 };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\n      \"Internal Babel error - The two compared nodes\" +\n        \" don't appear to belong to the same program.\",\n    );\n  }\n\n  if (\n    isExecutionUncertainInList(paths.this, commonIndex.this - 1) ||\n    isExecutionUncertainInList(paths.target, commonIndex.target - 1)\n  ) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1],\n  };\n\n  // container list so let's see which one is after the other\n  // e.g. [ THIS, TARGET ]\n  if (\n    divergence.target.listKey &&\n    divergence.this.listKey &&\n    divergence.target.container === divergence.this.container\n  ) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  // otherwise we're associated by a parent node, check which key comes before the other\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey),\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  if (!target.isFunctionDeclaration()) {\n    if (\n      _guessExecutionStatusRelativeToCached(base, target, cache) === \"before\"\n    ) {\n      return \"before\";\n    }\n    return \"unknown\";\n  } else if (target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  // so we're in a completely different function, if this is a function declaration\n  // then we can be a bit smarter and handle cases where the function is either\n  // a. not called at all (part of an export)\n  // b. called directly\n  const binding = target.scope.getBinding(target.node.id.name);\n\n  // no references!\n  if (!binding.references) return \"before\";\n\n  const referencePaths: Array<NodePath> = binding.referencePaths;\n\n  let allStatus;\n\n  // verify that all the calls have the same execution status\n  for (const path of referencePaths) {\n    // if a reference is a child of the function we're checking against then we can\n    // safely ignore it\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      // This function is passed as a reference, so we don't\n      // know when it will be called.\n      return \"unknown\";\n    }\n\n    const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n\n    if (allStatus && allStatus !== status) {\n      return \"unknown\";\n    } else {\n      allStatus = status;\n    }\n  }\n\n  return allStatus;\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  let nodeMap = cache.get(base.node);\n  let cached;\n\n  if (!nodeMap) {\n    cache.set(base.node, (nodeMap = new Map()));\n  } else if ((cached = nodeMap.get(target.node))) {\n    if (cached === SYMBOL_CHECKING) {\n      return \"unknown\";\n    }\n    return cached;\n  }\n\n  nodeMap.set(target.node, SYMBOL_CHECKING);\n\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n    base,\n    target,\n    cache,\n  );\n\n  nodeMap.set(target.node, result);\n  return result;\n}\n\n/**\n * Resolve a \"pointer\" `NodePath` to it's absolute path.\n */\nexport function resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n) {\n  return this._resolve(dangerous, resolved) || this;\n}\n\nexport function _resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n): NodePath | undefined | null {\n  // detect infinite recursion\n  // todo: possibly have a max length on this just to be safe\n  if (resolved && resolved.indexOf(this) >= 0) return;\n\n  // we store all the paths we've \"resolved\" in this array to prevent infinite recursion\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {\n      // otherwise it's a request for a pattern and that's a bit more tricky\n    }\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n\n    // reassigned so we can't really resolve it\n    if (!binding.constant) return;\n\n    // todo - lookup module in dependency graph\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      // If the identifier resolves to parent node then we can't really resolve it.\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    // @ ts-ignore todo: babel-types\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    // this is dangerous, as non-direct target assignments will mutate it's state\n    // making this resolution inaccurate\n\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n\n    // @ts-expect-error todo(flow->ts): NullLiteral\n    const targetName = targetKey.value;\n\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n      for (const prop of props as any[]) {\n        if (!prop.isProperty()) continue;\n\n        const key = prop.get(\"key\");\n\n        // { foo: obj }\n        let match =\n          prop.isnt(\"computed\") && key.isIdentifier({ name: targetName });\n\n        // { \"foo\": \"obj\" } or { [\"foo\"]: \"obj\" }\n        match = match || key.isLiteral({ value: targetName });\n\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nexport function isConstantExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression =>\n        expression.isConstantExpression(),\n      );\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    const { operator } = this.node;\n    return (\n      operator !== \"in\" &&\n      operator !== \"instanceof\" &&\n      this.get(\"left\").isConstantExpression() &&\n      this.get(\"right\").isConstantExpression()\n    );\n  }\n\n  if (this.isMemberExpression()) {\n    return (\n      !this.node.computed &&\n      this.get(\"object\").isIdentifier({ name: \"Symbol\" }) &&\n      !this.scope.hasBinding(\"Symbol\", { noGlobals: true })\n    );\n  }\n\n  if (this.isCallExpression()) {\n    return (\n      this.node.arguments.length === 1 &&\n      this.get(\"callee\").matchesPattern(\"Symbol.for\") &&\n      !this.scope.hasBinding(\"Symbol\", { noGlobals: true }) &&\n      this.get(\"arguments\")[0].isStringLiteral()\n    );\n  }\n\n  return false;\n}\n\nexport function isInStrictMode(this: NodePath) {\n  const start = this.isProgram() ? this : this.parentPath;\n\n  const strictParent = start.find(path => {\n    if (path.isProgram({ sourceType: \"module\" })) return true;\n\n    if (path.isClass()) return true;\n\n    if (\n      path.isArrowFunctionExpression() &&\n      !path.get(\"body\").isBlockStatement()\n    ) {\n      return false;\n    }\n\n    let body: t.BlockStatement | t.Program;\n    if (path.isFunction()) {\n      body = path.node.body as t.BlockStatement;\n    } else if (path.isProgram()) {\n      // @ts-expect-error TODO: TS thinks that `path` here cannot be\n      // Program due to the `isProgram()` check at the beginning of\n      // the function\n      body = path.node;\n    } else {\n      return false;\n    }\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n\n  return !!strictParent;\n}\n", "// This file contains methods responsible for maintaining a TraversalContext.\n\nimport { traverseNode } from \"../traverse-node.ts\";\nimport { SHOULD_SKIP, SHOULD_STOP } from \"./index.ts\";\nimport type TraversalContext from \"../context.ts\";\nimport type { VisitPhase } from \"../types.ts\";\nimport type NodePath from \"./index.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function call(this: NodePath, key: VisitPhase): boolean {\n  const opts = this.opts;\n\n  this.debug(key);\n\n  if (this.node) {\n    if (this._call(opts[key])) return true;\n  }\n\n  if (this.node) {\n    return this._call(opts[this.node.type]?.[key]);\n  }\n\n  return false;\n}\n\nexport function _call(this: NodePath, fns?: Array<Function>): boolean {\n  if (!fns) return false;\n\n  for (const fn of fns) {\n    if (!fn) continue;\n\n    const node = this.node;\n    if (!node) return true;\n\n    const ret = fn.call(this.state, this, this.state);\n    if (ret && typeof ret === \"object\" && typeof ret.then === \"function\") {\n      throw new Error(\n        `You appear to be using a plugin with an async traversal visitor, ` +\n          `which your current version of Babel does not support. ` +\n          `If you're using a published plugin, you may need to upgrade ` +\n          `your @babel/core version.`,\n      );\n    }\n    if (ret) {\n      throw new Error(`Unexpected return value from visitor method ${fn}`);\n    }\n\n    // node has been replaced, it will have been requeued\n    if (this.node !== node) return true;\n\n    // this.shouldSkip || this.shouldStop || this.removed\n    if (this._traverseFlags > 0) return true;\n  }\n\n  return false;\n}\n\nexport function isDenylisted(this: NodePath): boolean {\n  // @ts-expect-error TODO(Babel 8): Remove blacklist\n  const denylist = this.opts.denylist ?? this.opts.blacklist;\n  return denylist && denylist.indexOf(this.node.type) > -1;\n}\n\n// TODO: Remove in Babel 8\nexport { isDenylisted as isBlacklisted };\n\nfunction restoreContext(path: NodePath, context: TraversalContext) {\n  if (path.context !== context) {\n    path.context = context;\n    path.state = context.state;\n    path.opts = context.opts;\n  }\n}\n\nexport function visit(this: NodePath): boolean {\n  if (!this.node) {\n    return false;\n  }\n\n  if (this.isDenylisted()) {\n    return false;\n  }\n\n  if (this.opts.shouldSkip?.(this)) {\n    return false;\n  }\n\n  const currentContext = this.context;\n  // Note: We need to check \"this.shouldSkip\" first because\n  // another visitor can set it to true. Usually .shouldSkip is false\n  // before calling the enter visitor, but it can be true in case of\n  // a requeued node (e.g. by .replaceWith()) that is then marked\n  // with .skip().\n  if (this.shouldSkip || this.call(\"enter\")) {\n    this.debug(\"Skip...\");\n    return this.shouldStop;\n  }\n  restoreContext(this, currentContext);\n\n  this.debug(\"Recursing into...\");\n  this.shouldStop = traverseNode(\n    this.node,\n    this.opts,\n    this.scope,\n    this.state,\n    this,\n    this.skipKeys,\n  );\n\n  restoreContext(this, currentContext);\n\n  this.call(\"exit\");\n\n  return this.shouldStop;\n}\n\nexport function skip(this: NodePath) {\n  this.shouldSkip = true;\n}\n\nexport function skipKey(this: NodePath, key: string) {\n  if (this.skipKeys == null) {\n    this.skipKeys = {};\n  }\n  this.skipKeys[key] = true;\n}\n\nexport function stop(this: NodePath) {\n  // this.shouldSkip = true; this.shouldStop = true;\n  this._traverseFlags |= SHOULD_SKIP | SHOULD_STOP;\n}\n\nexport function setScope(this: NodePath) {\n  if (this.opts?.noScope) return;\n\n  let path = this.parentPath;\n\n  if (\n    // Skip method scope if is computed method key or decorator expression\n    ((this.key === \"key\" || this.listKey === \"decorators\") &&\n      path.isMethod()) ||\n    // Skip switch scope if for discriminant (`x` in `switch (x) {}`).\n    (this.key === \"discriminant\" && path.isSwitchStatement())\n  ) {\n    path = path.parentPath;\n  }\n\n  let target;\n  while (path && !target) {\n    if (path.opts?.noScope) return;\n\n    target = path.scope;\n    path = path.parentPath;\n  }\n\n  this.scope = this.getScope(target);\n  this.scope?.init();\n}\n\nexport function setContext<S = unknown>(\n  this: NodePath,\n  context?: TraversalContext<S>,\n) {\n  if (this.skipKeys != null) {\n    this.skipKeys = {};\n  }\n  // this.shouldSkip = false; this.shouldStop = false; this.removed = false;\n  this._traverseFlags = 0;\n\n  if (context) {\n    this.context = context;\n    this.state = context.state;\n    // Discard the S type parameter from context.opts\n    this.opts = context.opts as typeof this.opts;\n  }\n\n  this.setScope();\n\n  return this;\n}\n\n/**\n * Here we resync the node paths `key` and `container`. If they've changed according\n * to what we have stored internally then we attempt to resync by crawling and looking\n * for the new values.\n */\n\nexport function resync(this: NodePath) {\n  if (this.removed) return;\n\n  this._resyncParent();\n  this._resyncList();\n  this._resyncKey();\n  //this._resyncRemoved();\n}\n\nexport function _resyncParent(this: NodePath) {\n  if (this.parentPath) {\n    this.parent = this.parentPath.node;\n  }\n}\n\nexport function _resyncKey(this: NodePath) {\n  if (!this.container) return;\n\n  if (\n    this.node ===\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key]\n  ) {\n    return;\n  }\n\n  // grrr, path key is out of sync. this is likely due to a modification to the AST\n  // not done through our path APIs\n\n  if (Array.isArray(this.container)) {\n    for (let i = 0; i < this.container.length; i++) {\n      if (this.container[i] === this.node) {\n        this.setKey(i);\n        return;\n      }\n    }\n  } else {\n    for (const key of Object.keys(this.container)) {\n      // @ts-expect-error this.key should present in this.container\n      if (this.container[key] === this.node) {\n        this.setKey(key);\n        return;\n      }\n    }\n  }\n\n  // ¯\\_(ツ)_/¯ who knows where it's gone lol\n  this.key = null;\n}\n\nexport function _resyncList(this: NodePath) {\n  if (!this.parent || !this.inList) return;\n\n  const newContainer =\n    // @ts-expect-error this.listKey should present in this.parent\n    this.parent[this.listKey];\n  if (this.container === newContainer) return;\n\n  // container is out of sync. this is likely the result of it being reassigned\n  this.container = newContainer || null;\n}\n\nexport function _resyncRemoved(this: NodePath) {\n  if (\n    this.key == null ||\n    !this.container ||\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key] !== this.node\n  ) {\n    this._markRemoved();\n  }\n}\n\nexport function popContext(this: NodePath) {\n  this.contexts.pop();\n  if (this.contexts.length > 0) {\n    this.setContext(this.contexts[this.contexts.length - 1]);\n  } else {\n    this.setContext(undefined);\n  }\n}\n\nexport function pushContext(this: NodePath, context: TraversalContext) {\n  this.contexts.push(context);\n  this.setContext(context);\n}\n\nexport function setup(\n  this: NodePath,\n  parentPath: NodePath | undefined,\n  container: t.Node | t.Node[],\n  listKey: string,\n  key: string | number,\n) {\n  this.listKey = listKey;\n  this.container = container;\n\n  this.parentPath = parentPath || this.parentPath;\n  this.setKey(key);\n}\n\nexport function setKey(this: NodePath, key: string | number) {\n  this.key = key;\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key];\n  this.type = this.node?.type;\n}\n\nexport function requeue(this: NodePath, pathToQueue = this) {\n  if (pathToQueue.removed) return;\n\n  // If a path is skipped, and then replaced with a\n  // new one, the new one shouldn't probably be skipped.\n  if (process.env.BABEL_8_BREAKING) {\n    pathToQueue.shouldSkip = false;\n  }\n\n  // TODO(loganfsmyth): This should be switched back to queue in parent contexts\n  // automatically once #2892 and #4135 have been resolved. See #4140.\n  // let contexts = this._getQueueContexts();\n  const contexts = this.contexts;\n\n  for (const context of contexts) {\n    context.maybeQueue(pathToQueue);\n  }\n}\n\nexport function _getQueueContexts(this: NodePath) {\n  let path = this;\n  let contexts = this.contexts;\n  while (!contexts.length) {\n    path = path.parentPath;\n    if (!path) break;\n    contexts = path.contexts;\n  }\n  return contexts;\n}\n", "// this file contains hooks that handle ancestry cleanup of parent nodes when removing children\n\nimport type NodePath from \"../index.ts\";\nimport type * as t from \"@babel/types\";\n/**\n * Pre hooks should be used for either rejecting removal or delegating removal\n */\n\nexport const hooks = [\n  function (self: NodePath, parent: NodePath) {\n    const removeParent =\n      // while (NODE);\n      // removing the test of a while/switch, we can either just remove it entirely *or* turn the\n      // `test` into `true` unlikely that the latter will ever be what's wanted so we just remove\n      // the loop to avoid infinite recursion\n      (self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase())) ||\n      // export NODE;\n      // just remove a declaration for an export as this is no longer valid\n      (self.key === \"declaration\" && parent.isExportDeclaration()) ||\n      // label: NODE\n      // stray labeled statement with no body\n      (self.key === \"body\" && parent.isLabeledStatement()) ||\n      // let NODE;\n      // remove an entire declaration if there are no declarators left\n      (self.listKey === \"declarations\" &&\n        parent.isVariableDeclaration() &&\n        parent.node.declarations.length === 1) ||\n      // NODE;\n      // remove the entire expression statement if there's no expression\n      (self.key === \"expression\" && parent.isExpressionStatement());\n\n    if (removeParent) {\n      parent.remove();\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n      // (node, NODE);\n      // we've just removed the second element of a sequence expression so let's turn that sequence\n      // expression into a regular expression\n      parent.replaceWith(parent.node.expressions[0]);\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isBinary()) {\n      // left + NODE;\n      // NODE + right;\n      // we're in a binary expression, better remove it and replace it with the last expression\n      if (self.key === \"left\") {\n        parent.replaceWith(parent.node.right);\n      } else {\n        // key === \"right\"\n        parent.replaceWith(parent.node.left);\n      }\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (\n      (parent.isIfStatement() && self.key === \"consequent\") ||\n      (self.key === \"body\" &&\n        (parent.isLoop() || parent.isArrowFunctionExpression()))\n    ) {\n      self.replaceWith({\n        type: \"BlockStatement\",\n        body: [],\n      } as t.BlockStatement);\n      return true;\n    }\n  },\n];\n", "// This file contains methods responsible for removing a node.\n\nimport { hooks } from \"./lib/removal-hooks.ts\";\nimport { getCachedPaths } from \"../cache.ts\";\nimport type NodePath from \"./index.ts\";\nimport { REMOVED, SHOULD_SKIP } from \"./index.ts\";\nimport { getBindingIdentifiers } from \"@babel/types\";\n\nexport function remove(this: NodePath) {\n  this._assertUnremoved();\n\n  this.resync();\n  if (!this.opts?.noScope) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n  this._remove();\n  this._markRemoved();\n}\n\nexport function _removeFromScope(this: NodePath) {\n  const bindings = getBindingIdentifiers(this.node, false, false, true);\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nexport function _callRemovalHooks(this: NodePath) {\n  if (this.parentPath) {\n    for (const fn of hooks) {\n      if (fn(this, this.parentPath)) return true;\n    }\n  }\n}\n\nexport function _remove(this: NodePath) {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key as number, 1);\n    this.updateSiblingKeys(this.key as number, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nexport function _markRemoved(this: NodePath) {\n  // this.shouldSkip = true; this.removed = true;\n  this._traverseFlags |= SHOULD_SKIP | REMOVED;\n  if (this.parent) {\n    getCachedPaths(this.hub, this.parent).delete(this.node);\n  }\n  this.node = null;\n}\n\nexport function _assertUnremoved(this: NodePath) {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\n      \"NodePath has been removed so is read-only.\",\n    );\n  }\n}\n", "import { react } from \"@babel/types\";\nimport {\n  cloneNode,\n  jsxExpressionContainer,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../../scope/index.ts\";\nimport type NodePath from \"../index.ts\";\nimport type Binding from \"../../scope/binding.ts\";\nimport type { Visitor } from \"../../types.ts\";\n\nconst referenceVisitor: Visitor<PathHoister> = {\n  // This visitor looks for bindings to establish a topmost scope for hoisting.\n  ReferencedIdentifier(path, state) {\n    // Don't hoist regular JSX identifiers ('div', 'span', etc).\n    // We do have to consider member expressions for hoisting (e.g. `this.component`)\n    if (\n      path.isJSXIdentifier() &&\n      react.isCompatTag(path.node.name) &&\n      !path.parentPath.isJSXMemberExpression()\n    ) {\n      return;\n    }\n\n    // If the identifier refers to `this`, we need to break on the closest non-arrow scope.\n    if (path.node.name === \"this\") {\n      let scope = path.scope;\n      do {\n        if (\n          scope.path.isFunction() &&\n          !scope.path.isArrowFunctionExpression()\n        ) {\n          break;\n        }\n      } while ((scope = scope.parent));\n      if (scope) state.breakOnScopePaths.push(scope.path);\n    }\n\n    // direct references that we need to track to hoist this to the highest scope we can\n    const binding = path.scope.getBinding(path.node.name);\n    if (!binding) return;\n\n    // we can handle reassignments only if they happen in the same scope as the declaration\n    for (const violation of binding.constantViolations) {\n      if (violation.scope !== binding.path.scope) {\n        state.mutableBinding = true;\n        path.stop();\n        return;\n      }\n    }\n\n    // this binding isn't accessible from the parent scope so we can safely ignore it\n    // eg. it's in a closure etc\n    if (binding !== state.scope.getBinding(path.node.name)) return;\n\n    state.bindings[path.node.name] = binding;\n  },\n};\n\nexport default class PathHoister<T extends t.Node = t.Node> {\n  breakOnScopePaths: NodePath[];\n  bindings: { [k: string]: Binding };\n  mutableBinding: boolean;\n  private scopes: Scope[];\n  scope: Scope;\n  private path: NodePath<T>;\n  private attachAfter: boolean;\n\n  constructor(path: NodePath<T>, scope: Scope) {\n    // Storage for scopes we can't hoist above.\n    this.breakOnScopePaths = [];\n    // Storage for bindings that may affect what path we can hoist to.\n    this.bindings = {};\n    // \"true\" if the current path contains a reference to a binding whose\n    // value can change and thus can't be safely hoisted.\n    this.mutableBinding = false;\n    // Storage for eligible scopes.\n    this.scopes = [];\n    // Our original scope and path.\n    this.scope = scope;\n    this.path = path;\n    // By default, we attach as far up as we can; but if we're trying\n    // to avoid referencing a binding, we may have to go after.\n    this.attachAfter = false;\n  }\n\n  // A scope is compatible if all required bindings are reachable.\n  isCompatibleScope(scope: Scope) {\n    for (const key of Object.keys(this.bindings)) {\n      const binding = this.bindings[key];\n      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Look through all scopes and push compatible ones.\n  getCompatibleScopes() {\n    let scope = this.path.scope;\n    do {\n      if (this.isCompatibleScope(scope)) {\n        this.scopes.push(scope);\n      } else {\n        break;\n      }\n\n      // deopt: These scopes are set in the visitor on const violations\n      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {\n        break;\n      }\n    } while ((scope = scope.parent));\n  }\n\n  getAttachmentPath() {\n    let path = this._getAttachmentPath();\n    if (!path) return;\n\n    let targetScope = path.scope;\n\n    // don't allow paths that have their own lexical environments to pollute\n    if (targetScope.path === path) {\n      targetScope = path.scope.parent;\n    }\n\n    // avoid hoisting to a scope that contains bindings that are executed after our attachment path\n    if (targetScope.path.isProgram() || targetScope.path.isFunction()) {\n      for (const name of Object.keys(this.bindings)) {\n        // check binding is a direct child of this paths scope\n        if (!targetScope.hasOwnBinding(name)) continue;\n\n        const binding = this.bindings[name];\n\n        // allow parameter references and expressions in params (like destructuring rest)\n        if (binding.kind === \"param\" || binding.path.parentKey === \"params\") {\n          continue;\n        }\n\n        // For each binding, get its attachment parent. This gives us an idea of where we might\n        // introduce conflicts.\n        const bindingParentPath = this.getAttachmentParentForPath(binding.path);\n\n        // If the binding's attachment appears at or after our attachment point, then we move after it.\n        if (bindingParentPath.key >= path.key) {\n          this.attachAfter = true;\n          path = binding.path;\n\n          // We also move past any constant violations.\n          for (const violationPath of binding.constantViolations) {\n            if (this.getAttachmentParentForPath(violationPath).key > path.key) {\n              path = violationPath;\n            }\n          }\n        }\n      }\n    }\n\n    return path;\n  }\n\n  _getAttachmentPath() {\n    const scopes = this.scopes;\n\n    const scope = scopes.pop();\n    // deopt: no compatible scopes\n    if (!scope) return;\n\n    if (scope.path.isFunction()) {\n      if (this.hasOwnParamBindings(scope)) {\n        // deopt: should ignore this scope since it's ourselves\n        if (this.scope === scope) return;\n\n        // needs to be attached to the body\n        const bodies = scope.path.get(\"body\").get(\"body\") as NodePath[];\n        for (let i = 0; i < bodies.length; i++) {\n          // Don't attach to something that's going to get hoisted,\n          // like a default parameter\n          // @ts-expect-error todo(flow->ts): avoid mutating the node, introducing new fields\n          if (bodies[i].node._blockHoist) continue;\n          return bodies[i];\n        }\n        // deopt: If here, no attachment path found\n      } else {\n        // doesn't need to be be attached to this scope\n        return this.getNextScopeAttachmentParent();\n      }\n    } else if (scope.path.isProgram()) {\n      return this.getNextScopeAttachmentParent();\n    }\n  }\n\n  getNextScopeAttachmentParent() {\n    const scope = this.scopes.pop();\n    if (scope) return this.getAttachmentParentForPath(scope.path);\n  }\n\n  // Find an attachment for this path.\n  getAttachmentParentForPath(path: NodePath) {\n    do {\n      if (\n        // Beginning of the scope\n        !path.parentPath ||\n        // Has siblings and is a statement\n        (Array.isArray(path.container) && path.isStatement())\n      ) {\n        return path;\n      }\n    } while ((path = path.parentPath));\n  }\n\n  // Returns true if a scope has param bindings.\n  hasOwnParamBindings(scope: Scope) {\n    for (const name of Object.keys(this.bindings)) {\n      if (!scope.hasOwnBinding(name)) continue;\n\n      const binding = this.bindings[name];\n      // Ensure constant; without it we could place behind a reassignment\n      if (binding.kind === \"param\" && binding.constant) return true;\n    }\n    return false;\n  }\n\n  run(): NodePath<t.Expression> | undefined {\n    this.path.traverse(referenceVisitor, this);\n\n    if (this.mutableBinding) return;\n\n    this.getCompatibleScopes();\n\n    const attachTo = this.getAttachmentPath();\n    if (!attachTo) return;\n\n    // don't bother hoisting to the same function as this will cause multiple branches to be\n    // evaluated more than once leading to a bad optimisation\n    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;\n\n    // generate declaration and insert it to our point\n    let uid: t.Identifier | t.JSXExpressionContainer =\n      attachTo.scope.generateUidIdentifier(\"ref\");\n\n    // @ts-expect-error todo(flow->ts): more specific type for this.path\n    const declarator = variableDeclarator(uid, this.path.node);\n\n    const insertFn = this.attachAfter ? \"insertAfter\" : \"insertBefore\";\n    const [attached] = attachTo[insertFn]([\n      attachTo.isVariableDeclarator()\n        ? declarator\n        : variableDeclaration(\"var\", [declarator]),\n    ]);\n\n    const parent = this.path.parentPath;\n    if (parent.isJSXElement() && this.path.container === parent.node.children) {\n      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with\n      // an expression container\n      uid = jsxExpressionContainer(uid);\n    }\n\n    this.path.replaceWith(cloneNode(uid));\n\n    // @ts-expect-error TS cannot refine the type of `attached`\n    // TODO: Should we use `attached.isVariableDeclaration()`?\n    return attachTo.isVariableDeclarator()\n      ? attached.get(\"init\")\n      : attached.get(\"declarations.0.init\");\n  }\n}\n", "// This file contains methods that modify the path/node in some ways.\n\nimport { getCachedPaths } from \"../cache.ts\";\nimport PathHoister from \"./lib/hoister.ts\";\nimport NodePath from \"./index.ts\";\nimport {\n  arrowFunctionExpression,\n  assertExpression,\n  assignmentExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  isAssignmentExpression,\n  isCallExpression,\n  isExportNamedDeclaration,\n  isExpression,\n  isIdentifier,\n  isSequenceExpression,\n  isSuper,\n  thisExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../scope/index.ts\";\n\n/**\n * Insert the provided nodes before the current one.\n */\n\nexport function insertBefore(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  this._assertUnremoved();\n\n  const nodes = this._verifyNodeList(nodes_);\n\n  const { parentPath, parent } = this;\n\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // https://github.com/babel/babel/issues/15293\n    // When Babel transforms `export class String { field }`, the class properties plugin will inject the defineProperty\n    // helper, which depends on the builtins e.g. String, Number, Symbol, etc. To prevent them from being shadowed by local\n    // exports, the helper injector replaces the named export into `class _String { field }; export { _String as String }`,\n    // with `parentPath` here changed to the moved ClassDeclaration, causing rare inconsistency between `parent` and `parentPath`.\n    // Here we retrieve the parent type from the `parent` property. This is a temporary fix and we should revisit when\n    // helpers should get injected.\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertBefore(nodes);\n  } else if (\n    (this.isNodeType(\"Expression\") && !this.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    if (this.node) nodes.push(this.node);\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return this._containerInsertBefore(nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return (this as NodePath<t.BlockStatement>).unshiftContainer(\n      \"body\",\n      // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n      nodes,\n    );\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\nexport function _containerInsert<N extends t.Node>(\n  this: NodePath,\n  from: number,\n  nodes: N[],\n): NodePath<N>[] {\n  this.updateSiblingKeys(from, nodes.length);\n\n  const paths: NodePath<N>[] = [];\n\n  // @ts-expect-error todo(flow->ts): this.container could be a NodePath\n  this.container.splice(from, 0, ...nodes);\n  for (let i = 0; i < nodes.length; i++) {\n    const to = from + i;\n    const path = this.getSibling(to) as NodePath<N>;\n    paths.push(path);\n\n    if (this.context?.queue) {\n      path.pushContext(this.context);\n    }\n  }\n\n  const contexts = this._getQueueContexts();\n\n  for (const path of paths) {\n    path.setScope();\n    path.debug(\"Inserted.\");\n\n    for (const context of contexts) {\n      context.maybeQueue(path, true);\n    }\n  }\n\n  return paths;\n}\n\nexport function _containerInsertBefore<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return this._containerInsert(this.key as number, nodes);\n}\n\nexport function _containerInsertAfter<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return this._containerInsert((this.key as number) + 1, nodes);\n}\n\nconst last = <T>(arr: T[]) => arr[arr.length - 1];\n\nfunction isHiddenInSequenceExpression(path: NodePath): boolean {\n  return (\n    isSequenceExpression(path.parent) &&\n    (last(path.parent.expressions) !== path.node ||\n      isHiddenInSequenceExpression(path.parentPath))\n  );\n}\n\nfunction isAlmostConstantAssignment(\n  node: t.Node,\n  scope: Scope,\n): node is t.AssignmentExpression & { left: t.Identifier } {\n  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n    return false;\n  }\n\n  // Not every scope can contain variables. For example, we might be in\n  // a ClassScope either in the ClassHeritage or in a computed key.\n  const blockScope = scope.getBlockParent();\n\n  // If the variable is defined in the current scope and only assigned here,\n  // we can be sure that its value won't change.\n  return (\n    blockScope.hasOwnBinding(node.left.name) &&\n    blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1\n  );\n}\n\n/**\n * Insert the provided nodes after the current one. When inserting nodes after an\n * expression, ensure that the completion record is correct by pushing the current node.\n */\n\nexport function insertAfter(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  this._assertUnremoved();\n\n  if (this.isSequenceExpression()) {\n    return last(this.get(\"expressions\")).insertAfter(nodes_);\n  }\n\n  const nodes = this._verifyNodeList(nodes_);\n\n  const { parentPath, parent } = this;\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // see insertBefore\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertAfter(\n      nodes.map(node => {\n        // Usually after an expression we can safely insert another expression:\n        //   A.insertAfter(B)\n        //     foo = A;  -> foo = (A, B);\n        // If A is an expression statement, it isn't safe anymore so we need to\n        // convert B to an expression statement\n        //     A;        -> A; B // No semicolon! It could break if followed by [!\n        return isExpression(node) ? expressionStatement(node) : node;\n      }),\n    );\n  } else if (\n    (this.isNodeType(\"Expression\") &&\n      !this.isJSXElement() &&\n      !parentPath.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    const self = this as NodePath<t.Expression | t.VariableDeclaration>;\n    if (self.node) {\n      const node = self.node;\n      let { scope } = this;\n\n      if (scope.path.isPattern()) {\n        assertExpression(node);\n\n        self.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n        (self.get(\"callee.body\") as NodePath<t.Expression>).insertAfter(nodes);\n        return [self];\n      }\n\n      if (isHiddenInSequenceExpression(self)) {\n        nodes.unshift(node);\n      }\n      // We need to preserve the value of this expression.\n      else if (isCallExpression(node) && isSuper(node.callee)) {\n        nodes.unshift(node);\n        // `super(...)` always evaluates to `this`.\n        nodes.push(thisExpression());\n      } else if (isAlmostConstantAssignment(node, scope)) {\n        nodes.unshift(node);\n        nodes.push(cloneNode(node.left));\n      } else if (scope.isPure(node, true)) {\n        // Insert the nodes before rather than after; it's not observable.\n        nodes.push(node);\n      } else {\n        // Inserting after the computed key of a method should insert the\n        // temporary binding in the method's parent's scope.\n        if (parentPath.isMethod({ computed: true, key: node })) {\n          scope = scope.parent;\n        }\n        const temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(\n          expressionStatement(\n            // @ts-expect-error todo(flow->ts): This can be a variable\n            // declaration in the \"init\" of a for statement, but that's\n            // invalid here.\n            assignmentExpression(\"=\", cloneNode(temp), node),\n          ),\n        );\n        nodes.push(expressionStatement(cloneNode(temp)));\n      }\n    }\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return this._containerInsertAfter(nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n    return this.pushContainer(\"body\", nodes);\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\n/**\n * Update all sibling node paths after `fromIndex` by `incrementBy`.\n */\n\nexport function updateSiblingKeys(\n  this: NodePath,\n  fromIndex: number,\n  incrementBy: number,\n) {\n  if (!this.parent) return;\n\n  const paths = getCachedPaths(this.hub, this.parent) || ([] as never[]);\n\n  for (const [, path] of paths) {\n    if (typeof path.key === \"number\" && path.key >= fromIndex) {\n      path.key += incrementBy;\n    }\n  }\n}\n\nexport function _verifyNodeList<N extends t.Node>(\n  this: NodePath,\n  nodes: N | N[],\n): N[] {\n  if (!nodes) {\n    return [];\n  }\n\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let msg;\n\n    if (!node) {\n      msg = \"has falsy node\";\n    } else if (typeof node !== \"object\") {\n      msg = \"contains a non-object node\";\n    } else if (!node.type) {\n      msg = \"without a type\";\n    } else if (node instanceof NodePath) {\n      msg = \"has a NodePath when it expected a raw object\";\n    }\n\n    if (msg) {\n      const type = Array.isArray(node) ? \"array\" : typeof node;\n      throw new Error(\n        `Node list ${msg} with the index of ${i} and type of ${type}`,\n      );\n    }\n  }\n\n  return nodes;\n}\n\nexport function unshiftContainer<N extends t.Node, K extends keyof N & string>(\n  this: NodePath<N>,\n  listKey: K,\n  nodes: N[K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  // todo: NodePaths<Nodes>\n  this._assertUnremoved();\n\n  // @ts-expect-error fixme\n  nodes = this._verifyNodeList(nodes);\n\n  // get the first path and insert our nodes before it, if it doesn't exist then it\n  // doesn't matter, our nodes will be inserted anyway\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: (this.node as N)[listKey] as unknown as t.Node | t.Node[],\n    listKey,\n    key: 0,\n  }).setContext(this.context);\n\n  return path._containerInsertBefore(\n    // @ts-expect-error typings needed to narrow down nodes as t.Node[]\n    nodes,\n  );\n}\n\nexport function pushContainer<\n  P extends NodePath,\n  K extends string & keyof P[\"node\"],\n>(\n  this: P,\n  listKey: K,\n  nodes: P[\"node\"][K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  this._assertUnremoved();\n\n  const verifiedNodes = this._verifyNodeList(\n    // @ts-expect-error refine typings\n    nodes,\n  );\n\n  // get an invisible path that represents the last node + 1 and replace it with our\n  // nodes, effectively inlining it\n\n  const container = (this.node as P[\"node\"])[listKey] as t.Node[];\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: container as unknown as t.Node | t.Node[],\n    listKey,\n    key: container.length,\n  }).setContext(this.context);\n\n  return path.replaceWithMultiple(verifiedNodes);\n}\n\n/**\n * Hoist the current node to the highest scope possible and return a UID\n * referencing it.\n */\nexport function hoist<T extends t.Node>(\n  this: NodePath<T>,\n  scope: Scope = this.scope,\n) {\n  const hoister = new PathHoister<T>(this, scope);\n  return hoister.run();\n}\n", "// This file contains methods responsible for dealing with/retrieving children or siblings.\n\nimport type TraversalContext from \"../context.ts\";\nimport NodePath from \"./index.ts\";\nimport {\n  getBindingIdentifiers as _getBindingIdentifiers,\n  getOuterBindingIdentifiers as _getOuterBindingIdentifiers,\n  numericLiteral,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nconst NORMAL_COMPLETION = 0;\nconst BREAK_COMPLETION = 1;\n\ntype Completion = {\n  path: NodePath;\n  type: 0 | 1;\n};\n\ntype CompletionContext = {\n  // whether the current context allows `break` statement. When it allows, we have\n  // to search all the statements for potential `break`\n  canHaveBreak: boolean;\n  // whether the statement is an immediate descendant of a switch case clause\n  inCaseClause: boolean;\n  // whether the `break` statement record should be populated to upper level\n  // when a `break` statement is an immediate descendant of a block statement, e.g.\n  // `{ break }`, it can influence the control flow in the upper levels.\n  shouldPopulateBreak: boolean;\n};\n\nfunction NormalCompletion(path: NodePath): Completion {\n  return { type: NORMAL_COMPLETION, path };\n}\n\nfunction BreakCompletion(path: NodePath): Completion {\n  return { type: BREAK_COMPLETION, path };\n}\n\nexport function getOpposite(this: NodePath): NodePath | null {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n  return null;\n}\n\nfunction addCompletionRecords(\n  path: NodePath | null | undefined,\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  if (path) {\n    records.push(..._getCompletionRecords(path, context));\n  }\n  return records;\n}\n\nfunction completionRecordForSwitch(\n  cases: NodePath<t.SwitchCase>[],\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  // https://tc39.es/ecma262/#sec-runtime-semantics-caseblockevaluation\n  let lastNormalCompletions: Completion[] = [];\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n    const caseCompletions = _getCompletionRecords(casePath, context);\n    const normalCompletions = [];\n    const breakCompletions = [];\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n    records.push(...breakCompletions);\n  }\n  records.push(...lastNormalCompletions);\n  return records;\n}\n\nfunction normalCompletionToBreak(completions: Completion[]) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\n\n/**\n * Determine how we should handle the break statement for break completions\n *\n * @param {Completion[]} completions\n * @param {boolean} reachable Whether the break statement is reachable after\n   we mark the normal completions _before_ the given break completions as the final\n   completions. For example,\n   `{ 0 }; break;` is transformed to `{ return 0 }; break;`, the `break` here is unreachable\n   and thus can be removed without consequences. We may in the future reserve them instead since\n   we do not consistently remove unreachable statements _after_ break\n   `{ var x = 0 }; break;` is transformed to `{ var x = 0 }; return void 0;`, the `break` is reachable\n   because we can not wrap variable declaration under a return statement\n */\nfunction replaceBreakStatementInBreakCompletion(\n  completions: Completion[],\n  reachable: boolean,\n) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({ label: null })) {\n      if (reachable) {\n        c.path.replaceWith(unaryExpression(\"void\", numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\n\nfunction getStatementListCompletion(\n  paths: NodePath[],\n  context: CompletionContext,\n): Completion[] {\n  const completions = [];\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = { ...context, inCaseClause: false };\n      if (\n        path.isBlockStatement() &&\n        (context.inCaseClause || // case test: { break }\n          context.shouldPopulateBreak) // case test: { { break } }\n      ) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n      const statementCompletions = _getCompletionRecords(path, newContext);\n      if (\n        statementCompletions.length > 0 &&\n        // we can stop search `paths` when we have seen a `path` that is\n        // effectively a `break` statement. Examples are\n        // - `break`\n        // - `if (true) { 1; break } else { 2; break }`\n        // - `{ break }```\n        // In other words, the paths after this `path` are unreachable\n        statementCompletions.every(c => c.type === BREAK_COMPLETION)\n      ) {\n        if (\n          lastNormalCompletions.length > 0 &&\n          statementCompletions.every(c =>\n            c.path.isBreakStatement({ label: null }),\n          )\n        ) {\n          // when a break completion has a path as BreakStatement, it must be `{ break }`\n          // whose completion value we can not determine, otherwise it would have been\n          // replaced by `replaceBreakStatementInBreakCompletion`\n          // When we have seen normal completions from the last statement\n          // it is safe to stop populating break and mark normal completions as break\n          normalCompletionToBreak(lastNormalCompletions);\n          completions.push(...lastNormalCompletions);\n          // Declarations have empty completion record, however they can not be nested\n          // directly in return statement, i.e. `return (var a = 1)` is invalid.\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions.push(...statementCompletions);\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n          replaceBreakStatementInBreakCompletion(\n            statementCompletions,\n            /* reachable */ false,\n          );\n        } else {\n          completions.push(...statementCompletions);\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n        }\n        break;\n      }\n      if (i === paths.length - 1) {\n        completions.push(...statementCompletions);\n      } else {\n        lastNormalCompletions = [];\n        for (let i = 0; i < statementCompletions.length; i++) {\n          const c = statementCompletions[i];\n          if (c.type === BREAK_COMPLETION) {\n            completions.push(c);\n          }\n          if (c.type === NORMAL_COMPLETION) {\n            lastNormalCompletions.push(c);\n          }\n        }\n      }\n    }\n  } else if (paths.length) {\n    // When we are in a context where `break` must not exist, we can skip linear\n    // search on statement lists and assume that the last\n    // non-variable-declaration statement determines the completion.\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n      if (\n        pathCompletions.length > 1 ||\n        (pathCompletions.length === 1 &&\n          !pathCompletions[0].path.isVariableDeclaration())\n      ) {\n        completions.push(...pathCompletions);\n        break;\n      }\n    }\n  }\n  return completions;\n}\n\nfunction _getCompletionRecords(\n  path: NodePath,\n  context: CompletionContext,\n): Completion[] {\n  let records: Completion[] = [];\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (\n    path.isDoExpression() ||\n    path.isFor() ||\n    path.isWhile() ||\n    path.isLabeledStatement()\n  ) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    return getStatementListCompletion(path.get(\"body\"), context);\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    return completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    return getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true,\n    });\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n\n  return records;\n}\n\n/**\n * Retrieve the completion records of a given path.\n * Note: to ensure proper support on `break` statement, this method\n * will manipulate the AST around the break statement. Do not call the method\n * twice for the same path.\n *\n * @export\n * @param {NodePath} this\n * @returns {NodePath[]} Completion records\n */\nexport function getCompletionRecords(this: NodePath): NodePath[] {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false,\n  });\n  return records.map(r => r.path);\n}\n\nexport function getSibling(this: NodePath, key: string | number): NodePath {\n  return NodePath.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key,\n  }).setContext(this.context);\n}\n\nexport function getPrevSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key - 1);\n}\n\nexport function getNextSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key + 1);\n}\n\nexport function getAllNextSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n  return siblings;\n}\n\nexport function getAllPrevSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n  return siblings;\n}\n\n// convert \"1\" to 1 (string index to number index)\ntype MaybeToIndex<T extends string> = T extends `${bigint}` ? number : T;\n\ntype Pattern<Obj extends string, Prop extends string> = `${Obj}.${Prop}`;\n\n// split \"body.body.1\" to [\"body\", \"body\", 1]\ntype Split<P extends string> =\n  P extends Pattern<infer O, infer U>\n    ? [MaybeToIndex<O>, ...Split<U>]\n    : [MaybeToIndex<P>];\n\n// traverse the Node with tuple path [\"body\", \"body\", 1]\n// Path should be created with Split\ntype Trav<\n  Node extends t.Node | t.Node[],\n  Path extends unknown[],\n> = Path extends [infer K, ...infer R]\n  ? K extends keyof Node\n    ? Node[K] extends t.Node | t.Node[]\n      ? R extends []\n        ? Node[K]\n        : Trav<Node[K], R>\n      : never\n    : never\n  : never;\n\ntype ToNodePath<T> =\n  T extends Array<t.Node | null | undefined>\n    ? Array<NodePath<T[number]>>\n    : T extends t.Node | null | undefined\n      ? NodePath<T>\n      : never;\n\nfunction get<T extends NodePath, K extends keyof T[\"node\"]>(\n  this: T,\n  key: K,\n  context?: boolean | TraversalContext,\n): T extends any\n  ? T[\"node\"][K] extends Array<t.Node | null | undefined>\n    ? Array<NodePath<T[\"node\"][K][number]>>\n    : T[\"node\"][K] extends t.Node | null | undefined\n      ? NodePath<T[\"node\"][K]>\n      : never\n  : never;\n\nfunction get<T extends NodePath, K extends string>(\n  this: T,\n  key: K,\n  context?: boolean | TraversalContext,\n): T extends any ? ToNodePath<Trav<T[\"node\"], Split<K>>> : never;\n\nfunction get(\n  this: NodePath,\n  key: string,\n  context?: true | TraversalContext,\n): NodePath | NodePath[];\n\nfunction get(\n  this: NodePath,\n  key: string,\n  context: true | TraversalContext = true,\n): NodePath | NodePath[] {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n  if (parts.length === 1) {\n    // \"foo\"\n    // @ts-expect-error key may not index T\n    return this._getKey(key, context);\n  } else {\n    // \"foo.bar\"\n    return this._getPattern(parts, context);\n  }\n}\n\nexport { get };\n\nexport function _getKey<T extends t.Node>(\n  this: NodePath<T>,\n  key: keyof T & string,\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  const node = this.node as T;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    // requested a container so give them all the paths\n    return container.map((_, i) => {\n      return NodePath.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i,\n      }).setContext(context);\n    });\n  } else {\n    return NodePath.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key,\n    }).setContext(context);\n  }\n}\n\nexport function _getPattern(\n  this: NodePath,\n  parts: string[],\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  let path: NodePath | NodePath[] = this;\n  for (const part of parts) {\n    if (part === \".\") {\n      // @ts-expect-error todo(flow-ts): Can path be an array here?\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        // @ts-expect-error part may not index path\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n  return path;\n}\n\nfunction getBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getBindingIdentifiers };\n\nfunction getOuterBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getOuterBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getOuterBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getOuterBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getOuterBindingIdentifiers };\n\nfunction getBindingIdentifierPaths(\n  duplicates: true,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getBindingIdentifierPaths(\n  duplicates: false,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>>;\nfunction getBindingIdentifierPaths(\n  duplicates?: boolean,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\n// original source - https://github.com/babel/babel/blob/main/packages/babel-types/src/retrievers/getBindingIdentifiers.js\n// path.getBindingIdentifiers returns nodes where the following re-implementation returns paths\nfunction getBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n  outerOnly: boolean = false,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]> {\n  const path = this;\n  const search = [path];\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n\n    const keys =\n      // @ts-expect-error _getBindingIdentifiers.keys do not cover all node types\n      _getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = (ids[id.node.name] = ids[id.node.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n        if (Array.isArray(child)) {\n          search.push(...child);\n        } else if (child.node) {\n          search.push(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nexport { getBindingIdentifierPaths };\n\nfunction getOuterBindingIdentifierPaths(\n  duplicates: true,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: false,\n): Record<string, NodePath<t.Identifier>>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\nfunction getOuterBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}\n\nexport { getOuterBindingIdentifierPaths };\n", "// This file contains methods responsible for dealing with comments.\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index.ts\";\nimport {\n  addComment as _addComment,\n  addComments as _addComments,\n} from \"@babel/types\";\n\n/**\n * Share comments amongst siblings.\n */\n\nexport function shareCommentsWithSiblings(this: NodePath) {\n  // NOTE: this assumes numbered keys\n  if (typeof this.key === \"string\") return;\n\n  const node = this.node;\n  if (!node) return;\n\n  const trailing = node.trailingComments;\n  const leading = node.leadingComments;\n  if (!trailing && !leading) return;\n\n  const prev = this.getSibling(this.key - 1);\n  const next = this.getSibling(this.key + 1);\n  const hasPrev = Boolean(prev.node);\n  const hasNext = Boolean(next.node);\n\n  if (hasPrev) {\n    if (leading) {\n      prev.addComments(\n        \"trailing\",\n        removeIfExisting(leading, prev.node.trailingComments),\n      );\n    }\n    if (trailing && !hasNext) prev.addComments(\"trailing\", trailing);\n  }\n  if (hasNext) {\n    if (trailing) {\n      next.addComments(\n        \"leading\",\n        removeIfExisting(trailing, next.node.leadingComments),\n      );\n    }\n    if (leading && !hasPrev) next.addComments(\"leading\", leading);\n  }\n}\n\nfunction removeIfExisting<T>(list: T[], toRemove?: T[]): T[] {\n  if (!toRemove?.length) return list;\n  const set = new Set(toRemove);\n  return list.filter(el => {\n    return !set.has(el);\n  });\n}\n\nexport function addComment(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n) {\n  _addComment(this.node, type, content, line);\n}\n\n/**\n * Give node `comments` of the specified `type`.\n */\n\nexport function addComments(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  comments: t.Comment[],\n) {\n  _addComments(this.node, type, comments);\n}\n", "import type { HubInterface } from \"../hub.ts\";\nimport type TraversalContext from \"../context.ts\";\nimport type { ExplodedTraverseOptions } from \"../index.ts\";\nimport * as virtualTypes from \"./lib/virtual-types.ts\";\nimport buildDebug from \"debug\";\nimport traverse from \"../index.ts\";\nimport type { Visitor } from \"../types.ts\";\nimport Scope from \"../scope/index.ts\";\nimport { validate } from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport * as cache from \"../cache.ts\";\nimport generator from \"@babel/generator\";\n\n// NodePath is split across many files.\nimport * as NodePath_ancestry from \"./ancestry.ts\";\nimport * as NodePath_inference from \"./inference/index.ts\";\nimport * as NodePath_replacement from \"./replacement.ts\";\nimport * as NodePath_evaluation from \"./evaluation.ts\";\nimport * as NodePath_conversion from \"./conversion.ts\";\nimport * as NodePath_introspection from \"./introspection.ts\";\nimport * as NodePath_context from \"./context.ts\";\nimport * as NodePath_removal from \"./removal.ts\";\nimport * as NodePath_modification from \"./modification.ts\";\nimport * as NodePath_family from \"./family.ts\";\nimport * as NodePath_comments from \"./comments.ts\";\nimport * as NodePath_virtual_types_validator from \"./lib/virtual-types-validator.ts\";\nimport type { NodePathAssertions } from \"./generated/asserts.ts\";\nimport type { NodePathValidators } from \"./generated/validators.ts\";\n\nconst debug = buildDebug(\"babel\");\n\nexport const REMOVED = 1 << 0;\nexport const SHOULD_STOP = 1 << 1;\nexport const SHOULD_SKIP = 1 << 2;\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<any>;\n\nconst NodePath_Final = class NodePath {\n  constructor(hub: HubInterface, parent: t.Node | null) {\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n\n    this.context = null;\n    this.scope = null;\n  }\n\n  declare parent: t.Node;\n  declare hub: HubInterface;\n  declare data: Record<string | symbol, unknown>;\n  // TraversalContext is configured by setContext\n  declare context: TraversalContext;\n  declare scope: Scope;\n\n  contexts: Array<TraversalContext> = [];\n  state: any = null;\n  opts: ExplodedTraverseOptions | null = null;\n\n  @bit.storage _traverseFlags: number;\n  @bit(REMOVED) accessor removed = false;\n  @bit(SHOULD_STOP) accessor shouldStop = false;\n  @bit(SHOULD_SKIP) accessor shouldSkip = false;\n\n  skipKeys: Record<string, boolean> | null = null;\n  parentPath: NodePath_Final | null = null;\n  container: t.Node | Array<t.Node> | null = null;\n  listKey: string | null = null;\n  key: string | number | null = null;\n  node: t.Node | null = null;\n  type: t.Node[\"type\"] | null = null;\n\n  static get({\n    hub,\n    parentPath,\n    parent,\n    container,\n    listKey,\n    key,\n  }: {\n    hub?: HubInterface;\n    parentPath: NodePath_Final | null;\n    parent: t.Node;\n    container: t.Node | t.Node[];\n    listKey?: string;\n    key: string | number;\n  }): NodePath_Final {\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n\n    if (!parent) {\n      throw new Error(\"To get a node path the parent needs to exist\");\n    }\n\n    const targetNode =\n      // @ts-expect-error key must present in container\n      container[key];\n\n    const paths = cache.getOrCreateCachedPaths(hub, parent);\n\n    let path = paths.get(targetNode);\n    if (!path) {\n      path = new NodePath(hub, parent) as NodePath_Final;\n      if (targetNode) paths.set(targetNode, path);\n    }\n\n    path.setup(parentPath, container, listKey, key);\n\n    return path;\n  }\n\n  getScope(this: NodePath_Final, scope: Scope): Scope {\n    return this.isScope() ? new Scope(this) : scope;\n  }\n\n  setData(key: string | symbol, val: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    return (this.data[key] = val);\n  }\n\n  getData(key: string | symbol, def?: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    let val = this.data[key];\n    if (val === undefined && def !== undefined) val = this.data[key] = def;\n    return val;\n  }\n\n  hasNode(): boolean {\n    return this.node != null;\n  }\n\n  buildCodeFrameError(\n    msg: string,\n    Error: new () => Error = SyntaxError,\n  ): Error {\n    return this.hub.buildError(this.node, msg, Error);\n  }\n\n  traverse<T>(this: NodePath_Final, visitor: Visitor<T>, state: T): void;\n  traverse(this: NodePath_Final, visitor: Visitor): void;\n  traverse(this: NodePath_Final, visitor: any, state?: any) {\n    traverse(this.node, visitor, this.scope, state, this);\n  }\n\n  set(key: string, node: any) {\n    validate(this.node, key, node);\n    // @ts-expect-error key must present in this.node\n    this.node[key] = node;\n  }\n\n  getPathLocation(this: NodePath_Final): string {\n    const parts = [];\n    let path: NodePath_Final = this;\n    do {\n      let key = path.key;\n      if (path.inList) key = `${path.listKey}[${key}]`;\n      parts.unshift(key);\n    } while ((path = path.parentPath));\n    return parts.join(\".\");\n  }\n\n  debug(this: NodePath_Final, message: string) {\n    if (!debug.enabled) return;\n    debug(`${this.getPathLocation()} ${this.type}: ${message}`);\n  }\n\n  toString() {\n    return generator(this.node).code;\n  }\n\n  get inList() {\n    return !!this.listKey;\n  }\n\n  set inList(inList) {\n    if (!inList) {\n      this.listKey = null;\n    }\n    // ignore inList = true as it should depend on `listKey`\n  }\n\n  get parentKey(): string {\n    return (this.listKey || this.key) as string;\n  }\n};\n\nconst methods = {\n  // NodePath_ancestry\n  findParent: NodePath_ancestry.findParent,\n  find: NodePath_ancestry.find,\n  getFunctionParent: NodePath_ancestry.getFunctionParent,\n  getStatementParent: NodePath_ancestry.getStatementParent,\n  getEarliestCommonAncestorFrom:\n    NodePath_ancestry.getEarliestCommonAncestorFrom,\n  getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,\n  getAncestry: NodePath_ancestry.getAncestry,\n  isAncestor: NodePath_ancestry.isAncestor,\n  isDescendant: NodePath_ancestry.isDescendant,\n  inType: NodePath_ancestry.inType,\n\n  // NodePath_inference\n  getTypeAnnotation: NodePath_inference.getTypeAnnotation,\n  _getTypeAnnotation: NodePath_inference._getTypeAnnotation,\n  isBaseType: NodePath_inference.isBaseType,\n  couldBeBaseType: NodePath_inference.couldBeBaseType,\n  baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,\n  isGenericType: NodePath_inference.isGenericType,\n\n  // NodePath_replacement\n  replaceWithMultiple: NodePath_replacement.replaceWithMultiple,\n  replaceWithSourceString: NodePath_replacement.replaceWithSourceString,\n  replaceWith: NodePath_replacement.replaceWith,\n  _replaceWith: NodePath_replacement._replaceWith,\n  replaceExpressionWithStatements:\n    NodePath_replacement.replaceExpressionWithStatements,\n  replaceInline: NodePath_replacement.replaceInline,\n\n  // NodePath_evaluation\n  evaluateTruthy: NodePath_evaluation.evaluateTruthy,\n  evaluate: NodePath_evaluation.evaluate,\n\n  // NodePath_conversion\n  toComputedKey: NodePath_conversion.toComputedKey,\n  ensureBlock: NodePath_conversion.ensureBlock,\n  unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,\n  arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,\n\n  // NodePath_introspection\n  matchesPattern: NodePath_introspection.matchesPattern,\n  has: NodePath_introspection.has,\n  isStatic: NodePath_introspection.isStatic,\n  is: NodePath_introspection.is,\n  isnt: NodePath_introspection.isnt,\n  equals: NodePath_introspection.equals,\n  isNodeType: NodePath_introspection.isNodeType,\n  canHaveVariableDeclarationOrExpression:\n    NodePath_introspection.canHaveVariableDeclarationOrExpression,\n  canSwapBetweenExpressionAndStatement:\n    NodePath_introspection.canSwapBetweenExpressionAndStatement,\n  isCompletionRecord: NodePath_introspection.isCompletionRecord,\n  isStatementOrBlock: NodePath_introspection.isStatementOrBlock,\n  referencesImport: NodePath_introspection.referencesImport,\n  getSource: NodePath_introspection.getSource,\n  willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,\n  _guessExecutionStatusRelativeTo:\n    NodePath_introspection._guessExecutionStatusRelativeTo,\n  resolve: NodePath_introspection.resolve,\n  _resolve: NodePath_introspection._resolve,\n  isConstantExpression: NodePath_introspection.isConstantExpression,\n  isInStrictMode: NodePath_introspection.isInStrictMode,\n\n  // NodePath_context\n  call: NodePath_context.call,\n  _call: NodePath_context._call,\n  isDenylisted: NodePath_context.isDenylisted,\n  isBlacklisted: NodePath_context.isBlacklisted,\n  visit: NodePath_context.visit,\n  skip: NodePath_context.skip,\n  skipKey: NodePath_context.skipKey,\n  stop: NodePath_context.stop,\n  setScope: NodePath_context.setScope,\n  setContext: NodePath_context.setContext,\n  resync: NodePath_context.resync,\n  _resyncParent: NodePath_context._resyncParent,\n  _resyncKey: NodePath_context._resyncKey,\n  _resyncList: NodePath_context._resyncList,\n  _resyncRemoved: NodePath_context._resyncRemoved,\n  popContext: NodePath_context.popContext,\n  pushContext: NodePath_context.pushContext,\n  setup: NodePath_context.setup,\n  setKey: NodePath_context.setKey,\n  requeue: NodePath_context.requeue,\n  _getQueueContexts: NodePath_context._getQueueContexts,\n\n  // NodePath_removal\n  remove: NodePath_removal.remove,\n  _removeFromScope: NodePath_removal._removeFromScope,\n  _callRemovalHooks: NodePath_removal._callRemovalHooks,\n  _remove: NodePath_removal._remove,\n  _markRemoved: NodePath_removal._markRemoved,\n  _assertUnremoved: NodePath_removal._assertUnremoved,\n\n  // NodePath_modification\n  insertBefore: NodePath_modification.insertBefore,\n  _containerInsert: NodePath_modification._containerInsert,\n  _containerInsertBefore: NodePath_modification._containerInsertBefore,\n  _containerInsertAfter: NodePath_modification._containerInsertAfter,\n  insertAfter: NodePath_modification.insertAfter,\n  updateSiblingKeys: NodePath_modification.updateSiblingKeys,\n  _verifyNodeList: NodePath_modification._verifyNodeList,\n  unshiftContainer: NodePath_modification.unshiftContainer,\n  pushContainer: NodePath_modification.pushContainer,\n  hoist: NodePath_modification.hoist,\n\n  // NodePath_family\n  getOpposite: NodePath_family.getOpposite,\n  getCompletionRecords: NodePath_family.getCompletionRecords,\n  getSibling: NodePath_family.getSibling,\n  getPrevSibling: NodePath_family.getPrevSibling,\n  getNextSibling: NodePath_family.getNextSibling,\n  getAllNextSiblings: NodePath_family.getAllNextSiblings,\n  getAllPrevSiblings: NodePath_family.getAllPrevSiblings,\n  get: NodePath_family.get,\n  _getKey: NodePath_family._getKey,\n  _getPattern: NodePath_family._getPattern,\n  getBindingIdentifiers: NodePath_family.getBindingIdentifiers,\n  getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,\n  getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,\n  getOuterBindingIdentifierPaths:\n    NodePath_family.getOuterBindingIdentifierPaths,\n\n  // NodePath_comments\n  shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,\n  addComment: NodePath_comments.addComment,\n  addComments: NodePath_comments.addComments,\n};\n\nObject.assign(NodePath_Final.prototype, methods);\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // @ts-expect-error babel 7 only\n  NodePath_Final.prototype.arrowFunctionToShadowed =\n    // workaround for rollup\n    // @ts-expect-error babel 7 only\n    NodePath_conversion[String(\"arrowFunctionToShadowed\")];\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error The original _guessExecutionStatusRelativeToDifferentFunctions only worked for paths in\n  // different functions, but _guessExecutionStatusRelativeTo works as a replacement in those cases.\n  NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions =\n    NodePath_introspection._guessExecutionStatusRelativeTo;\n}\n\n// we can not use `import { TYPES } from \"@babel/types\"` here\n// because the transformNamedBabelTypesImportToDestructuring plugin in babel.config.js\n// does not offer live bindings for `TYPES`\n// we can change to `import { TYPES }` when we are publishing ES modules only\nfor (const type of t.TYPES) {\n  const typeKey = `is${type}`;\n  // @ts-expect-error typeKey must present in t\n  const fn = t[typeKey];\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath_Final.prototype[typeKey] = function (opts: any) {\n    return fn(this.node, opts);\n  };\n\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath_Final.prototype[`assert${type}`] = function (opts: any) {\n    if (!fn(this.node, opts)) {\n      throw new TypeError(`Expected node path of type ${type}`);\n    }\n  };\n}\n\n// Register virtual types validators after base types validators\nObject.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);\n\nfor (const type of Object.keys(virtualTypes) as (keyof typeof virtualTypes)[]) {\n  if (type[0] === \"_\") continue;\n  if (!t.TYPES.includes(type)) t.TYPES.push(type);\n}\n\ninterface NodePathOverwrites {\n  // We need to re-define these predicate and assertion\n  // methods here, because we cannot refine `this` in\n  // a function declaration.\n  // See https://github.com/microsoft/TypeScript/issues/38150\n\n  /**\n   * NOTE: This assertion doesn't narrow the type on unions of\n   * NodePaths, due to https://github.com/microsoft/TypeScript/issues/44212\n   *\n   * @see ./conversion.ts for implementation.\n   */\n  ensureBlock(\n    this: NodePath_Final,\n  ): asserts this is NodePath_Final<\n    (\n      | t.Loop\n      | t.WithStatement\n      | t.Function\n      | t.LabeledStatement\n      | t.CatchClause\n    ) & { body: t.BlockStatement }\n  >;\n  /**\n   * @see ./introspection.ts for implementation.\n   */\n  isStatementOrBlock(\n    this: NodePath_Final,\n  ): this is NodePath_Final<t.Statement | t.Block>;\n}\n\ntype NodePathMixins = Omit<typeof methods, keyof NodePathOverwrites>;\n\ninterface NodePath<T extends t.Node>\n  extends InstanceType<typeof NodePath_Final>,\n    NodePathAssertions,\n    NodePathValidators,\n    NodePathMixins,\n    NodePathOverwrites {\n  type: T[\"type\"] | null;\n  node: T;\n  parent: t.ParentMaps[T[\"type\"]];\n  parentPath: t.ParentMaps[T[\"type\"]] extends null\n    ? null\n    : NodePath_Final<t.ParentMaps[T[\"type\"]]> | null;\n}\n\n// This trick is necessary so that\n// NodePath_Final<A | B> is the same as NodePath_Final<A> | NodePath_Final<B>\ntype NodePath_Final<T extends t.Node = t.Node> = T extends any\n  ? NodePath<T>\n  : never;\n\nexport { NodePath_Final as default, type NodePath as NodePath_Internal };\n", "import NodePath from \"./path/index.ts\";\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type Scope from \"./scope/index.ts\";\nimport type { ExplodedTraverseOptions } from \"./index.ts\";\nimport type * as t from \"@babel/types\";\nimport type { Visitor } from \"./types.ts\";\n\nexport default class TraversalContext<S = unknown> {\n  constructor(\n    scope: Scope,\n    opts: ExplodedTraverseOptions<S>,\n    state: S,\n    parentPath: NodePath,\n  ) {\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n\n  declare parentPath: NodePath;\n  declare scope: Scope;\n  declare state: S;\n  declare opts: ExplodedTraverseOptions<S>;\n  queue: Array<NodePath> | null = null;\n  priorityQueue: Array<NodePath> | null = null;\n\n  /**\n   * This method does a simple check to determine whether or not we really need to attempt\n   * visit a node. This will prevent us from constructing a NodePath.\n   */\n\n  shouldVisit(node: t.Node): boolean {\n    const opts = this.opts as Visitor;\n    if (opts.enter || opts.exit) return true;\n\n    // check if we have a visitor for this node\n    if (opts[node.type]) return true;\n\n    // check if we're going to traverse into this node\n    const keys: Array<string> | undefined = VISITOR_KEYS[node.type];\n    if (!keys?.length) return false;\n\n    // we need to traverse into this node so ensure that it has children to traverse into!\n    for (const key of keys) {\n      if (\n        // @ts-expect-error key is from visitor keys\n        node[key]\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  create(\n    node: t.Node,\n    container: t.Node | t.Node[],\n    key: string | number,\n    listKey?: string,\n  ): NodePath {\n    // We don't need to `.setContext()` here, since `.visitQueue()` already\n    // calls `.pushContext`.\n    return NodePath.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container,\n      key: key,\n      listKey,\n    });\n  }\n\n  maybeQueue(path: NodePath, notPriority?: boolean) {\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n\n  visitMultiple(container: t.Node[], parent: t.Node, listKey: string) {\n    // nothing to traverse!\n    if (container.length === 0) return false;\n\n    const queue = [];\n\n    // build up initial queue\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n\n    return this.visitQueue(queue);\n  }\n\n  visitSingle(node: t.Node, key: string): boolean {\n    if (\n      this.shouldVisit(\n        // @ts-expect-error key may not index node\n        node[key],\n      )\n    ) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n\n  visitQueue(queue: Array<NodePath>): boolean {\n    // set queue\n    this.queue = queue;\n    this.priorityQueue = [];\n\n    const visited = new WeakSet();\n    let stop = false;\n    let visitIndex = 0;\n\n    // visit the queue\n    for (; visitIndex < queue.length; ) {\n      const path = queue[visitIndex];\n      visitIndex++;\n      path.resync();\n\n      if (\n        path.contexts.length === 0 ||\n        path.contexts[path.contexts.length - 1] !== this\n      ) {\n        // The context might already have been pushed when this path was inserted and queued.\n        // If we always re-pushed here, we could get duplicates and risk leaving contexts\n        // on the stack after the traversal has completed, which could break things.\n        path.pushContext(this);\n      }\n\n      // this path no longer belongs to the tree\n      if (path.key === null) continue;\n\n      // ensure we don't visit the same node twice\n      const { node } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n\n    // pop contexts\n    for (let i = 0; i < visitIndex; i++) {\n      queue[i].popContext();\n    }\n\n    // clear queue\n    this.queue = null;\n\n    return stop;\n  }\n\n  visit(node: t.Node, key: string) {\n    // @ts-expect-error key may not index node\n    const nodes = node[key] as t.Node | t.Node[] | null;\n    if (!nodes) return false;\n\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n}\n", "import TraversalContext from \"./context.ts\";\nimport type { ExplodedTraverseOptions } from \"./index.ts\";\nimport type NodePath from \"./path/index.ts\";\nimport type Scope from \"./scope/index.ts\";\nimport type * as t from \"@babel/types\";\nimport { VISITOR_KEYS } from \"@babel/types\";\n\n/**\n * Traverse the children of given node\n * @param {Node} node\n * @param {TraverseOptions} opts The traverse options used to create a new traversal context\n * @param {scope} scope A traversal scope used to create a new traversal context. When opts.noScope is true, scope should not be provided\n * @param {any} state A user data storage provided as the second callback argument for traversal visitors\n * @param {NodePath} path A NodePath of given node\n * @param {Record<string, boolean>} skipKeys A map from key names to whether that should be skipped during traversal. The skipKeys are applied to every descendants\n * @returns {boolean} Whether the traversal stops early\n\n * @note This function does not visit the given `node`.\n */\nexport function traverseNode<S = unknown>(\n  node: t.Node,\n  opts: ExplodedTraverseOptions<S>,\n  scope?: Scope,\n  state?: S,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n  visitSelf?: boolean,\n): boolean {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n\n  const context = new TraversalContext<S>(scope, opts, state, path);\n  if (visitSelf) {\n    if (skipKeys?.[path.parentKey]) return false;\n    return context.visitQueue([path]);\n  }\n\n  for (const key of keys) {\n    if (skipKeys?.[key]) continue;\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n", "import type Scope from \"./scope/index.ts\";\nimport type { Node } from \"@babel/types\";\n\nexport interface HubInterface {\n  getCode(): string | void;\n  getScope(): Scope | void;\n  addHelper(name: string): any;\n  buildError(node: Node, msg: string, Error: new () => Error): Error;\n}\n\nexport default class Hub implements HubInterface {\n  getCode() {}\n\n  getScope() {}\n\n  addHelper() {\n    throw new Error(\"Helpers are not supported by the default hub.\");\n  }\n\n  buildError(node: Node, msg: string, Error = TypeError): Error {\n    return new Error(msg);\n  }\n}\n", "import * as visitors from \"./visitors.ts\";\nimport {\n  VISITOR_KEYS,\n  removeProperties,\n  type RemovePropertiesOptions,\n  traverseFast,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as cache from \"./cache.ts\";\nimport type NodePath from \"./path/index.ts\";\nimport type { default as Scope, Binding } from \"./scope/index.ts\";\nimport type { ExplodedVisitor, Visitor, VisitorBase } from \"./types.ts\";\nimport { traverseNode } from \"./traverse-node.ts\";\n\nexport type { ExplodedVisitor, Visitor, VisitorBase, Binding };\nexport { default as NodePath } from \"./path/index.ts\";\nexport { default as Scope } from \"./scope/index.ts\";\nexport { default as Hub } from \"./hub.ts\";\nexport type { HubInterface } from \"./hub.ts\";\n\nexport { visitors };\n\nexport type TraverseOptions<S = t.Node> = {\n  scope?: Scope;\n  noScope?: boolean;\n  denylist?: string[];\n  shouldSkip?: (node: NodePath) => boolean;\n} & Visitor<S>;\n\nexport type ExplodedTraverseOptions<S = t.Node> = TraverseOptions<S> &\n  ExplodedVisitor<S>;\n\nfunction traverse<S>(\n  parent: t.Node,\n  opts: TraverseOptions<S>,\n  scope: Scope | undefined,\n  state: S,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n): void;\n\nfunction traverse(\n  parent: t.Node,\n  opts: TraverseOptions,\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n): void;\n\nfunction traverse<Options extends TraverseOptions>(\n  parent: t.Node,\n  // @ts-expect-error provide {} as default value for Options\n  opts: Options = {},\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n) {\n  if (!parent) return;\n\n  if (!opts.noScope && !scope) {\n    if (parent.type !== \"Program\" && parent.type !== \"File\") {\n      throw new Error(\n        \"You must pass a scope and parentPath unless traversing a Program/File. \" +\n          `Instead of that you tried to traverse a ${parent.type} node without ` +\n          \"passing scope and parentPath.\",\n      );\n    }\n  }\n\n  if (!parentPath && visitSelf) {\n    throw new Error(\"visitSelf can only be used when providing a NodePath.\");\n  }\n\n  if (!VISITOR_KEYS[parent.type]) {\n    return;\n  }\n\n  visitors.explode(opts as Visitor);\n\n  traverseNode(\n    parent,\n    opts as ExplodedVisitor,\n    scope,\n    state,\n    parentPath,\n    /* skipKeys */ null,\n    visitSelf,\n  );\n}\n\nexport default traverse;\n\ntraverse.visitors = visitors;\ntraverse.verify = visitors.verify;\ntraverse.explode = visitors.explode;\n\ntraverse.cheap = function (node: t.Node, enter: (node: t.Node) => void) {\n  traverseFast(node, enter);\n  return;\n};\n\ntraverse.node = function (\n  node: t.Node,\n  opts: ExplodedTraverseOptions,\n  scope?: Scope,\n  state?: any,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n) {\n  traverseNode(node, opts, scope, state, path, skipKeys);\n  // traverse.node always returns undefined\n};\n\ntraverse.clearNode = function (node: t.Node, opts?: RemovePropertiesOptions) {\n  removeProperties(node, opts);\n};\n\ntraverse.removeProperties = function (\n  tree: t.Node,\n  opts?: RemovePropertiesOptions,\n) {\n  traverseFast(tree, traverse.clearNode, opts);\n  return tree;\n};\n\ntype HasDenylistedTypeState = {\n  has: boolean;\n  type: t.Node[\"type\"];\n};\nfunction hasDenylistedType(path: NodePath, state: HasDenylistedTypeState) {\n  if (path.node.type === state.type) {\n    state.has = true;\n    path.stop();\n  }\n}\n\ntraverse.hasType = function (\n  tree: t.Node,\n  type: t.Node[\"type\"],\n  denylistTypes?: Array<string>,\n): boolean {\n  // the node we're searching in is denylisted\n  if (denylistTypes?.includes(tree.type)) return false;\n\n  // the type we're looking for is the same as the passed node\n  if (tree.type === type) return true;\n\n  const state: HasDenylistedTypeState = {\n    has: false,\n    type: type,\n  };\n\n  traverse(\n    tree,\n    {\n      noScope: true,\n      denylist: denylistTypes,\n      enter: hasDenylistedType,\n    },\n    null,\n    state,\n  );\n\n  return state.has;\n};\n\ntraverse.cache = cache;\n", "import assert from \"assert\";\nimport {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { Scope, HubInterface } from \"@babel/traverse\";\n\n/**\n * A class to track and accumulate mutations to the AST that will eventually\n * output a new require/import statement list.\n */\nexport default class ImportBuilder {\n  private _statements: t.Statement[] = [];\n  private _resultName: t.Identifier | t.MemberExpression = null;\n\n  declare _scope: Scope;\n  declare _hub: HubInterface;\n  private _importedSource: string;\n\n  constructor(importedSource: string, scope: Scope, hub: HubInterface) {\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName,\n    };\n  }\n\n  import() {\n    this._statements.push(\n      importDeclaration([], stringLiteral(this._importedSource)),\n    );\n    return this;\n  }\n\n  require() {\n    this._statements.push(\n      expressionStatement(\n        callExpression(identifier(\"require\"), [\n          stringLiteral(this._importedSource),\n        ]),\n      ),\n    );\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n  default(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importDefaultSpecifier(id)];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n  named(name: string, importName: string) {\n    if (importName === \"default\") return this.default(name);\n\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importSpecifier(id, identifier(importName))];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  var(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n    if (statement.type !== \"ExpressionStatement\") {\n      assert(this._resultName);\n      statement = expressionStatement(this._resultName);\n      this._statements.push(statement);\n    }\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [\n      variableDeclarator(id, statement.expression),\n    ]);\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee: t.Expression) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = callExpression(callee, [\n        statement.declarations[0].init,\n      ]);\n    } else {\n      assert.fail(\"Unexpected type.\");\n    }\n    return this;\n  }\n\n  prop(name: string) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(\n        statement.expression,\n        identifier(name),\n      );\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = memberExpression(\n        statement.declarations[0].init,\n        identifier(name),\n      );\n    } else {\n      assert.fail(\"Unexpected type:\" + statement.type);\n    }\n    return this;\n  }\n\n  read(name: string) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n}\n", "import type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\n/**\n * A small utility to check if a file qualifies as a module.\n */\nexport default function isModule(path: NodePath<t.Program>) {\n  return path.node.sourceType === \"module\";\n}\n", "import assert from \"assert\";\nimport {\n  identifier,\n  importSpecifier,\n  numericLiteral,\n  sequenceExpression,\n  isImportDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope, HubInterface } from \"@babel/traverse\";\n\nimport ImportBuilder from \"./import-builder.ts\";\nimport isModule from \"./is-module.ts\";\n\nexport type ImportOptions = {\n  /**\n   * The module being referenced.\n   */\n  importedSource: string | null;\n  /**\n   * The type of module being imported:\n   *\n   *  * 'es6'      - An ES6 module.\n   *  * 'commonjs' - A CommonJS module. (Default)\n   */\n  importedType: \"es6\" | \"commonjs\";\n  /**\n   * The type of interop behavior for namespace/default/named when loading\n   * CommonJS modules.\n   *\n   * ## 'babel' (Default)\n   *\n   * Load using Babel's interop.\n   *\n   * If '.__esModule' is true, treat as 'compiled', else:\n   *\n   * * Namespace: A copy of the module.exports with .default\n   *     populated by the module.exports object.\n   * * Default: The module.exports value.\n   * * Named: The .named property of module.exports.\n   *\n   * The 'ensureLiveReference' has no effect on the liveness of these.\n   *\n   * ## 'compiled'\n   *\n   * Assume the module is ES6 compiled to CommonJS. Useful to avoid injecting\n   * interop logic if you are confident that the module is a certain format.\n   *\n   * * Namespace: The root module.exports object.\n   * * Default: The .default property of the namespace.\n   * * Named: The .named property of the namespace.\n   *\n   * Will return erroneous results if the imported module is _not_ compiled\n   * from ES6 with Babel.\n   *\n   * ## 'uncompiled'\n   *\n   * Assume the module is _not_ ES6 compiled to CommonJS. Used a simplified\n   * access pattern that doesn't require additional function calls.\n   *\n   * Will return erroneous results if the imported module _is_ compiled\n   * from ES6 with Babel.\n   *\n   * * Namespace: The module.exports object.\n   * * Default: The module.exports object.\n   * * Named: The .named property of module.exports.\n   */\n  importedInterop: \"babel\" | \"node\" | \"compiled\" | \"uncompiled\";\n  /**\n   * The type of CommonJS interop included in the environment that will be\n   * loading the output code.\n   *\n   *  * 'babel' - CommonJS modules load with Babel's interop. (Default)\n   *  * 'node'  - CommonJS modules load with Node's interop.\n   *\n   * See descriptions in 'importedInterop' for more details.\n   */\n  importingInterop: \"babel\" | \"node\";\n  /**\n   * Define whether we explicitly care that the import be a live reference.\n   * Only applies when importing default and named imports, not the namespace.\n   *\n   *  * true  - Force imported values to be live references.\n   *  * false - No particular requirements. Keeps the code simplest. (Default)\n   */\n  ensureLiveReference: boolean;\n  /**\n   * Define if we explicitly care that the result not be a property reference.\n   *\n   *  * true  - Force calls to exclude context. Useful if the value is going to\n   *            be used as function callee.\n   *  * false - No particular requirements for context of the access. (Default)\n   */\n  ensureNoContext: boolean;\n  /**\n   * Define whether the import should be loaded before or after the existing imports.\n   * \"after\" is only allowed inside ECMAScript modules, since it's not possible to\n   * reliably pick the location _after_ require() calls but _before_ other code in CJS.\n   */\n  importPosition: \"before\" | \"after\";\n\n  nameHint?: string;\n  blockHoist?: number;\n};\n\n/**\n * A general helper classes add imports via transforms. See README for usage.\n */\nexport default class ImportInjector {\n  /**\n   * The path used for manipulation.\n   */\n  declare _programPath: NodePath<t.Program>;\n\n  /**\n   * The scope used to generate unique variable names.\n   */\n  declare _programScope: Scope;\n\n  /**\n   * The file used to inject helpers and resolve paths.\n   */\n  declare _hub: HubInterface;\n\n  /**\n   * The default options to use with this instance when imports are added.\n   */\n  _defaultOpts: ImportOptions = {\n    importedSource: null,\n    importedType: \"commonjs\",\n    importedInterop: \"babel\",\n    importingInterop: \"babel\",\n    ensureLiveReference: false,\n    ensureNoContext: false,\n    importPosition: \"before\",\n  };\n\n  constructor(\n    path: NodePath,\n    importedSource?: string,\n    opts?: Partial<ImportOptions>,\n  ) {\n    const programPath = path.find(p => p.isProgram()) as NodePath<t.Program>;\n\n    this._programPath = programPath;\n    this._programScope = programPath.scope;\n    this._hub = programPath.hub;\n\n    this._defaultOpts = this._applyDefaults(importedSource, opts, true);\n  }\n\n  addDefault(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this.addNamed(\"default\", importedSourceIn, opts);\n  }\n\n  addNamed(\n    importName: string,\n    importedSourceIn: string,\n    opts: Partial<ImportOptions>,\n  ) {\n    assert(typeof importName === \"string\");\n\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      importName,\n    );\n  }\n\n  addNamespace(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      null,\n    );\n  }\n\n  addSideEffect(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      void 0,\n    );\n  }\n\n  _applyDefaults(\n    importedSource: string | Partial<ImportOptions>,\n    opts: Partial<ImportOptions> | undefined,\n    isInit = false,\n  ) {\n    let newOpts: ImportOptions;\n    if (typeof importedSource === \"string\") {\n      newOpts = { ...this._defaultOpts, importedSource, ...opts };\n    } else {\n      assert(!opts, \"Unexpected secondary arguments.\");\n      newOpts = { ...this._defaultOpts, ...importedSource };\n    }\n\n    if (!isInit && opts) {\n      if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;\n      if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;\n    }\n    return newOpts;\n  }\n\n  _generateImport(\n    opts: Partial<ImportOptions>,\n    importName: string | null | undefined,\n  ) {\n    const isDefault = importName === \"default\";\n    const isNamed = !!importName && !isDefault;\n    const isNamespace = importName === null;\n\n    const {\n      importedSource,\n      importedType,\n      importedInterop,\n      importingInterop,\n      ensureLiveReference,\n      ensureNoContext,\n      nameHint,\n      importPosition,\n\n      // Not meant for public usage. Allows code that absolutely must control\n      // ordering to set a specific hoist value on the import nodes.\n      // This is ignored when \"importPosition\" is \"after\".\n      blockHoist,\n    } = opts;\n\n    // Provide a hint for generateUidIdentifier for the local variable name\n    // to use for the import, if the code will generate a simple assignment\n    // to a variable.\n    let name = nameHint || importName;\n\n    const isMod = isModule(this._programPath);\n    const isModuleForNode = isMod && importingInterop === \"node\";\n    const isModuleForBabel = isMod && importingInterop === \"babel\";\n\n    if (importPosition === \"after\" && !isMod) {\n      throw new Error(`\"importPosition\": \"after\" is only supported in modules`);\n    }\n\n    const builder = new ImportBuilder(\n      importedSource,\n      this._programScope,\n      this._hub,\n    );\n\n    if (importedType === \"es6\") {\n      if (!isModuleForNode && !isModuleForBabel) {\n        throw new Error(\"Cannot import an ES6 module from CommonJS\");\n      }\n\n      // import * as namespace from ''; namespace\n      // import def from ''; def\n      // import { named } from ''; named\n      builder.import();\n      if (isNamespace) {\n        builder.namespace(nameHint || importedSource);\n      } else if (isDefault || isNamed) {\n        builder.named(name, importName);\n      }\n    } else if (importedType !== \"commonjs\") {\n      throw new Error(`Unexpected interopType \"${importedType}\"`);\n    } else if (importedInterop === \"babel\") {\n      if (isModuleForNode) {\n        // import _tmp from ''; var namespace = interopRequireWildcard(_tmp); namespace\n        // import _tmp from ''; var def = interopRequireDefault(_tmp).default; def\n        // import _tmp from ''; _tmp.named\n        name = name !== \"default\" ? name : importedSource;\n        const es6Default = `${importedSource}$es6Default`;\n\n        builder.import();\n        if (isNamespace) {\n          builder\n            .default(es6Default)\n            .var(name || importedSource)\n            .wildcardInterop();\n        } else if (isDefault) {\n          if (ensureLiveReference) {\n            builder\n              .default(es6Default)\n              .var(name || importedSource)\n              .defaultInterop()\n              .read(\"default\");\n          } else {\n            builder\n              .default(es6Default)\n              .var(name)\n              .defaultInterop()\n              .prop(importName);\n          }\n        } else if (isNamed) {\n          builder.default(es6Default).read(importName);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = interopRequireWildcard(require(''));\n        // var def = interopRequireDefault(require('')).default; def\n        // var named = require('').named; named\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource).wildcardInterop();\n        } else if ((isDefault || isNamed) && ensureLiveReference) {\n          if (isDefault) {\n            name = name !== \"default\" ? name : importedSource;\n            builder.var(name).read(importName);\n            builder.defaultInterop();\n          } else {\n            builder.var(importedSource).read(importName);\n          }\n        } else if (isDefault) {\n          builder.var(name).defaultInterop().prop(importName);\n        } else if (isNamed) {\n          builder.var(name).prop(importName);\n        }\n      }\n    } else if (importedInterop === \"compiled\") {\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import namespace from ''; namespace.default\n        // import namespace from ''; namespace.named\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        // Note: These lookups will break if the module has no __esModule set,\n        // hence the warning that 'compiled' will not work on standard CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var namespace = require(''); namespace.default\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault || isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.prop(importName).var(name);\n          }\n        }\n      }\n    } else if (importedInterop === \"uncompiled\") {\n      if (isDefault && ensureLiveReference) {\n        throw new Error(\"No live reference for commonjs default\");\n      }\n\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import def from ''; def;\n        // import namespace from ''; namespace.named\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import namespace from '';\n        // import def from '';\n        // import { named } from ''; named;\n        // Note: These lookups will break if the module has __esModule set,\n        // hence the warning that 'uncompiled' will not work on ES6 transpiled\n        // to CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var def = require(''); def\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault) {\n          builder.var(name);\n        } else if (isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.var(name).prop(importName);\n          }\n        }\n      }\n    } else {\n      throw new Error(`Unknown importedInterop \"${importedInterop}\".`);\n    }\n\n    const { statements, resultName } = builder.done();\n\n    this._insertStatements(statements, importPosition, blockHoist);\n\n    if (\n      (isDefault || isNamed) &&\n      ensureNoContext &&\n      resultName.type !== \"Identifier\"\n    ) {\n      return sequenceExpression([numericLiteral(0), resultName]);\n    }\n    return resultName;\n  }\n\n  _insertStatements(\n    statements: t.Statement[],\n    importPosition = \"before\",\n    blockHoist = 3,\n  ) {\n    if (importPosition === \"after\") {\n      if (this._insertStatementsAfter(statements)) return;\n    } else {\n      if (this._insertStatementsBefore(statements, blockHoist)) return;\n    }\n\n    this._programPath.unshiftContainer(\"body\", statements);\n  }\n\n  _insertStatementsBefore(statements: t.Statement[], blockHoist: number) {\n    if (\n      statements.length === 1 &&\n      isImportDeclaration(statements[0]) &&\n      isValueImport(statements[0])\n    ) {\n      const firstImportDecl = this._programPath\n        .get(\"body\")\n        .find((p): p is NodePath<t.ImportDeclaration> => {\n          return p.isImportDeclaration() && isValueImport(p.node);\n        });\n\n      if (\n        firstImportDecl?.node.source.value === statements[0].source.value &&\n        maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])\n      ) {\n        return true;\n      }\n    }\n\n    statements.forEach(node => {\n      // @ts-expect-error handle _blockHoist\n      node._blockHoist = blockHoist;\n    });\n\n    const targetPath = this._programPath.get(\"body\").find(p => {\n      // @ts-expect-error todo(flow->ts): avoid mutations\n      const val = p.node._blockHoist;\n      return Number.isFinite(val) && val < 4;\n    });\n\n    if (targetPath) {\n      targetPath.insertBefore(statements);\n      return true;\n    }\n\n    return false;\n  }\n\n  _insertStatementsAfter(statements: t.Statement[]): boolean {\n    const statementsSet = new Set(statements);\n    const importDeclarations: Map<string, t.ImportDeclaration[]> = new Map();\n\n    for (const statement of statements) {\n      if (isImportDeclaration(statement) && isValueImport(statement)) {\n        const source = statement.source.value;\n        if (!importDeclarations.has(source)) importDeclarations.set(source, []);\n        importDeclarations.get(source).push(statement);\n      }\n    }\n\n    let lastImportPath = null;\n    for (const bodyStmt of this._programPath.get(\"body\")) {\n      if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {\n        lastImportPath = bodyStmt;\n\n        const source = bodyStmt.node.source.value;\n        const newImports = importDeclarations.get(source);\n        if (!newImports) continue;\n\n        for (const decl of newImports) {\n          if (!statementsSet.has(decl)) continue;\n          if (maybeAppendImportSpecifiers(bodyStmt.node, decl)) {\n            statementsSet.delete(decl);\n          }\n        }\n      }\n    }\n\n    if (statementsSet.size === 0) return true;\n\n    if (lastImportPath) lastImportPath.insertAfter(Array.from(statementsSet));\n\n    return !!lastImportPath;\n  }\n}\n\nfunction isValueImport(node: t.ImportDeclaration) {\n  return node.importKind !== \"type\" && node.importKind !== \"typeof\";\n}\n\nfunction hasNamespaceImport(node: t.ImportDeclaration) {\n  return (\n    (node.specifiers.length === 1 &&\n      node.specifiers[0].type === \"ImportNamespaceSpecifier\") ||\n    (node.specifiers.length === 2 &&\n      node.specifiers[1].type === \"ImportNamespaceSpecifier\")\n  );\n}\n\nfunction hasDefaultImport(node: t.ImportDeclaration) {\n  return (\n    node.specifiers.length > 0 &&\n    node.specifiers[0].type === \"ImportDefaultSpecifier\"\n  );\n}\n\nfunction maybeAppendImportSpecifiers(\n  target: t.ImportDeclaration,\n  source: t.ImportDeclaration,\n): boolean {\n  if (!target.specifiers.length) {\n    target.specifiers = source.specifiers;\n    return true;\n  }\n  if (!source.specifiers.length) return true;\n\n  if (hasNamespaceImport(target) || hasNamespaceImport(source)) return false;\n\n  if (hasDefaultImport(source)) {\n    if (hasDefaultImport(target)) {\n      source.specifiers[0] = importSpecifier(\n        source.specifiers[0].local,\n        identifier(\"default\"),\n      );\n    } else {\n      target.specifiers.unshift(source.specifiers.shift());\n    }\n  }\n\n  target.specifiers.push(...source.specifiers);\n\n  return true;\n}\n", "import ImportInjector, { type ImportOptions } from \"./import-injector.ts\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport { ImportInjector };\n\nexport { default as isModule } from \"./is-module.ts\";\n\nexport function addDefault(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addDefault(importedSource, opts);\n}\n\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<\n    Partial<ImportOptions>,\n    \"ensureLiveReference\" | \"ensureNoContext\"\n  >,\n): t.Identifier;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureLiveReference\"> & {\n    ensureLiveReference: true;\n  },\n): t.MemberExpression;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureNoContext\"> & {\n    ensureNoContext: true;\n  },\n): t.SequenceExpression;\n/**\n * add a named import to the program path of given path\n *\n * @export\n * @param {NodePath} path The starting path to find a program path\n * @param {string} name The name of the generated binding. Babel will prefix it with `_`\n * @param {string} importedSource The source of the import\n * @param {Partial<ImportOptions>} [opts]\n * @returns {t.Identifier | t.MemberExpression | t.SequenceExpression} If opts.ensureNoContext is true, returns a SequenceExpression,\n *   else if opts.ensureLiveReference is true, returns a MemberExpression, else returns an Identifier\n */\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamed(name, importedSource, opts);\n}\nexport { addNamed };\n\nexport function addNamespace(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamespace(importedSource, opts);\n}\n\nexport function addSideEffect(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addSideEffect(importedSource, opts);\n}\n", "import environmentVisitor from \"@babel/helper-environment-visitor\";\nimport { traverse, types as t } from \"@babel/core\";\nconst { numericLiteral, unaryExpression } = t;\n\nimport type { NodePath, Visitor } from \"@babel/core\";\n\n/**\n * A visitor to walk the tree, rewriting all `this` references in the top-level scope to be\n * `void 0` (undefined).\n */\nconst rewriteThisVisitor: Visitor = traverse.visitors.merge([\n  environmentVisitor,\n  {\n    ThisExpression(path) {\n      path.replaceWith(unaryExpression(\"void\", numericLiteral(0), true));\n    },\n  },\n]);\n\nexport default function rewriteThis(programPath: NodePath) {\n  // Rewrite \"this\" to be \"undefined\".\n  traverse(programPath.node, { ...rewriteThisVisitor, noScope: true });\n}\n", "import {\n  LOGICAL_OPERATORS,\n  assignmentExpression,\n  binaryExpression,\n  cloneNode,\n  identifier,\n  logicalExpression,\n  numericLiteral,\n  sequenceExpression,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\n\ntype State = {\n  scope: Scope;\n  bindingNames: Set<string>;\n  seen: WeakSet<t.Node>;\n};\n\nconst simpleAssignmentVisitor: Visitor<State> = {\n  AssignmentExpression: {\n    exit(path) {\n      const { scope, seen, bindingNames } = this;\n\n      if (path.node.operator === \"=\") return;\n\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n\n      const left = path.get(\"left\");\n      if (!left.isIdentifier()) return;\n\n      // Simple update-assign foo += 1;\n      // =>   exports.foo =  (foo += 1);\n      const localName = left.node.name;\n\n      if (!bindingNames.has(localName)) return;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const operator = path.node.operator.slice(0, -1);\n      if (LOGICAL_OPERATORS.includes(operator)) {\n        // &&, ||, ??\n        // (foo &&= bar) => (foo && foo = bar)\n        path.replaceWith(\n          logicalExpression(\n            // @ts-expect-error Guarded by LOGICAL_OPERATORS.includes\n            operator,\n            path.node.left,\n            assignmentExpression(\n              \"=\",\n              cloneNode(path.node.left),\n              path.node.right,\n            ),\n          ),\n        );\n      } else {\n        // (foo += bar) => (foo = foo + bar)\n        path.node.right = binaryExpression(\n          // @ts-expect-error An assignment expression operator removing \"=\" must\n          // be a valid binary operator\n          operator,\n          cloneNode(path.node.left),\n          path.node.right,\n        );\n        path.node.operator = \"=\";\n      }\n    },\n  },\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  simpleAssignmentVisitor.UpdateExpression = {\n    exit(path) {\n      // @ts-expect-error This is Babel7-only\n      if (!this.includeUpdateExpression) return;\n\n      const { scope, bindingNames } = this;\n\n      const arg = path.get(\"argument\");\n      if (!arg.isIdentifier()) return;\n      const localName = arg.node.name;\n\n      if (!bindingNames.has(localName)) return;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      if (\n        path.parentPath.isExpressionStatement() &&\n        !path.isCompletionRecord()\n      ) {\n        // ++i => (i += 1);\n        const operator = path.node.operator === \"++\" ? \"+=\" : \"-=\";\n        path.replaceWith(\n          assignmentExpression(operator, arg.node, numericLiteral(1)),\n        );\n      } else if (path.node.prefix) {\n        // ++i => (i = (+i) + 1);\n        path.replaceWith(\n          assignmentExpression(\n            \"=\",\n            identifier(localName),\n            binaryExpression(\n              path.node.operator[0] as \"+\" | \"-\",\n              unaryExpression(\"+\", arg.node),\n              numericLiteral(1),\n            ),\n          ),\n        );\n      } else {\n        const old = path.scope.generateUidIdentifierBasedOnNode(\n          arg.node,\n          \"old\",\n        );\n        const varName = old.name;\n        path.scope.push({ id: old });\n\n        const binary = binaryExpression(\n          path.node.operator[0] as \"+\" | \"-\",\n          identifier(varName),\n          // todo: support bigint\n          numericLiteral(1),\n        );\n\n        // i++ => (_old = (+i), i = _old + 1, _old)\n        path.replaceWith(\n          sequenceExpression([\n            assignmentExpression(\n              \"=\",\n              identifier(varName),\n              unaryExpression(\"+\", arg.node),\n            ),\n            assignmentExpression(\"=\", cloneNode(arg.node), binary),\n            identifier(varName),\n          ]),\n        );\n      }\n    },\n  };\n}\n\nexport default function simplifyAccess(\n  path: NodePath,\n  bindingNames: Set<string>,\n) {\n  if (process.env.BABEL_8_BREAKING) {\n    path.traverse(simpleAssignmentVisitor, {\n      scope: path.scope,\n      bindingNames,\n      seen: new WeakSet(),\n    });\n  } else {\n    path.traverse(simpleAssignmentVisitor, {\n      scope: path.scope,\n      bindingNames,\n      seen: new WeakSet(),\n      // @ts-expect-error This is Babel7-only\n      includeUpdateExpression: arguments[2] ?? true,\n    });\n  }\n}\n", "import assert from \"assert\";\nimport { template, types as t } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/core\";\nimport simplifyAccess from \"@babel/helper-simple-access\";\n\nimport type { ModuleMetadata } from \"./normalize-and-load-metadata.ts\";\n\nconst {\n  assignmentExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isArrowFunctionExpression,\n  isClassExpression,\n  isFunctionExpression,\n  isIdentifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} = t;\n\ninterface RewriteReferencesVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n  imported: Map<any, any>;\n  buildImportReference: (\n    [source, importName, localName]: readonly [string, string, string],\n    identNode: t.Identifier | t.CallExpression | t.JSXIdentifier,\n  ) => any;\n  seen: WeakSet<object>;\n}\n\ninterface RewriteBindingInitVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n}\n\nfunction isInType(path: NodePath) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n      case \"ExportSpecifier\":\n        return (\n          (\n            path.parentPath.parent as\n              | t.ExportDefaultDeclaration\n              | t.ExportNamedDeclaration\n          ).exportKind === \"type\"\n        );\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n    }\n  } while ((path = path.parentPath));\n}\n\nexport default function rewriteLiveReferences(\n  programPath: NodePath<t.Program>,\n  metadata: ModuleMetadata,\n  wrapReference: (ref: t.Expression, payload: unknown) => null | t.Expression,\n) {\n  const imported = new Map();\n  const exported = new Map();\n  const requeueInParent = (path: NodePath) => {\n    // Manually re-queue `exports.default =` expressions so that the ES3\n    // transform has an opportunity to convert them. Ideally this would\n    // happen automatically from the replaceWith above. See #4140 for\n    // more info.\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  // Rewrite initialization of bindings to update exports.\n  const rewriteBindingInitVisitorState: RewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported, // local name => exported name list\n  };\n  programPath.traverse(\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    rewriteBindingInitVisitor,\n    rewriteBindingInitVisitorState,\n  );\n\n  // NOTE(logan): The 'Array.from' calls are to make this code with in loose mode.\n  const bindingNames = new Set([\n    ...Array.from(imported.keys()),\n    ...Array.from(exported.keys()),\n  ]);\n  if (process.env.BABEL_8_BREAKING) {\n    simplifyAccess(programPath, bindingNames);\n  } else {\n    // @ts-ignore(Babel 7 vs Babel 8) The third param has been removed in Babel 8.\n    simplifyAccess(programPath, bindingNames, false);\n  }\n\n  // Rewrite reads/writes from imports and exports to have the correct behavior.\n  const rewriteReferencesVisitorState: RewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported, // local / import\n    exported, // local name => exported name list\n    buildImportReference([source, importName, localName], identNode) {\n      const meta = metadata.source.get(source);\n      meta.referenced = true;\n\n      if (localName) {\n        if (meta.wrap) {\n          // @ts-expect-error Fixme: we should handle the case when identNode is a JSXIdentifier\n          identNode = wrapReference(identNode, meta.wrap) ?? identNode;\n        }\n        return identNode;\n      }\n\n      let namespace: t.Expression = identifier(meta.name);\n      if (meta.wrap) {\n        namespace = wrapReference(namespace, meta.wrap) ?? namespace;\n      }\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n\n      return memberExpression(\n        namespace,\n        computed ? stringLiteral(importName) : identifier(importName),\n        computed,\n      );\n    },\n  };\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\n/**\n * A visitor to inject export update statements during binding initialization.\n */\nconst rewriteBindingInitVisitor: Visitor<RewriteBindingInitVisitorState> = {\n  Scope(path) {\n    path.skip();\n  },\n  ClassDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    const { id } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n\n    const exportNames = exported.get(localName) || [];\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        buildBindingExportAssignmentExpression(\n          metadata,\n          exportNames,\n          identifier(localName),\n          path.scope,\n        ),\n      );\n      // @ts-expect-error todo(flow->ts): avoid mutations\n      statement._blockHoist = path.node._blockHoist;\n\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n  VariableDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    const isVar = path.node.kind === \"var\";\n\n    for (const decl of path.get(\"declarations\")) {\n      const { id } = decl.node;\n      let { init } = decl.node;\n      if (\n        isIdentifier(id) &&\n        exported.has(id.name) &&\n        !isArrowFunctionExpression(init) &&\n        (!isFunctionExpression(init) || init.id) &&\n        (!isClassExpression(init) || init.id)\n      ) {\n        if (!init) {\n          if (isVar) {\n            // This variable might have already been assigned to, and the\n            // uninitalized declaration doesn't set it to `undefined` and does\n            // not updated the exported value.\n            continue;\n          } else {\n            init = path.scope.buildUndefinedNode();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        decl.node.init = buildBindingExportAssignmentExpression(\n          metadata,\n          exported.get(id.name),\n          init,\n          path.scope,\n        );\n        requeueInParent(decl.get(\"init\"));\n      } else {\n        for (const localName of Object.keys(\n          decl.getOuterBindingIdentifiers(),\n        )) {\n          if (exported.has(localName)) {\n            const statement = expressionStatement(\n              // eslint-disable-next-line @typescript-eslint/no-use-before-define\n              buildBindingExportAssignmentExpression(\n                metadata,\n                exported.get(localName),\n                identifier(localName),\n                path.scope,\n              ),\n            );\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            statement._blockHoist = path.node._blockHoist;\n\n            requeueInParent(path.insertAfter(statement)[0]);\n          }\n        }\n      }\n    }\n  },\n};\n\nconst buildBindingExportAssignmentExpression = (\n  metadata: ModuleMetadata,\n  exportNames: string[],\n  localExpr: t.Expression,\n  scope: Scope,\n) => {\n  const exportsObjectName = metadata.exportName;\n  for (\n    let currentScope = scope;\n    currentScope != null;\n    currentScope = currentScope.parent\n  ) {\n    if (currentScope.hasOwnBinding(exportsObjectName)) {\n      currentScope.rename(exportsObjectName);\n    }\n  }\n  return (exportNames || []).reduce((expr, exportName) => {\n    // class Foo {} export { Foo, Foo as Bar };\n    // as\n    // class Foo {} exports.Foo = exports.Bar = Foo;\n    const { stringSpecifiers } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\n      \"=\",\n      memberExpression(\n        identifier(exportsObjectName),\n        computed ? stringLiteral(exportName) : identifier(exportName),\n        /* computed */ computed,\n      ),\n      expr,\n    );\n  }, localExpr);\n};\n\nconst buildImportThrow = (localName: string) => {\n  return template.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor: Visitor<RewriteReferencesVisitorState> = {\n  ReferencedIdentifier(path) {\n    const { seen, buildImportReference, scope, imported, requeueInParent } =\n      this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n\n    const localName = path.node.name;\n\n    const importData = imported.get(localName);\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(\n          `Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` +\n            `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`,\n        );\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n\n      // redeclared in this scope\n      if (rootBinding !== localBinding) return;\n\n      const ref = buildImportReference(importData, path.node);\n\n      // Preserve the binding location so that sourcemaps are nicer.\n      ref.loc = path.node.loc;\n\n      if (\n        (path.parentPath.isCallExpression({ callee: path.node }) ||\n          path.parentPath.isOptionalCallExpression({ callee: path.node }) ||\n          path.parentPath.isTaggedTemplateExpression({ tag: path.node })) &&\n        isMemberExpression(ref)\n      ) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const { object, property } = ref;\n        path.replaceWith(\n          jsxMemberExpression(\n            // @ts-expect-error todo(flow->ts): possible bug `object` might not have a name\n            jsxIdentifier(object.name),\n            // @ts-expect-error todo(flow->ts): possible bug `property` might not have a name\n            jsxIdentifier(property.name),\n          ),\n        );\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n\n      // The path could have been replaced with an identifier that would\n      // otherwise be re-visited, so we skip processing its children.\n      path.skip();\n    }\n  },\n\n  UpdateExpression(path) {\n    const {\n      scope,\n      seen,\n      imported,\n      exported,\n      requeueInParent,\n      buildImportReference,\n    } = this;\n\n    if (seen.has(path.node)) return;\n\n    seen.add(path.node);\n\n    const arg = path.get(\"argument\");\n\n    // No change needed\n    if (arg.isMemberExpression()) return;\n\n    const update = path.node;\n\n    if (arg.isIdentifier()) {\n      const localName = arg.node.name;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const exportedNames = exported.get(localName);\n      const importData = imported.get(localName);\n\n      if (exportedNames?.length > 0 || importData) {\n        if (importData) {\n          path.replaceWith(\n            assignmentExpression(\n              update.operator[0] + \"=\",\n              buildImportReference(importData, arg.node),\n              buildImportThrow(localName),\n            ),\n          );\n        } else if (update.prefix) {\n          // ++foo\n          // =>   exports.foo = ++foo\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              cloneNode(update),\n              path.scope,\n            ),\n          );\n        } else {\n          // foo++\n          // =>   (ref = i++, exports.i = i, ref)\n          const ref = scope.generateDeclaredUidIdentifier(localName);\n\n          path.replaceWith(\n            sequenceExpression([\n              assignmentExpression(\"=\", cloneNode(ref), cloneNode(update)),\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n              cloneNode(ref),\n            ]),\n          );\n        }\n      }\n    }\n\n    requeueInParent(path);\n    path.skip();\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference,\n      } = this;\n\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n\n      const left = path.get(\"left\");\n\n      // No change needed\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        // Simple update-assign foo += 1; export { foo };\n        // =>   exports.foo =  (foo += 1);\n        const localName = left.node.name;\n\n        // redeclared in this scope\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n        if (exportedNames?.length > 0 || importData) {\n          assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, left.node);\n\n            assignment.right = sequenceExpression([\n              assignment.right,\n              buildImportThrow(localName),\n            ]);\n          }\n\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              assignment,\n              path.scope,\n            ),\n          );\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(\n          localName =>\n            scope.getBinding(localName) === path.scope.getBinding(localName),\n        );\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([\n            path.node.right,\n            buildImportThrow(id),\n          ]);\n        }\n\n        // Complex ({a, b, c} = {}); export { a, c };\n        // =>   ({a, b, c} = {}), (exports.a = a, exports.c = c);\n        const items: t.Expression[] = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n          if (exportedNames.length > 0) {\n            items.push(\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n            );\n          }\n        });\n\n        if (items.length > 0) {\n          let node: t.Node = sequenceExpression(items);\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    },\n  },\n  \"ForOfStatement|ForInStatement\"(\n    path: NodePath<t.ForOfStatement | t.ForInStatement>,\n  ) {\n    const { scope, node } = path;\n    const { left } = node;\n    const { exported, imported, scope: programScope } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n        importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\") as NodePath<t.BlockStatement>;\n\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path\n        .get(\"left\")\n        .replaceWith(\n          variableDeclaration(\"let\", [\n            variableDeclarator(cloneNode(newLoopId)),\n          ]),\n        );\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(assignmentExpression(\"=\", left, newLoopId)),\n        );\n      }\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(buildImportThrow(importConstViolationName)),\n        );\n      }\n    }\n  },\n};\n", "import { basename, extname } from \"path\";\nimport type { types as t, NodePath } from \"@babel/core\";\n\nimport { isIdentifierName } from \"@babel/helper-validator-identifier\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\n\nexport interface ModuleMetadata {\n  exportName: string;\n  // The name of the variable that will reference an object containing export names.\n  exportNameListName: null | string;\n  hasExports: boolean;\n  // Lookup from local binding to export information.\n  local: Map<string, LocalExportMetadata>;\n  // Lookup of source file to source file metadata.\n  source: Map<string, SourceModuleMetadata>;\n  // List of names that should only be printed as string literals.\n  // i.e. `import { \"any unicode\" as foo } from \"some-module\"`\n  // `stringSpecifiers` is Set(1) [\"any unicode\"]\n  // In most cases `stringSpecifiers` is an empty Set\n  stringSpecifiers: Set<string>;\n}\n\nexport type InteropType =\n  | \"default\" // Babel interop for default-only imports\n  | \"namespace\" // Babel interop for namespace or default+named imports\n  | \"node-default\" // Node.js interop for default-only imports\n  | \"node-namespace\" // Node.js interop for namespace or default+named imports\n  | \"none\"; // No interop, or named-only imports\n\nexport type ImportInterop =\n  | \"none\"\n  | \"babel\"\n  | \"node\"\n  | ((source: string, filename?: string) => \"none\" | \"babel\" | \"node\");\n\nexport interface SourceModuleMetadata {\n  // A unique variable name to use for this namespace object. Centralized for simplicity.\n  name: string;\n  loc: t.SourceLocation | undefined | null;\n  interop: InteropType;\n  // Local binding to reference from this source namespace. Key: Local name, value: Import name\n  imports: Map<string, string>;\n  // Local names that reference namespace object.\n  importsNamespace: Set<string>;\n  // Reexports to create for namespace. Key: Export name, value: Import name\n  reexports: Map<string, string>;\n  // List of names to re-export namespace as.\n  reexportNamespace: Set<string>;\n  // Tracks if the source should be re-exported.\n  reexportAll: null | {\n    loc: t.SourceLocation | undefined | null;\n  };\n  wrap?: unknown;\n  referenced: boolean;\n}\n\nexport interface LocalExportMetadata {\n  names: Array<string>; // names of exports,\n  kind: \"import\" | \"hoisted\" | \"block\" | \"var\";\n}\n\n/**\n * Check if the module has any exports that need handling.\n */\nexport function hasExports(metadata: ModuleMetadata) {\n  return metadata.hasExports;\n}\n\n/**\n * Check if a given source is an anonymous import, e.g. \"import 'foo';\"\n */\nexport function isSideEffectImport(source: SourceModuleMetadata) {\n  return (\n    source.imports.size === 0 &&\n    source.importsNamespace.size === 0 &&\n    source.reexports.size === 0 &&\n    source.reexportNamespace.size === 0 &&\n    !source.reexportAll\n  );\n}\n\nexport function validateImportInteropOption(\n  importInterop: any,\n): importInterop is ImportInterop {\n  if (\n    typeof importInterop !== \"function\" &&\n    importInterop !== \"none\" &&\n    importInterop !== \"babel\" &&\n    importInterop !== \"node\"\n  ) {\n    throw new Error(\n      `.importInterop must be one of \"none\", \"babel\", \"node\", or a function returning one of those values (received ${importInterop}).`,\n    );\n  }\n  return importInterop;\n}\n\nfunction resolveImportInterop(\n  importInterop: ImportInterop,\n  source: string,\n  filename: string | undefined,\n) {\n  if (typeof importInterop === \"function\") {\n    return validateImportInteropOption(importInterop(source, filename));\n  }\n  return importInterop;\n}\n\n/**\n * Remove all imports and exports from the file, and return all metadata\n * needed to reconstruct the module's behavior.\n */\nexport default function normalizeModuleAndLoadMetadata(\n  programPath: NodePath<t.Program>,\n  exportName: string,\n  {\n    importInterop,\n    initializeReexports = false,\n    getWrapperPayload,\n    esNamespaceOnly = false,\n    filename,\n  }: {\n    importInterop: ImportInterop;\n    initializeReexports: boolean | void;\n    getWrapperPayload?: (\n      source: string,\n      metadata: SourceModuleMetadata,\n      importNodes: t.Node[],\n    ) => unknown;\n    esNamespaceOnly: boolean;\n    filename: string;\n  },\n): ModuleMetadata {\n  if (!exportName) {\n    exportName = programPath.scope.generateUidIdentifier(\"exports\").name;\n  }\n  const stringSpecifiers = new Set<string>();\n\n  nameAnonymousExports(programPath);\n\n  const { local, sources, hasExports } = getModuleMetadata(\n    programPath,\n    { initializeReexports, getWrapperPayload },\n    stringSpecifiers,\n  );\n\n  removeImportExportDeclarations(programPath);\n\n  // Reuse the imported namespace name if there is one.\n  for (const [source, metadata] of sources) {\n    const { importsNamespace, imports } = metadata;\n    // If there is at least one namespace import and other imports, it may collipse with local ident, can be seen in issue 15879.\n    if (importsNamespace.size > 0 && imports.size === 0) {\n      const [nameOfnamespace] = importsNamespace;\n      metadata.name = nameOfnamespace;\n    }\n\n    const resolvedInterop = resolveImportInterop(\n      importInterop,\n      source,\n      filename,\n    );\n\n    if (resolvedInterop === \"none\") {\n      metadata.interop = \"none\";\n    } else if (resolvedInterop === \"node\" && metadata.interop === \"namespace\") {\n      metadata.interop = \"node-namespace\";\n    } else if (resolvedInterop === \"node\" && metadata.interop === \"default\") {\n      metadata.interop = \"node-default\";\n    } else if (esNamespaceOnly && metadata.interop === \"namespace\") {\n      // Both the default and namespace interops pass through __esModule\n      // objects, but the namespace interop is used to enable Babel's\n      // destructuring-like interop behavior for normal CommonJS.\n      // Since some tooling has started to remove that behavior, we expose\n      // it as the `esNamespace` option.\n      metadata.interop = \"default\";\n    }\n  }\n\n  return {\n    exportName,\n    exportNameListName: null,\n    hasExports,\n    local,\n    source: sources,\n    stringSpecifiers,\n  };\n}\n\nfunction getExportSpecifierName(\n  path: NodePath,\n  stringSpecifiers: Set<string>,\n): string {\n  if (path.isIdentifier()) {\n    return path.node.name;\n  } else if (path.isStringLiteral()) {\n    const stringValue = path.node.value;\n    // add specifier value to `stringSpecifiers` only when it can not be converted to an identifier name\n    // i.e In `import { \"foo\" as bar }`\n    // we do not consider `\"foo\"` to be a `stringSpecifier` because we can treat it as\n    // `import { foo as bar }`\n    // This helps minimize the size of `stringSpecifiers` and reduce overhead of checking valid identifier names\n    // when building transpiled code from metadata\n    if (!isIdentifierName(stringValue)) {\n      stringSpecifiers.add(stringValue);\n    }\n    return stringValue;\n  } else {\n    throw new Error(\n      `Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`,\n    );\n  }\n}\n\nfunction assertExportSpecifier(\n  path: NodePath,\n): asserts path is NodePath<t.ExportSpecifier> {\n  if (path.isExportSpecifier()) {\n    return;\n  } else if (path.isExportNamespaceSpecifier()) {\n    throw path.buildCodeFrameError(\n      \"Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.\",\n    );\n  } else {\n    throw path.buildCodeFrameError(\"Unexpected export specifier type\");\n  }\n}\n\n/**\n * Get metadata about the imports and exports present in this module.\n */\nfunction getModuleMetadata(\n  programPath: NodePath<t.Program>,\n  {\n    getWrapperPayload,\n    initializeReexports,\n  }: {\n    getWrapperPayload?: (\n      source: string,\n      metadata: SourceModuleMetadata,\n      importNodes: t.Node[],\n    ) => unknown;\n    initializeReexports: boolean | void;\n  },\n  stringSpecifiers: Set<string>,\n) {\n  const localData = getLocalExportMetadata(\n    programPath,\n    initializeReexports,\n    stringSpecifiers,\n  );\n\n  const importNodes = new Map<string, t.Node[]>();\n  const sourceData = new Map<string, SourceModuleMetadata>();\n  const getData = (sourceNode: t.StringLiteral, node: t.Node) => {\n    const source = sourceNode.value;\n\n    let data = sourceData.get(source);\n    if (!data) {\n      data = {\n        name: programPath.scope.generateUidIdentifier(\n          basename(source, extname(source)),\n        ).name,\n\n        interop: \"none\",\n\n        loc: null,\n\n        // Data about the requested sources and names.\n        imports: new Map(),\n        importsNamespace: new Set(),\n\n        // Metadata about data that is passed directly from source to export.\n        reexports: new Map(),\n        reexportNamespace: new Set(),\n        reexportAll: null,\n\n        wrap: null,\n\n        // @ts-expect-error lazy is not listed in the type.\n        // This is needed for compatibility with older version of the commonjs\n        // plusing.\n        // TODO(Babel 8): Remove this\n        get lazy() {\n          return this.wrap === \"lazy\";\n        },\n\n        referenced: false,\n      };\n      sourceData.set(source, data);\n      importNodes.set(source, [node]);\n    } else {\n      importNodes.get(source).push(node);\n    }\n    return data;\n  };\n  let hasExports = false;\n  programPath.get(\"body\").forEach(child => {\n    if (child.isImportDeclaration()) {\n      const data = getData(child.node.source, child.node);\n      if (!data.loc) data.loc = child.node.loc;\n\n      child.get(\"specifiers\").forEach(spec => {\n        if (spec.isImportDefaultSpecifier()) {\n          const localName = spec.get(\"local\").node.name;\n\n          data.imports.set(localName, \"default\");\n\n          const reexport = localData.get(localName);\n          if (reexport) {\n            localData.delete(localName);\n\n            reexport.names.forEach(name => {\n              data.reexports.set(name, \"default\");\n            });\n            data.referenced = true;\n          }\n        } else if (spec.isImportNamespaceSpecifier()) {\n          const localName = spec.get(\"local\").node.name;\n\n          data.importsNamespace.add(localName);\n          const reexport = localData.get(localName);\n          if (reexport) {\n            localData.delete(localName);\n\n            reexport.names.forEach(name => {\n              data.reexportNamespace.add(name);\n            });\n            data.referenced = true;\n          }\n        } else if (spec.isImportSpecifier()) {\n          const importName = getExportSpecifierName(\n            spec.get(\"imported\"),\n            stringSpecifiers,\n          );\n          const localName = spec.get(\"local\").node.name;\n\n          data.imports.set(localName, importName);\n\n          const reexport = localData.get(localName);\n          if (reexport) {\n            localData.delete(localName);\n\n            reexport.names.forEach(name => {\n              data.reexports.set(name, importName);\n            });\n            data.referenced = true;\n          }\n        }\n      });\n    } else if (child.isExportAllDeclaration()) {\n      hasExports = true;\n      const data = getData(child.node.source, child.node);\n      if (!data.loc) data.loc = child.node.loc;\n\n      data.reexportAll = {\n        loc: child.node.loc,\n      };\n      data.referenced = true;\n    } else if (child.isExportNamedDeclaration() && child.node.source) {\n      hasExports = true;\n      const data = getData(child.node.source, child.node);\n      if (!data.loc) data.loc = child.node.loc;\n\n      child.get(\"specifiers\").forEach(spec => {\n        assertExportSpecifier(spec);\n        const importName = getExportSpecifierName(\n          spec.get(\"local\"),\n          stringSpecifiers,\n        );\n        const exportName = getExportSpecifierName(\n          spec.get(\"exported\"),\n          stringSpecifiers,\n        );\n\n        data.reexports.set(exportName, importName);\n        data.referenced = true;\n\n        if (exportName === \"__esModule\") {\n          throw spec\n            .get(\"exported\")\n            .buildCodeFrameError('Illegal export \"__esModule\".');\n        }\n      });\n    } else if (\n      child.isExportNamedDeclaration() ||\n      child.isExportDefaultDeclaration()\n    ) {\n      hasExports = true;\n    }\n  });\n\n  for (const metadata of sourceData.values()) {\n    let needsDefault = false;\n    let needsNamed = false;\n\n    if (metadata.importsNamespace.size > 0) {\n      needsDefault = true;\n      needsNamed = true;\n    }\n\n    if (metadata.reexportAll) {\n      needsNamed = true;\n    }\n\n    for (const importName of metadata.imports.values()) {\n      if (importName === \"default\") needsDefault = true;\n      else needsNamed = true;\n    }\n    for (const importName of metadata.reexports.values()) {\n      if (importName === \"default\") needsDefault = true;\n      else needsNamed = true;\n    }\n\n    if (needsDefault && needsNamed) {\n      // TODO(logan): Using the namespace interop here is unfortunate. Revisit.\n      metadata.interop = \"namespace\";\n    } else if (needsDefault) {\n      metadata.interop = \"default\";\n    }\n  }\n\n  if (getWrapperPayload) {\n    for (const [source, metadata] of sourceData) {\n      metadata.wrap = getWrapperPayload(\n        source,\n        metadata,\n        importNodes.get(source),\n      );\n    }\n  }\n\n  return {\n    hasExports,\n    local: localData,\n    sources: sourceData,\n  };\n}\n\ntype ModuleBindingKind = \"import\" | \"hoisted\" | \"block\" | \"var\";\n/**\n * Get metadata about local variables that are exported.\n */\nfunction getLocalExportMetadata(\n  programPath: NodePath<t.Program>,\n  initializeReexports: boolean | void,\n  stringSpecifiers: Set<string>,\n): Map<string, LocalExportMetadata> {\n  const bindingKindLookup = new Map();\n\n  programPath.get(\"body\").forEach((child: NodePath) => {\n    let kind: ModuleBindingKind;\n    if (child.isImportDeclaration()) {\n      kind = \"import\";\n    } else {\n      if (child.isExportDefaultDeclaration()) {\n        child = child.get(\"declaration\");\n      }\n      if (child.isExportNamedDeclaration()) {\n        if (child.node.declaration) {\n          child = child.get(\"declaration\");\n        } else if (\n          initializeReexports &&\n          child.node.source &&\n          child.get(\"source\").isStringLiteral()\n        ) {\n          child.get(\"specifiers\").forEach(spec => {\n            assertExportSpecifier(spec);\n            bindingKindLookup.set(spec.get(\"local\").node.name, \"block\");\n          });\n          return;\n        }\n      }\n\n      if (child.isFunctionDeclaration()) {\n        kind = \"hoisted\";\n      } else if (child.isClassDeclaration()) {\n        kind = \"block\";\n      } else if (child.isVariableDeclaration({ kind: \"var\" })) {\n        kind = \"var\";\n      } else if (child.isVariableDeclaration()) {\n        kind = \"block\";\n      } else {\n        return;\n      }\n    }\n\n    Object.keys(child.getOuterBindingIdentifiers()).forEach(name => {\n      bindingKindLookup.set(name, kind);\n    });\n  });\n\n  const localMetadata = new Map();\n  const getLocalMetadata = (idPath: NodePath<t.Identifier>) => {\n    const localName = idPath.node.name;\n    let metadata = localMetadata.get(localName);\n\n    if (!metadata) {\n      const kind = bindingKindLookup.get(localName);\n\n      if (kind === undefined) {\n        throw idPath.buildCodeFrameError(\n          `Exporting local \"${localName}\", which is not declared.`,\n        );\n      }\n\n      metadata = {\n        names: [],\n        kind,\n      };\n      localMetadata.set(localName, metadata);\n    }\n    return metadata;\n  };\n\n  programPath.get(\"body\").forEach(child => {\n    if (\n      child.isExportNamedDeclaration() &&\n      (initializeReexports || !child.node.source)\n    ) {\n      if (child.node.declaration) {\n        const declaration = child.get(\"declaration\");\n        const ids = declaration.getOuterBindingIdentifierPaths();\n        Object.keys(ids).forEach(name => {\n          if (name === \"__esModule\") {\n            throw declaration.buildCodeFrameError(\n              'Illegal export \"__esModule\".',\n            );\n          }\n          getLocalMetadata(ids[name]).names.push(name);\n        });\n      } else {\n        child.get(\"specifiers\").forEach(spec => {\n          const local = spec.get(\"local\");\n          const exported = spec.get(\"exported\");\n          const localMetadata = getLocalMetadata(local);\n          const exportName = getExportSpecifierName(exported, stringSpecifiers);\n\n          if (exportName === \"__esModule\") {\n            throw exported.buildCodeFrameError('Illegal export \"__esModule\".');\n          }\n          localMetadata.names.push(exportName);\n        });\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      const declaration = child.get(\"declaration\");\n      if (\n        declaration.isFunctionDeclaration() ||\n        declaration.isClassDeclaration()\n      ) {\n        getLocalMetadata(declaration.get(\"id\")).names.push(\"default\");\n      } else {\n        // These should have been removed by the nameAnonymousExports() call.\n        throw declaration.buildCodeFrameError(\n          \"Unexpected default expression export.\",\n        );\n      }\n    }\n  });\n  return localMetadata;\n}\n\n/**\n * Ensure that all exported values have local binding names.\n */\nfunction nameAnonymousExports(programPath: NodePath<t.Program>) {\n  // Name anonymous exported locals.\n  programPath.get(\"body\").forEach(child => {\n    if (!child.isExportDefaultDeclaration()) return;\n    splitExportDeclaration(child);\n  });\n}\n\nfunction removeImportExportDeclarations(programPath: NodePath<t.Program>) {\n  programPath.get(\"body\").forEach(child => {\n    if (child.isImportDeclaration()) {\n      child.remove();\n    } else if (child.isExportNamedDeclaration()) {\n      if (child.node.declaration) {\n        // @ts-expect-error todo(flow->ts): avoid mutations\n        child.node.declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(child.node.declaration);\n      } else {\n        child.remove();\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      // export default foo;\n      const declaration = child.get(\"declaration\");\n      if (\n        declaration.isFunctionDeclaration() ||\n        declaration.isClassDeclaration()\n      ) {\n        // @ts-expect-error todo(flow->ts): avoid mutations\n        declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(declaration);\n      } else {\n        // These should have been removed by the nameAnonymousExports() call.\n        throw declaration.buildCodeFrameError(\n          \"Unexpected default expression export.\",\n        );\n      }\n    } else if (child.isExportAllDeclaration()) {\n      child.remove();\n    }\n  });\n}\n", "// TODO: Move `lazy` implementation logic into the CommonJS plugin, since other\n// modules systems do not support `lazy`.\n\nimport { types as t } from \"@babel/core\";\nimport {\n  type SourceModuleMetadata,\n  isSideEffectImport,\n} from \"./normalize-and-load-metadata.ts\";\n\nexport type Lazy = boolean | string[] | ((source: string) => boolean);\n\nexport function toGetWrapperPayload(lazy: Lazy) {\n  return (source: string, metadata: SourceModuleMetadata): null | \"lazy\" => {\n    if (lazy === false) return null;\n    if (isSideEffectImport(metadata) || metadata.reexportAll) return null;\n    if (lazy === true) {\n      // 'true' means that local relative files are eagerly loaded and\n      // dependency modules are loaded lazily.\n      return /\\./.test(source) ? null : \"lazy\";\n    }\n    if (Array.isArray(lazy)) {\n      return lazy.indexOf(source) === -1 ? null : \"lazy\";\n    }\n    if (typeof lazy === \"function\") {\n      return lazy(source) ? \"lazy\" : null;\n    }\n    throw new Error(`.lazy must be a boolean, string array, or function`);\n  };\n}\n\nexport function wrapReference(\n  ref: t.Identifier,\n  payload: unknown,\n): t.Expression | null {\n  if (payload === \"lazy\") return t.callExpression(ref, []);\n  return null;\n}\n", "// Heavily inspired by\n// https://github.com/airbnb/babel-plugin-dynamic-import-node/blob/master/src/utils.js\n\nimport { types as t, template } from \"@babel/core\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.getDynamicImportSource = function getDynamicImportSource(\n    node: t.CallExpression,\n  ): t.StringLiteral | t.TemplateLiteral {\n    const [source] = node.arguments;\n\n    return t.isStringLiteral(source) || t.isTemplateLiteral(source)\n      ? source\n      : (template.expression.ast`\\`\\${${source}}\\`` as t.TemplateLiteral);\n  };\n}\n\nexport function buildDynamicImport(\n  node: t.CallExpression | t.ImportExpression,\n  deferToThen: boolean,\n  wrapWithPromise: boolean,\n  builder: (specifier: t.Expression) => t.Expression,\n): t.Expression {\n  const specifier = t.isCallExpression(node) ? node.arguments[0] : node.source;\n\n  if (\n    t.isStringLiteral(specifier) ||\n    (t.isTemplateLiteral(specifier) && specifier.quasis.length === 0)\n  ) {\n    if (deferToThen) {\n      return template.expression.ast`\n        Promise.resolve().then(() => ${builder(specifier)})\n      `;\n    } else return builder(specifier);\n  }\n\n  const specifierToString = t.isTemplateLiteral(specifier)\n    ? t.identifier(\"specifier\")\n    : t.templateLiteral(\n        [t.templateElement({ raw: \"\" }), t.templateElement({ raw: \"\" })],\n        [t.identifier(\"specifier\")],\n      );\n\n  if (deferToThen) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${specifierToString}))\n          .then(s => ${builder(t.identifier(\"s\"))})\n      )(${specifier})\n    `;\n  } else if (wrapWithPromise) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${builder(specifierToString)}))\n      )(${specifier})\n    `;\n  } else {\n    return template.expression.ast`\n      (specifier => ${builder(specifierToString)})(${specifier})\n    `;\n  }\n}\n", "type RootOptions = {\n  filename?: string;\n  filenameRelative?: string;\n  sourceRoot?: string;\n};\n\nexport type PluginOptions = {\n  moduleId?: string;\n  moduleIds?: boolean;\n  getModuleId?: (moduleName: string) => string | null | undefined;\n  moduleRoot?: string;\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  const originalGetModuleName = getModuleName;\n\n  // @ts-expect-error TS doesn't like reassigning a function.\n  getModuleName = function getModuleName(\n    rootOpts: RootOptions & PluginOptions,\n    pluginOpts: PluginOptions,\n  ): string | null {\n    return originalGetModuleName(rootOpts, {\n      moduleId: pluginOpts.moduleId ?? rootOpts.moduleId,\n      moduleIds: pluginOpts.moduleIds ?? rootOpts.moduleIds,\n      getModuleId: pluginOpts.getModuleId ?? rootOpts.getModuleId,\n      moduleRoot: pluginOpts.moduleRoot ?? rootOpts.moduleRoot,\n    });\n  };\n}\n\nexport default function getModuleName(\n  rootOpts: RootOptions,\n  pluginOpts: PluginOptions,\n): string | null {\n  const {\n    filename,\n    filenameRelative = filename,\n    sourceRoot = pluginOpts.moduleRoot,\n  } = rootOpts;\n\n  const {\n    moduleId,\n    moduleIds = !!moduleId,\n\n    getModuleId,\n\n    moduleRoot = sourceRoot,\n  } = pluginOpts;\n\n  if (!moduleIds) return null;\n\n  // moduleId is n/a if a `getModuleId()` is provided\n  if (moduleId != null && !getModuleId) {\n    return moduleId;\n  }\n\n  let moduleName = moduleRoot != null ? moduleRoot + \"/\" : \"\";\n\n  if (filenameRelative) {\n    const sourceRootReplacer =\n      sourceRoot != null ? new RegExp(\"^\" + sourceRoot + \"/?\") : \"\";\n\n    moduleName += filenameRelative\n      // remove sourceRoot from filename\n      .replace(sourceRootReplacer, \"\")\n      // remove extension\n      .replace(/\\.(\\w*?)$/, \"\");\n  }\n\n  // normalize path separators\n  moduleName = moduleName.replace(/\\\\/g, \"/\");\n\n  if (getModuleId) {\n    // If return is falsy, assume they want us to use our generated default name\n    return getModuleId(moduleName) || moduleName;\n  } else {\n    return moduleName;\n  }\n}\n", "import assert from \"assert\";\nimport { template, types as t } from \"@babel/core\";\n\nimport { isModule } from \"@babel/helper-module-imports\";\n\nimport rewriteThis from \"./rewrite-this.ts\";\nimport rewriteLiveReferences from \"./rewrite-live-references.ts\";\nimport normalizeModuleAndLoadMetadata, {\n  hasExports,\n  isSideEffectImport,\n  validateImportInteropOption,\n} from \"./normalize-and-load-metadata.ts\";\nimport type {\n  ImportInterop,\n  InteropType,\n  ModuleMetadata,\n  SourceModuleMetadata,\n} from \"./normalize-and-load-metadata.ts\";\nimport * as Lazy from \"./lazy-modules.ts\";\nimport type { NodePath } from \"@babel/core\";\n\nconst {\n  booleanLiteral,\n  callExpression,\n  cloneNode,\n  directive,\n  directiveLiteral,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  memberExpression,\n  stringLiteral,\n  valueToNode,\n  variableDeclaration,\n  variableDeclarator,\n} = t;\n\nexport { buildDynamicImport } from \"./dynamic-import.ts\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.getDynamicImportSource =\n    // eslint-disable-next-line no-restricted-globals, import/extensions\n    require(\"./dynamic-import\").getDynamicImportSource;\n}\n\nexport { default as getModuleName } from \"./get-module-name.ts\";\nexport type { PluginOptions } from \"./get-module-name.ts\";\n\nexport { hasExports, isSideEffectImport, isModule, rewriteThis };\n\nexport interface RewriteModuleStatementsAndPrepareHeaderOptions {\n  exportName?: string;\n  strict: boolean;\n  allowTopLevelThis?: boolean;\n  strictMode: boolean;\n  loose?: boolean;\n  importInterop?: ImportInterop;\n  noInterop?: boolean;\n  lazy?: Lazy.Lazy;\n  getWrapperPayload?: (\n    source: string,\n    metadata: SourceModuleMetadata,\n    importNodes: t.Node[],\n  ) => unknown;\n  wrapReference?: (ref: t.Expression, payload: unknown) => t.Expression | null;\n  esNamespaceOnly?: boolean;\n  filename: string | undefined;\n  constantReexports?: boolean | void;\n  enumerableModuleMeta?: boolean | void;\n  noIncompleteNsImportDetection?: boolean | void;\n}\n\n/**\n * Perform all of the generic ES6 module rewriting needed to handle initial\n * module processing. This function will rewrite the majority of the given\n * program to reference the modules described by the returned metadata,\n * and returns a list of statements for use when initializing the module.\n */\nexport function rewriteModuleStatementsAndPrepareHeader(\n  path: NodePath<t.Program>,\n  {\n    exportName,\n    strict,\n    allowTopLevelThis,\n    strictMode,\n    noInterop,\n    importInterop = noInterop ? \"none\" : \"babel\",\n    // TODO(Babel 8): After that `lazy` implementation is moved to the CJS\n    // transform, remove this parameter.\n    lazy,\n    getWrapperPayload = Lazy.toGetWrapperPayload(lazy ?? false),\n    wrapReference = Lazy.wrapReference,\n    esNamespaceOnly,\n    filename,\n\n    constantReexports = process.env.BABEL_8_BREAKING\n      ? undefined\n      : arguments[1].loose,\n    enumerableModuleMeta = process.env.BABEL_8_BREAKING\n      ? undefined\n      : arguments[1].loose,\n    noIncompleteNsImportDetection,\n  }: RewriteModuleStatementsAndPrepareHeaderOptions,\n) {\n  validateImportInteropOption(importInterop);\n  assert(isModule(path), \"Cannot process module statements in a script\");\n  path.node.sourceType = \"script\";\n\n  const meta = normalizeModuleAndLoadMetadata(path, exportName, {\n    importInterop,\n    initializeReexports: constantReexports,\n    getWrapperPayload,\n    esNamespaceOnly,\n    filename,\n  });\n\n  if (!allowTopLevelThis) {\n    rewriteThis(path);\n  }\n\n  rewriteLiveReferences(path, meta, wrapReference);\n\n  if (strictMode !== false) {\n    const hasStrict = path.node.directives.some(directive => {\n      return directive.value.value === \"use strict\";\n    });\n    if (!hasStrict) {\n      path.unshiftContainer(\n        \"directives\",\n        directive(directiveLiteral(\"use strict\")),\n      );\n    }\n  }\n\n  const headers = [];\n  if (hasExports(meta) && !strict) {\n    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));\n  }\n\n  const nameList = buildExportNameListDeclaration(path, meta);\n\n  if (nameList) {\n    meta.exportNameListName = nameList.name;\n    headers.push(nameList.statement);\n  }\n\n  // Create all of the statically known named exports.\n  headers.push(\n    ...buildExportInitializationStatements(\n      path,\n      meta,\n      wrapReference,\n      constantReexports,\n      noIncompleteNsImportDetection,\n    ),\n  );\n\n  return { meta, headers };\n}\n\n/**\n * Flag a set of statements as hoisted above all else so that module init\n * statements all run before user code.\n */\nexport function ensureStatementsHoisted(statements: t.Statement[]) {\n  // Force all of the header fields to be at the top of the file.\n  statements.forEach(header => {\n    // @ts-expect-error Fixme: handle _blockHoist property\n    header._blockHoist = 3;\n  });\n}\n\n/**\n * Given an expression for a standard import object, like \"require('foo')\",\n * wrap it in a call to the interop helpers based on the type.\n */\nexport function wrapInterop(\n  programPath: NodePath<t.Program>,\n  expr: t.Expression,\n  type: InteropType,\n): t.CallExpression {\n  if (type === \"none\") {\n    return null;\n  }\n\n  if (type === \"node-namespace\") {\n    return callExpression(programPath.hub.addHelper(\"interopRequireWildcard\"), [\n      expr,\n      booleanLiteral(true),\n    ]);\n  } else if (type === \"node-default\") {\n    return null;\n  }\n\n  let helper;\n  if (type === \"default\") {\n    helper = \"interopRequireDefault\";\n  } else if (type === \"namespace\") {\n    helper = \"interopRequireWildcard\";\n  } else {\n    throw new Error(`Unknown interop: ${type}`);\n  }\n\n  return callExpression(programPath.hub.addHelper(helper), [expr]);\n}\n\n/**\n * Create the runtime initialization statements for a given requested source.\n * These will initialize all of the runtime import/export logic that\n * can't be handled statically by the statements created by\n * buildExportInitializationStatements().\n */\nexport function buildNamespaceInitStatements(\n  metadata: ModuleMetadata,\n  sourceMetadata: SourceModuleMetadata,\n  constantReexports: boolean | void = false,\n  wrapReference: (\n    ref: t.Identifier,\n    payload: unknown,\n  ) => t.Expression | null = Lazy.wrapReference,\n) {\n  const statements = [];\n\n  const srcNamespaceId = identifier(sourceMetadata.name);\n\n  for (const localName of sourceMetadata.importsNamespace) {\n    if (localName === sourceMetadata.name) continue;\n\n    // Create and assign binding to namespace object\n    statements.push(\n      template.statement`var NAME = SOURCE;`({\n        NAME: localName,\n        SOURCE: cloneNode(srcNamespaceId),\n      }),\n    );\n  }\n\n  const srcNamespace =\n    wrapReference(srcNamespaceId, sourceMetadata.wrap) ?? srcNamespaceId;\n\n  if (constantReexports) {\n    statements.push(\n      ...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference),\n    );\n  }\n  for (const exportName of sourceMetadata.reexportNamespace) {\n    // Assign export to namespace object.\n    statements.push(\n      (!t.isIdentifier(srcNamespace)\n        ? template.statement`\n            Object.defineProperty(EXPORTS, \"NAME\", {\n              enumerable: true,\n              get: function() {\n                return NAMESPACE;\n              }\n            });\n          `\n        : template.statement`EXPORTS.NAME = NAMESPACE;`)({\n        EXPORTS: metadata.exportName,\n        NAME: exportName,\n        NAMESPACE: cloneNode(srcNamespace),\n      }),\n    );\n  }\n  if (sourceMetadata.reexportAll) {\n    const statement = buildNamespaceReexport(\n      metadata,\n      cloneNode(srcNamespace),\n      constantReexports,\n    );\n    statement.loc = sourceMetadata.reexportAll.loc;\n\n    // Iterate props creating getter for each prop.\n    statements.push(statement);\n  }\n  return statements;\n}\n\nconst ReexportTemplate = {\n  constant: template.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,\n  constantComputed: template.statement`EXPORTS[\"EXPORT_NAME\"] = NAMESPACE_IMPORT;`,\n  spec: template.statement`\n    Object.defineProperty(EXPORTS, \"EXPORT_NAME\", {\n      enumerable: true,\n      get: function() {\n        return NAMESPACE_IMPORT;\n      },\n    });\n    `,\n};\n\nfunction buildReexportsFromMeta(\n  meta: ModuleMetadata,\n  metadata: SourceModuleMetadata,\n  constantReexports: boolean,\n  wrapReference: (ref: t.Expression, payload: unknown) => t.Expression | null,\n) {\n  let namespace: t.Expression = identifier(metadata.name);\n  namespace = wrapReference(namespace, metadata.wrap) ?? namespace;\n\n  const { stringSpecifiers } = meta;\n  return Array.from(metadata.reexports, ([exportName, importName]) => {\n    let NAMESPACE_IMPORT: t.Expression = cloneNode(namespace);\n    if (importName === \"default\" && metadata.interop === \"node-default\") {\n      // Nothing, it's ok as-is\n    } else if (stringSpecifiers.has(importName)) {\n      NAMESPACE_IMPORT = memberExpression(\n        NAMESPACE_IMPORT,\n        stringLiteral(importName),\n        true,\n      );\n    } else {\n      NAMESPACE_IMPORT = memberExpression(\n        NAMESPACE_IMPORT,\n        identifier(importName),\n      );\n    }\n    const astNodes = {\n      EXPORTS: meta.exportName,\n      EXPORT_NAME: exportName,\n      NAMESPACE_IMPORT,\n    };\n    if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {\n      if (stringSpecifiers.has(exportName)) {\n        return ReexportTemplate.constantComputed(astNodes);\n      } else {\n        return ReexportTemplate.constant(astNodes);\n      }\n    } else {\n      return ReexportTemplate.spec(astNodes);\n    }\n  });\n}\n\n/**\n * Build an \"__esModule\" header statement setting the property on a given object.\n */\nfunction buildESModuleHeader(\n  metadata: ModuleMetadata,\n  enumerableModuleMeta: boolean | void = false,\n) {\n  return (\n    enumerableModuleMeta\n      ? template.statement`\n        EXPORTS.__esModule = true;\n      `\n      : template.statement`\n        Object.defineProperty(EXPORTS, \"__esModule\", {\n          value: true,\n        });\n      `\n  )({ EXPORTS: metadata.exportName });\n}\n\n/**\n * Create a re-export initialization loop for a specific imported namespace.\n */\nfunction buildNamespaceReexport(\n  metadata: ModuleMetadata,\n  namespace: t.Expression,\n  constantReexports: boolean | void,\n) {\n  return (\n    constantReexports\n      ? template.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          EXPORTS[key] = NAMESPACE[key];\n        });\n      `\n      : // Also skip already assigned bindings if they are strictly equal\n        // to be somewhat more spec-compliant when a file has multiple\n        // namespace re-exports that would cause a binding to be exported\n        // multiple times. However, multiple bindings of the same name that\n        // export the same primitive value are silently skipped\n        // (the spec requires an \"ambiguous bindings\" early error here).\n        template.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          Object.defineProperty(EXPORTS, key, {\n            enumerable: true,\n            get: function() {\n              return NAMESPACE[key];\n            },\n          });\n        });\n    `\n  )({\n    NAMESPACE: namespace,\n    EXPORTS: metadata.exportName,\n    VERIFY_NAME_LIST: metadata.exportNameListName\n      ? template`\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\n          `({ EXPORTS_LIST: metadata.exportNameListName })\n      : null,\n  });\n}\n\n/**\n * Build a statement declaring a variable that contains all of the exported\n * variable names in an object so they can easily be referenced from an\n * export * from statement to check for conflicts.\n */\nfunction buildExportNameListDeclaration(\n  programPath: NodePath,\n  metadata: ModuleMetadata,\n) {\n  const exportedVars = Object.create(null);\n  for (const data of metadata.local.values()) {\n    for (const name of data.names) {\n      exportedVars[name] = true;\n    }\n  }\n\n  let hasReexport = false;\n  for (const data of metadata.source.values()) {\n    for (const exportName of data.reexports.keys()) {\n      exportedVars[exportName] = true;\n    }\n    for (const exportName of data.reexportNamespace) {\n      exportedVars[exportName] = true;\n    }\n\n    hasReexport = hasReexport || !!data.reexportAll;\n  }\n\n  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;\n\n  const name = programPath.scope.generateUidIdentifier(\"exportNames\");\n\n  delete exportedVars.default;\n\n  return {\n    name: name.name,\n    statement: variableDeclaration(\"var\", [\n      variableDeclarator(name, valueToNode(exportedVars)),\n    ]),\n  };\n}\n\n/**\n * Create a set of statements that will initialize all of the statically-known\n * export names with their expected values.\n */\nfunction buildExportInitializationStatements(\n  programPath: NodePath,\n  metadata: ModuleMetadata,\n  wrapReference: (ref: t.Expression, payload: unknown) => t.Expression | null,\n  constantReexports: boolean | void = false,\n  noIncompleteNsImportDetection: boolean | void = false,\n) {\n  const initStatements: Array<[string, t.Statement | null]> = [];\n\n  for (const [localName, data] of metadata.local) {\n    if (data.kind === \"import\") {\n      // No-open since these are explicitly set with the \"reexports\" block.\n    } else if (data.kind === \"hoisted\") {\n      initStatements.push([\n        // data.names is always of length 1 because a hoisted export\n        // name must be id of a function declaration\n        data.names[0],\n        buildInitStatement(metadata, data.names, identifier(localName)),\n      ]);\n    } else if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.names) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  for (const data of metadata.source.values()) {\n    if (!constantReexports) {\n      const reexportsStatements = buildReexportsFromMeta(\n        metadata,\n        data,\n        false,\n        wrapReference,\n      );\n      const reexports = [...data.reexports.keys()];\n      for (let i = 0; i < reexportsStatements.length; i++) {\n        initStatements.push([reexports[i], reexportsStatements[i]]);\n      }\n    }\n    if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.reexportNamespace) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#sec-module-namespace-exotic-objects\n  // The [Exports] list is ordered as if an Array of those String values\n  // had been sorted using %Array.prototype.sort% using undefined as comparefn\n  initStatements.sort(([a], [b]) => {\n    if (a < b) return -1;\n    if (b < a) return 1;\n    return 0;\n  });\n\n  const results = [];\n  if (noIncompleteNsImportDetection) {\n    for (const [, initStatement] of initStatements) {\n      results.push(initStatement);\n    }\n  } else {\n    // We generate init statements (`exports.a = exports.b = ... = void 0`)\n    // for every 100 exported names to avoid deeply-nested AST structures.\n    const chunkSize = 100;\n    for (let i = 0; i < initStatements.length; i += chunkSize) {\n      let uninitializedExportNames = [];\n      for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {\n        const [exportName, initStatement] = initStatements[i + j];\n        if (initStatement !== null) {\n          if (uninitializedExportNames.length > 0) {\n            results.push(\n              buildInitStatement(\n                metadata,\n                uninitializedExportNames,\n                programPath.scope.buildUndefinedNode(),\n              ),\n            );\n            // reset after uninitializedExportNames has been transformed\n            // to init statements\n            uninitializedExportNames = [];\n          }\n          results.push(initStatement);\n        } else {\n          uninitializedExportNames.push(exportName);\n        }\n      }\n      if (uninitializedExportNames.length > 0) {\n        results.push(\n          buildInitStatement(\n            metadata,\n            uninitializedExportNames,\n            programPath.scope.buildUndefinedNode(),\n          ),\n        );\n      }\n    }\n  }\n\n  return results;\n}\n\n/**\n * Given a set of export names, create a set of nested assignments to\n * initialize them all to a given expression.\n */\nconst InitTemplate = {\n  computed: template.expression`EXPORTS[\"NAME\"] = VALUE`,\n  default: template.expression`EXPORTS.NAME = VALUE`,\n  define: template.expression`Object.defineProperty(EXPORTS, \"NAME\", { enumerable:true, value: void 0, writable: true })[\"NAME\"] = VALUE`,\n};\n\nfunction buildInitStatement(\n  metadata: ModuleMetadata,\n  exportNames: string[],\n  initExpr: t.Expression,\n) {\n  const { stringSpecifiers, exportName: EXPORTS } = metadata;\n  return expressionStatement(\n    exportNames.reduce((acc, exportName) => {\n      const params = {\n        EXPORTS,\n        NAME: exportName,\n        VALUE: acc,\n      };\n\n      if (exportName === \"__proto__\") {\n        return InitTemplate.define(params);\n      }\n\n      if (stringSpecifiers.has(exportName)) {\n        return InitTemplate.computed(params);\n      }\n\n      return InitTemplate.default(params);\n    }, initExpr),\n  );\n}\n", "exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\nvar MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar safeRe = exports.safeRe = []\nvar src = exports.src = []\nvar t = exports.tokens = {}\nvar R = 0\n\nfunction tok (n) {\n  t[n] = R++\n}\n\nvar LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nvar safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nfunction makeSafeRe (value) {\n  for (var i = 0; i < safeRegexReplacements.length; i++) {\n    var token = safeRegexReplacements[i][0]\n    var max = safeRegexReplacements[i][1]\n    value = value\n      .split(token + '*').join(token + '{0,' + max + '}')\n      .split(token + '+').join(token + '{1,' + max + '}')\n  }\n  return value\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ntok('NUMERICIDENTIFIER')\nsrc[t.NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\ntok('NUMERICIDENTIFIERLOOSE')\nsrc[t.NUMERICIDENTIFIERLOOSE] = '\\\\d+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ntok('NONNUMERICIDENTIFIER')\nsrc[t.NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-]' + LETTERDASHNUMBER + '*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ntok('MAINVERSION')\nsrc[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')'\n\ntok('MAINVERSIONLOOSE')\nsrc[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ntok('PRERELEASEIDENTIFIER')\nsrc[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +\n                            '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\ntok('PRERELEASEIDENTIFIERLOOSE')\nsrc[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ntok('PRERELEASE')\nsrc[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))'\n\ntok('PRERELEASELOOSE')\nsrc[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ntok('BUILDIDENTIFIER')\nsrc[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + '+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ntok('BUILD')\nsrc[t.BUILD] = '(?:\\\\+(' + src[t.BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[t.BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ntok('FULL')\ntok('FULLPLAIN')\nsrc[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +\n                  src[t.PRERELEASE] + '?' +\n                  src[t.BUILD] + '?'\n\nsrc[t.FULL] = '^' + src[t.FULLPLAIN] + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ntok('LOOSEPLAIN')\nsrc[t.LOOSEPLAIN] = '[v=\\\\s]*' + src[t.MAINVERSIONLOOSE] +\n                  src[t.PRERELEASELOOSE] + '?' +\n                  src[t.BUILD] + '?'\n\ntok('LOOSE')\nsrc[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$'\n\ntok('GTLT')\nsrc[t.GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ntok('XRANGEIDENTIFIERLOOSE')\nsrc[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\ntok('XRANGEIDENTIFIER')\nsrc[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\ntok('XRANGEPLAIN')\nsrc[t.XRANGEPLAIN] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[t.PRERELEASE] + ')?' +\n                   src[t.BUILD] + '?' +\n                   ')?)?'\n\ntok('XRANGEPLAINLOOSE')\nsrc[t.XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +\n                        src[t.BUILD] + '?' +\n                        ')?)?'\n\ntok('XRANGE')\nsrc[t.XRANGE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAIN] + '$'\ntok('XRANGELOOSE')\nsrc[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ntok('COERCE')\nsrc[t.COERCE] = '(^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\ntok('COERCERTL')\nre[t.COERCERTL] = new RegExp(src[t.COERCE], 'g')\nsafeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), 'g')\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ntok('LONETILDE')\nsrc[t.LONETILDE] = '(?:~>?)'\n\ntok('TILDETRIM')\nsrc[t.TILDETRIM] = '(\\\\s*)' + src[t.LONETILDE] + '\\\\s+'\nre[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g')\nsafeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), 'g')\nvar tildeTrimReplace = '$1~'\n\ntok('TILDE')\nsrc[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$'\ntok('TILDELOOSE')\nsrc[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ntok('LONECARET')\nsrc[t.LONECARET] = '(?:\\\\^)'\n\ntok('CARETTRIM')\nsrc[t.CARETTRIM] = '(\\\\s*)' + src[t.LONECARET] + '\\\\s+'\nre[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g')\nsafeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), 'g')\nvar caretTrimReplace = '$1^'\n\ntok('CARET')\nsrc[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$'\ntok('CARETLOOSE')\nsrc[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ntok('COMPARATORLOOSE')\nsrc[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + ')$|^$'\ntok('COMPARATOR')\nsrc[t.COMPARATOR] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.FULLPLAIN] + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ntok('COMPARATORTRIM')\nsrc[t.COMPARATORTRIM] = '(\\\\s*)' + src[t.GTLT] +\n                      '\\\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g')\nsafeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ntok('HYPHENRANGE')\nsrc[t.HYPHENRANGE] = '^\\\\s*(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\ntok('HYPHENRANGELOOSE')\nsrc[t.HYPHENRANGELOOSE] = '^\\\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\ntok('STAR')\nsrc[t.STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n\n    // Replace all greedy whitespace to prevent regex dos issues. These regex are\n    // used internally via the safeRe object since all inputs in this library get\n    // normalized first to trim and collapse all extra whitespace. The original\n    // regexes are exported for userland consumption and lower level usage. A\n    // future breaking change could export the safer regex only with a note that\n    // all input should have extra whitespace removed.\n    safeRe[i] = new RegExp(makeSafeRe(src[i]))\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\nSemVer.prototype.compareBuild = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  var i = 0\n  do {\n    var a = this.build[i]\n    var b = other.build[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.compareBuild = compareBuild\nfunction compareBuild (a, b, loose) {\n  var versionA = new SemVer(a, loose)\n  var versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(b, a, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  comp = comp.trim().split(/\\s+/).join(' ')\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1] !== undefined ? m[1] : ''\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY || version === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    if (this.value === '') {\n      return true\n    }\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    if (comp.value === '') {\n      return true\n    }\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First reduce all whitespace as much as possible so we do not have to rely\n  // on potentially slow regexes like \\s*. This is then stored and used for\n  // future error messages as well.\n  this.raw = range\n    .trim()\n    .split(/\\s+/)\n    .join(' ')\n\n  // First, split based on boolean or ||\n  this.set = this.raw.split('||').map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + this.raw)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, safeRe[t.COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return (\n      isSatisfiable(thisComparators, options) &&\n      range.set.some(function (rangeComparators) {\n        return (\n          isSatisfiable(rangeComparators, options) &&\n          thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options)\n            })\n          })\n        )\n      })\n    )\n  })\n}\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nfunction isSatisfiable (comparators, options) {\n  var result = true\n  var remainingComparators = comparators.slice()\n  var testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p + pr\n    } else if (xm) {\n      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0' + pr +\n        ' <' + M + '.' + (+m + 1) + '.0' + pr\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(safeRe[t.STAR], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version, options) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  var match = null\n  if (!options.rtl) {\n    match = version.match(safeRe[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var next\n    while ((next = safeRe[t.COERCERTL].exec(version)) &&\n      (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n          next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    safeRe[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(match[2] +\n    '.' + (match[3] || '0') +\n    '.' + (match[4] || '0'), options)\n}\n", "import * as helpers from \"@babel/helpers\";\nimport { NodePath } from \"@babel/traverse\";\nimport type { HubInterface, Visitor, Scope } from \"@babel/traverse\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport traverse from \"@babel/traverse\";\nimport { cloneNode, interpreterDirective } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { getModuleName } from \"@babel/helper-module-transforms\";\nimport semver from \"semver\";\n\nimport type { NormalizedFile } from \"../normalize-file.ts\";\n\nconst errorVisitor: Visitor<{ loc: t.SourceLocation | null }> = {\n  enter(path, state) {\n    const loc = path.node.loc;\n    if (loc) {\n      state.loc = loc;\n      path.stop();\n    }\n  },\n};\n\nexport default class File {\n  _map: Map<unknown, unknown> = new Map();\n  opts: { [key: string]: any };\n  declarations: { [key: string]: t.Identifier } = {};\n  path: NodePath<t.Program>;\n  ast: t.File;\n  scope: Scope;\n  metadata: { [key: string]: any } = {};\n  code: string = \"\";\n  inputMap: any;\n\n  hub: HubInterface & { file: File } = {\n    // keep it for the usage in babel-core, ex: path.hub.file.opts.filename\n    file: this,\n    getCode: () => this.code,\n    getScope: () => this.scope,\n    addHelper: this.addHelper.bind(this),\n    buildError: this.buildCodeFrameError.bind(this),\n  };\n\n  constructor(options: {}, { code, ast, inputMap }: NormalizedFile) {\n    this.opts = options;\n    this.code = code;\n    this.ast = ast;\n    this.inputMap = inputMap;\n\n    this.path = NodePath.get({\n      hub: this.hub,\n      parentPath: null,\n      parent: this.ast,\n      container: this.ast,\n      key: \"program\",\n    }).setContext() as NodePath<t.Program>;\n    this.scope = this.path.scope;\n  }\n\n  /**\n   * Provide backward-compatible access to the interpreter directive handling\n   * in Babel 6.x. If you are writing a plugin for Babel 7.x, it would be\n   * best to use 'program.interpreter' directly.\n   */\n  get shebang(): string {\n    const { interpreter } = this.path.node;\n    return interpreter ? interpreter.value : \"\";\n  }\n  set shebang(value: string) {\n    if (value) {\n      this.path.get(\"interpreter\").replaceWith(interpreterDirective(value));\n    } else {\n      this.path.get(\"interpreter\").remove();\n    }\n  }\n\n  set(key: unknown, val: unknown) {\n    if (!process.env.BABEL_8_BREAKING) {\n      if (key === \"helpersNamespace\") {\n        throw new Error(\n          \"Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.\" +\n            \"If you are using @babel/plugin-external-helpers you will need to use a newer \" +\n            \"version than the one you currently have installed. \" +\n            \"If you have your own implementation, you'll want to explore using 'helperGenerator' \" +\n            \"alongside 'file.availableHelper()'.\",\n        );\n      }\n    }\n\n    this._map.set(key, val);\n  }\n\n  get(key: unknown): any {\n    return this._map.get(key);\n  }\n\n  has(key: unknown): boolean {\n    return this._map.has(key);\n  }\n\n  getModuleName(): string | undefined | null {\n    return getModuleName(this.opts, this.opts);\n  }\n\n  /**\n   * Check if a given helper is available in @babel/core's helper list.\n   *\n   * This _also_ allows you to pass a Babel version specifically. If the\n   * helper exists, but was not available for the full given range, it will be\n   * considered unavailable.\n   */\n  availableHelper(name: string, versionRange?: string | null): boolean {\n    let minVersion;\n    try {\n      minVersion = helpers.minVersion(name);\n    } catch (err) {\n      if (err.code !== \"BABEL_HELPER_UNKNOWN\") throw err;\n\n      return false;\n    }\n\n    if (typeof versionRange !== \"string\") return true;\n\n    // semver.intersects() has some surprising behavior with comparing ranges\n    // with pre-release versions. We add '^' to ensure that we are always\n    // comparing ranges with ranges, which sidesteps this logic.\n    // For example:\n    //\n    //   semver.intersects(`<7.0.1`, \"7.0.0-beta.0\") // false - surprising\n    //   semver.intersects(`<7.0.1`, \"^7.0.0-beta.0\") // true - expected\n    //\n    // This is because the first falls back to\n    //\n    //   semver.satisfies(\"7.0.0-beta.0\", `<7.0.1`) // false - surprising\n    //\n    // and this fails because a prerelease version can only satisfy a range\n    // if it is a prerelease within the same major/minor/patch range.\n    //\n    // Note: If this is found to have issues, please also revisit the logic in\n    // transform-runtime's definitions.js file.\n    if (semver.valid(versionRange)) versionRange = `^${versionRange}`;\n\n    if (process.env.BABEL_8_BREAKING) {\n      return (\n        !semver.intersects(`<${minVersion}`, versionRange) &&\n        !semver.intersects(`>=9.0.0`, versionRange)\n      );\n    } else {\n      return (\n        !semver.intersects(`<${minVersion}`, versionRange) &&\n        !semver.intersects(`>=8.0.0`, versionRange)\n      );\n    }\n  }\n\n  addHelper(name: string): t.Identifier {\n    const declar = this.declarations[name];\n    if (declar) return cloneNode(declar);\n\n    const generator = this.get(\"helperGenerator\");\n    if (generator) {\n      const res = generator(name);\n      if (res) return res;\n    }\n\n    // make sure that the helper exists\n    helpers.minVersion(name);\n\n    const uid = (this.declarations[name] =\n      this.scope.generateUidIdentifier(name));\n\n    const dependencies: { [key: string]: t.Identifier } = {};\n    for (const dep of helpers.getDependencies(name)) {\n      dependencies[dep] = this.addHelper(dep);\n    }\n\n    const { nodes, globals } = helpers.get(\n      name,\n      dep => dependencies[dep],\n      uid.name,\n      Object.keys(this.scope.getAllBindings()),\n    );\n\n    globals.forEach(name => {\n      if (this.path.scope.hasBinding(name, true /* noGlobals */)) {\n        this.path.scope.rename(name);\n      }\n    });\n\n    nodes.forEach(node => {\n      // @ts-expect-error Fixme: document _compact node property\n      node._compact = true;\n    });\n\n    const added = this.path.unshiftContainer(\"body\", nodes);\n    // TODO: NodePath#unshiftContainer should automatically register new\n    // bindings.\n    for (const path of added) {\n      if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);\n    }\n\n    return uid;\n  }\n\n  buildCodeFrameError(\n    node: t.Node | undefined | null,\n    msg: string,\n    _Error: typeof Error = SyntaxError,\n  ): Error {\n    let loc = node?.loc;\n\n    if (!loc && node) {\n      const state: { loc?: t.SourceLocation | null } = {\n        loc: null,\n      };\n      traverse(node, errorVisitor, this.scope, state);\n      loc = state.loc;\n\n      let txt =\n        \"This is an error on an internal node. Probably an internal error.\";\n      if (loc) txt += \" Location has been estimated.\";\n\n      msg += ` (${txt})`;\n    }\n\n    if (loc) {\n      const { highlightCode = true } = this.opts;\n\n      msg +=\n        \"\\n\" +\n        codeFrameColumns(\n          this.code,\n          {\n            start: {\n              line: loc.start.line,\n              column: loc.start.column + 1,\n            },\n            end:\n              loc.end && loc.start.line === loc.end.line\n                ? {\n                    line: loc.end.line,\n                    column: loc.end.column + 1,\n                  }\n                : undefined,\n          },\n          { highlightCode },\n        );\n    }\n\n    return new _Error(msg);\n  }\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error Babel 7\n  File.prototype.addImport = function addImport() {\n    throw new Error(\n      \"This API has been removed. If you're looking for this \" +\n        \"functionality in Babel 7, you should import the \" +\n        \"'@babel/helper-module-imports' module and use the functions exposed \" +\n        \" from that module, such as 'addNamed' or 'addDefault'.\",\n    );\n  };\n  // @ts-expect-error Babel 7\n  File.prototype.addTemplateObject = function addTemplateObject() {\n    throw new Error(\n      \"This function has been moved into the template literal transform itself.\",\n    );\n  };\n}\n", "import * as helpers from \"@babel/helpers\";\nimport generator from \"@babel/generator\";\nimport template from \"@babel/template\";\nimport {\n  arrayExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  exportNamedDeclaration,\n  exportSpecifier,\n  expressionStatement,\n  functionExpression,\n  identifier,\n  memberExpression,\n  objectExpression,\n  program,\n  stringLiteral,\n  unaryExpression,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { Replacements } from \"@babel/template\";\n\n// Wrapped to avoid wasting time parsing this when almost no-one uses\n// build-external-helpers.\nconst buildUmdWrapper = (replacements: Replacements) =>\n  template.statement`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  const container = functionExpression(\n    null,\n    [identifier(\"global\")],\n    blockStatement(body),\n  );\n  const tree = program([\n    expressionStatement(\n      callExpression(container, [\n        // typeof global === \"undefined\" ? self : global\n        conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", identifier(\"global\")),\n            stringLiteral(\"undefined\"),\n          ),\n          identifier(\"self\"),\n          identifier(\"global\"),\n        ),\n      ]),\n    ),\n  ]);\n\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(\n        namespace,\n        assignmentExpression(\n          \"=\",\n          memberExpression(identifier(\"global\"), namespace),\n          objectExpression([]),\n        ),\n      ),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return tree;\n}\n\nfunction buildModule(allowlist?: Array<string>) {\n  const body: t.Statement[] = [];\n  const refs = buildHelpers(body, null, allowlist);\n\n  body.unshift(\n    exportNamedDeclaration(\n      null,\n      Object.keys(refs).map(name => {\n        return exportSpecifier(cloneNode(refs[name]), identifier(name));\n      }),\n    ),\n  );\n\n  return program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, identifier(\"global\")),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return program([\n    buildUmdWrapper({\n      FACTORY_PARAMETERS: identifier(\"global\"),\n      BROWSER_ARGUMENTS: assignmentExpression(\n        \"=\",\n        memberExpression(identifier(\"root\"), namespace),\n        objectExpression([]),\n      ),\n      COMMON_ARGUMENTS: identifier(\"exports\"),\n      AMD_ARGUMENTS: arrayExpression([stringLiteral(\"exports\")]),\n      FACTORY_BODY: body,\n      UMD_ROOT: identifier(\"this\"),\n    }),\n  ]);\n}\n\nfunction buildVar(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, objectExpression([])),\n    ]),\n  );\n  const tree = program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression,\n  allowlist?: Array<string>,\n): Record<string, t.MemberExpression>;\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: null,\n  allowlist?: Array<string>,\n): Record<string, t.Identifier>;\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression | null,\n  allowlist?: Array<string>,\n) {\n  const getHelperReference = (name: string) => {\n    return namespace\n      ? memberExpression(namespace, identifier(name))\n      : identifier(`_${name}`);\n  };\n\n  const refs: { [key: string]: t.Identifier | t.MemberExpression } = {};\n  helpers.list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n\n    const ref = (refs[name] = getHelperReference(name));\n\n    const { nodes } = helpers.get(\n      name,\n      getHelperReference,\n      namespace ? null : `_${name}`,\n      [],\n      namespace\n        ? (ast, exportName, mapExportBindingAssignments) => {\n            mapExportBindingAssignments(node =>\n              assignmentExpression(\"=\", ref, node),\n            );\n            ast.body.push(\n              expressionStatement(\n                assignmentExpression(\"=\", ref, identifier(exportName)),\n              ),\n            );\n          }\n        : null,\n    );\n\n    body.push(...nodes);\n  });\n  return refs;\n}\nexport default function (\n  allowlist?: Array<string>,\n  outputType: \"global\" | \"module\" | \"umd\" | \"var\" = \"global\",\n) {\n  let tree: t.Program;\n\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar,\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return generator(tree).code;\n}\n", "import type { Handler } from \"gensync\";\n\nimport type {\n  ConfigFile,\n  IgnoreFile,\n  RelativeConfig,\n  FilePackageData,\n} from \"./types.ts\";\n\nimport type { CallerMetadata } from \"../validation/options.ts\";\n\nexport type { ConfigFile, IgnoreFile, RelativeConfig, FilePackageData };\n\nexport function findConfigUpwards(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  rootDir: string,\n): string | null {\n  return null;\n}\n\n// eslint-disable-next-line require-yield\nexport function* findPackageData(filepath: string): Handler<FilePackageData> {\n  return {\n    filepath,\n    directories: [],\n    pkg: null,\n    isPackage: false,\n  };\n}\n\n// eslint-disable-next-line require-yield\nexport function* findRelativeConfig(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  pkgData: FilePackageData,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<RelativeConfig> {\n  return { config: null, ignore: null };\n}\n\n// eslint-disable-next-line require-yield\nexport function* findRootConfig(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dirname: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  return null;\n}\n\n// eslint-disable-next-line require-yield\nexport function* loadConfig(\n  name: string,\n  dirname: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile> {\n  throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);\n}\n\n// eslint-disable-next-line require-yield\nexport function* resolveShowConfigPath(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dirname: string,\n): Handler<string | null> {\n  return null;\n}\n\nexport const ROOT_CONFIG_FILENAMES: string[] = [];\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function resolvePlugin(name: string, dirname: string): string | null {\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function resolvePreset(name: string, dirname: string): string | null {\n  return null;\n}\n\nexport function loadPlugin(\n  name: string,\n  dirname: string,\n): Handler<{\n  filepath: string;\n  value: unknown;\n}> {\n  throw new Error(\n    `Cannot load plugin ${name} relative to ${dirname} in a browser`,\n  );\n}\n\nexport function loadPreset(\n  name: string,\n  dirname: string,\n): Handler<{\n  filepath: string;\n  value: unknown;\n}> {\n  throw new Error(\n    `Cannot load preset ${name} relative to ${dirname} in a browser`,\n  );\n}\n", "export function getEnv(defaultValue: string = \"development\"): string {\n  return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;\n}\n", "\"use strict\";\n\n// These use the global symbol registry so that multiple copies of this\n// library can work together in case they are not deduped.\nconst GENSYNC_START = Symbol.for(\"gensync:v1:start\");\nconst GENSYNC_SUSPEND = Symbol.for(\"gensync:v1:suspend\");\n\nconst GENSYNC_EXPECTED_START = \"GENSYNC_EXPECTED_START\";\nconst GENSYNC_EXPECTED_SUSPEND = \"GENSYNC_EXPECTED_SUSPEND\";\nconst GENSYNC_OPTIONS_ERROR = \"GENSYNC_OPTIONS_ERROR\";\nconst GENSYNC_RACE_NONEMPTY = \"GENSYNC_RACE_NONEMPTY\";\nconst GENSYNC_ERRBACK_NO_CALLBACK = \"GENSYNC_ERRBACK_NO_CALLBACK\";\n\nmodule.exports = Object.assign(\n  function gensync(optsOrFn) {\n    let genFn = optsOrFn;\n    if (typeof optsOrFn !== \"function\") {\n      genFn = newGenerator(optsOrFn);\n    } else {\n      genFn = wrapGenerator(optsOrFn);\n    }\n\n    return Object.assign(genFn, makeFunctionAPI(genFn));\n  },\n  {\n    all: buildOperation({\n      name: \"all\",\n      arity: 1,\n      sync: function(args) {\n        const items = Array.from(args[0]);\n        return items.map(item => evaluateSync(item));\n      },\n      async: function(args, resolve, reject) {\n        const items = Array.from(args[0]);\n\n        if (items.length === 0) {\n          Promise.resolve().then(() => resolve([]));\n          return;\n        }\n\n        let count = 0;\n        const results = items.map(() => undefined);\n        items.forEach((item, i) => {\n          evaluateAsync(\n            item,\n            val => {\n              results[i] = val;\n              count += 1;\n\n              if (count === results.length) resolve(results);\n            },\n            reject\n          );\n        });\n      },\n    }),\n    race: buildOperation({\n      name: \"race\",\n      arity: 1,\n      sync: function(args) {\n        const items = Array.from(args[0]);\n        if (items.length === 0) {\n          throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n        }\n\n        return evaluateSync(items[0]);\n      },\n      async: function(args, resolve, reject) {\n        const items = Array.from(args[0]);\n        if (items.length === 0) {\n          throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n        }\n\n        for (const item of items) {\n          evaluateAsync(item, resolve, reject);\n        }\n      },\n    }),\n  }\n);\n\n/**\n * Given a generator function, return the standard API object that executes\n * the generator and calls the callbacks.\n */\nfunction makeFunctionAPI(genFn) {\n  const fns = {\n    sync: function(...args) {\n      return evaluateSync(genFn.apply(this, args));\n    },\n    async: function(...args) {\n      return new Promise((resolve, reject) => {\n        evaluateAsync(genFn.apply(this, args), resolve, reject);\n      });\n    },\n    errback: function(...args) {\n      const cb = args.pop();\n      if (typeof cb !== \"function\") {\n        throw makeError(\n          \"Asynchronous function called without callback\",\n          GENSYNC_ERRBACK_NO_CALLBACK\n        );\n      }\n\n      let gen;\n      try {\n        gen = genFn.apply(this, args);\n      } catch (err) {\n        cb(err);\n        return;\n      }\n\n      evaluateAsync(gen, val => cb(undefined, val), err => cb(err));\n    },\n  };\n  return fns;\n}\n\nfunction assertTypeof(type, name, value, allowUndefined) {\n  if (\n    typeof value === type ||\n    (allowUndefined && typeof value === \"undefined\")\n  ) {\n    return;\n  }\n\n  let msg;\n  if (allowUndefined) {\n    msg = `Expected opts.${name} to be either a ${type}, or undefined.`;\n  } else {\n    msg = `Expected opts.${name} to be a ${type}.`;\n  }\n\n  throw makeError(msg, GENSYNC_OPTIONS_ERROR);\n}\nfunction makeError(msg, code) {\n  return Object.assign(new Error(msg), { code });\n}\n\n/**\n * Given an options object, return a new generator that dispatches the\n * correct handler based on sync or async execution.\n */\nfunction newGenerator({ name, arity, sync, async, errback }) {\n  assertTypeof(\"string\", \"name\", name, true /* allowUndefined */);\n  assertTypeof(\"number\", \"arity\", arity, true /* allowUndefined */);\n  assertTypeof(\"function\", \"sync\", sync);\n  assertTypeof(\"function\", \"async\", async, true /* allowUndefined */);\n  assertTypeof(\"function\", \"errback\", errback, true /* allowUndefined */);\n  if (async && errback) {\n    throw makeError(\n      \"Expected one of either opts.async or opts.errback, but got _both_.\",\n      GENSYNC_OPTIONS_ERROR\n    );\n  }\n\n  if (typeof name !== \"string\") {\n    let fnName;\n    if (errback && errback.name && errback.name !== \"errback\") {\n      fnName = errback.name;\n    }\n    if (async && async.name && async.name !== \"async\") {\n      fnName = async.name.replace(/Async$/, \"\");\n    }\n    if (sync && sync.name && sync.name !== \"sync\") {\n      fnName = sync.name.replace(/Sync$/, \"\");\n    }\n\n    if (typeof fnName === \"string\") {\n      name = fnName;\n    }\n  }\n\n  if (typeof arity !== \"number\") {\n    arity = sync.length;\n  }\n\n  return buildOperation({\n    name,\n    arity,\n    sync: function(args) {\n      return sync.apply(this, args);\n    },\n    async: function(args, resolve, reject) {\n      if (async) {\n        async.apply(this, args).then(resolve, reject);\n      } else if (errback) {\n        errback.call(this, ...args, (err, value) => {\n          if (err == null) resolve(value);\n          else reject(err);\n        });\n      } else {\n        resolve(sync.apply(this, args));\n      }\n    },\n  });\n}\n\nfunction wrapGenerator(genFn) {\n  return setFunctionMetadata(genFn.name, genFn.length, function(...args) {\n    return genFn.apply(this, args);\n  });\n}\n\nfunction buildOperation({ name, arity, sync, async }) {\n  return setFunctionMetadata(name, arity, function*(...args) {\n    const resume = yield GENSYNC_START;\n    if (!resume) {\n      // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.\n      const res = sync.call(this, args);\n      return res;\n    }\n\n    let result;\n    try {\n      async.call(\n        this,\n        args,\n        value => {\n          if (result) return;\n\n          result = { value };\n          resume();\n        },\n        err => {\n          if (result) return;\n\n          result = { err };\n          resume();\n        }\n      );\n    } catch (err) {\n      result = { err };\n      resume();\n    }\n\n    // Suspend until the callbacks run. Will resume synchronously if the\n    // callback was already called.\n    yield GENSYNC_SUSPEND;\n\n    if (result.hasOwnProperty(\"err\")) {\n      throw result.err;\n    }\n\n    return result.value;\n  });\n}\n\nfunction evaluateSync(gen) {\n  let value;\n  while (!({ value } = gen.next()).done) {\n    assertStart(value, gen);\n  }\n  return value;\n}\n\nfunction evaluateAsync(gen, resolve, reject) {\n  (function step() {\n    try {\n      let value;\n      while (!({ value } = gen.next()).done) {\n        assertStart(value, gen);\n\n        // If this throws, it is considered to have broken the contract\n        // established for async handlers. If these handlers are called\n        // synchronously, it is also considered bad behavior.\n        let sync = true;\n        let didSyncResume = false;\n        const out = gen.next(() => {\n          if (sync) {\n            didSyncResume = true;\n          } else {\n            step();\n          }\n        });\n        sync = false;\n\n        assertSuspend(out, gen);\n\n        if (!didSyncResume) {\n          // Callback wasn't called synchronously, so break out of the loop\n          // and let it call 'step' later.\n          return;\n        }\n      }\n\n      return resolve(value);\n    } catch (err) {\n      return reject(err);\n    }\n  })();\n}\n\nfunction assertStart(value, gen) {\n  if (value === GENSYNC_START) return;\n\n  throwError(\n    gen,\n    makeError(\n      `Got unexpected yielded value in gensync generator: ${JSON.stringify(\n        value\n      )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,\n      GENSYNC_EXPECTED_START\n    )\n  );\n}\nfunction assertSuspend({ value, done }, gen) {\n  if (!done && value === GENSYNC_SUSPEND) return;\n\n  throwError(\n    gen,\n    makeError(\n      done\n        ? \"Unexpected generator completion. If you get this, it is probably a gensync bug.\"\n        : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(\n            value\n          )}. If you get this, it is probably a gensync bug.`,\n      GENSYNC_EXPECTED_SUSPEND\n    )\n  );\n}\n\nfunction throwError(gen, err) {\n  // Call `.throw` so that users can step in a debugger to easily see which\n  // 'yield' passed an unexpected value. If the `.throw` call didn't throw\n  // back to the generator, we explicitly do it to stop the error\n  // from being swallowed by user code try/catches.\n  if (gen.throw) gen.throw(err);\n  throw err;\n}\n\nfunction isIterable(value) {\n  return (\n    !!value &&\n    (typeof value === \"object\" || typeof value === \"function\") &&\n    !value[Symbol.iterator]\n  );\n}\n\nfunction setFunctionMetadata(name, arity, fn) {\n  if (typeof name === \"string\") {\n    // This should always work on the supported Node versions, but for the\n    // sake of users that are compiling to older versions, we check for\n    // configurability so we don't throw.\n    const nameDesc = Object.getOwnPropertyDescriptor(fn, \"name\");\n    if (!nameDesc || nameDesc.configurable) {\n      Object.defineProperty(\n        fn,\n        \"name\",\n        Object.assign(nameDesc || {}, {\n          configurable: true,\n          value: name,\n        })\n      );\n    }\n  }\n\n  if (typeof arity === \"number\") {\n    const lengthDesc = Object.getOwnPropertyDescriptor(fn, \"length\");\n    if (!lengthDesc || lengthDesc.configurable) {\n      Object.defineProperty(\n        fn,\n        \"length\",\n        Object.assign(lengthDesc || {}, {\n          configurable: true,\n          value: arity,\n        })\n      );\n    }\n  }\n\n  return fn;\n}\n", "import gensync, { type Gensync, type Handler, type Callback } from \"gensync\";\n\ntype MaybePromise<T> = T | Promise<T>;\n\nconst runGenerator: {\n  sync<Return>(gen: Handler<Return>): Return;\n  async<Return>(gen: Handler<Return>): Promise<Return>;\n  errback<Return>(gen: Handler<Return>, cb: Callback<Return>): void;\n} = gensync(function* (item: Handler<any>): Handler<any> {\n  return yield* item;\n});\n\n// This Gensync returns true if the current execution context is\n// asynchronous, otherwise it returns false.\nexport const isAsync = gensync({\n  sync: () => false,\n  errback: cb => cb(null, true),\n});\n\n// This function wraps any functions (which could be either synchronous or\n// asynchronous) with a Gensync. If the wrapped function returns a promise\n// but the current execution context is synchronous, it will throw the\n// provided error.\n// This is used to handle user-provided functions which could be asynchronous.\nexport function maybeAsync<Args extends unknown[], Return>(\n  fn: (...args: Args) => Return,\n  message: string,\n): Gensync<Args, Return> {\n  return gensync({\n    sync(...args) {\n      const result = fn.apply(this, args);\n      if (isThenable(result)) throw new Error(message);\n      return result;\n    },\n    async(...args) {\n      return Promise.resolve(fn.apply(this, args));\n    },\n  });\n}\n\nconst withKind = gensync({\n  sync: cb => cb(\"sync\"),\n  async: async cb => cb(\"async\"),\n}) as <T>(cb: (kind: \"sync\" | \"async\") => MaybePromise<T>) => Handler<T>;\n\n// This function wraps a generator (or a Gensync) into another function which,\n// when called, will run the provided generator in a sync or async way, depending\n// on the execution context where this forwardAsync function is called.\n// This is useful, for example, when passing a callback to a function which isn't\n// aware of gensync, but it only knows about synchronous and asynchronous functions.\n// An example is cache.using, which being exposed to the user must be as simple as\n// possible:\n//     yield* forwardAsync(gensyncFn, wrappedFn =>\n//       cache.using(x => {\n//         // Here we don't know about gensync. wrappedFn is a\n//         // normal sync or async function\n//         return wrappedFn(x);\n//       })\n//     )\nexport function forwardAsync<Args extends unknown[], Return>(\n  action: (...args: Args) => Handler<Return>,\n  cb: (\n    adapted: (...args: Args) => MaybePromise<Return>,\n  ) => MaybePromise<Return>,\n): Handler<Return> {\n  const g = gensync(action);\n  return withKind(kind => {\n    const adapted = g[kind];\n    return cb(adapted);\n  });\n}\n\n// If the given generator is executed asynchronously, the first time that it\n// is paused (i.e. When it yields a gensync generator which can't be run\n// synchronously), call the \"firstPause\" callback.\nexport const onFirstPause = gensync<\n  [gen: Handler<unknown>, firstPause: () => void],\n  unknown\n>({\n  name: \"onFirstPause\",\n  arity: 2,\n  sync: function (item) {\n    return runGenerator.sync(item);\n  },\n  errback: function (item, firstPause, cb) {\n    let completed = false;\n\n    runGenerator.errback(item, (err, value) => {\n      completed = true;\n      cb(err, value);\n    });\n\n    if (!completed) {\n      firstPause();\n    }\n  },\n}) as <T>(gen: Handler<T>, firstPause: () => void) => Handler<T>;\n\n// Wait for the given promise to be resolved\nexport const waitFor = gensync({\n  sync: x => x,\n  async: async x => x,\n}) as <T>(p: T | Promise<T>) => Handler<T>;\n\nexport function isThenable<T = any>(val: any): val is PromiseLike<T> {\n  return (\n    !!val &&\n    (typeof val === \"object\" || typeof val === \"function\") &&\n    !!val.then &&\n    typeof val.then === \"function\"\n  );\n}\n", "import type {\n  ValidatedOptions,\n  NormalizedOptions,\n} from \"./validation/options.ts\";\n\nexport function mergeOptions(\n  target: ValidatedOptions,\n  source: ValidatedOptions | NormalizedOptions,\n): void {\n  for (const k of Object.keys(source)) {\n    if (\n      (k === \"parserOpts\" || k === \"generatorOpts\" || k === \"assumptions\") &&\n      source[k]\n    ) {\n      const parserOpts = source[k];\n      const targetObj = target[k] || (target[k] = {});\n      mergeDefaultFields(targetObj, parserOpts);\n    } else {\n      //@ts-expect-error k must index source\n      const val = source[k];\n      //@ts-expect-error assigning source to target\n      if (val !== undefined) target[k] = val as any;\n    }\n  }\n}\n\nfunction mergeDefaultFields<T extends {}>(target: T, source: T) {\n  for (const k of Object.keys(source) as (keyof T)[]) {\n    const val = source[k];\n    if (val !== undefined) target[k] = val;\n  }\n}\n\nexport function isIterableIterator(value: any): value is IterableIterator<any> {\n  return (\n    !!value &&\n    typeof value.next === \"function\" &&\n    typeof value[Symbol.iterator] === \"function\"\n  );\n}\n", "export type DeepArray<T> = Array<T | ReadonlyDeepArray<T>>;\n\n// Just to make sure that DeepArray<T> is not assignable to ReadonlyDeepArray<T>\ndeclare const __marker: unique symbol;\nexport type ReadonlyDeepArray<T> = ReadonlyArray<T | ReadonlyDeepArray<T>> & {\n  [__marker]: true;\n};\n\nexport function finalize<T>(deepArr: DeepArray<T>): ReadonlyDeepArray<T> {\n  return Object.freeze(deepArr) as ReadonlyDeepArray<T>;\n}\n\nexport function flattenToSet<T extends string>(\n  arr: ReadonlyDeepArray<T>,\n): Set<T> {\n  const result = new Set<T>();\n  const stack = [arr];\n  while (stack.length > 0) {\n    for (const el of stack.pop()) {\n      if (Array.isArray(el)) stack.push(el as ReadonlyDeepArray<T>);\n      else result.add(el as T);\n    }\n  }\n  return result;\n}\n", "import { finalize } from \"./helpers/deep-array.ts\";\nimport type { ReadonlyDeepArray } from \"./helpers/deep-array.ts\";\nimport type { PluginObject } from \"./validation/plugins.ts\";\n\nexport default class Plugin {\n  key: string | undefined | null;\n  manipulateOptions?: (options: unknown, parserOpts: unknown) => void;\n  post?: PluginObject[\"post\"];\n  pre?: PluginObject[\"pre\"];\n  visitor: PluginObject[\"visitor\"];\n\n  parserOverride?: Function;\n  generatorOverride?: Function;\n\n  options: {};\n\n  externalDependencies: ReadonlyDeepArray<string>;\n\n  constructor(\n    plugin: PluginObject,\n    options: {},\n    key?: string,\n    externalDependencies: ReadonlyDeepArray<string> = finalize([]),\n  ) {\n    this.key = plugin.name || key;\n\n    this.manipulateOptions = plugin.manipulateOptions;\n    this.post = plugin.post;\n    this.pre = plugin.pre;\n    this.visitor = plugin.visitor || {};\n    this.parserOverride = plugin.parserOverride;\n    this.generatorOverride = plugin.generatorOverride;\n\n    this.options = options;\n    this.externalDependencies = externalDependencies;\n  }\n}\n", "import type { Handler } from \"gensync\";\n\nimport { isAsync, waitFor } from \"./async.ts\";\n\nexport function once<R>(fn: () => Handler<R>): () => Handler<R> {\n  let result: { ok: true; value: R } | { ok: false; value: unknown };\n  let resultP: Promise<R>;\n  let promiseReferenced = false;\n  return function* () {\n    if (!result) {\n      if (resultP) {\n        promiseReferenced = true;\n        return yield* waitFor(resultP);\n      }\n\n      if (!(yield* isAsync())) {\n        try {\n          result = { ok: true, value: yield* fn() };\n        } catch (error) {\n          result = { ok: false, value: error };\n        }\n      } else {\n        let resolve: (result: R) => void, reject: (error: unknown) => void;\n        resultP = new Promise((res, rej) => {\n          resolve = res;\n          reject = rej;\n        });\n\n        try {\n          result = { ok: true, value: yield* fn() };\n          // Avoid keeping the promise around\n          // now that we have the result.\n          resultP = null;\n          // We only resolve/reject the promise if it has been actually\n          // referenced. If there are no listeners we can forget about it.\n          // In the reject case, this avoid uncatchable unhandledRejection\n          // events.\n          if (promiseReferenced) resolve(result.value);\n        } catch (error) {\n          result = { ok: false, value: error };\n          resultP = null;\n          if (promiseReferenced) reject(error);\n        }\n      }\n    }\n\n    if (result.ok) return result.value;\n    else throw result.value;\n  };\n}\n", "import gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport {\n  maybeAsync,\n  isAsync,\n  onFirstPause,\n  waitFor,\n  isThenable,\n} from \"../gensync-utils/async.ts\";\nimport { isIterableIterator } from \"./util.ts\";\n\nexport type { CacheConfigurator };\n\nexport type SimpleCacheConfigurator = {\n  (forever: boolean): void;\n  <T>(handler: () => T): T;\n\n  forever: () => void;\n  never: () => void;\n  using: <T>(handler: () => T) => T;\n  invalidate: <T>(handler: () => T) => T;\n};\n\nexport type CacheEntry<ResultT, SideChannel> = Array<{\n  value: ResultT;\n  valid: (channel: SideChannel) => Handler<boolean>;\n}>;\n\nconst synchronize = <ArgsT extends unknown[], ResultT>(\n  gen: (...args: ArgsT) => Handler<ResultT>,\n): ((...args: ArgsT) => ResultT) => {\n  return gensync(gen).sync;\n};\n\n// eslint-disable-next-line require-yield\nfunction* genTrue() {\n  return true;\n}\n\nexport function makeWeakCache<ArgT extends object, ResultT, SideChannel>(\n  handler: (\n    arg: ArgT,\n    cache: CacheConfigurator<SideChannel>,\n  ) => Handler<ResultT> | ResultT,\n): (arg: ArgT, data: SideChannel) => Handler<ResultT> {\n  return makeCachedFunction<ArgT, ResultT, SideChannel>(WeakMap, handler);\n}\n\nexport function makeWeakCacheSync<ArgT extends object, ResultT, SideChannel>(\n  handler: (arg: ArgT, cache?: CacheConfigurator<SideChannel>) => ResultT,\n): (arg: ArgT, data?: SideChannel) => ResultT {\n  return synchronize<[ArgT, SideChannel], ResultT>(\n    makeWeakCache<ArgT, ResultT, SideChannel>(handler),\n  );\n}\n\nexport function makeStrongCache<ArgT, ResultT, SideChannel>(\n  handler: (\n    arg: ArgT,\n    cache: CacheConfigurator<SideChannel>,\n  ) => Handler<ResultT> | ResultT,\n): (arg: ArgT, data: SideChannel) => Handler<ResultT> {\n  return makeCachedFunction<ArgT, ResultT, SideChannel>(Map, handler);\n}\n\nexport function makeStrongCacheSync<ArgT, ResultT, SideChannel>(\n  handler: (arg: ArgT, cache?: CacheConfigurator<SideChannel>) => ResultT,\n): (arg: ArgT, data?: SideChannel) => ResultT {\n  return synchronize<[ArgT, SideChannel], ResultT>(\n    makeStrongCache<ArgT, ResultT, SideChannel>(handler),\n  );\n}\n\n/* NOTE: Part of the logic explained in this comment is explained in the\n *       getCachedValueOrWait and setupAsyncLocks functions.\n *\n * > There are only two hard things in Computer Science: cache invalidation and naming things.\n * > -- Phil Karlton\n *\n * I don't know if Phil was also thinking about handling a cache whose invalidation function is\n * defined asynchronously is considered, but it is REALLY hard to do correctly.\n *\n * The implemented logic (only when gensync is run asynchronously) is the following:\n *   1. If there is a valid cache associated to the current \"arg\" parameter,\n *       a. RETURN the cached value\n *   3. If there is a FinishLock associated to the current \"arg\" parameter representing a valid cache,\n *       a. Wait for that lock to be released\n *       b. RETURN the value associated with that lock\n *   5. Start executing the function to be cached\n *       a. If it pauses on a promise, then\n *           i. Let FinishLock be a new lock\n *          ii. Store FinishLock as associated to the current \"arg\" parameter\n *         iii. Wait for the function to finish executing\n *          iv. Release FinishLock\n *           v. Send the function result to anyone waiting on FinishLock\n *   6. Store the result in the cache\n *   7. RETURN the result\n */\nfunction makeCachedFunction<ArgT, ResultT, SideChannel>(\n  CallCache: new <Cached>() => CacheMap<ArgT, Cached, SideChannel>,\n  handler: (\n    arg: ArgT,\n    cache: CacheConfigurator<SideChannel>,\n  ) => Handler<ResultT> | ResultT,\n): (arg: ArgT, data: SideChannel) => Handler<ResultT> {\n  const callCacheSync = new CallCache<ResultT>();\n  const callCacheAsync = new CallCache<ResultT>();\n  const futureCache = new CallCache<Lock<ResultT>>();\n\n  return function* cachedFunction(arg: ArgT, data: SideChannel) {\n    const asyncContext = yield* isAsync();\n    const callCache = asyncContext ? callCacheAsync : callCacheSync;\n\n    const cached = yield* getCachedValueOrWait<ArgT, ResultT, SideChannel>(\n      asyncContext,\n      callCache,\n      futureCache,\n      arg,\n      data,\n    );\n    if (cached.valid) return cached.value;\n\n    const cache = new CacheConfigurator(data);\n\n    const handlerResult: Handler<ResultT> | ResultT = handler(arg, cache);\n\n    let finishLock: Lock<ResultT>;\n    let value: ResultT;\n\n    if (isIterableIterator(handlerResult)) {\n      value = yield* onFirstPause(handlerResult, () => {\n        finishLock = setupAsyncLocks(cache, futureCache, arg);\n      });\n    } else {\n      value = handlerResult;\n    }\n\n    updateFunctionCache(callCache, cache, arg, value);\n\n    if (finishLock) {\n      futureCache.delete(arg);\n      finishLock.release(value);\n    }\n\n    return value;\n  };\n}\n\ntype CacheMap<ArgT, ResultT, SideChannel> =\n  | Map<ArgT, CacheEntry<ResultT, SideChannel>>\n  // @ts-expect-error todo(flow->ts): add `extends object` constraint to ArgT\n  | WeakMap<ArgT, CacheEntry<ResultT, SideChannel>>;\n\nfunction* getCachedValue<ArgT, ResultT, SideChannel>(\n  cache: CacheMap<ArgT, ResultT, SideChannel>,\n  arg: ArgT,\n  data: SideChannel,\n): Handler<{ valid: true; value: ResultT } | { valid: false; value: null }> {\n  const cachedValue: CacheEntry<ResultT, SideChannel> | void = cache.get(arg);\n\n  if (cachedValue) {\n    for (const { value, valid } of cachedValue) {\n      if (yield* valid(data)) return { valid: true, value };\n    }\n  }\n\n  return { valid: false, value: null };\n}\n\nfunction* getCachedValueOrWait<ArgT, ResultT, SideChannel>(\n  asyncContext: boolean,\n  callCache: CacheMap<ArgT, ResultT, SideChannel>,\n  futureCache: CacheMap<ArgT, Lock<ResultT>, SideChannel>,\n  arg: ArgT,\n  data: SideChannel,\n): Handler<{ valid: true; value: ResultT } | { valid: false; value: null }> {\n  const cached = yield* getCachedValue(callCache, arg, data);\n  if (cached.valid) {\n    return cached;\n  }\n\n  if (asyncContext) {\n    const cached = yield* getCachedValue(futureCache, arg, data);\n    if (cached.valid) {\n      const value = yield* waitFor<ResultT>(cached.value.promise);\n      return { valid: true, value };\n    }\n  }\n\n  return { valid: false, value: null };\n}\n\nfunction setupAsyncLocks<ArgT, ResultT, SideChannel>(\n  config: CacheConfigurator<SideChannel>,\n  futureCache: CacheMap<ArgT, Lock<ResultT>, SideChannel>,\n  arg: ArgT,\n): Lock<ResultT> {\n  const finishLock = new Lock<ResultT>();\n\n  updateFunctionCache(futureCache, config, arg, finishLock);\n\n  return finishLock;\n}\n\nfunction updateFunctionCache<\n  ArgT,\n  ResultT,\n  SideChannel,\n  Cache extends CacheMap<ArgT, ResultT, SideChannel>,\n>(\n  cache: Cache,\n  config: CacheConfigurator<SideChannel>,\n  arg: ArgT,\n  value: ResultT,\n) {\n  if (!config.configured()) config.forever();\n\n  let cachedValue: CacheEntry<ResultT, SideChannel> | void = cache.get(arg);\n\n  config.deactivate();\n\n  switch (config.mode()) {\n    case \"forever\":\n      cachedValue = [{ value, valid: genTrue }];\n      cache.set(arg, cachedValue);\n      break;\n    case \"invalidate\":\n      cachedValue = [{ value, valid: config.validator() }];\n      cache.set(arg, cachedValue);\n      break;\n    case \"valid\":\n      if (cachedValue) {\n        cachedValue.push({ value, valid: config.validator() });\n      } else {\n        cachedValue = [{ value, valid: config.validator() }];\n        cache.set(arg, cachedValue);\n      }\n  }\n}\n\nclass CacheConfigurator<SideChannel = void> {\n  _active: boolean = true;\n  _never: boolean = false;\n  _forever: boolean = false;\n  _invalidate: boolean = false;\n\n  _configured: boolean = false;\n\n  _pairs: Array<\n    [cachedValue: unknown, handler: (data: SideChannel) => Handler<unknown>]\n  > = [];\n\n  _data: SideChannel;\n\n  constructor(data: SideChannel) {\n    this._data = data;\n  }\n\n  simple() {\n    return makeSimpleConfigurator(this);\n  }\n\n  mode() {\n    if (this._never) return \"never\";\n    if (this._forever) return \"forever\";\n    if (this._invalidate) return \"invalidate\";\n    return \"valid\";\n  }\n\n  forever() {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n    if (this._never) {\n      throw new Error(\"Caching has already been configured with .never()\");\n    }\n    this._forever = true;\n    this._configured = true;\n  }\n\n  never() {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n    if (this._forever) {\n      throw new Error(\"Caching has already been configured with .forever()\");\n    }\n    this._never = true;\n    this._configured = true;\n  }\n\n  using<T>(handler: (data: SideChannel) => T): T {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n    if (this._never || this._forever) {\n      throw new Error(\n        \"Caching has already been configured with .never or .forever()\",\n      );\n    }\n    this._configured = true;\n\n    const key = handler(this._data);\n\n    const fn = maybeAsync(\n      handler,\n      `You appear to be using an async cache handler, but Babel has been called synchronously`,\n    );\n\n    if (isThenable(key)) {\n      // @ts-expect-error todo(flow->ts): improve function return type annotation\n      return key.then((key: unknown) => {\n        this._pairs.push([key, fn]);\n        return key;\n      });\n    }\n\n    this._pairs.push([key, fn]);\n    return key;\n  }\n\n  invalidate<T>(handler: (data: SideChannel) => T): T {\n    this._invalidate = true;\n    return this.using(handler);\n  }\n\n  validator(): (data: SideChannel) => Handler<boolean> {\n    const pairs = this._pairs;\n    return function* (data: SideChannel) {\n      for (const [key, fn] of pairs) {\n        if (key !== (yield* fn(data))) return false;\n      }\n      return true;\n    };\n  }\n\n  deactivate() {\n    this._active = false;\n  }\n\n  configured() {\n    return this._configured;\n  }\n}\n\nfunction makeSimpleConfigurator(\n  cache: CacheConfigurator<any>,\n): SimpleCacheConfigurator {\n  function cacheFn(val: any) {\n    if (typeof val === \"boolean\") {\n      if (val) cache.forever();\n      else cache.never();\n      return;\n    }\n\n    return cache.using(() => assertSimpleType(val()));\n  }\n  cacheFn.forever = () => cache.forever();\n  cacheFn.never = () => cache.never();\n  cacheFn.using = (cb: { (): SimpleType }) =>\n    cache.using(() => assertSimpleType(cb()));\n  cacheFn.invalidate = (cb: { (): SimpleType }) =>\n    cache.invalidate(() => assertSimpleType(cb()));\n\n  return cacheFn as any;\n}\n\n// Types are limited here so that in the future these values can be used\n// as part of Babel's caching logic.\nexport type SimpleType =\n  | string\n  | boolean\n  | number\n  | null\n  | void\n  | Promise<SimpleType>;\nexport function assertSimpleType(value: unknown): SimpleType {\n  if (isThenable(value)) {\n    throw new Error(\n      `You appear to be using an async cache handler, ` +\n        `which your current version of Babel does not support. ` +\n        `We may add support for this in the future, ` +\n        `but if you're on the most recent version of @babel/core and still ` +\n        `seeing this error, then you'll need to synchronously handle your caching logic.`,\n    );\n  }\n\n  if (\n    value != null &&\n    typeof value !== \"string\" &&\n    typeof value !== \"boolean\" &&\n    typeof value !== \"number\"\n  ) {\n    throw new Error(\n      \"Cache keys must be either string, boolean, number, null, or undefined.\",\n    );\n  }\n  // @ts-expect-error Type 'unknown' is not assignable to type 'SimpleType'. This can be removed\n  // when strictNullCheck is enabled\n  return value;\n}\n\nclass Lock<T> {\n  released: boolean = false;\n  promise: Promise<T>;\n  _resolve: (value: T) => void;\n\n  constructor() {\n    this.promise = new Promise(resolve => {\n      this._resolve = resolve;\n    });\n  }\n\n  release(value: T) {\n    this.released = true;\n    this._resolve(value);\n  }\n}\n", "[{\"name\":\"nodejs\",\"version\":\"0.2.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"2.3.8.0\"},{\"name\":\"nodejs\",\"version\":\"0.3.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"2.5.1.0\"},{\"name\":\"nodejs\",\"version\":\"0.4.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"3.1.2.0\"},{\"name\":\"nodejs\",\"version\":\"0.5.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"3.1.8.25\"},{\"name\":\"nodejs\",\"version\":\"0.6.0\",\"date\":\"2011-11-04\",\"lts\":false,\"security\":false,\"v8\":\"3.6.6.6\"},{\"name\":\"nodejs\",\"version\":\"0.7.0\",\"date\":\"2012-01-17\",\"lts\":false,\"security\":false,\"v8\":\"3.8.6.0\"},{\"name\":\"nodejs\",\"version\":\"0.8.0\",\"date\":\"2012-06-22\",\"lts\":false,\"security\":false,\"v8\":\"3.11.10.10\"},{\"name\":\"nodejs\",\"version\":\"0.9.0\",\"date\":\"2012-07-20\",\"lts\":false,\"security\":false,\"v8\":\"3.11.10.15\"},{\"name\":\"nodejs\",\"version\":\"0.10.0\",\"date\":\"2013-03-11\",\"lts\":false,\"security\":false,\"v8\":\"3.14.5.8\"},{\"name\":\"nodejs\",\"version\":\"0.11.0\",\"date\":\"2013-03-28\",\"lts\":false,\"security\":false,\"v8\":\"3.17.13.0\"},{\"name\":\"nodejs\",\"version\":\"0.12.0\",\"date\":\"2015-02-06\",\"lts\":false,\"security\":false,\"v8\":\"3.28.73.0\"},{\"name\":\"nodejs\",\"version\":\"4.0.0\",\"date\":\"2015-09-08\",\"lts\":false,\"security\":false,\"v8\":\"4.5.103.30\"},{\"name\":\"nodejs\",\"version\":\"4.1.0\",\"date\":\"2015-09-17\",\"lts\":false,\"security\":false,\"v8\":\"4.5.103.33\"},{\"name\":\"nodejs\",\"version\":\"4.2.0\",\"date\":\"2015-10-12\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.3.0\",\"date\":\"2016-02-09\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.4.0\",\"date\":\"2016-03-08\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.5.0\",\"date\":\"2016-08-16\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.37\"},{\"name\":\"nodejs\",\"version\":\"4.6.0\",\"date\":\"2016-09-27\",\"lts\":\"Argon\",\"security\":true,\"v8\":\"4.5.103.37\"},{\"name\":\"nodejs\",\"version\":\"4.7.0\",\"date\":\"2016-12-06\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.43\"},{\"name\":\"nodejs\",\"version\":\"4.8.0\",\"date\":\"2017-02-21\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.45\"},{\"name\":\"nodejs\",\"version\":\"4.9.0\",\"date\":\"2018-03-28\",\"lts\":\"Argon\",\"security\":true,\"v8\":\"4.5.103.53\"},{\"name\":\"nodejs\",\"version\":\"5.0.0\",\"date\":\"2015-10-29\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.28\"},{\"name\":\"nodejs\",\"version\":\"5.1.0\",\"date\":\"2015-11-17\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.2.0\",\"date\":\"2015-12-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.3.0\",\"date\":\"2015-12-15\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.4.0\",\"date\":\"2016-01-06\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.5.0\",\"date\":\"2016-01-21\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.6.0\",\"date\":\"2016-02-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.7.0\",\"date\":\"2016-02-23\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.8.0\",\"date\":\"2016-03-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.9.0\",\"date\":\"2016-03-16\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.10.0\",\"date\":\"2016-04-01\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.11.0\",\"date\":\"2016-04-21\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.12.0\",\"date\":\"2016-06-23\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.32\"},{\"name\":\"nodejs\",\"version\":\"6.0.0\",\"date\":\"2016-04-26\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.35\"},{\"name\":\"nodejs\",\"version\":\"6.1.0\",\"date\":\"2016-05-05\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.35\"},{\"name\":\"nodejs\",\"version\":\"6.2.0\",\"date\":\"2016-05-17\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.47\"},{\"name\":\"nodejs\",\"version\":\"6.3.0\",\"date\":\"2016-07-06\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.52\"},{\"name\":\"nodejs\",\"version\":\"6.4.0\",\"date\":\"2016-08-12\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.60\"},{\"name\":\"nodejs\",\"version\":\"6.5.0\",\"date\":\"2016-08-26\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.81\"},{\"name\":\"nodejs\",\"version\":\"6.6.0\",\"date\":\"2016-09-14\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.83\"},{\"name\":\"nodejs\",\"version\":\"6.7.0\",\"date\":\"2016-09-27\",\"lts\":false,\"security\":true,\"v8\":\"5.1.281.83\"},{\"name\":\"nodejs\",\"version\":\"6.8.0\",\"date\":\"2016-10-12\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.84\"},{\"name\":\"nodejs\",\"version\":\"6.9.0\",\"date\":\"2016-10-18\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.84\"},{\"name\":\"nodejs\",\"version\":\"6.10.0\",\"date\":\"2017-02-21\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.93\"},{\"name\":\"nodejs\",\"version\":\"6.11.0\",\"date\":\"2017-06-06\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.102\"},{\"name\":\"nodejs\",\"version\":\"6.12.0\",\"date\":\"2017-11-06\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.108\"},{\"name\":\"nodejs\",\"version\":\"6.13.0\",\"date\":\"2018-02-10\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.14.0\",\"date\":\"2018-03-28\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.15.0\",\"date\":\"2018-11-27\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.16.0\",\"date\":\"2018-12-26\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.17.0\",\"date\":\"2019-02-28\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"7.0.0\",\"date\":\"2016-10-25\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.36\"},{\"name\":\"nodejs\",\"version\":\"7.1.0\",\"date\":\"2016-11-08\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.36\"},{\"name\":\"nodejs\",\"version\":\"7.2.0\",\"date\":\"2016-11-22\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.43\"},{\"name\":\"nodejs\",\"version\":\"7.3.0\",\"date\":\"2016-12-20\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.45\"},{\"name\":\"nodejs\",\"version\":\"7.4.0\",\"date\":\"2017-01-04\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.45\"},{\"name\":\"nodejs\",\"version\":\"7.5.0\",\"date\":\"2017-01-31\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.48\"},{\"name\":\"nodejs\",\"version\":\"7.6.0\",\"date\":\"2017-02-21\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.40\"},{\"name\":\"nodejs\",\"version\":\"7.7.0\",\"date\":\"2017-02-28\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.41\"},{\"name\":\"nodejs\",\"version\":\"7.8.0\",\"date\":\"2017-03-29\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"7.9.0\",\"date\":\"2017-04-11\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"7.10.0\",\"date\":\"2017-05-02\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"8.0.0\",\"date\":\"2017-05-30\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.1.0\",\"date\":\"2017-06-08\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.2.0\",\"date\":\"2017-07-19\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.3.0\",\"date\":\"2017-08-08\",\"lts\":false,\"security\":false,\"v8\":\"6.0.286.52\"},{\"name\":\"nodejs\",\"version\":\"8.4.0\",\"date\":\"2017-08-15\",\"lts\":false,\"security\":false,\"v8\":\"6.0.286.52\"},{\"name\":\"nodejs\",\"version\":\"8.5.0\",\"date\":\"2017-09-12\",\"lts\":false,\"security\":false,\"v8\":\"6.0.287.53\"},{\"name\":\"nodejs\",\"version\":\"8.6.0\",\"date\":\"2017-09-26\",\"lts\":false,\"security\":false,\"v8\":\"6.0.287.53\"},{\"name\":\"nodejs\",\"version\":\"8.7.0\",\"date\":\"2017-10-11\",\"lts\":false,\"security\":false,\"v8\":\"6.1.534.42\"},{\"name\":\"nodejs\",\"version\":\"8.8.0\",\"date\":\"2017-10-24\",\"lts\":false,\"security\":false,\"v8\":\"6.1.534.42\"},{\"name\":\"nodejs\",\"version\":\"8.9.0\",\"date\":\"2017-10-31\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.1.534.46\"},{\"name\":\"nodejs\",\"version\":\"8.10.0\",\"date\":\"2018-03-06\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.50\"},{\"name\":\"nodejs\",\"version\":\"8.11.0\",\"date\":\"2018-03-28\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.50\"},{\"name\":\"nodejs\",\"version\":\"8.12.0\",\"date\":\"2018-09-10\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.66\"},{\"name\":\"nodejs\",\"version\":\"8.13.0\",\"date\":\"2018-11-20\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.72\"},{\"name\":\"nodejs\",\"version\":\"8.14.0\",\"date\":\"2018-11-27\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.72\"},{\"name\":\"nodejs\",\"version\":\"8.15.0\",\"date\":\"2018-12-26\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.75\"},{\"name\":\"nodejs\",\"version\":\"8.16.0\",\"date\":\"2019-04-16\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.77\"},{\"name\":\"nodejs\",\"version\":\"8.17.0\",\"date\":\"2019-12-17\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.78\"},{\"name\":\"nodejs\",\"version\":\"9.0.0\",\"date\":\"2017-10-31\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.32\"},{\"name\":\"nodejs\",\"version\":\"9.1.0\",\"date\":\"2017-11-07\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.32\"},{\"name\":\"nodejs\",\"version\":\"9.2.0\",\"date\":\"2017-11-14\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.44\"},{\"name\":\"nodejs\",\"version\":\"9.3.0\",\"date\":\"2017-12-12\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.4.0\",\"date\":\"2018-01-10\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.5.0\",\"date\":\"2018-01-31\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.6.0\",\"date\":\"2018-02-21\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.7.0\",\"date\":\"2018-03-01\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.8.0\",\"date\":\"2018-03-07\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.9.0\",\"date\":\"2018-03-21\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.10.0\",\"date\":\"2018-03-28\",\"lts\":false,\"security\":true,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.11.0\",\"date\":\"2018-04-04\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"10.0.0\",\"date\":\"2018-04-24\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.24\"},{\"name\":\"nodejs\",\"version\":\"10.1.0\",\"date\":\"2018-05-08\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.27\"},{\"name\":\"nodejs\",\"version\":\"10.2.0\",\"date\":\"2018-05-23\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.32\"},{\"name\":\"nodejs\",\"version\":\"10.3.0\",\"date\":\"2018-05-29\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.32\"},{\"name\":\"nodejs\",\"version\":\"10.4.0\",\"date\":\"2018-06-06\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.43\"},{\"name\":\"nodejs\",\"version\":\"10.5.0\",\"date\":\"2018-06-20\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.46\"},{\"name\":\"nodejs\",\"version\":\"10.6.0\",\"date\":\"2018-07-04\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.46\"},{\"name\":\"nodejs\",\"version\":\"10.7.0\",\"date\":\"2018-07-18\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.49\"},{\"name\":\"nodejs\",\"version\":\"10.8.0\",\"date\":\"2018-08-01\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.49\"},{\"name\":\"nodejs\",\"version\":\"10.9.0\",\"date\":\"2018-08-15\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.24\"},{\"name\":\"nodejs\",\"version\":\"10.10.0\",\"date\":\"2018-09-06\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.30\"},{\"name\":\"nodejs\",\"version\":\"10.11.0\",\"date\":\"2018-09-19\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.12.0\",\"date\":\"2018-10-10\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.13.0\",\"date\":\"2018-10-30\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.14.0\",\"date\":\"2018-11-27\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.15.0\",\"date\":\"2018-12-26\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.16.0\",\"date\":\"2019-05-28\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.17.0\",\"date\":\"2019-10-22\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.18.0\",\"date\":\"2019-12-17\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.19.0\",\"date\":\"2020-02-05\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.20.0\",\"date\":\"2020-03-26\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.21.0\",\"date\":\"2020-06-02\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.22.0\",\"date\":\"2020-07-21\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.23.0\",\"date\":\"2020-10-27\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.24.0\",\"date\":\"2021-02-23\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"11.0.0\",\"date\":\"2018-10-23\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.28\"},{\"name\":\"nodejs\",\"version\":\"11.1.0\",\"date\":\"2018-10-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.32\"},{\"name\":\"nodejs\",\"version\":\"11.2.0\",\"date\":\"2018-11-15\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.3.0\",\"date\":\"2018-11-27\",\"lts\":false,\"security\":true,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.4.0\",\"date\":\"2018-12-07\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.5.0\",\"date\":\"2018-12-18\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.6.0\",\"date\":\"2018-12-26\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.7.0\",\"date\":\"2019-01-17\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.8.0\",\"date\":\"2019-01-24\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.9.0\",\"date\":\"2019-01-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.10.0\",\"date\":\"2019-02-14\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.11.0\",\"date\":\"2019-03-05\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.12.0\",\"date\":\"2019-03-14\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.13.0\",\"date\":\"2019-03-28\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.14.0\",\"date\":\"2019-04-10\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.15.0\",\"date\":\"2019-04-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"12.0.0\",\"date\":\"2019-04-23\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.1.0\",\"date\":\"2019-04-29\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.2.0\",\"date\":\"2019-05-07\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.3.0\",\"date\":\"2019-05-21\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.27\"},{\"name\":\"nodejs\",\"version\":\"12.4.0\",\"date\":\"2019-06-04\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.27\"},{\"name\":\"nodejs\",\"version\":\"12.5.0\",\"date\":\"2019-06-26\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.6.0\",\"date\":\"2019-07-03\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.7.0\",\"date\":\"2019-07-23\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.8.0\",\"date\":\"2019-08-06\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.9.0\",\"date\":\"2019-08-20\",\"lts\":false,\"security\":false,\"v8\":\"7.6.303.29\"},{\"name\":\"nodejs\",\"version\":\"12.10.0\",\"date\":\"2019-09-04\",\"lts\":false,\"security\":false,\"v8\":\"7.6.303.29\"},{\"name\":\"nodejs\",\"version\":\"12.11.0\",\"date\":\"2019-09-25\",\"lts\":false,\"security\":false,\"v8\":\"7.7.299.11\"},{\"name\":\"nodejs\",\"version\":\"12.12.0\",\"date\":\"2019-10-11\",\"lts\":false,\"security\":false,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.13.0\",\"date\":\"2019-10-21\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.14.0\",\"date\":\"2019-12-17\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.15.0\",\"date\":\"2020-02-05\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.16.0\",\"date\":\"2020-02-11\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.17.0\",\"date\":\"2020-05-26\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.18.0\",\"date\":\"2020-06-02\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.19.0\",\"date\":\"2020-10-06\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.20.0\",\"date\":\"2020-11-24\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.21.0\",\"date\":\"2021-02-23\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.22.0\",\"date\":\"2021-03-30\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"13.0.0\",\"date\":\"2019-10-22\",\"lts\":false,\"security\":false,\"v8\":\"7.8.279.17\"},{\"name\":\"nodejs\",\"version\":\"13.1.0\",\"date\":\"2019-11-05\",\"lts\":false,\"security\":false,\"v8\":\"7.8.279.17\"},{\"name\":\"nodejs\",\"version\":\"13.2.0\",\"date\":\"2019-11-21\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.23\"},{\"name\":\"nodejs\",\"version\":\"13.3.0\",\"date\":\"2019-12-03\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.4.0\",\"date\":\"2019-12-17\",\"lts\":false,\"security\":true,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.5.0\",\"date\":\"2019-12-18\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.6.0\",\"date\":\"2020-01-07\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.7.0\",\"date\":\"2020-01-21\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.8.0\",\"date\":\"2020-02-05\",\"lts\":false,\"security\":true,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.9.0\",\"date\":\"2020-02-18\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.10.0\",\"date\":\"2020-03-04\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.11.0\",\"date\":\"2020-03-12\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.12.0\",\"date\":\"2020-03-26\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.13.0\",\"date\":\"2020-04-14\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.14.0\",\"date\":\"2020-04-29\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"14.0.0\",\"date\":\"2020-04-21\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.30\"},{\"name\":\"nodejs\",\"version\":\"14.1.0\",\"date\":\"2020-04-29\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.2.0\",\"date\":\"2020-05-05\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.3.0\",\"date\":\"2020-05-19\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.4.0\",\"date\":\"2020-06-02\",\"lts\":false,\"security\":true,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.5.0\",\"date\":\"2020-06-30\",\"lts\":false,\"security\":false,\"v8\":\"8.3.110.9\"},{\"name\":\"nodejs\",\"version\":\"14.6.0\",\"date\":\"2020-07-20\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.7.0\",\"date\":\"2020-07-29\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.8.0\",\"date\":\"2020-08-11\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.9.0\",\"date\":\"2020-08-27\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.10.0\",\"date\":\"2020-09-08\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.11.0\",\"date\":\"2020-09-15\",\"lts\":false,\"security\":true,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.12.0\",\"date\":\"2020-09-22\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.13.0\",\"date\":\"2020-09-29\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.14.0\",\"date\":\"2020-10-15\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.15.0\",\"date\":\"2020-10-27\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.16.0\",\"date\":\"2021-02-23\",\"lts\":\"Fermium\",\"security\":true,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.17.0\",\"date\":\"2021-05-11\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.18.0\",\"date\":\"2021-09-28\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.19.0\",\"date\":\"2022-02-01\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.20.0\",\"date\":\"2022-07-07\",\"lts\":\"Fermium\",\"security\":true,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.21.0\",\"date\":\"2022-11-01\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"15.0.0\",\"date\":\"2020-10-20\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.16\"},{\"name\":\"nodejs\",\"version\":\"15.1.0\",\"date\":\"2020-11-04\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.2.0\",\"date\":\"2020-11-10\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.3.0\",\"date\":\"2020-11-24\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.4.0\",\"date\":\"2020-12-09\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.5.0\",\"date\":\"2020-12-22\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.6.0\",\"date\":\"2021-01-14\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.7.0\",\"date\":\"2021-01-25\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.8.0\",\"date\":\"2021-02-02\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.9.0\",\"date\":\"2021-02-18\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.10.0\",\"date\":\"2021-02-23\",\"lts\":false,\"security\":true,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.11.0\",\"date\":\"2021-03-03\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.12.0\",\"date\":\"2021-03-17\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.13.0\",\"date\":\"2021-03-31\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.14.0\",\"date\":\"2021-04-06\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"16.0.0\",\"date\":\"2021-04-20\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.17\"},{\"name\":\"nodejs\",\"version\":\"16.1.0\",\"date\":\"2021-05-04\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.24\"},{\"name\":\"nodejs\",\"version\":\"16.2.0\",\"date\":\"2021-05-19\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.25\"},{\"name\":\"nodejs\",\"version\":\"16.3.0\",\"date\":\"2021-06-03\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.25\"},{\"name\":\"nodejs\",\"version\":\"16.4.0\",\"date\":\"2021-06-23\",\"lts\":false,\"security\":false,\"v8\":\"9.1.269.36\"},{\"name\":\"nodejs\",\"version\":\"16.5.0\",\"date\":\"2021-07-14\",\"lts\":false,\"security\":false,\"v8\":\"9.1.269.38\"},{\"name\":\"nodejs\",\"version\":\"16.6.0\",\"date\":\"2021-07-29\",\"lts\":false,\"security\":true,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.7.0\",\"date\":\"2021-08-18\",\"lts\":false,\"security\":false,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.8.0\",\"date\":\"2021-08-25\",\"lts\":false,\"security\":false,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.9.0\",\"date\":\"2021-09-07\",\"lts\":false,\"security\":false,\"v8\":\"9.3.345.16\"},{\"name\":\"nodejs\",\"version\":\"16.10.0\",\"date\":\"2021-09-22\",\"lts\":false,\"security\":false,\"v8\":\"9.3.345.19\"},{\"name\":\"nodejs\",\"version\":\"16.11.0\",\"date\":\"2021-10-08\",\"lts\":false,\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.12.0\",\"date\":\"2021-10-20\",\"lts\":false,\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.13.0\",\"date\":\"2021-10-26\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.14.0\",\"date\":\"2022-02-08\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.15.0\",\"date\":\"2022-04-26\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.16.0\",\"date\":\"2022-07-07\",\"lts\":\"Gallium\",\"security\":true,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.17.0\",\"date\":\"2022-08-16\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.18.0\",\"date\":\"2022-10-12\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.19.0\",\"date\":\"2022-12-13\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.20.0\",\"date\":\"2023-03-28\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"17.0.0\",\"date\":\"2021-10-19\",\"lts\":false,\"security\":false,\"v8\":\"9.5.172.21\"},{\"name\":\"nodejs\",\"version\":\"17.1.0\",\"date\":\"2021-11-09\",\"lts\":false,\"security\":false,\"v8\":\"9.5.172.25\"},{\"name\":\"nodejs\",\"version\":\"17.2.0\",\"date\":\"2021-11-30\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.14\"},{\"name\":\"nodejs\",\"version\":\"17.3.0\",\"date\":\"2021-12-17\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.4.0\",\"date\":\"2022-01-18\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.5.0\",\"date\":\"2022-02-10\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.6.0\",\"date\":\"2022-02-22\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.7.0\",\"date\":\"2022-03-09\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.8.0\",\"date\":\"2022-03-22\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.9.0\",\"date\":\"2022-04-07\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"18.0.0\",\"date\":\"2022-04-18\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.1.0\",\"date\":\"2022-05-03\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.2.0\",\"date\":\"2022-05-17\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.3.0\",\"date\":\"2022-06-02\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.4.0\",\"date\":\"2022-06-16\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.5.0\",\"date\":\"2022-07-06\",\"lts\":false,\"security\":true,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.6.0\",\"date\":\"2022-07-13\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.7.0\",\"date\":\"2022-07-26\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.8.0\",\"date\":\"2022-08-24\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.9.0\",\"date\":\"2022-09-07\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.10.0\",\"date\":\"2022-09-28\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.11.0\",\"date\":\"2022-10-13\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.12.0\",\"date\":\"2022-10-25\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.13.0\",\"date\":\"2023-01-05\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.23\"},{\"name\":\"nodejs\",\"version\":\"18.14.0\",\"date\":\"2023-02-01\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.23\"},{\"name\":\"nodejs\",\"version\":\"18.15.0\",\"date\":\"2023-03-05\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.16.0\",\"date\":\"2023-04-12\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.17.0\",\"date\":\"2023-07-18\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.18.0\",\"date\":\"2023-09-18\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.19.0\",\"date\":\"2023-11-29\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"19.0.0\",\"date\":\"2022-10-17\",\"lts\":false,\"security\":false,\"v8\":\"10.7.193.13\"},{\"name\":\"nodejs\",\"version\":\"19.1.0\",\"date\":\"2022-11-14\",\"lts\":false,\"security\":false,\"v8\":\"10.7.193.20\"},{\"name\":\"nodejs\",\"version\":\"19.2.0\",\"date\":\"2022-11-29\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.20\"},{\"name\":\"nodejs\",\"version\":\"19.3.0\",\"date\":\"2022-12-14\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.21\"},{\"name\":\"nodejs\",\"version\":\"19.4.0\",\"date\":\"2023-01-05\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.5.0\",\"date\":\"2023-01-24\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.6.0\",\"date\":\"2023-02-01\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.7.0\",\"date\":\"2023-02-21\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.8.0\",\"date\":\"2023-03-14\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.9.0\",\"date\":\"2023-04-10\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"20.0.0\",\"date\":\"2023-04-17\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.4\"},{\"name\":\"nodejs\",\"version\":\"20.1.0\",\"date\":\"2023-05-03\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.2.0\",\"date\":\"2023-05-16\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.3.0\",\"date\":\"2023-06-08\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.4.0\",\"date\":\"2023-07-04\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.5.0\",\"date\":\"2023-07-19\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.6.0\",\"date\":\"2023-08-23\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.7.0\",\"date\":\"2023-09-18\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.8.0\",\"date\":\"2023-09-28\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.9.0\",\"date\":\"2023-10-24\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.10.0\",\"date\":\"2023-11-22\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"21.0.0\",\"date\":\"2023-10-17\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.13\"},{\"name\":\"nodejs\",\"version\":\"21.1.0\",\"date\":\"2023-10-24\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.15\"},{\"name\":\"nodejs\",\"version\":\"21.2.0\",\"date\":\"2023-11-14\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.3.0\",\"date\":\"2023-11-30\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"}]", "module.exports={A:\"ie\",B:\"edge\",C:\"firefox\",D:\"chrome\",E:\"safari\",F:\"opera\",G:\"ios_saf\",H:\"op_mini\",I:\"android\",J:\"bb\",K:\"op_mob\",L:\"and_chr\",M:\"and_ff\",N:\"ie_mob\",O:\"and_uc\",P:\"samsung\",Q:\"and_qq\",R:\"baidu\",S:\"kaios\"};\n", "module.exports.browsers = require('../../data/browsers')\n", "module.exports={\"0\":\"111\",\"1\":\"112\",\"2\":\"113\",\"3\":\"114\",\"4\":\"115\",\"5\":\"116\",\"6\":\"117\",\"7\":\"118\",\"8\":\"119\",\"9\":\"120\",A:\"10\",B:\"11\",C:\"12\",D:\"7\",E:\"8\",F:\"9\",G:\"15\",H:\"80\",I:\"125\",J:\"4\",K:\"6\",L:\"13\",M:\"14\",N:\"16\",O:\"17\",P:\"18\",Q:\"79\",R:\"81\",S:\"83\",T:\"84\",U:\"85\",V:\"86\",W:\"87\",X:\"88\",Y:\"89\",Z:\"90\",a:\"91\",b:\"92\",c:\"93\",d:\"94\",e:\"95\",f:\"96\",g:\"97\",h:\"98\",i:\"99\",j:\"100\",k:\"101\",l:\"102\",m:\"103\",n:\"104\",o:\"105\",p:\"106\",q:\"107\",r:\"108\",s:\"109\",t:\"110\",u:\"20\",v:\"21\",w:\"22\",x:\"23\",y:\"24\",z:\"25\",AB:\"121\",BB:\"122\",CB:\"123\",DB:\"124\",EB:\"5\",FB:\"19\",GB:\"26\",HB:\"27\",IB:\"28\",JB:\"29\",KB:\"30\",LB:\"31\",MB:\"32\",NB:\"33\",OB:\"34\",PB:\"35\",QB:\"36\",RB:\"37\",SB:\"38\",TB:\"39\",UB:\"40\",VB:\"41\",WB:\"42\",XB:\"43\",YB:\"44\",ZB:\"45\",aB:\"46\",bB:\"47\",cB:\"48\",dB:\"49\",eB:\"50\",fB:\"51\",gB:\"52\",hB:\"53\",iB:\"54\",jB:\"55\",kB:\"56\",lB:\"57\",mB:\"58\",nB:\"60\",oB:\"62\",pB:\"63\",qB:\"64\",rB:\"65\",sB:\"66\",tB:\"67\",uB:\"68\",vB:\"69\",wB:\"70\",xB:\"71\",yB:\"72\",zB:\"73\",\"0B\":\"74\",\"1B\":\"75\",\"2B\":\"76\",\"3B\":\"77\",\"4B\":\"78\",\"5B\":\"126\",\"6B\":\"11.1\",\"7B\":\"12.1\",\"8B\":\"15.5\",\"9B\":\"16.0\",AC:\"17.0\",BC:\"18.0\",CC:\"3\",DC:\"59\",EC:\"61\",FC:\"82\",GC:\"127\",HC:\"128\",IC:\"129\",JC:\"3.2\",KC:\"10.1\",LC:\"15.2-15.3\",MC:\"15.4\",NC:\"16.1\",OC:\"16.2\",PC:\"16.3\",QC:\"16.4\",RC:\"16.5\",SC:\"17.1\",TC:\"17.2\",UC:\"17.3\",VC:\"17.4\",WC:\"17.5\",XC:\"17.6\",YC:\"11.5\",ZC:\"4.2-4.3\",aC:\"5.5\",bC:\"2\",cC:\"130\",dC:\"3.5\",eC:\"3.6\",fC:\"3.1\",gC:\"5.1\",hC:\"6.1\",iC:\"7.1\",jC:\"9.1\",kC:\"13.1\",lC:\"14.1\",mC:\"15.1\",nC:\"15.6\",oC:\"16.6\",pC:\"TP\",qC:\"9.5-9.6\",rC:\"10.0-10.1\",sC:\"10.5\",tC:\"10.6\",uC:\"11.6\",vC:\"4.0-4.1\",wC:\"5.0-5.1\",xC:\"6.0-6.1\",yC:\"7.0-7.1\",zC:\"8.1-8.4\",\"0C\":\"9.0-9.2\",\"1C\":\"9.3\",\"2C\":\"10.0-10.2\",\"3C\":\"10.3\",\"4C\":\"11.0-11.2\",\"5C\":\"11.3-11.4\",\"6C\":\"12.0-12.1\",\"7C\":\"12.2-12.5\",\"8C\":\"13.0-13.1\",\"9C\":\"13.2\",AD:\"13.3\",BD:\"13.4-13.7\",CD:\"14.0-14.4\",DD:\"14.5-14.8\",ED:\"15.0-15.1\",FD:\"15.6-15.8\",GD:\"16.6-16.7\",HD:\"all\",ID:\"2.1\",JD:\"2.2\",KD:\"2.3\",LD:\"4.1\",MD:\"4.4\",ND:\"4.4.3-4.4.4\",OD:\"5.0-5.4\",PD:\"6.2-6.4\",QD:\"7.2-7.4\",RD:\"8.2\",SD:\"9.2\",TD:\"11.1-11.2\",UD:\"12.0\",VD:\"13.0\",WD:\"14.0\",XD:\"15.0\",YD:\"19.0\",ZD:\"14.9\",aD:\"13.52\",bD:\"2.5\",cD:\"3.0-3.1\"};\n", "module.exports.browserVersions = require('../../data/browserVersions')\n", "module.exports={A:{A:{K:0,D:0,E:0.0271533,F:0.0678831,A:0,B:0.529489,aC:0},B:\"msaC\",\"K\",\"D\",\"E\",\"F\",\"A\",\"B\",\"\",\"\",\"\"],E:\"IE\",F:{aC:962323200,K:998870400,D:1161129600,E:1237420800,F:1300060800,A:1346716800,B:1381968000}},B:{A:{\"0\":0.00757,\"1\":0.00757,\"2\":0.011355,\"3\":0.01514,\"4\":0.00757,\"5\":0.00757,\"6\":0.011355,\"7\":0.00757,\"8\":0.01514,\"9\":0.034065,C:0,L:0,M:0,G:0,N:0,O:0.003785,P:0.041635,Q:0,H:0,R:0,S:0,T:0,U:0,V:0,W:0,X:0,Y:0,Z:0,a:0,b:0.011355,c:0,d:0,e:0,f:0,g:0,h:0,i:0,j:0,k:0,l:0,m:0,n:0,o:0,p:0,q:0.003785,r:0.00757,s:0.064345,t:0.003785,AB:0.026495,BB:0.064345,CB:0.16654,DB:2.88417,I:1.57834},B:\"webkit\",C:[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C\",\"L\",\"M\",\"G\",\"N\",\"O\",\"P\",\"Q\",\"H\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"AB\",\"BB\",\"CB\",\"DB\",\"I\",\"\",\"\",\"\"],E:\"Edge\",F:{\"0\":1678665600,\"1\":1680825600,\"2\":1683158400,\"3\":1685664000,\"4\":1689897600,\"5\":1692576000,\"6\":1694649600,\"7\":1697155200,\"8\":1698969600,\"9\":1701993600,C:1438128000,L:1447286400,M:1470096000,G:1491868800,N:1508198400,O:1525046400,P:1542067200,Q:1579046400,H:1581033600,R:1586736000,S:1590019200,T:1594857600,U:1598486400,V:1602201600,W:1605830400,X:1611360000,Y:1614816000,Z:1618358400,a:1622073600,b:1626912000,c:1630627200,d:1632441600,e:1634774400,f:1637539200,g:1641427200,h:1643932800,i:1646265600,j:1649635200,k:1651190400,l:1653955200,m:1655942400,n:1659657600,o:1661990400,p:1664755200,q:1666915200,r:1670198400,s:1673481600,t:1675900800,AB:1706227200,BB:1708732800,CB:1711152000,DB:1713398400,I:1715990400},D:{C:\"ms\",L:\"ms\",M:\"ms\",G:\"ms\",N:\"ms\",O:\"ms\",P:\"ms\"}},C:{A:{\"0\":0,\"1\":0,\"2\":0.011355,\"3\":0,\"4\":0.397425,\"5\":0,\"6\":0.00757,\"7\":0.079485,\"8\":0,\"9\":0.00757,bC:0,CC:0,J:0.003785,EB:0,K:0,D:0,E:0,F:0,A:0,B:0.018925,C:0,L:0,M:0,G:0,N:0,O:0,P:0,FB:0,u:0,v:0,w:0,x:0,y:0,z:0,GB:0,HB:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0,PB:0,QB:0,RB:0,SB:0,TB:0,UB:0,VB:0,WB:0,XB:0.00757,YB:0.00757,ZB:0.00757,aB:0,bB:0,cB:0,dB:0,eB:0.00757,fB:0,gB:0.05299,hB:0.003785,iB:0.003785,jB:0,kB:0.02271,lB:0,mB:0,DC:0.003785,nB:0,EC:0,oB:0,pB:0,qB:0,rB:0,sB:0,tB:0,uB:0,vB:0,wB:0,xB:0,yB:0,zB:0,\"0B\":0,\"1B\":0,\"2B\":0,\"3B\":0,\"4B\":0.01514,Q:0,H:0,R:0,FC:0,S:0,T:0,U:0,V:0,W:0,X:0.011355,Y:0,Z:0,a:0,b:0,c:0,d:0.003785,e:0,f:0,g:0,h:0,i:0,j:0,k:0,l:0.011355,m:0.011355,n:0,o:0,p:0,q:0,r:0.003785,s:0.00757,t:0,AB:0.00757,BB:0.011355,CB:0.01514,DB:0.06813,I:0.844055,\"5B\":0.738075,GC:0.003785,HC:0,IC:0,cC:0,dC:0,eC:0},B:\"moz\",C:[\"bC\",\"CC\",\"dC\",\"eC\",\"J\",\"EB\",\"K\",\"D\",\"E\",\"F\",\"A\",\"B\",\"C\",\"L\",\"M\",\"G\",\"N\",\"O\",\"P\",\"FB\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"GB\",\"HB\",\"IB\",\"JB\",\"KB\",\"LB\",\"MB\",\"NB\",\"OB\",\"PB\",\"QB\",\"RB\",\"SB\",\"TB\",\"UB\",\"VB\",\"WB\",\"XB\",\"YB\",\"ZB\",\"aB\",\"bB\",\"cB\",\"dB\",\"eB\",\"fB\",\"gB\",\"hB\",\"iB\",\"jB\",\"kB\",\"lB\",\"mB\",\"DC\",\"nB\",\"EC\",\"oB\",\"pB\",\"qB\",\"rB\",\"sB\",\"tB\",\"uB\",\"vB\",\"wB\",\"xB\",\"yB\",\"zB\",\"0B\",\"1B\",\"2B\",\"3B\",\"4B\",\"Q\",\"H\",\"R\",\"FC\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"AB\",\"BB\",\"CB\",\"DB\",\"I\",\"5B\",\"GC\",\"HC\",\"IC\",\"cC\"],E:\"Firefox\",F:{\"0\":1678752000,\"1\":1681171200,\"2\":1683590400,\"3\":1686009600,\"4\":1688428800,\"5\":1690848000,\"6\":1693267200,\"7\":1695686400,\"8\":1698105600,\"9\":1700524800,bC:1161648000,CC:1213660800,dC:1246320000,eC:1264032000,J:1300752000,EB:1308614400,K:1313452800,D:1317081600,E:1317081600,F:1320710400,A:1324339200,B:1327968000,C:1331596800,L:1335225600,M:1338854400,G:1342483200,N:1346112000,O:1349740800,P:1353628800,FB:1357603200,u:1361232000,v:1364860800,w:1368489600,x:1372118400,y:1375747200,z:1379376000,GB:1386633600,HB:1391472000,IB:1395100800,JB:1398729600,KB:1402358400,LB:1405987200,MB:1409616000,NB:1413244800,OB:1417392000,PB:1421107200,QB:1424736000,RB:1428278400,SB:1431475200,TB:1435881600,UB:1439251200,VB:1442880000,WB:1446508800,XB:1450137600,YB:1453852800,ZB:1457395200,aB:1461628800,bB:1465257600,cB:1470096000,dB:1474329600,eB:1479168000,fB:1485216000,gB:1488844800,hB:1492560000,iB:1497312000,jB:1502150400,kB:1506556800,lB:1510617600,mB:1516665600,DC:1520985600,nB:1525824000,EC:1529971200,oB:1536105600,pB:1540252800,qB:1544486400,rB:1548720000,sB:1552953600,tB:1558396800,uB:1562630400,vB:1567468800,wB:1571788800,xB:1575331200,yB:1578355200,zB:1581379200,\"0B\":1583798400,\"1B\":1586304000,\"2B\":1588636800,\"3B\":1591056000,\"4B\":1593475200,Q:1595894400,H:1598313600,R:1600732800,FC:1603152000,S:1605571200,T:1607990400,U:1611619200,V:1614038400,W:1616457600,X:1618790400,Y:1622505600,Z:1626134400,a:1628553600,b:1630972800,c:1633392000,d:1635811200,e:1638835200,f:1641859200,g:1644364800,h:1646697600,i:1649116800,j:1651536000,k:1653955200,l:1656374400,m:1658793600,n:1661212800,o:1663632000,p:1666051200,q:1668470400,r:1670889600,s:1673913600,t:1676332800,AB:1702944000,BB:1705968000,CB:1708387200,DB:1710806400,I:1713225600,\"5B\":1715644800,GC:1718064000,HC:null,IC:null,cC:null}},D:{A:{\"0\":0.03785,\"1\":0.041635,\"2\":0.09841,\"3\":0.109765,\"4\":0.04542,\"5\":0.230885,\"6\":0.102195,\"7\":0.08327,\"8\":0.09084,\"9\":0.185465,J:0,EB:0,K:0,D:0,E:0,F:0,A:0,B:0,C:0,L:0,M:0,G:0,N:0,O:0,P:0,FB:0,u:0,v:0,w:0,x:0,y:0,z:0,GB:0,HB:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0.00757,PB:0,QB:0,RB:0,SB:0.01514,TB:0,UB:0,VB:0,WB:0,XB:0,YB:0,ZB:0.003785,aB:0,bB:0.003785,cB:0.02271,dB:0.026495,eB:0.011355,fB:0,gB:0.003785,hB:0.003785,iB:0,jB:0,kB:0.011355,lB:0,mB:0.003785,DC:0,nB:0,EC:0.003785,oB:0,pB:0.003785,qB:0,rB:0,sB:0.02271,tB:0.00757,uB:0,vB:0.03028,wB:0.064345,xB:0.003785,yB:0.003785,zB:0.011355,\"0B\":0.00757,\"1B\":0.00757,\"2B\":0.00757,\"3B\":0.00757,\"4B\":0.01514,Q:0.12112,H:0.011355,R:0.02271,S:0.041635,T:0.00757,U:0.011355,V:0.049205,W:0.06813,X:0.01514,Y:0.011355,Z:0.011355,a:0.03785,b:0.018925,c:0.03028,d:0.041635,e:0.011355,f:0.011355,g:0.01514,h:0.071915,i:0.034065,j:0.04542,k:0.06813,l:0.049205,m:0.170325,n:0.094625,o:0.03028,p:0.03785,q:0.03028,r:0.04542,s:1.49507,t:0.026495,AB:0.389855,BB:0.29523,CB:1.11279,DB:12.6116,I:4.62527,\"5B\":0.018925,GC:0.00757,HC:0,IC:0},B:\"webkit\",C:[\"\",\"\",\"\",\"\",\"\",\"\",\"J\",\"EB\",\"K\",\"D\",\"E\",\"F\",\"A\",\"B\",\"C\",\"L\",\"M\",\"G\",\"N\",\"O\",\"P\",\"FB\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"GB\",\"HB\",\"IB\",\"JB\",\"KB\",\"LB\",\"MB\",\"NB\",\"OB\",\"PB\",\"QB\",\"RB\",\"SB\",\"TB\",\"UB\",\"VB\",\"WB\",\"XB\",\"YB\",\"ZB\",\"aB\",\"bB\",\"cB\",\"dB\",\"eB\",\"fB\",\"gB\",\"hB\",\"iB\",\"jB\",\"kB\",\"lB\",\"mB\",\"DC\",\"nB\",\"EC\",\"oB\",\"pB\",\"qB\",\"rB\",\"sB\",\"tB\",\"uB\",\"vB\",\"wB\",\"xB\",\"yB\",\"zB\",\"0B\",\"1B\",\"2B\",\"3B\",\"4B\",\"Q\",\"H\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"AB\",\"BB\",\"CB\",\"DB\",\"I\",\"5B\",\"GC\",\"HC\",\"IC\"],E:\"Chrome\",F:{\"0\":1678147200,\"1\":1680566400,\"2\":1682985600,\"3\":1685404800,\"4\":1689724800,\"5\":1692057600,\"6\":1694476800,\"7\":1696896000,\"8\":1698710400,\"9\":1701993600,J:1264377600,EB:1274745600,K:1283385600,D:1287619200,E:1291248000,F:1296777600,A:1299542400,B:1303862400,C:1307404800,L:1312243200,M:1316131200,G:1316131200,N:1319500800,O:1323734400,P:1328659200,FB:1332892800,u:1337040000,v:1340668800,w:1343692800,x:1348531200,y:1352246400,z:1357862400,GB:1361404800,HB:1364428800,IB:1369094400,JB:1374105600,KB:1376956800,LB:1384214400,MB:1389657600,NB:1392940800,OB:1397001600,PB:1400544000,QB:1405468800,RB:1409011200,SB:1412640000,TB:1416268800,UB:1421798400,VB:1425513600,WB:1429401600,XB:1432080000,YB:1437523200,ZB:1441152000,aB:1444780800,bB:1449014400,cB:1453248000,dB:1456963200,eB:1460592000,fB:1464134400,gB:1469059200,hB:1472601600,iB:1476230400,jB:1480550400,kB:1485302400,lB:1489017600,mB:1492560000,DC:1496707200,nB:1500940800,EC:1504569600,oB:1508198400,pB:1512518400,qB:1516752000,rB:1520294400,sB:1523923200,tB:1527552000,uB:1532390400,vB:1536019200,wB:1539648000,xB:1543968000,yB:1548720000,zB:1552348800,\"0B\":1555977600,\"1B\":1559606400,\"2B\":1564444800,\"3B\":1568073600,\"4B\":1571702400,Q:1575936000,H:1580860800,R:1586304000,S:1589846400,T:1594684800,U:1598313600,V:1601942400,W:1605571200,X:1611014400,Y:1614556800,Z:1618272000,a:1621987200,b:1626739200,c:1630368000,d:1632268800,e:1634601600,f:1637020800,g:1641340800,h:1643673600,i:1646092800,j:1648512000,k:1650931200,l:1653350400,m:1655769600,n:1659398400,o:1661817600,p:1664236800,q:1666656000,r:1669680000,s:1673308800,t:1675728000,AB:1705968000,BB:1708387200,CB:1710806400,DB:1713225600,I:1715644800,\"5B\":1718064000,GC:null,HC:null,IC:null}},E:{A:{J:0,EB:0,K:0,D:0,E:0.01514,F:0.003785,A:0,B:0,C:0,L:0.00757,M:0.034065,G:0.00757,fC:0,JC:0,gC:0,hC:0,iC:0,jC:0,KC:0,\"6B\":0.00757,\"7B\":0.01514,kC:0.064345,lC:0.09084,mC:0.034065,LC:0.011355,MC:0.026495,\"8B\":0.034065,nC:0.246025,\"9B\":0.03028,NC:0.049205,OC:0.03785,PC:0.09841,QC:0.03028,RC:0.06056,oC:0.34065,AC:0.03785,SC:0.06813,TC:0.08327,UC:0.09841,VC:1.5405,WC:0.185465,XC:0,BC:0,pC:0},B:\"webkit\",C:[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"fC\",\"JC\",\"J\",\"EB\",\"gC\",\"K\",\"hC\",\"D\",\"iC\",\"E\",\"F\",\"jC\",\"A\",\"KC\",\"B\",\"6B\",\"C\",\"7B\",\"L\",\"kC\",\"M\",\"lC\",\"G\",\"mC\",\"LC\",\"MC\",\"8B\",\"nC\",\"9B\",\"NC\",\"OC\",\"PC\",\"QC\",\"RC\",\"oC\",\"AC\",\"SC\",\"TC\",\"UC\",\"VC\",\"WC\",\"XC\",\"BC\",\"pC\"],E:\"Safari\",F:{fC:1205798400,JC:1226534400,J:1244419200,EB:1275868800,gC:1311120000,K:1343174400,hC:1382400000,D:1382400000,iC:1410998400,E:1413417600,F:1443657600,jC:1458518400,A:1474329600,KC:1490572800,B:1505779200,\"6B\":1522281600,C:1537142400,\"7B\":1553472000,L:1568851200,kC:1585008000,M:1600214400,lC:1619395200,G:1632096000,mC:1635292800,LC:1639353600,MC:1647216000,\"8B\":1652745600,nC:1658275200,\"9B\":1662940800,NC:1666569600,OC:1670889600,PC:1674432000,QC:1679875200,RC:1684368000,oC:1690156800,AC:1695686400,SC:1698192000,TC:1702252800,UC:1705881600,VC:1709596800,WC:1715558400,XC:null,BC:null,pC:null}},F:{A:{F:0,B:0,C:0,G:0,N:0,O:0,P:0,FB:0,u:0,v:0,w:0,x:0,y:0,z:0,GB:0,HB:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0,PB:0,QB:0,RB:0,SB:0,TB:0,UB:0,VB:0,WB:0,XB:0,YB:0,ZB:0,aB:0.01514,bB:0,cB:0,dB:0,eB:0,fB:0,gB:0,hB:0,iB:0,jB:0,kB:0,lB:0,mB:0,nB:0,oB:0,pB:0,qB:0,rB:0,sB:0,tB:0,uB:0,vB:0,wB:0,xB:0,yB:0,zB:0,\"0B\":0,\"1B\":0,\"2B\":0,\"3B\":0,\"4B\":0,Q:0,H:0,R:0,FC:0,S:0,T:0,U:0,V:0,W:0,X:0,Y:0,Z:0,a:0,b:0,c:0,d:0,e:0.041635,f:0,g:0,h:0,i:0,j:0,k:0,l:0.071915,m:0,n:0,o:0,p:0.00757,q:0.185465,r:0.01514,s:0.738075,t:0.04542,qC:0,rC:0,sC:0,tC:0,\"6B\":0,YC:0,uC:0,\"7B\":0},B:\"webkit\",C:[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"F\",\"qC\",\"rC\",\"sC\",\"tC\",\"B\",\"6B\",\"YC\",\"uC\",\"C\",\"7B\",\"G\",\"N\",\"O\",\"P\",\"FB\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"GB\",\"HB\",\"IB\",\"JB\",\"KB\",\"LB\",\"MB\",\"NB\",\"OB\",\"PB\",\"QB\",\"RB\",\"SB\",\"TB\",\"UB\",\"VB\",\"WB\",\"XB\",\"YB\",\"ZB\",\"aB\",\"bB\",\"cB\",\"dB\",\"eB\",\"fB\",\"gB\",\"hB\",\"iB\",\"jB\",\"kB\",\"lB\",\"mB\",\"nB\",\"oB\",\"pB\",\"qB\",\"rB\",\"sB\",\"tB\",\"uB\",\"vB\",\"wB\",\"xB\",\"yB\",\"zB\",\"0B\",\"1B\",\"2B\",\"3B\",\"4B\",\"Q\",\"H\",\"R\",\"FC\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\",\"\",\"\"],E:\"Opera\",F:{F:1150761600,qC:1223424000,rC:1251763200,sC:1267488000,tC:1277942400,B:1292457600,\"6B\":1302566400,YC:1309219200,uC:1323129600,C:1323129600,\"7B\":1352073600,G:1372723200,N:1377561600,O:1381104000,P:1386288000,FB:1390867200,u:1393891200,v:1399334400,w:1401753600,x:1405987200,y:1409616000,z:1413331200,GB:1417132800,HB:1422316800,IB:1425945600,JB:1430179200,KB:1433808000,LB:1438646400,MB:1442448000,NB:1445904000,OB:1449100800,PB:1454371200,QB:1457308800,RB:1462320000,SB:1465344000,TB:1470096000,UB:1474329600,VB:1477267200,WB:1481587200,XB:1486425600,YB:1490054400,ZB:1494374400,aB:1498003200,bB:1502236800,cB:1506470400,dB:1510099200,eB:1515024000,fB:1517961600,gB:1521676800,hB:1525910400,iB:1530144000,jB:1534982400,kB:1537833600,lB:1543363200,mB:1548201600,nB:1554768000,oB:1561593600,pB:1566259200,qB:1570406400,rB:1573689600,sB:1578441600,tB:1583971200,uB:1587513600,vB:1592956800,wB:1595894400,xB:1600128000,yB:1603238400,zB:1613520000,\"0B\":1612224000,\"1B\":1616544000,\"2B\":1619568000,\"3B\":1623715200,\"4B\":1627948800,Q:1631577600,H:1633392000,R:1635984000,FC:1638403200,S:1642550400,T:1644969600,U:1647993600,V:1650412800,W:1652745600,X:1654646400,Y:1657152000,Z:1660780800,a:1663113600,b:1668816000,c:1668643200,d:1671062400,e:1675209600,f:1677024000,g:1679529600,h:1681948800,i:1684195200,j:1687219200,k:1690329600,l:1692748800,m:1696204800,n:1699920000,o:1699920000,p:1702944000,q:1707264000,r:1710115200,s:1711497600,t:1716336000},D:{F:\"o\",B:\"o\",C:\"o\",qC:\"o\",rC:\"o\",sC:\"o\",tC:\"o\",\"6B\":\"o\",YC:\"o\",uC:\"o\",\"7B\":\"o\"}},G:{A:{E:0,JC:0,vC:0,ZC:0.00289868,wC:0.00289868,xC:0.00724669,yC:0.0115947,zC:0.00289868,\"0C\":0.00724669,\"1C\":0.0333348,\"2C\":0.00579735,\"3C\":0.0521762,\"4C\":0.0768149,\"5C\":0.0144934,\"6C\":0.00869603,\"7C\":0.210154,\"8C\":0.00434801,\"9C\":0.0217401,AD:0.0101454,BD:0.0463788,CD:0.100004,DD:0.123194,ED:0.0594229,LC:0.0652202,MC:0.0739162,\"8B\":0.0927576,FD:0.83192,\"9B\":0.189863,NC:0.389872,OC:0.189863,PC:0.329,QC:0.0695682,RC:0.140586,GD:1.11744,AC:0.121744,SC:0.198559,TC:0.207255,UC:0.382625,VC:8.67429,WC:0.61307,XC:0,BC:0},B:\"webkit\",C:[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"JC\",\"vC\",\"ZC\",\"wC\",\"xC\",\"yC\",\"E\",\"zC\",\"0C\",\"1C\",\"2C\",\"3C\",\"4C\",\"5C\",\"6C\",\"7C\",\"8C\",\"9C\",\"AD\",\"BD\",\"CD\",\"DD\",\"ED\",\"LC\",\"MC\",\"8B\",\"FD\",\"9B\",\"NC\",\"OC\",\"PC\",\"QC\",\"RC\",\"GD\",\"AC\",\"SC\",\"TC\",\"UC\",\"VC\",\"WC\",\"XC\",\"BC\",\"\"],E:\"Safari on iOS\",F:{JC:1270252800,vC:1283904000,ZC:1299628800,wC:1331078400,xC:1359331200,yC:1394409600,E:1410912000,zC:1413763200,\"0C\":1442361600,\"1C\":1458518400,\"2C\":1473724800,\"3C\":1490572800,\"4C\":1505779200,\"5C\":1522281600,\"6C\":1537142400,\"7C\":1553472000,\"8C\":1568851200,\"9C\":1572220800,AD:1580169600,BD:1585008000,CD:1600214400,DD:1619395200,ED:1632096000,LC:1639353600,MC:1647216000,\"8B\":1652659200,FD:1658275200,\"9B\":1662940800,NC:1666569600,OC:1670889600,PC:1674432000,QC:1679875200,RC:1684368000,GD:1690156800,AC:1694995200,SC:1698192000,TC:1702252800,UC:1705881600,VC:1709596800,WC:1715558400,XC:null,BC:null}},H:{A:{HD:0.1},B:\"opera Mini\",F:{HD:1426464000}},I:{A:{CC:0,J:0.000065879,I:0.656352,ID:0,JD:0,KD:0,LD:0.000131758,ZC:0.000395274,MD:0,ND:0.00144934},B:\"webkitndroid Browser\",F:{ID:1256515200,JD:1274313600,KD:1291593600,CC:1298332800,J:1318896000,LD:1341792000,ZC:1374624000,MD:1386547200,ND:1401667200,I:1715731200}},J:{A:{D:0,A:0},B:\"webkitlackberry Browser\",F:{D:1325376000,A:1359504000}},K:{A:{A:0,B:0,C:0,H:1.2238,\"6B\":0,YC:0,\"7B\":0},B:\"opera Mobile\",F:{A:1287100800,B:1300752000,\"6B\":1314835200,YC:1318291200,C:1330300800,\"7B\":1349740800,H:1709769600},D:{H:\"webkit\"}},L:{A:{I:42.0636},B:\"webkithrome for Android\",F:{I:1715731200}},M:{A:{\"5B\":0.31075},B:\"mozirefox for Android\",F:{\"5B\":1715644800}},N:{A:{A:0,B:0},B:\"msobile\",F:{A:1340150400,B:1353456000}},O:{A:{\"8B\":0.913605},B:\"webkitrowser for Android\",F:{\"8B\":1710115200},D:{\"8B\":\"webkit\"}},P:{A:{J:0.141071,u:0.0217032,v:0.0542579,w:0.0651095,x:0.119367,y:0.227883,z:1.98584,OD:0.0108516,PD:0,QD:0.0325548,RD:0,SD:0,KC:0,TD:0.0108516,UD:0,VD:0.0108516,WD:0,XD:0,\"9B\":0,AC:0.0217032,BC:0.0108516,YD:0.0217032},B:\"webkitu\",\"v\",\"w\",\"x\",\"y\",\"z\",\"\",\"\",\"\"],E:\"Samsung Internet\",F:{J:1461024000,OD:1481846400,PD:1509408000,QD:1528329600,RD:1546128000,SD:1554163200,KC:1567900800,TD:1582588800,UD:1593475200,VD:1605657600,WD:1618531200,XD:1629072000,\"9B\":1640736000,AC:1651708800,BC:1659657600,YD:1667260800,u:1677369600,v:1684454400,w:1689292800,x:1697587200,y:1711497600,z:1715126400}},Q:{A:{ZD:0.292105},B:\"webkitrowser\",F:{ZD:1710288000}},R:{A:{aD:0},B:\"webkitaD\",\"\",\"\",\"\"],E:\"Baidu Browser\",F:{aD:1710201600}},S:{A:{bD:0.08701,cD:0},B:\"mozbD\",\"cD\",\"\",\"\",\"\"],E:\"KaiOS Browser\",F:{bD:1527811200,cD:1631664000}}};\n", "'use strict'\n\nconst browsers = require('./browsers').browsers\nconst versions = require('./browserVersions').browserVersions\nconst agentsData = require('../../data/agents')\n\nfunction unpackBrowserVersions(versionsData) {\n  return Object.keys(versionsData).reduce((usage, version) => {\n    usage[versions[version]] = versionsData[version]\n    return usage\n  }, {})\n}\n\nmodule.exports.agents = Object.keys(agentsData).reduce((map, key) => {\n  let versionsData = agentsData[key]\n  map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {\n    if (entry === 'A') {\n      data.usage_global = unpackBrowserVersions(versionsData[entry])\n    } else if (entry === 'C') {\n      data.versions = versionsData[entry].reduce((list, version) => {\n        if (version === '') {\n          list.push(null)\n        } else {\n          list.push(versions[version])\n        }\n        return list\n      }, [])\n    } else if (entry === 'D') {\n      data.prefix_exceptions = unpackBrowserVersions(versionsData[entry])\n    } else if (entry === 'E') {\n      data.browser = versionsData[entry]\n    } else if (entry === 'F') {\n      data.release_date = Object.keys(versionsData[entry]).reduce(\n        (map2, key2) => {\n          map2[versions[key2]] = versionsData[entry][key2]\n          return map2\n        },\n        {}\n      )\n    } else {\n      // entry is B\n      data.prefix = versionsData[entry]\n    }\n    return data\n  }, {})\n  return map\n}, {})\n", "{\"v0.8\":{\"start\":\"2012-06-25\",\"end\":\"2014-07-31\"},\"v0.10\":{\"start\":\"2013-03-11\",\"end\":\"2016-10-31\"},\"v0.12\":{\"start\":\"2015-02-06\",\"end\":\"2016-12-31\"},\"v4\":{\"start\":\"2015-09-08\",\"lts\":\"2015-10-12\",\"maintenance\":\"2017-04-01\",\"end\":\"2018-04-30\",\"codename\":\"Argon\"},\"v5\":{\"start\":\"2015-10-29\",\"maintenance\":\"2016-04-30\",\"end\":\"2016-06-30\"},\"v6\":{\"start\":\"2016-04-26\",\"lts\":\"2016-10-18\",\"maintenance\":\"2018-04-30\",\"end\":\"2019-04-30\",\"codename\":\"Boron\"},\"v7\":{\"start\":\"2016-10-25\",\"maintenance\":\"2017-04-30\",\"end\":\"2017-06-30\"},\"v8\":{\"start\":\"2017-05-30\",\"lts\":\"2017-10-31\",\"maintenance\":\"2019-01-01\",\"end\":\"2019-12-31\",\"codename\":\"Carbon\"},\"v9\":{\"start\":\"2017-10-01\",\"maintenance\":\"2018-04-01\",\"end\":\"2018-06-30\"},\"v10\":{\"start\":\"2018-04-24\",\"lts\":\"2018-10-30\",\"maintenance\":\"2020-05-19\",\"end\":\"2021-04-30\",\"codename\":\"Dubnium\"},\"v11\":{\"start\":\"2018-10-23\",\"maintenance\":\"2019-04-22\",\"end\":\"2019-06-01\"},\"v12\":{\"start\":\"2019-04-23\",\"lts\":\"2019-10-21\",\"maintenance\":\"2020-11-30\",\"end\":\"2022-04-30\",\"codename\":\"Erbium\"},\"v13\":{\"start\":\"2019-10-22\",\"maintenance\":\"2020-04-01\",\"end\":\"2020-06-01\"},\"v14\":{\"start\":\"2020-04-21\",\"lts\":\"2020-10-27\",\"maintenance\":\"2021-10-19\",\"end\":\"2023-04-30\",\"codename\":\"Fermium\"},\"v15\":{\"start\":\"2020-10-20\",\"maintenance\":\"2021-04-01\",\"end\":\"2021-06-01\"},\"v16\":{\"start\":\"2021-04-20\",\"lts\":\"2021-10-26\",\"maintenance\":\"2022-10-18\",\"end\":\"2023-09-11\",\"codename\":\"Gallium\"},\"v17\":{\"start\":\"2021-10-19\",\"maintenance\":\"2022-04-01\",\"end\":\"2022-06-01\"},\"v18\":{\"start\":\"2022-04-19\",\"lts\":\"2022-10-25\",\"maintenance\":\"2023-10-18\",\"end\":\"2025-04-30\",\"codename\":\"Hydrogen\"},\"v19\":{\"start\":\"2022-10-18\",\"maintenance\":\"2023-04-01\",\"end\":\"2023-06-01\"},\"v20\":{\"start\":\"2023-04-18\",\"lts\":\"2023-10-24\",\"maintenance\":\"2024-10-22\",\"end\":\"2026-04-30\",\"codename\":\"Iron\"},\"v21\":{\"start\":\"2023-10-17\",\"maintenance\":\"2024-04-01\",\"end\":\"2024-06-01\"},\"v22\":{\"start\":\"2024-04-23\",\"lts\":\"2024-10-29\",\"maintenance\":\"2025-10-21\",\"end\":\"2027-04-30\",\"codename\":\"\"},\"v23\":{\"start\":\"2024-10-15\",\"maintenance\":\"2025-04-01\",\"end\":\"2025-06-01\"},\"v24\":{\"start\":\"2025-04-22\",\"lts\":\"2025-10-28\",\"maintenance\":\"2026-10-20\",\"end\":\"2028-04-30\",\"codename\":\"\"}}", "module.exports = {\n\t\"0.20\": \"39\",\n\t\"0.21\": \"41\",\n\t\"0.22\": \"41\",\n\t\"0.23\": \"41\",\n\t\"0.24\": \"41\",\n\t\"0.25\": \"42\",\n\t\"0.26\": \"42\",\n\t\"0.27\": \"43\",\n\t\"0.28\": \"43\",\n\t\"0.29\": \"43\",\n\t\"0.30\": \"44\",\n\t\"0.31\": \"45\",\n\t\"0.32\": \"45\",\n\t\"0.33\": \"45\",\n\t\"0.34\": \"45\",\n\t\"0.35\": \"45\",\n\t\"0.36\": \"47\",\n\t\"0.37\": \"49\",\n\t\"1.0\": \"49\",\n\t\"1.1\": \"50\",\n\t\"1.2\": \"51\",\n\t\"1.3\": \"52\",\n\t\"1.4\": \"53\",\n\t\"1.5\": \"54\",\n\t\"1.6\": \"56\",\n\t\"1.7\": \"58\",\n\t\"1.8\": \"59\",\n\t\"2.0\": \"61\",\n\t\"2.1\": \"61\",\n\t\"3.0\": \"66\",\n\t\"3.1\": \"66\",\n\t\"4.0\": \"69\",\n\t\"4.1\": \"69\",\n\t\"4.2\": \"69\",\n\t\"5.0\": \"73\",\n\t\"6.0\": \"76\",\n\t\"6.1\": \"76\",\n\t\"7.0\": \"78\",\n\t\"7.1\": \"78\",\n\t\"7.2\": \"78\",\n\t\"7.3\": \"78\",\n\t\"8.0\": \"80\",\n\t\"8.1\": \"80\",\n\t\"8.2\": \"80\",\n\t\"8.3\": \"80\",\n\t\"8.4\": \"80\",\n\t\"8.5\": \"80\",\n\t\"9.0\": \"83\",\n\t\"9.1\": \"83\",\n\t\"9.2\": \"83\",\n\t\"9.3\": \"83\",\n\t\"9.4\": \"83\",\n\t\"10.0\": \"85\",\n\t\"10.1\": \"85\",\n\t\"10.2\": \"85\",\n\t\"10.3\": \"85\",\n\t\"10.4\": \"85\",\n\t\"11.0\": \"87\",\n\t\"11.1\": \"87\",\n\t\"11.2\": \"87\",\n\t\"11.3\": \"87\",\n\t\"11.4\": \"87\",\n\t\"11.5\": \"87\",\n\t\"12.0\": \"89\",\n\t\"12.1\": \"89\",\n\t\"12.2\": \"89\",\n\t\"13.0\": \"91\",\n\t\"13.1\": \"91\",\n\t\"13.2\": \"91\",\n\t\"13.3\": \"91\",\n\t\"13.4\": \"91\",\n\t\"13.5\": \"91\",\n\t\"13.6\": \"91\",\n\t\"14.0\": \"93\",\n\t\"14.1\": \"93\",\n\t\"14.2\": \"93\",\n\t\"15.0\": \"94\",\n\t\"15.1\": \"94\",\n\t\"15.2\": \"94\",\n\t\"15.3\": \"94\",\n\t\"15.4\": \"94\",\n\t\"15.5\": \"94\",\n\t\"16.0\": \"96\",\n\t\"16.1\": \"96\",\n\t\"16.2\": \"96\",\n\t\"17.0\": \"98\",\n\t\"17.1\": \"98\",\n\t\"17.2\": \"98\",\n\t\"17.3\": \"98\",\n\t\"17.4\": \"98\",\n\t\"18.0\": \"100\",\n\t\"18.1\": \"100\",\n\t\"18.2\": \"100\",\n\t\"18.3\": \"100\",\n\t\"19.0\": \"102\",\n\t\"19.1\": \"102\",\n\t\"20.0\": \"104\",\n\t\"20.1\": \"104\",\n\t\"20.2\": \"104\",\n\t\"20.3\": \"104\",\n\t\"21.0\": \"106\",\n\t\"21.1\": \"106\",\n\t\"21.2\": \"106\",\n\t\"21.3\": \"106\",\n\t\"21.4\": \"106\",\n\t\"22.0\": \"108\",\n\t\"22.1\": \"108\",\n\t\"22.2\": \"108\",\n\t\"22.3\": \"108\",\n\t\"23.0\": \"110\",\n\t\"23.1\": \"110\",\n\t\"23.2\": \"110\",\n\t\"23.3\": \"110\",\n\t\"24.0\": \"112\",\n\t\"24.1\": \"112\",\n\t\"24.2\": \"112\",\n\t\"24.3\": \"112\",\n\t\"24.4\": \"112\",\n\t\"24.5\": \"112\",\n\t\"24.6\": \"112\",\n\t\"24.7\": \"112\",\n\t\"24.8\": \"112\",\n\t\"25.0\": \"114\",\n\t\"25.1\": \"114\",\n\t\"25.2\": \"114\",\n\t\"25.3\": \"114\",\n\t\"25.4\": \"114\",\n\t\"25.5\": \"114\",\n\t\"25.6\": \"114\",\n\t\"25.7\": \"114\",\n\t\"25.8\": \"114\",\n\t\"25.9\": \"114\",\n\t\"26.0\": \"116\",\n\t\"26.1\": \"116\",\n\t\"26.2\": \"116\",\n\t\"26.3\": \"116\",\n\t\"26.4\": \"116\",\n\t\"26.5\": \"116\",\n\t\"26.6\": \"116\",\n\t\"27.0\": \"118\",\n\t\"27.1\": \"118\",\n\t\"27.2\": \"118\",\n\t\"27.3\": \"118\",\n\t\"28.0\": \"120\",\n\t\"28.1\": \"120\",\n\t\"28.2\": \"120\",\n\t\"28.3\": \"120\",\n\t\"29.0\": \"122\",\n\t\"29.1\": \"122\",\n\t\"29.2\": \"122\",\n\t\"29.3\": \"122\",\n\t\"29.4\": \"122\",\n\t\"30.0\": \"124\",\n\t\"30.1\": \"124\",\n\t\"31.0\": \"126\",\n\t\"32.0\": \"127\"\n};", "function BrowserslistError(message) {\n  this.name = 'BrowserslistError'\n  this.message = message\n  this.browserslist = true\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, BrowserslistError)\n  }\n}\n\nBrowserslistError.prototype = Error.prototype\n\nmodule.exports = BrowserslistError\n", "var AND_REGEXP = /^\\s+and\\s+(.*)/i\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) return [array]\n  return array.reduce(function (a, b) {\n    return a.concat(flatten(b))\n  }, [])\n}\n\nfunction find(string, predicate) {\n  for (var n = 1, max = string.length; n <= max; n++) {\n    var parsed = string.substr(-n, n)\n    if (predicate(parsed, n, max)) {\n      return string.slice(0, -n)\n    }\n  }\n  return ''\n}\n\nfunction matchQuery(all, query) {\n  var node = { query: query }\n  if (query.indexOf('not ') === 0) {\n    node.not = true\n    query = query.slice(4)\n  }\n\n  for (var name in all) {\n    var type = all[name]\n    var match = query.match(type.regexp)\n    if (match) {\n      node.type = name\n      for (var i = 0; i < type.matches.length; i++) {\n        node[type.matches[i]] = match[i + 1]\n      }\n      return node\n    }\n  }\n\n  node.type = 'unknown'\n  return node\n}\n\nfunction matchBlock(all, string, qs) {\n  var node\n  return find(string, function (parsed, n, max) {\n    if (AND_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(AND_REGEXP)[1])\n      node.compose = 'and'\n      qs.unshift(node)\n      return true\n    } else if (OR_REGEXP.test(parsed)) {\n      node = matchQuery(all, parsed.match(OR_REGEXP)[1])\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    } else if (n === max) {\n      node = matchQuery(all, parsed.trim())\n      node.compose = 'or'\n      qs.unshift(node)\n      return true\n    }\n    return false\n  })\n}\n\nmodule.exports = function parse(all, queries) {\n  if (!Array.isArray(queries)) queries = [queries]\n  return flatten(\n    queries.map(function (block) {\n      var qs = []\n      do {\n        block = matchBlock(all, block, qs)\n      } while (block)\n      return qs\n    })\n  )\n}\n", "var BrowserslistError = require('./error')\n\nfunction noop() {}\n\nmodule.exports = {\n  loadQueries: function loadQueries() {\n    throw new BrowserslistError(\n      'Sharable configs are not supported in client-side build of Browserslist'\n    )\n  },\n\n  getStat: function getStat(opts) {\n    return opts.stats\n  },\n\n  loadConfig: function loadConfig(opts) {\n    if (opts.config) {\n      throw new BrowserslistError(\n        'Browserslist config are not supported in client-side build'\n      )\n    }\n  },\n\n  loadCountry: function loadCountry() {\n    throw new BrowserslistError(\n      'Country statistics are not supported ' +\n        'in client-side build of Browserslist'\n    )\n  },\n\n  loadFeature: function loadFeature() {\n    throw new BrowserslistError(\n      'Supports queries are not available in client-side build of Browserslist'\n    )\n  },\n\n  currentNode: function currentNode(resolve, context) {\n    return resolve(['maintained node versions'], context)[0]\n  },\n\n  parseConfig: noop,\n\n  readConfig: noop,\n\n  findConfig: noop,\n\n  clearCaches: noop,\n\n  oldDataWarning: noop,\n\n  env: {}\n}\n", "var jsReleases = require('node-releases/data/processed/envs.json')\nvar agents = require('caniuse-lite/dist/unpacker/agents').agents\nvar jsEOL = require('node-releases/data/release-schedule/release-schedule.json')\nvar path = require('path')\nvar e2c = require('electron-to-chromium/versions')\n\nvar BrowserslistError = require('./error')\nvar parse = require('./parse')\nvar env = require('./node') // Will load browser.js in webpack\n\nvar YEAR = 365.259641 * 24 * 60 * 60 * 1000\nvar ANDROID_EVERGREEN_FIRST = '37'\nvar OP_MOB_BLINK_FIRST = 14\n\n// Helpers\n\nfunction isVersionsMatch(versionA, versionB) {\n  return (versionA + '.').indexOf(versionB + '.') === 0\n}\n\nfunction isEolReleased(name) {\n  var version = name.slice(1)\n  return browserslist.nodeVersions.some(function (i) {\n    return isVersionsMatch(i, version)\n  })\n}\n\nfunction normalize(versions) {\n  return versions.filter(function (version) {\n    return typeof version === 'string'\n  })\n}\n\nfunction normalizeElectron(version) {\n  var versionToUse = version\n  if (version.split('.').length === 3) {\n    versionToUse = version.split('.').slice(0, -1).join('.')\n  }\n  return versionToUse\n}\n\nfunction nameMapper(name) {\n  return function mapName(version) {\n    return name + ' ' + version\n  }\n}\n\nfunction getMajor(version) {\n  return parseInt(version.split('.')[0])\n}\n\nfunction getMajorVersions(released, number) {\n  if (released.length === 0) return []\n  var majorVersions = uniq(released.map(getMajor))\n  var minimum = majorVersions[majorVersions.length - number]\n  if (!minimum) {\n    return released\n  }\n  var selected = []\n  for (var i = released.length - 1; i >= 0; i--) {\n    if (minimum > getMajor(released[i])) break\n    selected.unshift(released[i])\n  }\n  return selected\n}\n\nfunction uniq(array) {\n  var filtered = []\n  for (var i = 0; i < array.length; i++) {\n    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i])\n  }\n  return filtered\n}\n\nfunction fillUsage(result, name, data) {\n  for (var i in data) {\n    result[name + ' ' + i] = data[i]\n  }\n}\n\nfunction generateFilter(sign, version) {\n  version = parseFloat(version)\n  if (sign === '>') {\n    return function (v) {\n      return parseFloat(v) > version\n    }\n  } else if (sign === '>=') {\n    return function (v) {\n      return parseFloat(v) >= version\n    }\n  } else if (sign === '<') {\n    return function (v) {\n      return parseFloat(v) < version\n    }\n  } else {\n    return function (v) {\n      return parseFloat(v) <= version\n    }\n  }\n}\n\nfunction generateSemverFilter(sign, version) {\n  version = version.split('.').map(parseSimpleInt)\n  version[1] = version[1] || 0\n  version[2] = version[2] || 0\n  if (sign === '>') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt)\n      return compareSemver(v, version) > 0\n    }\n  } else if (sign === '>=') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt)\n      return compareSemver(v, version) >= 0\n    }\n  } else if (sign === '<') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt)\n      return compareSemver(version, v) > 0\n    }\n  } else {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt)\n      return compareSemver(version, v) >= 0\n    }\n  }\n}\n\nfunction parseSimpleInt(x) {\n  return parseInt(x)\n}\n\nfunction compare(a, b) {\n  if (a < b) return -1\n  if (a > b) return +1\n  return 0\n}\n\nfunction compareSemver(a, b) {\n  return (\n    compare(parseInt(a[0]), parseInt(b[0])) ||\n    compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||\n    compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))\n  )\n}\n\n// this follows the npm-like semver behavior\nfunction semverFilterLoose(operator, range) {\n  range = range.split('.').map(parseSimpleInt)\n  if (typeof range[1] === 'undefined') {\n    range[1] = 'x'\n  }\n  // ignore any patch version because we only return minor versions\n  // range[2] = 'x'\n  switch (operator) {\n    case '<=':\n      return function (version) {\n        version = version.split('.').map(parseSimpleInt)\n        return compareSemverLoose(version, range) <= 0\n      }\n    case '>=':\n    default:\n      return function (version) {\n        version = version.split('.').map(parseSimpleInt)\n        return compareSemverLoose(version, range) >= 0\n      }\n  }\n}\n\n// this follows the npm-like semver behavior\nfunction compareSemverLoose(version, range) {\n  if (version[0] !== range[0]) {\n    return version[0] < range[0] ? -1 : +1\n  }\n  if (range[1] === 'x') {\n    return 0\n  }\n  if (version[1] !== range[1]) {\n    return version[1] < range[1] ? -1 : +1\n  }\n  return 0\n}\n\nfunction resolveVersion(data, version) {\n  if (data.versions.indexOf(version) !== -1) {\n    return version\n  } else if (browserslist.versionAliases[data.name][version]) {\n    return browserslist.versionAliases[data.name][version]\n  } else {\n    return false\n  }\n}\n\nfunction normalizeVersion(data, version) {\n  var resolved = resolveVersion(data, version)\n  if (resolved) {\n    return resolved\n  } else if (data.versions.length === 1) {\n    return data.versions[0]\n  } else {\n    return false\n  }\n}\n\nfunction filterByYear(since, context) {\n  since = since / 1000\n  return Object.keys(agents).reduce(function (selected, name) {\n    var data = byName(name, context)\n    if (!data) return selected\n    var versions = Object.keys(data.releaseDate).filter(function (v) {\n      var date = data.releaseDate[v]\n      return date !== null && date >= since\n    })\n    return selected.concat(versions.map(nameMapper(data.name)))\n  }, [])\n}\n\nfunction cloneData(data) {\n  return {\n    name: data.name,\n    versions: data.versions,\n    released: data.released,\n    releaseDate: data.releaseDate\n  }\n}\n\nfunction byName(name, context) {\n  name = name.toLowerCase()\n  name = browserslist.aliases[name] || name\n  if (context.mobileToDesktop && browserslist.desktopNames[name]) {\n    var desktop = browserslist.data[browserslist.desktopNames[name]]\n    if (name === 'android') {\n      return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)\n    } else {\n      var cloned = cloneData(desktop)\n      cloned.name = name\n      return cloned\n    }\n  }\n  return browserslist.data[name]\n}\n\nfunction normalizeAndroidVersions(androidVersions, chromeVersions) {\n  var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST)\n  return androidVersions\n    .filter(function (version) {\n      return /^(?:[2-4]\\.|[34]$)/.test(version)\n    })\n    .concat(chromeVersions.slice(iFirstEvergreen))\n}\n\nfunction copyObject(obj) {\n  var copy = {}\n  for (var key in obj) {\n    copy[key] = obj[key]\n  }\n  return copy\n}\n\nfunction normalizeAndroidData(android, chrome) {\n  android.released = normalizeAndroidVersions(android.released, chrome.released)\n  android.versions = normalizeAndroidVersions(android.versions, chrome.versions)\n  android.releaseDate = copyObject(android.releaseDate)\n  android.released.forEach(function (v) {\n    if (android.releaseDate[v] === undefined) {\n      android.releaseDate[v] = chrome.releaseDate[v]\n    }\n  })\n  return android\n}\n\nfunction checkName(name, context) {\n  var data = byName(name, context)\n  if (!data) throw new BrowserslistError('Unknown browser ' + name)\n  return data\n}\n\nfunction unknownQuery(query) {\n  return new BrowserslistError(\n    'Unknown browser query `' +\n      query +\n      '`. ' +\n      'Maybe you are using old Browserslist or made typo in query.'\n  )\n}\n\n// Adjusts last X versions queries for some mobile browsers,\n// where caniuse data jumps from a legacy version to the latest\nfunction filterJumps(list, name, nVersions, context) {\n  var jump = 1\n  switch (name) {\n    case 'android':\n      if (context.mobileToDesktop) return list\n      var released = browserslist.data.chrome.released\n      jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST)\n      break\n    case 'op_mob':\n      var latest = browserslist.data.op_mob.released.slice(-1)[0]\n      jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1\n      break\n    default:\n      return list\n  }\n  if (nVersions <= jump) {\n    return list.slice(-1)\n  }\n  return list.slice(jump - 1 - nVersions)\n}\n\nfunction isSupported(flags, withPartial) {\n  return (\n    typeof flags === 'string' &&\n    (flags.indexOf('y') >= 0 || (withPartial && flags.indexOf('a') >= 0))\n  )\n}\n\nfunction resolve(queries, context) {\n  return parse(QUERIES, queries).reduce(function (result, node, index) {\n    if (node.not && index === 0) {\n      throw new BrowserslistError(\n        'Write any browsers query (for instance, `defaults`) ' +\n          'before `' +\n          node.query +\n          '`'\n      )\n    }\n    var type = QUERIES[node.type]\n    var array = type.select.call(browserslist, context, node).map(function (j) {\n      var parts = j.split(' ')\n      if (parts[1] === '0') {\n        return parts[0] + ' ' + byName(parts[0], context).versions[0]\n      } else {\n        return j\n      }\n    })\n\n    if (node.compose === 'and') {\n      if (node.not) {\n        return result.filter(function (j) {\n          return array.indexOf(j) === -1\n        })\n      } else {\n        return result.filter(function (j) {\n          return array.indexOf(j) !== -1\n        })\n      }\n    } else {\n      if (node.not) {\n        var filter = {}\n        array.forEach(function (j) {\n          filter[j] = true\n        })\n        return result.filter(function (j) {\n          return !filter[j]\n        })\n      }\n      return result.concat(array)\n    }\n  }, [])\n}\n\nfunction prepareOpts(opts) {\n  if (typeof opts === 'undefined') opts = {}\n\n  if (typeof opts.path === 'undefined') {\n    opts.path = path.resolve ? path.resolve('.') : '.'\n  }\n\n  return opts\n}\n\nfunction prepareQueries(queries, opts) {\n  if (typeof queries === 'undefined' || queries === null) {\n    var config = browserslist.loadConfig(opts)\n    if (config) {\n      queries = config\n    } else {\n      queries = browserslist.defaults\n    }\n  }\n\n  return queries\n}\n\nfunction checkQueries(queries) {\n  if (!(typeof queries === 'string' || Array.isArray(queries))) {\n    throw new BrowserslistError(\n      'Browser queries must be an array or string. Got ' + typeof queries + '.'\n    )\n  }\n}\n\nvar cache = {}\n\nfunction browserslist(queries, opts) {\n  opts = prepareOpts(opts)\n  queries = prepareQueries(queries, opts)\n  checkQueries(queries)\n\n  var context = {\n    ignoreUnknownVersions: opts.ignoreUnknownVersions,\n    dangerousExtend: opts.dangerousExtend,\n    mobileToDesktop: opts.mobileToDesktop,\n    path: opts.path,\n    env: opts.env\n  }\n\n  env.oldDataWarning(browserslist.data)\n  var stats = env.getStat(opts, browserslist.data)\n  if (stats) {\n    context.customUsage = {}\n    for (var browser in stats) {\n      fillUsage(context.customUsage, browser, stats[browser])\n    }\n  }\n\n  var cacheKey = JSON.stringify([queries, context])\n  if (cache[cacheKey]) return cache[cacheKey]\n\n  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {\n    name1 = name1.split(' ')\n    name2 = name2.split(' ')\n    if (name1[0] === name2[0]) {\n      // assumptions on caniuse data\n      // 1) version ranges never overlaps\n      // 2) if version is not a range, it never contains `-`\n      var version1 = name1[1].split('-')[0]\n      var version2 = name2[1].split('-')[0]\n      return compareSemver(version2.split('.'), version1.split('.'))\n    } else {\n      return compare(name1[0], name2[0])\n    }\n  })\n  if (!env.env.BROWSERSLIST_DISABLE_CACHE) {\n    cache[cacheKey] = result\n  }\n  return result\n}\n\nbrowserslist.parse = function (queries, opts) {\n  opts = prepareOpts(opts)\n  queries = prepareQueries(queries, opts)\n  checkQueries(queries)\n  return parse(QUERIES, queries)\n}\n\n// Will be filled by Can I Use data below\nbrowserslist.cache = {}\nbrowserslist.data = {}\nbrowserslist.usage = {\n  global: {},\n  custom: null\n}\n\n// Default browsers query\nbrowserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead']\n\n// Browser names aliases\nbrowserslist.aliases = {\n  fx: 'firefox',\n  ff: 'firefox',\n  ios: 'ios_saf',\n  explorer: 'ie',\n  blackberry: 'bb',\n  explorermobile: 'ie_mob',\n  operamini: 'op_mini',\n  operamobile: 'op_mob',\n  chromeandroid: 'and_chr',\n  firefoxandroid: 'and_ff',\n  ucandroid: 'and_uc',\n  qqandroid: 'and_qq'\n}\n\n// Can I Use only provides a few versions for some browsers (e.g. and_chr).\n// Fallback to a similar browser for unknown versions\n// Note op_mob is not included as its chromium versions are not in sync with Opera desktop\nbrowserslist.desktopNames = {\n  and_chr: 'chrome',\n  and_ff: 'firefox',\n  ie_mob: 'ie',\n  android: 'chrome' // has extra processing logic\n}\n\n// Aliases to work with joined versions like `ios_saf 7.0-7.1`\nbrowserslist.versionAliases = {}\n\nbrowserslist.clearCaches = env.clearCaches\nbrowserslist.parseConfig = env.parseConfig\nbrowserslist.readConfig = env.readConfig\nbrowserslist.findConfig = env.findConfig\nbrowserslist.loadConfig = env.loadConfig\n\nbrowserslist.coverage = function (browsers, stats) {\n  var data\n  if (typeof stats === 'undefined') {\n    data = browserslist.usage.global\n  } else if (stats === 'my stats') {\n    var opts = {}\n    opts.path = path.resolve ? path.resolve('.') : '.'\n    var customStats = env.getStat(opts)\n    if (!customStats) {\n      throw new BrowserslistError('Custom usage statistics was not provided')\n    }\n    data = {}\n    for (var browser in customStats) {\n      fillUsage(data, browser, customStats[browser])\n    }\n  } else if (typeof stats === 'string') {\n    if (stats.length > 2) {\n      stats = stats.toLowerCase()\n    } else {\n      stats = stats.toUpperCase()\n    }\n    env.loadCountry(browserslist.usage, stats, browserslist.data)\n    data = browserslist.usage[stats]\n  } else {\n    if ('dataByBrowser' in stats) {\n      stats = stats.dataByBrowser\n    }\n    data = {}\n    for (var name in stats) {\n      for (var version in stats[name]) {\n        data[name + ' ' + version] = stats[name][version]\n      }\n    }\n  }\n\n  return browsers.reduce(function (all, i) {\n    var usage = data[i]\n    if (usage === undefined) {\n      usage = data[i.replace(/ \\S+$/, ' 0')]\n    }\n    return all + (usage || 0)\n  }, 0)\n}\n\nfunction nodeQuery(context, node) {\n  var matched = browserslist.nodeVersions.filter(function (i) {\n    return isVersionsMatch(i, node.version)\n  })\n  if (matched.length === 0) {\n    if (context.ignoreUnknownVersions) {\n      return []\n    } else {\n      throw new BrowserslistError(\n        'Unknown version ' + node.version + ' of Node.js'\n      )\n    }\n  }\n  return ['node ' + matched[matched.length - 1]]\n}\n\nfunction sinceQuery(context, node) {\n  var year = parseInt(node.year)\n  var month = parseInt(node.month || '01') - 1\n  var day = parseInt(node.day || '01')\n  return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context)\n}\n\nfunction coverQuery(context, node) {\n  var coverage = parseFloat(node.coverage)\n  var usage = browserslist.usage.global\n  if (node.place) {\n    if (node.place.match(/^my\\s+stats$/i)) {\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided')\n      }\n      usage = context.customUsage\n    } else {\n      var place\n      if (node.place.length === 2) {\n        place = node.place.toUpperCase()\n      } else {\n        place = node.place.toLowerCase()\n      }\n      env.loadCountry(browserslist.usage, place, browserslist.data)\n      usage = browserslist.usage[place]\n    }\n  }\n  var versions = Object.keys(usage).sort(function (a, b) {\n    return usage[b] - usage[a]\n  })\n  var coveraged = 0\n  var result = []\n  var version\n  for (var i = 0; i < versions.length; i++) {\n    version = versions[i]\n    if (usage[version] === 0) break\n    coveraged += usage[version]\n    result.push(version)\n    if (coveraged >= coverage) break\n  }\n  return result\n}\n\nvar QUERIES = {\n  last_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+major\\s+versions?$/i,\n    select: function (context, node) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context)\n        if (!data) return selected\n        var list = getMajorVersions(data.released, node.versions)\n        list = list.map(nameMapper(data.name))\n        list = filterJumps(list, data.name, node.versions, context)\n        return selected.concat(list)\n      }, [])\n    }\n  },\n  last_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+versions?$/i,\n    select: function (context, node) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context)\n        if (!data) return selected\n        var list = data.released.slice(-node.versions)\n        list = list.map(nameMapper(data.name))\n        list = filterJumps(list, data.name, node.versions, context)\n        return selected.concat(list)\n      }, [])\n    }\n  },\n  last_electron_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+major\\s+versions?$/i,\n    select: function (context, node) {\n      var validVersions = getMajorVersions(Object.keys(e2c), node.versions)\n      return validVersions.map(function (i) {\n        return 'chrome ' + e2c[i]\n      })\n    }\n  },\n  last_node_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+node\\s+major\\s+versions?$/i,\n    select: function (context, node) {\n      return getMajorVersions(browserslist.nodeVersions, node.versions).map(\n        function (version) {\n          return 'node ' + version\n        }\n      )\n    }\n  },\n  last_browser_major_versions: {\n    matches: ['versions', 'browser'],\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+major\\s+versions?$/i,\n    select: function (context, node) {\n      var data = checkName(node.browser, context)\n      var validVersions = getMajorVersions(data.released, node.versions)\n      var list = validVersions.map(nameMapper(data.name))\n      list = filterJumps(list, data.name, node.versions, context)\n      return list\n    }\n  },\n  last_electron_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+versions?$/i,\n    select: function (context, node) {\n      return Object.keys(e2c)\n        .slice(-node.versions)\n        .map(function (i) {\n          return 'chrome ' + e2c[i]\n        })\n    }\n  },\n  last_node_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+node\\s+versions?$/i,\n    select: function (context, node) {\n      return browserslist.nodeVersions\n        .slice(-node.versions)\n        .map(function (version) {\n          return 'node ' + version\n        })\n    }\n  },\n  last_browser_versions: {\n    matches: ['versions', 'browser'],\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+versions?$/i,\n    select: function (context, node) {\n      var data = checkName(node.browser, context)\n      var list = data.released.slice(-node.versions).map(nameMapper(data.name))\n      list = filterJumps(list, data.name, node.versions, context)\n      return list\n    }\n  },\n  unreleased_versions: {\n    matches: [],\n    regexp: /^unreleased\\s+versions$/i,\n    select: function (context) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context)\n        if (!data) return selected\n        var list = data.versions.filter(function (v) {\n          return data.released.indexOf(v) === -1\n        })\n        list = list.map(nameMapper(data.name))\n        return selected.concat(list)\n      }, [])\n    }\n  },\n  unreleased_electron_versions: {\n    matches: [],\n    regexp: /^unreleased\\s+electron\\s+versions?$/i,\n    select: function () {\n      return []\n    }\n  },\n  unreleased_browser_versions: {\n    matches: ['browser'],\n    regexp: /^unreleased\\s+(\\w+)\\s+versions?$/i,\n    select: function (context, node) {\n      var data = checkName(node.browser, context)\n      return data.versions\n        .filter(function (v) {\n          return data.released.indexOf(v) === -1\n        })\n        .map(nameMapper(data.name))\n    }\n  },\n  last_years: {\n    matches: ['years'],\n    regexp: /^last\\s+(\\d*.?\\d+)\\s+years?$/i,\n    select: function (context, node) {\n      return filterByYear(Date.now() - YEAR * node.years, context)\n    }\n  },\n  since_y: {\n    matches: ['year'],\n    regexp: /^since (\\d+)$/i,\n    select: sinceQuery\n  },\n  since_y_m: {\n    matches: ['year', 'month'],\n    regexp: /^since (\\d+)-(\\d+)$/i,\n    select: sinceQuery\n  },\n  since_y_m_d: {\n    matches: ['year', 'month', 'day'],\n    regexp: /^since (\\d+)-(\\d+)-(\\d+)$/i,\n    select: sinceQuery\n  },\n  popularity: {\n    matches: ['sign', 'popularity'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%$/,\n    select: function (context, node) {\n      var popularity = parseFloat(node.popularity)\n      var usage = browserslist.usage.global\n      return Object.keys(usage).reduce(function (result, version) {\n        if (node.sign === '>') {\n          if (usage[version] > popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<') {\n          if (usage[version] < popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<=') {\n          if (usage[version] <= popularity) {\n            result.push(version)\n          }\n        } else if (usage[version] >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  popularity_in_my_stats: {\n    matches: ['sign', 'popularity'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+my\\s+stats$/,\n    select: function (context, node) {\n      var popularity = parseFloat(node.popularity)\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided')\n      }\n      var usage = context.customUsage\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version]\n        if (percentage == null) {\n          return result\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version)\n          }\n        } else if (percentage >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  popularity_in_config_stats: {\n    matches: ['sign', 'popularity', 'config'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(\\S+)\\s+stats$/,\n    select: function (context, node) {\n      var popularity = parseFloat(node.popularity)\n      var stats = env.loadStat(context, node.config, browserslist.data)\n      if (stats) {\n        context.customUsage = {}\n        for (var browser in stats) {\n          fillUsage(context.customUsage, browser, stats[browser])\n        }\n      }\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided')\n      }\n      var usage = context.customUsage\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version]\n        if (percentage == null) {\n          return result\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version)\n          }\n        } else if (percentage >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  popularity_in_place: {\n    matches: ['sign', 'popularity', 'place'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+((alt-)?\\w\\w)$/,\n    select: function (context, node) {\n      var popularity = parseFloat(node.popularity)\n      var place = node.place\n      if (place.length === 2) {\n        place = place.toUpperCase()\n      } else {\n        place = place.toLowerCase()\n      }\n      env.loadCountry(browserslist.usage, place, browserslist.data)\n      var usage = browserslist.usage[place]\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version]\n        if (percentage == null) {\n          return result\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version)\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version)\n          }\n        } else if (percentage >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  cover: {\n    matches: ['coverage'],\n    regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%$/i,\n    select: coverQuery\n  },\n  cover_in: {\n    matches: ['coverage', 'place'],\n    regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w)$/i,\n    select: coverQuery\n  },\n  supports: {\n    matches: ['supportType', 'feature'],\n    regexp: /^(?:(fully|partially)\\s+)?supports\\s+([\\w-]+)$/,\n    select: function (context, node) {\n      env.loadFeature(browserslist.cache, node.feature)\n      var withPartial = node.supportType !== 'fully'\n      var features = browserslist.cache[node.feature]\n      var result = []\n      for (var name in features) {\n        var data = byName(name, context)\n        // Only check desktop when latest released mobile has support\n        var iMax = data.released.length - 1\n        while (iMax >= 0) {\n          if (data.released[iMax] in features[name]) break\n          iMax--\n        }\n        var checkDesktop =\n          context.mobileToDesktop &&\n          name in browserslist.desktopNames &&\n          isSupported(features[name][data.released[iMax]], withPartial)\n        data.versions.forEach(function (version) {\n          var flags = features[name][version]\n          if (flags === undefined && checkDesktop) {\n            flags = features[browserslist.desktopNames[name]][version]\n          }\n          if (isSupported(flags, withPartial)) {\n            result.push(name + ' ' + version)\n          }\n        })\n      }\n      return result\n    }\n  },\n  electron_range: {\n    matches: ['from', 'to'],\n    regexp: /^electron\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function (context, node) {\n      var fromToUse = normalizeElectron(node.from)\n      var toToUse = normalizeElectron(node.to)\n      var from = parseFloat(node.from)\n      var to = parseFloat(node.to)\n      if (!e2c[fromToUse]) {\n        throw new BrowserslistError('Unknown version ' + from + ' of electron')\n      }\n      if (!e2c[toToUse]) {\n        throw new BrowserslistError('Unknown version ' + to + ' of electron')\n      }\n      return Object.keys(e2c)\n        .filter(function (i) {\n          var parsed = parseFloat(i)\n          return parsed >= from && parsed <= to\n        })\n        .map(function (i) {\n          return 'chrome ' + e2c[i]\n        })\n    }\n  },\n  node_range: {\n    matches: ['from', 'to'],\n    regexp: /^node\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function (context, node) {\n      return browserslist.nodeVersions\n        .filter(semverFilterLoose('>=', node.from))\n        .filter(semverFilterLoose('<=', node.to))\n        .map(function (v) {\n          return 'node ' + v\n        })\n    }\n  },\n  browser_range: {\n    matches: ['browser', 'from', 'to'],\n    regexp: /^(\\w+)\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function (context, node) {\n      var data = checkName(node.browser, context)\n      var from = parseFloat(normalizeVersion(data, node.from) || node.from)\n      var to = parseFloat(normalizeVersion(data, node.to) || node.to)\n      function filter(v) {\n        var parsed = parseFloat(v)\n        return parsed >= from && parsed <= to\n      }\n      return data.released.filter(filter).map(nameMapper(data.name))\n    }\n  },\n  electron_ray: {\n    matches: ['sign', 'version'],\n    regexp: /^electron\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n    select: function (context, node) {\n      var versionToUse = normalizeElectron(node.version)\n      return Object.keys(e2c)\n        .filter(generateFilter(node.sign, versionToUse))\n        .map(function (i) {\n          return 'chrome ' + e2c[i]\n        })\n    }\n  },\n  node_ray: {\n    matches: ['sign', 'version'],\n    regexp: /^node\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n    select: function (context, node) {\n      return browserslist.nodeVersions\n        .filter(generateSemverFilter(node.sign, node.version))\n        .map(function (v) {\n          return 'node ' + v\n        })\n    }\n  },\n  browser_ray: {\n    matches: ['browser', 'sign', 'version'],\n    regexp: /^(\\w+)\\s*(>=?|<=?)\\s*([\\d.]+)$/,\n    select: function (context, node) {\n      var version = node.version\n      var data = checkName(node.browser, context)\n      var alias = browserslist.versionAliases[data.name][version]\n      if (alias) version = alias\n      return data.released\n        .filter(generateFilter(node.sign, version))\n        .map(function (v) {\n          return data.name + ' ' + v\n        })\n    }\n  },\n  firefox_esr: {\n    matches: [],\n    regexp: /^(firefox|ff|fx)\\s+esr$/i,\n    select: function () {\n      return ['firefox 115']\n    }\n  },\n  opera_mini_all: {\n    matches: [],\n    regexp: /(operamini|op_mini)\\s+all/i,\n    select: function () {\n      return ['op_mini all']\n    }\n  },\n  electron_version: {\n    matches: ['version'],\n    regexp: /^electron\\s+([\\d.]+)$/i,\n    select: function (context, node) {\n      var versionToUse = normalizeElectron(node.version)\n      var chrome = e2c[versionToUse]\n      if (!chrome) {\n        throw new BrowserslistError(\n          'Unknown version ' + node.version + ' of electron'\n        )\n      }\n      return ['chrome ' + chrome]\n    }\n  },\n  node_major_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+)$/i,\n    select: nodeQuery\n  },\n  node_minor_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+\\.\\d+)$/i,\n    select: nodeQuery\n  },\n  node_patch_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+\\.\\d+\\.\\d+)$/i,\n    select: nodeQuery\n  },\n  current_node: {\n    matches: [],\n    regexp: /^current\\s+node$/i,\n    select: function (context) {\n      return [env.currentNode(resolve, context)]\n    }\n  },\n  maintained_node: {\n    matches: [],\n    regexp: /^maintained\\s+node\\s+versions$/i,\n    select: function (context) {\n      var now = Date.now()\n      var queries = Object.keys(jsEOL)\n        .filter(function (key) {\n          return (\n            now < Date.parse(jsEOL[key].end) &&\n            now > Date.parse(jsEOL[key].start) &&\n            isEolReleased(key)\n          )\n        })\n        .map(function (key) {\n          return 'node ' + key.slice(1)\n        })\n      return resolve(queries, context)\n    }\n  },\n  phantomjs_1_9: {\n    matches: [],\n    regexp: /^phantomjs\\s+1.9$/i,\n    select: function () {\n      return ['safari 5']\n    }\n  },\n  phantomjs_2_1: {\n    matches: [],\n    regexp: /^phantomjs\\s+2.1$/i,\n    select: function () {\n      return ['safari 6']\n    }\n  },\n  browser_version: {\n    matches: ['browser', 'version'],\n    regexp: /^(\\w+)\\s+(tp|[\\d.]+)$/i,\n    select: function (context, node) {\n      var version = node.version\n      if (/^tp$/i.test(version)) version = 'TP'\n      var data = checkName(node.browser, context)\n      var alias = normalizeVersion(data, version)\n      if (alias) {\n        version = alias\n      } else {\n        if (version.indexOf('.') === -1) {\n          alias = version + '.0'\n        } else {\n          alias = version.replace(/\\.0$/, '')\n        }\n        alias = normalizeVersion(data, alias)\n        if (alias) {\n          version = alias\n        } else if (context.ignoreUnknownVersions) {\n          return []\n        } else {\n          throw new BrowserslistError(\n            'Unknown version ' + version + ' of ' + node.browser\n          )\n        }\n      }\n      return [data.name + ' ' + version]\n    }\n  },\n  browserslist_config: {\n    matches: [],\n    regexp: /^browserslist config$/i,\n    select: function (context) {\n      return browserslist(undefined, context)\n    }\n  },\n  extends: {\n    matches: ['config'],\n    regexp: /^extends (.+)$/i,\n    select: function (context, node) {\n      return resolve(env.loadQueries(context, node.config), context)\n    }\n  },\n  defaults: {\n    matches: [],\n    regexp: /^defaults$/i,\n    select: function (context) {\n      return resolve(browserslist.defaults, context)\n    }\n  },\n  dead: {\n    matches: [],\n    regexp: /^dead$/i,\n    select: function (context) {\n      var dead = [\n        'Baidu >= 0',\n        'ie <= 11',\n        'ie_mob <= 11',\n        'bb <= 10',\n        'op_mob <= 12.1',\n        'samsung 4'\n      ]\n      return resolve(dead, context)\n    }\n  },\n  unknown: {\n    matches: [],\n    regexp: /^(\\w+)$/i,\n    select: function (context, node) {\n      if (byName(node.query, context)) {\n        throw new BrowserslistError(\n          'Specify versions in Browserslist query for browser ' + node.query\n        )\n      } else {\n        throw unknownQuery(node.query)\n      }\n    }\n  }\n}\n\n// Get and convert Can I Use data\n\n;(function () {\n  for (var name in agents) {\n    var browser = agents[name]\n    browserslist.data[name] = {\n      name: name,\n      versions: normalize(agents[name].versions),\n      released: normalize(agents[name].versions.slice(0, -3)),\n      releaseDate: agents[name].release_date\n    }\n    fillUsage(browserslist.usage.global, name, browser.usage_global)\n\n    browserslist.versionAliases[name] = {}\n    for (var i = 0; i < browser.versions.length; i++) {\n      var full = browser.versions[i]\n      if (!full) continue\n\n      if (full.indexOf('-') !== -1) {\n        var interval = full.split('-')\n        for (var j = 0; j < interval.length; j++) {\n          browserslist.versionAliases[name][interval[j]] = full\n        }\n      }\n    }\n  }\n\n  browserslist.nodeVersions = jsReleases.map(function (release) {\n    return release.version\n  })\n})()\n\nmodule.exports = browserslist\n", "const { min } = Math;\n\n// a minimal leven distance implementation\n// balanced maintainability with code size\n// It is not blazingly fast but should be okay for Babel user case\n// where it will be run for at most tens of time on strings\n// that have less than 20 ASCII characters\n\n// https://rosettacode.org/wiki/Levenshtein_distance#ES5\nfunction levenshtein(a: string, b: string): number {\n  let t = [],\n    u: number[] = [],\n    i,\n    j;\n  const m = a.length,\n    n = b.length;\n  if (!m) {\n    return n;\n  }\n  if (!n) {\n    return m;\n  }\n  for (j = 0; j <= n; j++) {\n    t[j] = j;\n  }\n  for (i = 1; i <= m; i++) {\n    for (u = [i], j = 1; j <= n; j++) {\n      u[j] =\n        a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;\n    }\n    t = u;\n  }\n  return u[n];\n}\n\n/**\n * Given a string `str` and an array of candidates `arr`,\n * return the first of elements in candidates that has minimal\n * Levenshtein distance with `str`.\n * @export\n * @param {string} str\n * @param {string[]} arr\n * @returns {string}\n */\nexport function findSuggestion(str: string, arr: readonly string[]): string {\n  const distances = arr.map<number>(el => levenshtein(el, str));\n  return arr[distances.indexOf(min(...distances))];\n}\n", "import { findSuggestion } from \"./find-suggestion.ts\";\n\nexport class OptionValidator {\n  declare descriptor: string;\n  constructor(descriptor: string) {\n    this.descriptor = descriptor;\n  }\n\n  /**\n   * Validate if the given `options` follow the name of keys defined in the `TopLevelOptionShape`\n   *\n   * @param {Object} options\n   * @param {Object} TopLevelOptionShape\n   *   An object with all the valid key names that `options` should be allowed to have\n   *   The property values of `TopLevelOptionShape` can be arbitrary\n   * @memberof OptionValidator\n   */\n  validateTopLevelOptions(options: Object, TopLevelOptionShape: Object): void {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(\n          this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${findSuggestion(option, validOptionNames)}'?`),\n        );\n      }\n    }\n  }\n\n  // note: we do not consider rewrite them to high order functions\n  // until we have to support `validateNumberOption`.\n  validateBooleanOption<T extends boolean>(\n    name: string,\n    value?: boolean,\n    defaultValue?: T,\n  ): boolean | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"boolean\",\n        `'${name}' option must be a boolean.`,\n      );\n    }\n    return value;\n  }\n\n  validateStringOption<T extends string>(\n    name: string,\n    value?: string,\n    defaultValue?: T,\n  ): string | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"string\",\n        `'${name}' option must be a string.`,\n      );\n    }\n    return value;\n  }\n  /**\n   * A helper interface copied from the `invariant` npm package.\n   * It throws given `message` when `condition` is not met\n   *\n   * @param {boolean} condition\n   * @param {string} message\n   * @memberof OptionValidator\n   */\n  invariant(condition: boolean, message: string): void {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message: string): string {\n    return `${this.descriptor}: ${message}`;\n  }\n}\n", "export { OptionValidator } from \"./validator.ts\";\nexport { findSuggestion } from \"./find-suggestion.ts\";\n", "{\n  \"es6.module\": {\n    \"chrome\": \"61\",\n    \"and_chr\": \"61\",\n    \"edge\": \"16\",\n    \"firefox\": \"60\",\n    \"and_ff\": \"60\",\n    \"node\": \"13.2.0\",\n    \"opera\": \"48\",\n    \"op_mob\": \"45\",\n    \"safari\": \"10.1\",\n    \"ios\": \"10.3\",\n    \"samsung\": \"8.2\",\n    \"android\": \"61\",\n    \"electron\": \"2.0\",\n    \"ios_saf\": \"10.3\"\n  }\n}\n", "module.exports = require(\"./data/native-modules.json\");\n", "'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n", "'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 2; i < arguments.length; i++) {\n    walker = insert(this, walker, arguments[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n", "'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n", "export const unreleasedLabels = {\n  safari: \"tp\",\n} as const;\n\n// Map from browserslist|@mdn/browser-compat-data browser names to @kangax/compat-table browser names\nexport const browserNameMap = {\n  and_chr: \"chrome\",\n  and_ff: \"firefox\",\n  android: \"android\",\n  chrome: \"chrome\",\n  edge: \"edge\",\n  firefox: \"firefox\",\n  ie: \"ie\",\n  ie_mob: \"ie\",\n  ios_saf: \"ios\",\n  node: \"node\",\n  deno: \"deno\",\n  op_mob: \"opera_mobile\",\n  opera: \"opera\",\n  safari: \"safari\",\n  samsung: \"samsung\",\n} as const;\n\nexport type BrowserslistBrowserName = keyof typeof browserNameMap;\n", "import semver from \"semver\";\nimport { OptionValidator } from \"@babel/helper-validator-option\";\nimport { unreleasedLabels } from \"./targets.ts\";\nimport type { Target, Targets } from \"./types.ts\";\n\nconst versionRegExp = /^(\\d+|\\d+.\\d+)$/;\n\nconst v = new OptionValidator(PACKAGE_JSON.name);\n\nexport function semverMin(\n  first: string | undefined | null,\n  second: string,\n): string {\n  return first && semver.lt(first, second) ? first : second;\n}\n\n// Convert version to a semver value.\n// 2.5 -> 2.5.0; 1 -> 1.0.0;\nexport function semverify(version: number | string): string {\n  if (typeof version === \"string\" && semver.valid(version)) {\n    return version;\n  }\n\n  v.invariant(\n    typeof version === \"number\" ||\n      (typeof version === \"string\" && versionRegExp.test(version)),\n    `'${version}' is not a valid version`,\n  );\n\n  version = version.toString();\n\n  let pos = 0;\n  let num = 0;\n  while ((pos = version.indexOf(\".\", pos + 1)) > 0) {\n    num++;\n  }\n  return version + \".0\".repeat(2 - num);\n}\n\nexport function isUnreleasedVersion(\n  version: string | number,\n  env: Target,\n): boolean {\n  const unreleasedLabel =\n    // @ts-expect-error unreleasedLabel will be guarded later\n    unreleasedLabels[env];\n  return (\n    !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase()\n  );\n}\n\nexport function getLowestUnreleased(a: string, b: string, env: Target): string {\n  const unreleasedLabel:\n    | (typeof unreleasedLabels)[keyof typeof unreleasedLabels]\n    | undefined =\n    // @ts-expect-error unreleasedLabel is undefined when env is not safari\n    unreleasedLabels[env];\n  if (a === unreleasedLabel) {\n    return b;\n  }\n  if (b === unreleasedLabel) {\n    return a;\n  }\n  return semverMin(a, b);\n}\n\nexport function getHighestUnreleased(\n  a: string,\n  b: string,\n  env: Target,\n): string {\n  return getLowestUnreleased(a, b, env) === a ? b : a;\n}\n\nexport function getLowestImplementedVersion(\n  plugin: Targets,\n  environment: Target,\n): string {\n  const result = plugin[environment];\n  // When Android support data is absent, use Chrome data as fallback\n  if (!result && environment === \"android\") {\n    return plugin.chrome;\n  }\n  return result;\n}\n", "export const TargetNames = {\n  node: \"node\",\n  deno: \"deno\",\n  chrome: \"chrome\",\n  opera: \"opera\",\n  edge: \"edge\",\n  firefox: \"firefox\",\n  safari: \"safari\",\n  ie: \"ie\",\n  ios: \"ios\",\n  android: \"android\",\n  electron: \"electron\",\n  samsung: \"samsung\",\n  rhino: \"rhino\",\n  opera_mobile: \"opera_mobile\",\n};\n", "import semver from \"semver\";\nimport { unreleasedLabels } from \"./targets.ts\";\nimport type { Targets, Target } from \"./types.ts\";\n\nexport function prettifyVersion(version: string) {\n  if (typeof version !== \"string\") {\n    return version;\n  }\n\n  const { major, minor, patch } = semver.parse(version);\n\n  const parts = [major];\n\n  if (minor || patch) {\n    parts.push(minor);\n  }\n\n  if (patch) {\n    parts.push(patch);\n  }\n\n  return parts.join(\".\");\n}\n\nexport function prettifyTargets(targets: Targets): Targets {\n  return Object.keys(targets).reduce((results, target: Target) => {\n    let value = targets[target];\n\n    const unreleasedLabel =\n      // @ts-expect-error undefined is strictly compared with string later\n      unreleasedLabels[target];\n    if (typeof value === \"string\" && unreleasedLabel !== value) {\n      value = prettifyVersion(value);\n    }\n\n    results[target] = value;\n    return results;\n  }, {} as Targets);\n}\n", "import semver from \"semver\";\nimport { prettifyVersion } from \"./pretty.ts\";\nimport {\n  semverify,\n  isUnreleasedVersion,\n  getLowestImplementedVersion,\n} from \"./utils.ts\";\nimport type { Target, Targets } from \"./types.ts\";\n\nexport function getInclusionReasons(\n  item: string,\n  targetVersions: Targets,\n  list: { [key: string]: Targets },\n) {\n  const minVersions = list[item] || {};\n\n  return (Object.keys(targetVersions) as Target[]).reduce(\n    (result, env) => {\n      const minVersion = getLowestImplementedVersion(minVersions, env);\n      const targetVersion = targetVersions[env];\n\n      if (!minVersion) {\n        result[env] = prettifyVersion(targetVersion);\n      } else {\n        const minIsUnreleased = isUnreleasedVersion(minVersion, env);\n        const targetIsUnreleased = isUnreleasedVersion(targetVersion, env);\n\n        if (\n          !targetIsUnreleased &&\n          (minIsUnreleased ||\n            semver.lt(targetVersion.toString(), semverify(minVersion)))\n        ) {\n          result[env] = prettifyVersion(targetVersion);\n        }\n      }\n\n      return result;\n    },\n    {} as Partial<Record<Target, string>>,\n  );\n}\n", "{\n  \"transform-unicode-sets-regex\": {\n    \"chrome\": \"112\",\n    \"opera\": \"98\",\n    \"edge\": \"112\",\n    \"firefox\": \"116\",\n    \"safari\": \"17\",\n    \"node\": \"20\",\n    \"deno\": \"1.32\",\n    \"ios\": \"17\",\n    \"opera_mobile\": \"75\",\n    \"electron\": \"24.0\"\n  },\n  \"bugfix/transform-v8-static-class-fields-redefine-readonly\": {\n    \"chrome\": \"98\",\n    \"opera\": \"84\",\n    \"edge\": \"98\",\n    \"firefox\": \"95\",\n    \"safari\": \"15\",\n    \"node\": \"12\",\n    \"deno\": \"1.18\",\n    \"ios\": \"15\",\n    \"samsung\": \"11\",\n    \"opera_mobile\": \"52\",\n    \"electron\": \"17.0\"\n  },\n  \"bugfix/transform-firefox-class-in-computed-class-key\": {\n    \"chrome\": \"74\",\n    \"opera\": \"62\",\n    \"edge\": \"79\",\n    \"safari\": \"14.1\",\n    \"node\": \"12\",\n    \"deno\": \"1\",\n    \"ios\": \"14.5\",\n    \"samsung\": \"11\",\n    \"opera_mobile\": \"53\",\n    \"electron\": \"6.0\"\n  },\n  \"transform-class-static-block\": {\n    \"chrome\": \"94\",\n    \"opera\": \"80\",\n    \"edge\": \"94\",\n    \"firefox\": \"93\",\n    \"safari\": \"16.4\",\n    \"node\": \"16.11\",\n    \"deno\": \"1.14\",\n    \"ios\": \"16.4\",\n    \"samsung\": \"17\",\n    \"opera_mobile\": \"66\",\n    \"electron\": \"15.0\"\n  },\n  \"proposal-class-static-block\": {\n    \"chrome\": \"94\",\n    \"opera\": \"80\",\n    \"edge\": \"94\",\n    \"firefox\": \"93\",\n    \"safari\": \"16.4\",\n    \"node\": \"16.11\",\n    \"deno\": \"1.14\",\n    \"ios\": \"16.4\",\n    \"samsung\": \"17\",\n    \"opera_mobile\": \"66\",\n    \"electron\": \"15.0\"\n  },\n  \"transform-private-property-in-object\": {\n    \"chrome\": \"91\",\n    \"opera\": \"77\",\n    \"edge\": \"91\",\n    \"firefox\": \"90\",\n    \"safari\": \"15\",\n    \"node\": \"16.9\",\n    \"deno\": \"1.9\",\n    \"ios\": \"15\",\n    \"samsung\": \"16\",\n    \"opera_mobile\": \"64\",\n    \"electron\": \"13.0\"\n  },\n  \"proposal-private-property-in-object\": {\n    \"chrome\": \"91\",\n    \"opera\": \"77\",\n    \"edge\": \"91\",\n    \"firefox\": \"90\",\n    \"safari\": \"15\",\n    \"node\": \"16.9\",\n    \"deno\": \"1.9\",\n    \"ios\": \"15\",\n    \"samsung\": \"16\",\n    \"opera_mobile\": \"64\",\n    \"electron\": \"13.0\"\n  },\n  \"transform-class-properties\": {\n    \"chrome\": \"74\",\n    \"opera\": \"62\",\n    \"edge\": \"79\",\n    \"firefox\": \"90\",\n    \"safari\": \"14.1\",\n    \"node\": \"12\",\n    \"deno\": \"1\",\n    \"ios\": \"14.5\",\n    \"samsung\": \"11\",\n    \"opera_mobile\": \"53\",\n    \"electron\": \"6.0\"\n  },\n  \"proposal-class-properties\": {\n    \"chrome\": \"74\",\n    \"opera\": \"62\",\n    \"edge\": \"79\",\n    \"firefox\": \"90\",\n    \"safari\": \"14.1\",\n    \"node\": \"12\",\n    \"deno\": \"1\",\n    \"ios\": \"14.5\",\n    \"samsung\": \"11\",\n    \"opera_mobile\": \"53\",\n    \"electron\": \"6.0\"\n  },\n  \"transform-private-methods\": {\n    \"chrome\": \"84\",\n    \"opera\": \"70\",\n    \"edge\": \"84\",\n    \"firefox\": \"90\",\n    \"safari\": \"15\",\n    \"node\": \"14.6\",\n    \"deno\": \"1\",\n    \"ios\": \"15\",\n    \"samsung\": \"14\",\n    \"opera_mobile\": \"60\",\n    \"electron\": \"10.0\"\n  },\n  \"proposal-private-methods\": {\n    \"chrome\": \"84\",\n    \"opera\": \"70\",\n    \"edge\": \"84\",\n    \"firefox\": \"90\",\n    \"safari\": \"15\",\n    \"node\": \"14.6\",\n    \"deno\": \"1\",\n    \"ios\": \"15\",\n    \"samsung\": \"14\",\n    \"opera_mobile\": \"60\",\n    \"electron\": \"10.0\"\n  },\n  \"transform-numeric-separator\": {\n    \"chrome\": \"75\",\n    \"opera\": \"62\",\n    \"edge\": \"79\",\n    \"firefox\": \"70\",\n    \"safari\": \"13\",\n    \"node\": \"12.5\",\n    \"deno\": \"1\",\n    \"ios\": \"13\",\n    \"samsung\": \"11\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"54\",\n    \"electron\": \"6.0\"\n  },\n  \"proposal-numeric-separator\": {\n    \"chrome\": \"75\",\n    \"opera\": \"62\",\n    \"edge\": \"79\",\n    \"firefox\": \"70\",\n    \"safari\": \"13\",\n    \"node\": \"12.5\",\n    \"deno\": \"1\",\n    \"ios\": \"13\",\n    \"samsung\": \"11\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"54\",\n    \"electron\": \"6.0\"\n  },\n  \"transform-logical-assignment-operators\": {\n    \"chrome\": \"85\",\n    \"opera\": \"71\",\n    \"edge\": \"85\",\n    \"firefox\": \"79\",\n    \"safari\": \"14\",\n    \"node\": \"15\",\n    \"deno\": \"1.2\",\n    \"ios\": \"14\",\n    \"samsung\": \"14\",\n    \"opera_mobile\": \"60\",\n    \"electron\": \"10.0\"\n  },\n  \"proposal-logical-assignment-operators\": {\n    \"chrome\": \"85\",\n    \"opera\": \"71\",\n    \"edge\": \"85\",\n    \"firefox\": \"79\",\n    \"safari\": \"14\",\n    \"node\": \"15\",\n    \"deno\": \"1.2\",\n    \"ios\": \"14\",\n    \"samsung\": \"14\",\n    \"opera_mobile\": \"60\",\n    \"electron\": \"10.0\"\n  },\n  \"transform-nullish-coalescing-operator\": {\n    \"chrome\": \"80\",\n    \"opera\": \"67\",\n    \"edge\": \"80\",\n    \"firefox\": \"72\",\n    \"safari\": \"13.1\",\n    \"node\": \"14\",\n    \"deno\": \"1\",\n    \"ios\": \"13.4\",\n    \"samsung\": \"13\",\n    \"opera_mobile\": \"57\",\n    \"electron\": \"8.0\"\n  },\n  \"proposal-nullish-coalescing-operator\": {\n    \"chrome\": \"80\",\n    \"opera\": \"67\",\n    \"edge\": \"80\",\n    \"firefox\": \"72\",\n    \"safari\": \"13.1\",\n    \"node\": \"14\",\n    \"deno\": \"1\",\n    \"ios\": \"13.4\",\n    \"samsung\": \"13\",\n    \"opera_mobile\": \"57\",\n    \"electron\": \"8.0\"\n  },\n  \"transform-optional-chaining\": {\n    \"chrome\": \"91\",\n    \"opera\": \"77\",\n    \"edge\": \"91\",\n    \"firefox\": \"74\",\n    \"safari\": \"13.1\",\n    \"node\": \"16.9\",\n    \"deno\": \"1.9\",\n    \"ios\": \"13.4\",\n    \"samsung\": \"16\",\n    \"opera_mobile\": \"64\",\n    \"electron\": \"13.0\"\n  },\n  \"proposal-optional-chaining\": {\n    \"chrome\": \"91\",\n    \"opera\": \"77\",\n    \"edge\": \"91\",\n    \"firefox\": \"74\",\n    \"safari\": \"13.1\",\n    \"node\": \"16.9\",\n    \"deno\": \"1.9\",\n    \"ios\": \"13.4\",\n    \"samsung\": \"16\",\n    \"opera_mobile\": \"64\",\n    \"electron\": \"13.0\"\n  },\n  \"transform-json-strings\": {\n    \"chrome\": \"66\",\n    \"opera\": \"53\",\n    \"edge\": \"79\",\n    \"firefox\": \"62\",\n    \"safari\": \"12\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"12\",\n    \"samsung\": \"9\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"proposal-json-strings\": {\n    \"chrome\": \"66\",\n    \"opera\": \"53\",\n    \"edge\": \"79\",\n    \"firefox\": \"62\",\n    \"safari\": \"12\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"12\",\n    \"samsung\": \"9\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-optional-catch-binding\": {\n    \"chrome\": \"66\",\n    \"opera\": \"53\",\n    \"edge\": \"79\",\n    \"firefox\": \"58\",\n    \"safari\": \"11.1\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"9\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"proposal-optional-catch-binding\": {\n    \"chrome\": \"66\",\n    \"opera\": \"53\",\n    \"edge\": \"79\",\n    \"firefox\": \"58\",\n    \"safari\": \"11.1\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"9\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-parameters\": {\n    \"chrome\": \"49\",\n    \"opera\": \"36\",\n    \"edge\": \"18\",\n    \"firefox\": \"53\",\n    \"safari\": \"16.3\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"16.3\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"36\",\n    \"electron\": \"0.37\"\n  },\n  \"transform-async-generator-functions\": {\n    \"chrome\": \"63\",\n    \"opera\": \"50\",\n    \"edge\": \"79\",\n    \"firefox\": \"57\",\n    \"safari\": \"12\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"12\",\n    \"samsung\": \"8\",\n    \"opera_mobile\": \"46\",\n    \"electron\": \"3.0\"\n  },\n  \"proposal-async-generator-functions\": {\n    \"chrome\": \"63\",\n    \"opera\": \"50\",\n    \"edge\": \"79\",\n    \"firefox\": \"57\",\n    \"safari\": \"12\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"12\",\n    \"samsung\": \"8\",\n    \"opera_mobile\": \"46\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-object-rest-spread\": {\n    \"chrome\": \"60\",\n    \"opera\": \"47\",\n    \"edge\": \"79\",\n    \"firefox\": \"55\",\n    \"safari\": \"11.1\",\n    \"node\": \"8.3\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"8\",\n    \"opera_mobile\": \"44\",\n    \"electron\": \"2.0\"\n  },\n  \"proposal-object-rest-spread\": {\n    \"chrome\": \"60\",\n    \"opera\": \"47\",\n    \"edge\": \"79\",\n    \"firefox\": \"55\",\n    \"safari\": \"11.1\",\n    \"node\": \"8.3\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"8\",\n    \"opera_mobile\": \"44\",\n    \"electron\": \"2.0\"\n  },\n  \"transform-dotall-regex\": {\n    \"chrome\": \"62\",\n    \"opera\": \"49\",\n    \"edge\": \"79\",\n    \"firefox\": \"78\",\n    \"safari\": \"11.1\",\n    \"node\": \"8.10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"8\",\n    \"rhino\": \"1.7.15\",\n    \"opera_mobile\": \"46\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-unicode-property-regex\": {\n    \"chrome\": \"64\",\n    \"opera\": \"51\",\n    \"edge\": \"79\",\n    \"firefox\": \"78\",\n    \"safari\": \"11.1\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"9\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"proposal-unicode-property-regex\": {\n    \"chrome\": \"64\",\n    \"opera\": \"51\",\n    \"edge\": \"79\",\n    \"firefox\": \"78\",\n    \"safari\": \"11.1\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"9\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-named-capturing-groups-regex\": {\n    \"chrome\": \"64\",\n    \"opera\": \"51\",\n    \"edge\": \"79\",\n    \"firefox\": \"78\",\n    \"safari\": \"11.1\",\n    \"node\": \"10\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"9\",\n    \"opera_mobile\": \"47\",\n    \"electron\": \"3.0\"\n  },\n  \"transform-async-to-generator\": {\n    \"chrome\": \"55\",\n    \"opera\": \"42\",\n    \"edge\": \"15\",\n    \"firefox\": \"52\",\n    \"safari\": \"11\",\n    \"node\": \"7.6\",\n    \"deno\": \"1\",\n    \"ios\": \"11\",\n    \"samsung\": \"6\",\n    \"opera_mobile\": \"42\",\n    \"electron\": \"1.6\"\n  },\n  \"transform-exponentiation-operator\": {\n    \"chrome\": \"52\",\n    \"opera\": \"39\",\n    \"edge\": \"14\",\n    \"firefox\": \"52\",\n    \"safari\": \"10.1\",\n    \"node\": \"7\",\n    \"deno\": \"1\",\n    \"ios\": \"10.3\",\n    \"samsung\": \"6\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"41\",\n    \"electron\": \"1.3\"\n  },\n  \"transform-template-literals\": {\n    \"chrome\": \"41\",\n    \"opera\": \"28\",\n    \"edge\": \"13\",\n    \"firefox\": \"34\",\n    \"safari\": \"13\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"13\",\n    \"samsung\": \"3.4\",\n    \"opera_mobile\": \"28\",\n    \"electron\": \"0.21\"\n  },\n  \"transform-literals\": {\n    \"chrome\": \"44\",\n    \"opera\": \"31\",\n    \"edge\": \"12\",\n    \"firefox\": \"53\",\n    \"safari\": \"9\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"9\",\n    \"samsung\": \"4\",\n    \"rhino\": \"1.7.15\",\n    \"opera_mobile\": \"32\",\n    \"electron\": \"0.30\"\n  },\n  \"transform-function-name\": {\n    \"chrome\": \"51\",\n    \"opera\": \"38\",\n    \"edge\": \"79\",\n    \"firefox\": \"53\",\n    \"safari\": \"10\",\n    \"node\": \"6.5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"41\",\n    \"electron\": \"1.2\"\n  },\n  \"transform-arrow-functions\": {\n    \"chrome\": \"47\",\n    \"opera\": \"34\",\n    \"edge\": \"13\",\n    \"firefox\": \"43\",\n    \"safari\": \"10\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"rhino\": \"1.7.13\",\n    \"opera_mobile\": \"34\",\n    \"electron\": \"0.36\"\n  },\n  \"transform-block-scoped-functions\": {\n    \"chrome\": \"41\",\n    \"opera\": \"28\",\n    \"edge\": \"12\",\n    \"firefox\": \"46\",\n    \"safari\": \"10\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ie\": \"11\",\n    \"ios\": \"10\",\n    \"samsung\": \"3.4\",\n    \"opera_mobile\": \"28\",\n    \"electron\": \"0.21\"\n  },\n  \"transform-classes\": {\n    \"chrome\": \"46\",\n    \"opera\": \"33\",\n    \"edge\": \"13\",\n    \"firefox\": \"45\",\n    \"safari\": \"10\",\n    \"node\": \"5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"33\",\n    \"electron\": \"0.36\"\n  },\n  \"transform-object-super\": {\n    \"chrome\": \"46\",\n    \"opera\": \"33\",\n    \"edge\": \"13\",\n    \"firefox\": \"45\",\n    \"safari\": \"10\",\n    \"node\": \"5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"33\",\n    \"electron\": \"0.36\"\n  },\n  \"transform-shorthand-properties\": {\n    \"chrome\": \"43\",\n    \"opera\": \"30\",\n    \"edge\": \"12\",\n    \"firefox\": \"33\",\n    \"safari\": \"9\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"9\",\n    \"samsung\": \"4\",\n    \"rhino\": \"1.7.14\",\n    \"opera_mobile\": \"30\",\n    \"electron\": \"0.27\"\n  },\n  \"transform-duplicate-keys\": {\n    \"chrome\": \"42\",\n    \"opera\": \"29\",\n    \"edge\": \"12\",\n    \"firefox\": \"34\",\n    \"safari\": \"9\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"9\",\n    \"samsung\": \"3.4\",\n    \"opera_mobile\": \"29\",\n    \"electron\": \"0.25\"\n  },\n  \"transform-computed-properties\": {\n    \"chrome\": \"44\",\n    \"opera\": \"31\",\n    \"edge\": \"12\",\n    \"firefox\": \"34\",\n    \"safari\": \"7.1\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"8\",\n    \"samsung\": \"4\",\n    \"opera_mobile\": \"32\",\n    \"electron\": \"0.30\"\n  },\n  \"transform-for-of\": {\n    \"chrome\": \"51\",\n    \"opera\": \"38\",\n    \"edge\": \"15\",\n    \"firefox\": \"53\",\n    \"safari\": \"10\",\n    \"node\": \"6.5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"41\",\n    \"electron\": \"1.2\"\n  },\n  \"transform-sticky-regex\": {\n    \"chrome\": \"49\",\n    \"opera\": \"36\",\n    \"edge\": \"13\",\n    \"firefox\": \"3\",\n    \"safari\": \"10\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"rhino\": \"1.7.15\",\n    \"opera_mobile\": \"36\",\n    \"electron\": \"0.37\"\n  },\n  \"transform-unicode-escapes\": {\n    \"chrome\": \"44\",\n    \"opera\": \"31\",\n    \"edge\": \"12\",\n    \"firefox\": \"53\",\n    \"safari\": \"9\",\n    \"node\": \"4\",\n    \"deno\": \"1\",\n    \"ios\": \"9\",\n    \"samsung\": \"4\",\n    \"rhino\": \"1.7.15\",\n    \"opera_mobile\": \"32\",\n    \"electron\": \"0.30\"\n  },\n  \"transform-unicode-regex\": {\n    \"chrome\": \"50\",\n    \"opera\": \"37\",\n    \"edge\": \"13\",\n    \"firefox\": \"46\",\n    \"safari\": \"12\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"12\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"37\",\n    \"electron\": \"1.1\"\n  },\n  \"transform-spread\": {\n    \"chrome\": \"46\",\n    \"opera\": \"33\",\n    \"edge\": \"13\",\n    \"firefox\": \"45\",\n    \"safari\": \"10\",\n    \"node\": \"5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"33\",\n    \"electron\": \"0.36\"\n  },\n  \"transform-destructuring\": {\n    \"chrome\": \"51\",\n    \"opera\": \"38\",\n    \"edge\": \"15\",\n    \"firefox\": \"53\",\n    \"safari\": \"10\",\n    \"node\": \"6.5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"41\",\n    \"electron\": \"1.2\"\n  },\n  \"transform-block-scoping\": {\n    \"chrome\": \"50\",\n    \"opera\": \"37\",\n    \"edge\": \"14\",\n    \"firefox\": \"53\",\n    \"safari\": \"11\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"11\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"37\",\n    \"electron\": \"1.1\"\n  },\n  \"transform-typeof-symbol\": {\n    \"chrome\": \"38\",\n    \"opera\": \"25\",\n    \"edge\": \"12\",\n    \"firefox\": \"36\",\n    \"safari\": \"9\",\n    \"node\": \"0.12\",\n    \"deno\": \"1\",\n    \"ios\": \"9\",\n    \"samsung\": \"3\",\n    \"rhino\": \"1.7.13\",\n    \"opera_mobile\": \"25\",\n    \"electron\": \"0.20\"\n  },\n  \"transform-new-target\": {\n    \"chrome\": \"46\",\n    \"opera\": \"33\",\n    \"edge\": \"14\",\n    \"firefox\": \"41\",\n    \"safari\": \"10\",\n    \"node\": \"5\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"33\",\n    \"electron\": \"0.36\"\n  },\n  \"transform-regenerator\": {\n    \"chrome\": \"50\",\n    \"opera\": \"37\",\n    \"edge\": \"13\",\n    \"firefox\": \"53\",\n    \"safari\": \"10\",\n    \"node\": \"6\",\n    \"deno\": \"1\",\n    \"ios\": \"10\",\n    \"samsung\": \"5\",\n    \"opera_mobile\": \"37\",\n    \"electron\": \"1.1\"\n  },\n  \"transform-member-expression-literals\": {\n    \"chrome\": \"7\",\n    \"opera\": \"12\",\n    \"edge\": \"12\",\n    \"firefox\": \"2\",\n    \"safari\": \"5.1\",\n    \"node\": \"0.4\",\n    \"deno\": \"1\",\n    \"ie\": \"9\",\n    \"android\": \"4\",\n    \"ios\": \"6\",\n    \"phantom\": \"1.9\",\n    \"samsung\": \"1\",\n    \"rhino\": \"1.7.13\",\n    \"opera_mobile\": \"12\",\n    \"electron\": \"0.20\"\n  },\n  \"transform-property-literals\": {\n    \"chrome\": \"7\",\n    \"opera\": \"12\",\n    \"edge\": \"12\",\n    \"firefox\": \"2\",\n    \"safari\": \"5.1\",\n    \"node\": \"0.4\",\n    \"deno\": \"1\",\n    \"ie\": \"9\",\n    \"android\": \"4\",\n    \"ios\": \"6\",\n    \"phantom\": \"1.9\",\n    \"samsung\": \"1\",\n    \"rhino\": \"1.7.13\",\n    \"opera_mobile\": \"12\",\n    \"electron\": \"0.20\"\n  },\n  \"transform-reserved-words\": {\n    \"chrome\": \"13\",\n    \"opera\": \"10.50\",\n    \"edge\": \"12\",\n    \"firefox\": \"2\",\n    \"safari\": \"3.1\",\n    \"node\": \"0.6\",\n    \"deno\": \"1\",\n    \"ie\": \"9\",\n    \"android\": \"4.4\",\n    \"ios\": \"6\",\n    \"phantom\": \"1.9\",\n    \"samsung\": \"1\",\n    \"rhino\": \"1.7.13\",\n    \"opera_mobile\": \"10.1\",\n    \"electron\": \"0.20\"\n  },\n  \"transform-export-namespace-from\": {\n    \"chrome\": \"72\",\n    \"deno\": \"1.0\",\n    \"edge\": \"79\",\n    \"firefox\": \"80\",\n    \"node\": \"13.2\",\n    \"opera\": \"60\",\n    \"opera_mobile\": \"51\",\n    \"safari\": \"14.1\",\n    \"ios\": \"14.5\",\n    \"samsung\": \"11.0\",\n    \"android\": \"72\",\n    \"electron\": \"5.0\"\n  },\n  \"proposal-export-namespace-from\": {\n    \"chrome\": \"72\",\n    \"deno\": \"1.0\",\n    \"edge\": \"79\",\n    \"firefox\": \"80\",\n    \"node\": \"13.2\",\n    \"opera\": \"60\",\n    \"opera_mobile\": \"51\",\n    \"safari\": \"14.1\",\n    \"ios\": \"14.5\",\n    \"samsung\": \"11.0\",\n    \"android\": \"72\",\n    \"electron\": \"5.0\"\n  }\n}\n", "module.exports = require(\"./data/plugins.json\");\n", "import semver from \"semver\";\n\nimport pluginsCompatData from \"@babel/compat-data/plugins\";\n\nimport type { Targets } from \"./types.ts\";\nimport {\n  getLowestImplementedVersion,\n  isUnreleasedVersion,\n  semverify,\n} from \"./utils.ts\";\n\nexport function targetsSupported(target: Targets, support: Targets) {\n  const targetEnvironments = Object.keys(target) as Array<keyof Targets>;\n\n  if (targetEnvironments.length === 0) {\n    return false;\n  }\n\n  const unsupportedEnvironments = targetEnvironments.filter(environment => {\n    const lowestImplementedVersion = getLowestImplementedVersion(\n      support,\n      environment,\n    );\n\n    // Feature is not implemented in that environment\n    if (!lowestImplementedVersion) {\n      return true;\n    }\n\n    const lowestTargetedVersion = target[environment];\n\n    // If targets has unreleased value as a lowest version, then don't require a plugin.\n    if (isUnreleasedVersion(lowestTargetedVersion, environment)) {\n      return false;\n    }\n\n    // Include plugin if it is supported in the unreleased environment, which wasn't specified in targets\n    if (isUnreleasedVersion(lowestImplementedVersion, environment)) {\n      return true;\n    }\n\n    if (!semver.valid(lowestTargetedVersion.toString())) {\n      throw new Error(\n        `Invalid version passed for target \"${environment}\": \"${lowestTargetedVersion}\". ` +\n          \"Versions must be in semver format (major.minor.patch)\",\n      );\n    }\n\n    return semver.gt(\n      semverify(lowestImplementedVersion),\n      lowestTargetedVersion.toString(),\n    );\n  });\n\n  return unsupportedEnvironments.length === 0;\n}\n\nexport function isRequired(\n  name: string,\n  targets: Targets,\n  {\n    compatData = pluginsCompatData,\n    includes,\n    excludes,\n  }: {\n    compatData?: { [feature: string]: Targets };\n    includes?: Set<string>;\n    excludes?: Set<string>;\n  } = {},\n) {\n  if (excludes?.has(name)) return false;\n  if (includes?.has(name)) return true;\n  return !targetsSupported(targets, compatData[name]);\n}\n\nexport default function filterItems(\n  list: { [feature: string]: Targets },\n  includes: Set<string>,\n  excludes: Set<string>,\n  targets: Targets,\n  defaultIncludes: Array<string> | null,\n  defaultExcludes?: Array<string> | null,\n  pluginSyntaxMap?: Map<string, string | null>,\n) {\n  const result = new Set<string>();\n  const options = { compatData: list, includes, excludes };\n\n  for (const item in list) {\n    if (isRequired(item, targets, options)) {\n      result.add(item);\n    } else if (pluginSyntaxMap) {\n      const shippedProposalsSyntax = pluginSyntaxMap.get(item);\n\n      if (shippedProposalsSyntax) {\n        result.add(shippedProposalsSyntax);\n      }\n    }\n  }\n\n  defaultIncludes?.forEach(item => !excludes.has(item) && result.add(item));\n  defaultExcludes?.forEach(item => !includes.has(item) && result.delete(item));\n\n  return result;\n}\n", "import browserslist from \"browserslist\";\nimport { findSuggestion } from \"@babel/helper-validator-option\";\nimport browserModulesData from \"@babel/compat-data/native-modules\";\nimport LruCache from \"lru-cache\";\n\nimport {\n  semverify,\n  semverMin,\n  isUnreleasedVersion,\n  getLowestUnreleased,\n  getHighestUnreleased,\n} from \"./utils.ts\";\nimport { OptionValidator } from \"@babel/helper-validator-option\";\nimport { browserNameMap } from \"./targets.ts\";\nimport { TargetNames } from \"./options.ts\";\nimport type {\n  Target,\n  Targets,\n  InputTargets,\n  Browsers,\n  BrowserslistBrowserName,\n  TargetsTuple,\n} from \"./types.ts\";\n\nexport type { Target, Targets, InputTargets };\n\nexport { prettifyTargets } from \"./pretty.ts\";\nexport { getInclusionReasons } from \"./debug.ts\";\nexport { default as filterItems, isRequired } from \"./filter-items.ts\";\nexport { unreleasedLabels } from \"./targets.ts\";\nexport { TargetNames };\n\nconst ESM_SUPPORT = browserModulesData[\"es6.module\"];\n\nconst v = new OptionValidator(PACKAGE_JSON.name);\n\nfunction validateTargetNames(targets: Targets): TargetsTuple {\n  const validTargets = Object.keys(TargetNames);\n  for (const target of Object.keys(targets)) {\n    if (!(target in TargetNames)) {\n      throw new Error(\n        v.formatMessage(`'${target}' is not a valid target\n- Did you mean '${findSuggestion(target, validTargets)}'?`),\n      );\n    }\n  }\n\n  return targets;\n}\n\nexport function isBrowsersQueryValid(browsers: unknown): boolean {\n  return (\n    typeof browsers === \"string\" ||\n    (Array.isArray(browsers) && browsers.every(b => typeof b === \"string\"))\n  );\n}\n\nfunction validateBrowsers(browsers: Browsers | undefined) {\n  v.invariant(\n    browsers === undefined || isBrowsersQueryValid(browsers),\n    `'${String(browsers)}' is not a valid browserslist query`,\n  );\n\n  return browsers;\n}\n\nfunction getLowestVersions(browsers: Array<string>): Targets {\n  return browsers.reduce(\n    (all, browser) => {\n      const [browserName, browserVersion] = browser.split(\" \") as [\n        BrowserslistBrowserName,\n        string,\n      ];\n      const target = browserNameMap[browserName];\n\n      if (!target) {\n        return all;\n      }\n\n      try {\n        // Browser version can return as \"10.0-10.2\"\n        const splitVersion = browserVersion.split(\"-\")[0].toLowerCase();\n        const isSplitUnreleased = isUnreleasedVersion(splitVersion, target);\n\n        if (!all[target]) {\n          all[target] = isSplitUnreleased\n            ? splitVersion\n            : semverify(splitVersion);\n          return all;\n        }\n\n        const version = all[target];\n        const isUnreleased = isUnreleasedVersion(version, target);\n\n        if (isUnreleased && isSplitUnreleased) {\n          all[target] = getLowestUnreleased(version, splitVersion, target);\n        } else if (isUnreleased) {\n          all[target] = semverify(splitVersion);\n        } else if (!isUnreleased && !isSplitUnreleased) {\n          const parsedBrowserVersion = semverify(splitVersion);\n\n          all[target] = semverMin(version, parsedBrowserVersion);\n        }\n      } catch (e) {}\n\n      return all;\n    },\n    {} as Record<Target, string>,\n  );\n}\n\nfunction outputDecimalWarning(\n  decimalTargets: Array<{ target: string; value: number }>,\n) {\n  if (!decimalTargets.length) {\n    return;\n  }\n\n  console.warn(\"Warning, the following targets are using a decimal version:\\n\");\n  decimalTargets.forEach(({ target, value }) =>\n    console.warn(`  ${target}: ${value}`),\n  );\n  console.warn(`\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\ngetting parsed as 6.1, which can lead to unexpected behavior.\n`);\n}\n\nfunction semverifyTarget(target: Target, value: string) {\n  try {\n    return semverify(value);\n  } catch (error) {\n    throw new Error(\n      v.formatMessage(\n        `'${value}' is not a valid value for 'targets.${target}'.`,\n      ),\n    );\n  }\n}\n\n// Parse `node: true` and `node: \"current\"` to version\nfunction nodeTargetParser(value: true | string) {\n  const parsed =\n    value === true || value === \"current\"\n      ? process.versions.node\n      : semverifyTarget(\"node\", value);\n  return [\"node\", parsed] as const;\n}\n\nfunction defaultTargetParser(\n  target: Exclude<Target, \"node\">,\n  value: string,\n): readonly [Exclude<Target, \"node\">, string] {\n  const version = isUnreleasedVersion(value, target)\n    ? value.toLowerCase()\n    : semverifyTarget(target, value);\n  return [target, version] as const;\n}\n\nfunction generateTargets(inputTargets: InputTargets): Targets {\n  const input = { ...inputTargets };\n  delete input.esmodules;\n  delete input.browsers;\n  return input;\n}\n\nfunction resolveTargets(queries: Browsers, env?: string): Targets {\n  const resolved = browserslist(queries, {\n    mobileToDesktop: true,\n    env,\n  });\n  return getLowestVersions(resolved);\n}\n\nconst targetsCache = new LruCache({ max: 64 });\n\nfunction resolveTargetsCached(queries: Browsers, env?: string): Targets {\n  const cacheKey = typeof queries === \"string\" ? queries : queries.join() + env;\n  let cached = targetsCache.get(cacheKey) as Targets | undefined;\n  if (!cached) {\n    cached = resolveTargets(queries, env);\n    targetsCache.set(cacheKey, cached);\n  }\n  return { ...cached };\n}\n\ntype GetTargetsOption = {\n  // This is not the path of the config file, but the path where start searching it from\n  configPath?: string;\n  // The path of the config file\n  configFile?: string;\n  // The env to pass to browserslist\n  browserslistEnv?: string;\n  // true to disable config loading\n  ignoreBrowserslistConfig?: boolean;\n};\n\nexport default function getTargets(\n  inputTargets: InputTargets = {},\n  options: GetTargetsOption = {},\n): Targets {\n  let { browsers, esmodules } = inputTargets;\n  const { configPath = \".\" } = options;\n\n  validateBrowsers(browsers);\n\n  const input = generateTargets(inputTargets);\n  let targets = validateTargetNames(input);\n\n  const shouldParseBrowsers = !!browsers;\n  const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;\n  const shouldSearchForConfig =\n    !options.ignoreBrowserslistConfig && !hasTargets;\n\n  if (!browsers && shouldSearchForConfig) {\n    browsers = browserslist.loadConfig({\n      config: options.configFile,\n      path: configPath,\n      env: options.browserslistEnv,\n    });\n    if (browsers == null) {\n      if (process.env.BABEL_8_BREAKING) {\n        // In Babel 8, if no targets are passed, we use browserslist's defaults.\n        browsers = [\"defaults\"];\n      } else {\n        // If no targets are passed, we need to overwrite browserslist's defaults\n        // so that we enable all transforms (acting like the now deprecated\n        // preset-latest).\n        browsers = [];\n      }\n    }\n  }\n\n  // `esmodules` as a target indicates the specific set of browsers supporting ES Modules.\n  // These values OVERRIDE the `browsers` field.\n  if (esmodules && (esmodules !== \"intersect\" || !browsers?.length)) {\n    browsers = Object.keys(ESM_SUPPORT)\n      .map(\n        (browser: keyof typeof ESM_SUPPORT) =>\n          `${browser} >= ${ESM_SUPPORT[browser]}`,\n      )\n      .join(\", \");\n    esmodules = false;\n  }\n\n  // If current value of `browsers` is undefined (`ignoreBrowserslistConfig` should be `false`)\n  // or an empty array (without any user config, use default config),\n  // we don't need to call `resolveTargets` to execute the related methods of `browserslist` library.\n  if (browsers?.length) {\n    const queryBrowsers = resolveTargetsCached(\n      browsers,\n      options.browserslistEnv,\n    );\n\n    if (esmodules === \"intersect\") {\n      for (const browser of Object.keys(queryBrowsers) as Target[]) {\n        if (browser !== \"deno\" && browser !== \"ie\") {\n          const esmSupportVersion =\n            ESM_SUPPORT[browser === \"opera_mobile\" ? \"op_mob\" : browser];\n\n          if (esmSupportVersion) {\n            const version = queryBrowsers[browser];\n            queryBrowsers[browser] = getHighestUnreleased(\n              version,\n              semverify(esmSupportVersion),\n              browser,\n            );\n          } else {\n            delete queryBrowsers[browser];\n          }\n        } else {\n          delete queryBrowsers[browser];\n        }\n      }\n    }\n\n    targets = Object.assign(queryBrowsers, targets);\n  }\n\n  // Parse remaining targets\n  const result: Targets = {};\n  const decimalWarnings = [];\n  for (const target of Object.keys(targets).sort() as Target[]) {\n    const value = targets[target];\n\n    // Warn when specifying minor/patch as a decimal\n    if (typeof value === \"number\" && value % 1 !== 0) {\n      decimalWarnings.push({ target, value });\n    }\n\n    const [parsedTarget, parsedValue] =\n      target === \"node\"\n        ? nodeTargetParser(value)\n        : defaultTargetParser(target, value as string);\n\n    if (parsedValue) {\n      // Merge (lowest wins)\n      result[parsedTarget] = parsedValue;\n    }\n  }\n\n  outputDecimalWarning(decimalWarnings);\n\n  return result;\n}\n", "import type { ValidatedOptions } from \"./validation/options.ts\";\nimport getTargets, {\n  type InputTargets,\n} from \"@babel/helper-compilation-targets\";\n\nimport type { Targets } from \"@babel/helper-compilation-targets\";\n\nexport function resolveBrowserslistConfigFile(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  browserslistConfigFile: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  configFilePath: string,\n): string | void {\n  return undefined;\n}\n\nexport function resolveTargets(\n  options: ValidatedOptions,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  root: string,\n): Targets {\n  const optTargets = options.targets;\n  let targets: InputTargets;\n\n  if (typeof optTargets === \"string\" || Array.isArray(optTargets)) {\n    targets = { browsers: optTargets };\n  } else if (optTargets) {\n    if (\"esmodules\" in optTargets) {\n      targets = { ...optTargets, esmodules: \"intersect\" };\n    } else {\n      // https://github.com/microsoft/TypeScript/issues/17002\n      targets = optTargets as InputTargets;\n    }\n  }\n\n  return getTargets(targets, {\n    ignoreBrowserslistConfig: true,\n    browserslistEnv: options.browserslistEnv,\n  });\n}\n", "import gensync, { type Handler } from \"gensync\";\nimport { once } from \"../gensync-utils/functional.ts\";\n\nimport { loadPlugin, loadPreset } from \"./files/index.ts\";\n\nimport { getItemDescriptor } from \"./item.ts\";\n\nimport {\n  makeWeakCacheSync,\n  makeStrongCacheSync,\n  makeStrongCache,\n} from \"./caching.ts\";\nimport type { CacheConfigurator } from \"./caching.ts\";\n\nimport type {\n  ValidatedOptions,\n  PluginList,\n  PluginItem,\n} from \"./validation/options.ts\";\n\nimport { resolveBrowserslistConfigFile } from \"./resolve-targets.ts\";\nimport type { PluginAPI, PresetAPI } from \"./helpers/config-api.ts\";\n\n// Represents a config object and functions to lazily load the descriptors\n// for the plugins and presets so we don't load the plugins/presets unless\n// the options object actually ends up being applicable.\nexport type OptionsAndDescriptors = {\n  options: ValidatedOptions;\n  plugins: () => Handler<Array<UnloadedDescriptor<PluginAPI>>>;\n  presets: () => Handler<Array<UnloadedDescriptor<PresetAPI>>>;\n};\n\n// Represents a plugin or presets at a given location in a config object.\n// At this point these have been resolved to a specific object or function,\n// but have not yet been executed to call functions with options.\nexport interface UnloadedDescriptor<API, Options = {} | undefined | false> {\n  name: string | undefined;\n  value: object | ((api: API, options: Options, dirname: string) => unknown);\n  options: Options;\n  dirname: string;\n  alias: string;\n  ownPass?: boolean;\n  file?: {\n    request: string;\n    resolved: string;\n  };\n}\n\nfunction isEqualDescriptor<API>(\n  a: UnloadedDescriptor<API>,\n  b: UnloadedDescriptor<API>,\n): boolean {\n  return (\n    a.name === b.name &&\n    a.value === b.value &&\n    a.options === b.options &&\n    a.dirname === b.dirname &&\n    a.alias === b.alias &&\n    a.ownPass === b.ownPass &&\n    a.file?.request === b.file?.request &&\n    a.file?.resolved === b.file?.resolved\n  );\n}\n\nexport type ValidatedFile = {\n  filepath: string;\n  dirname: string;\n  options: ValidatedOptions;\n};\n\n// eslint-disable-next-line require-yield\nfunction* handlerOf<T>(value: T): Handler<T> {\n  return value;\n}\n\nfunction optionsWithResolvedBrowserslistConfigFile(\n  options: ValidatedOptions,\n  dirname: string,\n): ValidatedOptions {\n  if (typeof options.browserslistConfigFile === \"string\") {\n    options.browserslistConfigFile = resolveBrowserslistConfigFile(\n      options.browserslistConfigFile,\n      dirname,\n    );\n  }\n  return options;\n}\n\n/**\n * Create a set of descriptors from a given options object, preserving\n * descriptor identity based on the identity of the plugin/preset arrays\n * themselves, and potentially on the identity of the plugins/presets + options.\n */\nexport function createCachedDescriptors(\n  dirname: string,\n  options: ValidatedOptions,\n  alias: string,\n): OptionsAndDescriptors {\n  const { plugins, presets, passPerPreset } = options;\n  return {\n    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),\n    plugins: plugins\n      ? () =>\n          // @ts-expect-error todo(flow->ts) ts complains about incorrect arguments\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          createCachedPluginDescriptors(plugins, dirname)(alias)\n      : () => handlerOf([]),\n    presets: presets\n      ? () =>\n          // @ts-expect-error todo(flow->ts) ts complains about incorrect arguments\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          createCachedPresetDescriptors(presets, dirname)(alias)(\n            !!passPerPreset,\n          )\n      : () => handlerOf([]),\n  };\n}\n\n/**\n * Create a set of descriptors from a given options object, with consistent\n * identity for the descriptors, but not caching based on any specific identity.\n */\nexport function createUncachedDescriptors(\n  dirname: string,\n  options: ValidatedOptions,\n  alias: string,\n): OptionsAndDescriptors {\n  return {\n    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),\n    // The returned result here is cached to represent a config object in\n    // memory, so we build and memoize the descriptors to ensure the same\n    // values are returned consistently.\n    plugins: once(() =>\n      createPluginDescriptors(options.plugins || [], dirname, alias),\n    ),\n    presets: once(() =>\n      createPresetDescriptors(\n        options.presets || [],\n        dirname,\n        alias,\n        !!options.passPerPreset,\n      ),\n    ),\n  };\n}\n\nconst PRESET_DESCRIPTOR_CACHE = new WeakMap();\nconst createCachedPresetDescriptors = makeWeakCacheSync(\n  (items: PluginList, cache: CacheConfigurator<string>) => {\n    const dirname = cache.using(dir => dir);\n    return makeStrongCacheSync((alias: string) =>\n      makeStrongCache(function* (\n        passPerPreset: boolean,\n      ): Handler<Array<UnloadedDescriptor<PresetAPI>>> {\n        const descriptors = yield* createPresetDescriptors(\n          items,\n          dirname,\n          alias,\n          passPerPreset,\n        );\n        return descriptors.map(\n          // Items are cached using the overall preset array identity when\n          // possibly, but individual descriptors are also cached if a match\n          // can be found in the previously-used descriptor lists.\n          desc => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc),\n        );\n      }),\n    );\n  },\n);\n\nconst PLUGIN_DESCRIPTOR_CACHE = new WeakMap();\nconst createCachedPluginDescriptors = makeWeakCacheSync(\n  (items: PluginList, cache: CacheConfigurator<string>) => {\n    const dirname = cache.using(dir => dir);\n    return makeStrongCache(function* (\n      alias: string,\n    ): Handler<Array<UnloadedDescriptor<PluginAPI>>> {\n      const descriptors = yield* createPluginDescriptors(items, dirname, alias);\n      return descriptors.map(\n        // Items are cached using the overall plugin array identity when\n        // possibly, but individual descriptors are also cached if a match\n        // can be found in the previously-used descriptor lists.\n        desc => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc),\n      );\n    });\n  },\n);\n\n/**\n * When no options object is given in a descriptor, this object is used\n * as a WeakMap key in order to have consistent identity.\n */\nconst DEFAULT_OPTIONS = {};\n\n/**\n * Given the cache and a descriptor, returns a matching descriptor from the\n * cache, or else returns the input descriptor and adds it to the cache for\n * next time.\n */\nfunction loadCachedDescriptor<API>(\n  cache: WeakMap<{} | Function, WeakMap<{}, Array<UnloadedDescriptor<API>>>>,\n  desc: UnloadedDescriptor<API>,\n) {\n  const { value, options = DEFAULT_OPTIONS } = desc;\n  if (options === false) return desc;\n\n  let cacheByOptions = cache.get(value);\n  if (!cacheByOptions) {\n    cacheByOptions = new WeakMap();\n    cache.set(value, cacheByOptions);\n  }\n\n  let possibilities = cacheByOptions.get(options);\n  if (!possibilities) {\n    possibilities = [];\n    cacheByOptions.set(options, possibilities);\n  }\n\n  if (possibilities.indexOf(desc) === -1) {\n    const matches = possibilities.filter(possibility =>\n      isEqualDescriptor(possibility, desc),\n    );\n    if (matches.length > 0) {\n      return matches[0];\n    }\n\n    possibilities.push(desc);\n  }\n\n  return desc;\n}\n\nfunction* createPresetDescriptors(\n  items: PluginList,\n  dirname: string,\n  alias: string,\n  passPerPreset: boolean,\n): Handler<Array<UnloadedDescriptor<PresetAPI>>> {\n  return yield* createDescriptors(\n    \"preset\",\n    items,\n    dirname,\n    alias,\n    passPerPreset,\n  );\n}\n\nfunction* createPluginDescriptors(\n  items: PluginList,\n  dirname: string,\n  alias: string,\n): Handler<Array<UnloadedDescriptor<PluginAPI>>> {\n  return yield* createDescriptors(\"plugin\", items, dirname, alias);\n}\n\nfunction* createDescriptors<API>(\n  type: \"plugin\" | \"preset\",\n  items: PluginList,\n  dirname: string,\n  alias: string,\n  ownPass?: boolean,\n): Handler<Array<UnloadedDescriptor<API>>> {\n  const descriptors = yield* gensync.all(\n    items.map((item, index) =>\n      createDescriptor(item, dirname, {\n        type,\n        alias: `${alias}$${index}`,\n        ownPass: !!ownPass,\n      }),\n    ),\n  );\n\n  assertNoDuplicates(descriptors);\n\n  return descriptors;\n}\n\n/**\n * Given a plugin/preset item, resolve it into a standard format.\n */\nexport function* createDescriptor<API>(\n  pair: PluginItem,\n  dirname: string,\n  {\n    type,\n    alias,\n    ownPass,\n  }: {\n    type?: \"plugin\" | \"preset\";\n    alias: string;\n    ownPass?: boolean;\n  },\n): Handler<UnloadedDescriptor<API>> {\n  const desc = getItemDescriptor(pair);\n  if (desc) {\n    return desc;\n  }\n\n  let name;\n  let options;\n  // todo(flow->ts) better type annotation\n  let value: any = pair;\n  if (Array.isArray(value)) {\n    if (value.length === 3) {\n      [value, options, name] = value;\n    } else {\n      [value, options] = value;\n    }\n  }\n\n  let file = undefined;\n  let filepath = null;\n  if (typeof value === \"string\") {\n    if (typeof type !== \"string\") {\n      throw new Error(\n        \"To resolve a string-based item, the type of item must be given\",\n      );\n    }\n    const resolver = type === \"plugin\" ? loadPlugin : loadPreset;\n    const request = value;\n\n    ({ filepath, value } = yield* resolver(value, dirname));\n\n    file = {\n      request,\n      resolved: filepath,\n    };\n  }\n\n  if (!value) {\n    throw new Error(`Unexpected falsy value: ${String(value)}`);\n  }\n\n  if (typeof value === \"object\" && value.__esModule) {\n    if (value.default) {\n      value = value.default;\n    } else {\n      throw new Error(\"Must export a default export when using ES6 modules.\");\n    }\n  }\n\n  if (typeof value !== \"object\" && typeof value !== \"function\") {\n    throw new Error(\n      `Unsupported format: ${typeof value}. Expected an object or a function.`,\n    );\n  }\n\n  if (filepath !== null && typeof value === \"object\" && value) {\n    // We allow object values for plugins/presets nested directly within a\n    // config object, because it can be useful to define them in nested\n    // configuration contexts.\n    throw new Error(\n      `Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`,\n    );\n  }\n\n  return {\n    name,\n    alias: filepath || alias,\n    value,\n    options,\n    dirname,\n    ownPass,\n    file,\n  };\n}\n\nfunction assertNoDuplicates<API>(items: Array<UnloadedDescriptor<API>>): void {\n  const map = new Map();\n\n  for (const item of items) {\n    if (typeof item.value !== \"function\") continue;\n\n    let nameMap = map.get(item.value);\n    if (!nameMap) {\n      nameMap = new Set();\n      map.set(item.value, nameMap);\n    }\n\n    if (nameMap.has(item.name)) {\n      const conflicts = items.filter(i => i.value === item.value);\n      throw new Error(\n        [\n          `Duplicate plugin/preset detected.`,\n          `If you'd like to use two separate instances of a plugin,`,\n          `they need separate names, e.g.`,\n          ``,\n          `  plugins: [`,\n          `    ['some-plugin', {}],`,\n          `    ['some-plugin', {}, 'some unique name'],`,\n          `  ]`,\n          ``,\n          `Duplicates detected are:`,\n          `${JSON.stringify(conflicts, null, 2)}`,\n        ].join(\"\\n\"),\n      );\n    }\n\n    nameMap.add(item.name);\n  }\n}\n", "import type { Handler } from \"gensync\";\nimport type { PluginTarget, PluginOptions } from \"./validation/options.ts\";\n\nimport path from \"path\";\nimport { createDescriptor } from \"./config-descriptors.ts\";\n\nimport type { UnloadedDescriptor } from \"./config-descriptors.ts\";\n\nexport function createItemFromDescriptor<API>(\n  desc: UnloadedDescriptor<API>,\n): ConfigItem<API> {\n  return new ConfigItem(desc);\n}\n\n/**\n * Create a config item using the same value format used in Babel's config\n * files. Items returned from this function should be cached by the caller\n * ideally, as recreating the config item will mean re-resolving the item\n * and re-evaluating the plugin/preset function.\n */\nexport function* createConfigItem<API>(\n  value:\n    | PluginTarget\n    | [PluginTarget, PluginOptions]\n    | [PluginTarget, PluginOptions, string | void],\n  {\n    dirname = \".\",\n    type,\n  }: {\n    dirname?: string;\n    type?: \"preset\" | \"plugin\";\n  } = {},\n): Handler<ConfigItem<API>> {\n  const descriptor = yield* createDescriptor(value, path.resolve(dirname), {\n    type,\n    alias: \"programmatic item\",\n  });\n\n  return createItemFromDescriptor(descriptor);\n}\n\nconst CONFIG_ITEM_BRAND = Symbol.for(\"@babel/core@7 - ConfigItem\");\n\nexport function getItemDescriptor<API>(\n  item: unknown,\n): UnloadedDescriptor<API> | void {\n  if ((item as any)?.[CONFIG_ITEM_BRAND]) {\n    return (item as ConfigItem<API>)._descriptor;\n  }\n\n  return undefined;\n}\n\nexport type { ConfigItem };\n\n/**\n * A public representation of a plugin/preset that will _eventually_ be load.\n * Users can use this to interact with the results of a loaded Babel\n * configuration.\n *\n * Any changes to public properties of this class should be considered a\n * breaking change to Babel's API.\n */\nclass ConfigItem<API> {\n  /**\n   * The private underlying descriptor that Babel actually cares about.\n   * If you access this, you are a bad person.\n   */\n  _descriptor: UnloadedDescriptor<API>;\n\n  // TODO(Babel 9): Check if this symbol needs to be updated\n  /**\n   * Used to detect ConfigItem instances from other Babel instances.\n   */\n  [CONFIG_ITEM_BRAND] = true;\n\n  /**\n   * The resolved value of the item itself.\n   */\n  value: {} | Function;\n\n  /**\n   * The options, if any, that were passed to the item.\n   * Mutating this will lead to undefined behavior.\n   *\n   * \"false\" means that this item has been disabled.\n   */\n  options: {} | void | false;\n\n  /**\n   * The directory that the options for this item are relative to.\n   */\n  dirname: string;\n\n  /**\n   * Get the name of the plugin, if the user gave it one.\n   */\n  name: string | void;\n\n  /**\n   * Data about the file that the item was loaded from, if Babel knows it.\n   */\n  file: {\n    // The requested path, e.g. \"@babel/env\".\n    request: string;\n    // The resolved absolute path of the file.\n    resolved: string;\n  } | void;\n\n  constructor(descriptor: UnloadedDescriptor<API>) {\n    // Make people less likely to stumble onto this if they are exploring\n    // programmatically, and also make sure that if people happen to\n    // pass the item through JSON.stringify, it doesn't show up.\n    this._descriptor = descriptor;\n    Object.defineProperty(this, \"_descriptor\", { enumerable: false });\n\n    Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false });\n\n    this.value = this._descriptor.value;\n    this.options = this._descriptor.options;\n    this.dirname = this._descriptor.dirname;\n    this.name = this._descriptor.name;\n    this.file = this._descriptor.file\n      ? {\n          request: this._descriptor.file.request,\n          resolved: this._descriptor.file.resolved,\n        }\n      : undefined;\n\n    // Freeze the object to make it clear that people shouldn't expect mutating\n    // this object to do anything. A new item should be created if they want\n    // to change something.\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(ConfigItem.prototype);\n", "export default {\n  auxiliaryComment: {\n    message: \"Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`\",\n  },\n  blacklist: {\n    message: \"Put the specific transforms you want in the `plugins` option\",\n  },\n  breakConfig: {\n    message: \"This is not a necessary option in Babel 6\",\n  },\n  experimental: {\n    message: \"Put the specific transforms you want in the `plugins` option\",\n  },\n  externalHelpers: {\n    message:\n      \"Use the `external-helpers` plugin instead. \" +\n      \"Check out http://babeljs.io/docs/plugins/external-helpers/\",\n  },\n  extra: {\n    message: \"\",\n  },\n  jsxPragma: {\n    message:\n      \"use the `pragma` option in the `react-jsx` plugin. \" +\n      \"Check out http://babeljs.io/docs/plugins/transform-react-jsx/\",\n  },\n  loose: {\n    message:\n      \"Specify the `loose` option for the relevant plugin you are using \" +\n      \"or use a preset that sets the option.\",\n  },\n  metadataUsedHelpers: {\n    message: \"Not required anymore as this is enabled by default\",\n  },\n  modules: {\n    message:\n      \"Use the corresponding module transform plugin in the `plugins` option. \" +\n      \"Check out http://babeljs.io/docs/plugins/#modules\",\n  },\n  nonStandard: {\n    message:\n      \"Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. \" +\n      \"Also check out the react preset http://babeljs.io/docs/plugins/preset-react/\",\n  },\n  optional: {\n    message: \"Put the specific transforms you want in the `plugins` option\",\n  },\n  sourceMapName: {\n    message:\n      \"The `sourceMapName` option has been removed because it makes more sense for the \" +\n      \"tooling that calls Babel to assign `map.file` themselves.\",\n  },\n  stage: {\n    message:\n      \"Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets\",\n  },\n  whitelist: {\n    message: \"Put the specific transforms you want in the `plugins` option\",\n  },\n\n  resolveModuleSource: {\n    version: 6,\n    message: \"Use `babel-plugin-module-resolver@3`'s 'resolvePath' options\",\n  },\n  metadata: {\n    version: 6,\n    message:\n      \"Generated plugin metadata is always included in the output result\",\n  },\n  sourceMapTarget: {\n    version: 6,\n    message:\n      \"The `sourceMapTarget` option has been removed because it makes more sense for the tooling \" +\n      \"that calls Babel to assign `map.file` themselves.\",\n  },\n} as { [name: string]: { version?: number; message: string } };\n", "import {\n  isBrowsersQueryValid,\n  TargetNames,\n} from \"@babel/helper-compilation-targets\";\n\nimport type {\n  ConfigFileSearch,\n  BabelrcSearch,\n  IgnoreList,\n  IgnoreItem,\n  PluginList,\n  PluginItem,\n  PluginTarget,\n  ConfigApplicableTest,\n  SourceMapsOption,\n  SourceTypeOption,\n  CompactOption,\n  RootInputSourceMapOption,\n  NestingPath,\n  CallerMetadata,\n  RootMode,\n  TargetsListOrObject,\n  AssumptionName,\n} from \"./options.ts\";\n\nimport { assumptionsNames } from \"./options.ts\";\n\nexport type { RootPath } from \"./options.ts\";\n\nexport type ValidatorSet = {\n  [name: string]: Validator<any>;\n};\n\nexport type Validator<T> = (loc: OptionPath, value: unknown) => T;\n\nexport function msg(loc: NestingPath | GeneralPath): string {\n  switch (loc.type) {\n    case \"root\":\n      return ``;\n    case \"env\":\n      return `${msg(loc.parent)}.env[\"${loc.name}\"]`;\n    case \"overrides\":\n      return `${msg(loc.parent)}.overrides[${loc.index}]`;\n    case \"option\":\n      return `${msg(loc.parent)}.${loc.name}`;\n    case \"access\":\n      return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;\n    default:\n      // @ts-expect-error should not happen when code is type checked\n      throw new Error(`Assertion failure: Unknown type ${loc.type}`);\n  }\n}\n\nexport function access(loc: GeneralPath, name: string | number): AccessPath {\n  return {\n    type: \"access\",\n    name,\n    parent: loc,\n  };\n}\n\nexport type OptionPath = Readonly<{\n  type: \"option\";\n  name: string;\n  parent: NestingPath;\n}>;\ntype AccessPath = Readonly<{\n  type: \"access\";\n  name: string | number;\n  parent: GeneralPath;\n}>;\ntype GeneralPath = OptionPath | AccessPath;\n\nexport function assertRootMode(\n  loc: OptionPath,\n  value: unknown,\n): RootMode | void {\n  if (\n    value !== undefined &&\n    value !== \"root\" &&\n    value !== \"upward\" &&\n    value !== \"upward-optional\"\n  ) {\n    throw new Error(\n      `${msg(loc)} must be a \"root\", \"upward\", \"upward-optional\" or undefined`,\n    );\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertSourceMaps(\n  loc: OptionPath,\n  value: unknown,\n): SourceMapsOption | void {\n  if (\n    value !== undefined &&\n    typeof value !== \"boolean\" &&\n    value !== \"inline\" &&\n    value !== \"both\"\n  ) {\n    throw new Error(\n      `${msg(loc)} must be a boolean, \"inline\", \"both\", or undefined`,\n    );\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertCompact(\n  loc: OptionPath,\n  value: unknown,\n): CompactOption | void {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"auto\") {\n    throw new Error(`${msg(loc)} must be a boolean, \"auto\", or undefined`);\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertSourceType(\n  loc: OptionPath,\n  value: unknown,\n): SourceTypeOption | void {\n  if (\n    value !== undefined &&\n    value !== \"module\" &&\n    value !== \"script\" &&\n    value !== \"unambiguous\"\n  ) {\n    throw new Error(\n      `${msg(loc)} must be \"module\", \"script\", \"unambiguous\", or undefined`,\n    );\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertCallerMetadata(\n  loc: OptionPath,\n  value: unknown,\n): CallerMetadata | undefined {\n  const obj = assertObject(loc, value);\n  if (obj) {\n    if (typeof obj.name !== \"string\") {\n      throw new Error(\n        `${msg(loc)} set but does not contain \"name\" property string`,\n      );\n    }\n\n    for (const prop of Object.keys(obj)) {\n      const propLoc = access(loc, prop);\n      const value = obj[prop];\n      if (\n        value != null &&\n        typeof value !== \"boolean\" &&\n        typeof value !== \"string\" &&\n        typeof value !== \"number\"\n      ) {\n        // NOTE(logan): I'm limiting the type here so that we can guarantee that\n        // the \"caller\" value will serialize to JSON nicely. We can always\n        // allow more complex structures later though.\n        throw new Error(\n          `${msg(\n            propLoc,\n          )} must be null, undefined, a boolean, a string, or a number.`,\n        );\n      }\n    }\n  }\n  // @ts-expect-error todo(flow->ts)\n  return value;\n}\n\nexport function assertInputSourceMap(\n  loc: OptionPath,\n  value: unknown,\n): RootInputSourceMapOption | void {\n  if (\n    value !== undefined &&\n    typeof value !== \"boolean\" &&\n    (typeof value !== \"object\" || !value)\n  ) {\n    throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);\n  }\n  return value;\n}\n\nexport function assertString(loc: GeneralPath, value: unknown): string | void {\n  if (value !== undefined && typeof value !== \"string\") {\n    throw new Error(`${msg(loc)} must be a string, or undefined`);\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertFunction(\n  loc: GeneralPath,\n  value: unknown,\n): Function | void {\n  if (value !== undefined && typeof value !== \"function\") {\n    throw new Error(`${msg(loc)} must be a function, or undefined`);\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertBoolean(\n  loc: GeneralPath,\n  value: unknown,\n): boolean | void {\n  if (value !== undefined && typeof value !== \"boolean\") {\n    throw new Error(`${msg(loc)} must be a boolean, or undefined`);\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertObject(\n  loc: GeneralPath,\n  value: unknown,\n): { readonly [key: string]: unknown } | void {\n  if (\n    value !== undefined &&\n    (typeof value !== \"object\" || Array.isArray(value) || !value)\n  ) {\n    throw new Error(`${msg(loc)} must be an object, or undefined`);\n  }\n  // @ts-expect-error todo(flow->ts) value is still typed as unknown, also assert function typically should not return a value\n  return value;\n}\n\nexport function assertArray<T>(\n  loc: GeneralPath,\n  value: Array<T> | undefined | null,\n): ReadonlyArray<T> | undefined | null {\n  if (value != null && !Array.isArray(value)) {\n    throw new Error(`${msg(loc)} must be an array, or undefined`);\n  }\n  return value;\n}\n\nexport function assertIgnoreList(\n  loc: OptionPath,\n  value: unknown[] | undefined,\n): IgnoreList | void {\n  const arr = assertArray(loc, value);\n  arr?.forEach((item, i) => assertIgnoreItem(access(loc, i), item));\n  // @ts-expect-error todo(flow->ts)\n  return arr;\n}\nfunction assertIgnoreItem(loc: GeneralPath, value: unknown): IgnoreItem {\n  if (\n    typeof value !== \"string\" &&\n    typeof value !== \"function\" &&\n    !(value instanceof RegExp)\n  ) {\n    throw new Error(\n      `${msg(\n        loc,\n      )} must be an array of string/Function/RegExp values, or undefined`,\n    );\n  }\n  return value as IgnoreItem;\n}\n\nexport function assertConfigApplicableTest(\n  loc: OptionPath,\n  value: unknown,\n): ConfigApplicableTest | void {\n  if (value === undefined) {\n    // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(\n          `${msg(access(loc, i))} must be a string/Function/RegExp.`,\n        );\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(\n      `${msg(loc)} must be a string/Function/RegExp, or an array of those`,\n    );\n  }\n  return value as ConfigApplicableTest;\n}\n\nfunction checkValidTest(value: unknown): value is string | Function | RegExp {\n  return (\n    typeof value === \"string\" ||\n    typeof value === \"function\" ||\n    value instanceof RegExp\n  );\n}\n\nexport function assertConfigFileSearch(\n  loc: OptionPath,\n  value: unknown,\n): ConfigFileSearch | void {\n  if (\n    value !== undefined &&\n    typeof value !== \"boolean\" &&\n    typeof value !== \"string\"\n  ) {\n    throw new Error(\n      `${msg(loc)} must be a undefined, a boolean, a string, ` +\n        `got ${JSON.stringify(value)}`,\n    );\n  }\n  // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n  return value;\n}\n\nexport function assertBabelrcSearch(\n  loc: OptionPath,\n  value: unknown,\n): BabelrcSearch | void {\n  if (value === undefined || typeof value === \"boolean\") {\n    // @ts-expect-error: TS can only narrow down the type when \"strictNullCheck\" is true\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(\n          `${msg(access(loc, i))} must be a string/Function/RegExp.`,\n        );\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(\n      `${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp ` +\n        `or an array of those, got ${JSON.stringify(value as any)}`,\n    );\n  }\n  return value as BabelrcSearch;\n}\n\nexport function assertPluginList(\n  loc: OptionPath,\n  value: unknown[] | null | undefined,\n): PluginList | void {\n  const arr = assertArray(loc, value);\n  if (arr) {\n    // Loop instead of using `.map` in order to preserve object identity\n    // for plugin array for use during config chain processing.\n    arr.forEach((item, i) => assertPluginItem(access(loc, i), item));\n  }\n  return arr as any;\n}\nfunction assertPluginItem(loc: GeneralPath, value: unknown): PluginItem {\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      throw new Error(`${msg(loc)} must include an object`);\n    }\n\n    if (value.length > 3) {\n      throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);\n    }\n\n    assertPluginTarget(access(loc, 0), value[0]);\n\n    if (value.length > 1) {\n      const opts = value[1];\n      if (\n        opts !== undefined &&\n        opts !== false &&\n        (typeof opts !== \"object\" || Array.isArray(opts) || opts === null)\n      ) {\n        throw new Error(\n          `${msg(access(loc, 1))} must be an object, false, or undefined`,\n        );\n      }\n    }\n    if (value.length === 3) {\n      const name = value[2];\n      if (name !== undefined && typeof name !== \"string\") {\n        throw new Error(\n          `${msg(access(loc, 2))} must be a string, or undefined`,\n        );\n      }\n    }\n  } else {\n    assertPluginTarget(loc, value);\n  }\n\n  // @ts-expect-error todo(flow->ts)\n  return value;\n}\nfunction assertPluginTarget(loc: GeneralPath, value: unknown): PluginTarget {\n  if (\n    (typeof value !== \"object\" || !value) &&\n    typeof value !== \"string\" &&\n    typeof value !== \"function\"\n  ) {\n    throw new Error(`${msg(loc)} must be a string, object, function`);\n  }\n  return value;\n}\n\nexport function assertTargets(\n  loc: GeneralPath,\n  value: any,\n): TargetsListOrObject {\n  if (isBrowsersQueryValid(value)) return value;\n\n  if (typeof value !== \"object\" || !value || Array.isArray(value)) {\n    throw new Error(\n      `${msg(loc)} must be a string, an array of strings or an object`,\n    );\n  }\n\n  const browsersLoc = access(loc, \"browsers\");\n  const esmodulesLoc = access(loc, \"esmodules\");\n\n  assertBrowsersList(browsersLoc, value.browsers);\n  assertBoolean(esmodulesLoc, value.esmodules);\n\n  for (const key of Object.keys(value)) {\n    const val = value[key];\n    const subLoc = access(loc, key);\n\n    if (key === \"esmodules\") assertBoolean(subLoc, val);\n    else if (key === \"browsers\") assertBrowsersList(subLoc, val);\n    else if (!Object.hasOwn(TargetNames, key)) {\n      const validTargets = Object.keys(TargetNames).join(\", \");\n      throw new Error(\n        `${msg(\n          subLoc,\n        )} is not a valid target. Supported targets are ${validTargets}`,\n      );\n    } else assertBrowserVersion(subLoc, val);\n  }\n\n  return value;\n}\n\nfunction assertBrowsersList(loc: GeneralPath, value: unknown) {\n  if (value !== undefined && !isBrowsersQueryValid(value)) {\n    throw new Error(\n      `${msg(loc)} must be undefined, a string or an array of strings`,\n    );\n  }\n}\n\nfunction assertBrowserVersion(loc: GeneralPath, value: unknown) {\n  if (typeof value === \"number\" && Math.round(value) === value) return;\n  if (typeof value === \"string\") return;\n\n  throw new Error(`${msg(loc)} must be a string or an integer number`);\n}\n\nexport function assertAssumptions(\n  loc: GeneralPath,\n  value: { [key: string]: unknown },\n): { [name: string]: boolean } | void {\n  if (value === undefined) return;\n\n  if (typeof value !== \"object\" || value === null) {\n    throw new Error(`${msg(loc)} must be an object or undefined.`);\n  }\n\n  // todo(flow->ts): remove any\n  let root: any = loc;\n  do {\n    root = root.parent;\n  } while (root.type !== \"root\");\n  const inPreset = root.source === \"preset\";\n\n  for (const name of Object.keys(value)) {\n    const subLoc = access(loc, name);\n    if (!assumptionsNames.has(name as AssumptionName)) {\n      throw new Error(`${msg(subLoc)} is not a supported assumption.`);\n    }\n    if (typeof value[name] !== \"boolean\") {\n      throw new Error(`${msg(subLoc)} must be a boolean.`);\n    }\n    if (inPreset && value[name] === false) {\n      throw new Error(\n        `${msg(subLoc)} cannot be set to 'false' inside presets.`,\n      );\n    }\n  }\n\n  // @ts-expect-error todo(flow->ts)\n  return value;\n}\n", "/**\n * This file uses the internal V8 Stack Trace API (https://v8.dev/docs/stack-trace-api)\n * to provide utilities to rewrite the stack trace.\n * When this API is not present, all the functions in this file become noops.\n *\n * beginHiddenCallStack(fn) and endHiddenCallStack(fn) wrap their parameter to\n * mark an hidden portion of the stack trace. The function passed to\n * beginHiddenCallStack is the first hidden function, while the function passed\n * to endHiddenCallStack is the first shown function.\n *\n * When an error is thrown _outside_ of the hidden zone, everything between\n * beginHiddenCallStack and endHiddenCallStack will not be shown.\n * If an error is thrown _inside_ the hidden zone, then the whole stack trace\n * will be visible: this is to avoid hiding real bugs.\n * However, if an error inside the hidden zone is expected, it can be marked\n * with the expectedError(error) function to keep the hidden frames hidden.\n *\n * Consider this call stack (the outer function is the bottom one):\n *\n *   1. a()\n *   2. endHiddenCallStack(b)()\n *   3. c()\n *   4. beginHiddenCallStack(d)()\n *   5. e()\n *   6. f()\n *\n * - If a() throws an error, then its shown call stack will be \"a, b, e, f\"\n * - If b() throws an error, then its shown call stack will be \"b, e, f\"\n * - If c() throws an expected error, then its shown call stack will be \"e, f\"\n * - If c() throws an unexpected error, then its shown call stack will be \"c, d, e, f\"\n * - If d() throws an expected error, then its shown call stack will be \"e, f\"\n * - If d() throws an unexpected error, then its shown call stack will be \"d, e, f\"\n * - If e() throws an error, then its shown call stack will be \"e, f\"\n *\n * Additionally, an error can inject additional \"virtual\" stack frames using the\n * injectVirtualStackFrame(error, filename) function: those are injected as a\n * replacement of the hidden frames.\n * In the example above, if we called injectVirtualStackFrame(err, \"h\") and\n * injectVirtualStackFrame(err, \"i\") on the expected error thrown by c(), its\n * shown call stack would have been \"h, i, e, f\".\n * This can be useful, for example, to report config validation errors as if they\n * were directly thrown in the config file.\n */\n\nconst ErrorToString = Function.call.bind(Error.prototype.toString);\n\nconst SUPPORTED =\n  !!Error.captureStackTrace &&\n  Object.getOwnPropertyDescriptor(Error, \"stackTraceLimit\")?.writable === true;\n\nconst START_HIDING = \"startHiding - secret - don't use this - v1\";\nconst STOP_HIDING = \"stopHiding - secret - don't use this - v1\";\n\ntype CallSite = NodeJS.CallSite;\n\nconst expectedErrors = new WeakSet<Error>();\nconst virtualFrames = new WeakMap<Error, CallSite[]>();\n\nfunction CallSite(filename: string): CallSite {\n  // We need to use a prototype otherwise it breaks source-map-support's internals\n  return Object.create({\n    isNative: () => false,\n    isConstructor: () => false,\n    isToplevel: () => true,\n    getFileName: () => filename,\n    getLineNumber: () => undefined,\n    getColumnNumber: () => undefined,\n    getFunctionName: () => undefined,\n    getMethodName: () => undefined,\n    getTypeName: () => undefined,\n    toString: () => filename,\n  } as CallSite);\n}\n\nexport function injectVirtualStackFrame(error: Error, filename: string) {\n  if (!SUPPORTED) return;\n\n  let frames = virtualFrames.get(error);\n  if (!frames) virtualFrames.set(error, (frames = []));\n  frames.push(CallSite(filename));\n\n  return error;\n}\n\nexport function expectedError(error: Error) {\n  if (!SUPPORTED) return;\n  expectedErrors.add(error);\n  return error;\n}\n\nexport function beginHiddenCallStack<A extends unknown[], R>(\n  fn: (...args: A) => R,\n) {\n  if (!SUPPORTED) return fn;\n\n  return Object.defineProperty(\n    function (...args: A) {\n      setupPrepareStackTrace();\n      return fn(...args);\n    },\n    \"name\",\n    { value: STOP_HIDING },\n  );\n}\n\nexport function endHiddenCallStack<A extends unknown[], R>(\n  fn: (...args: A) => R,\n) {\n  if (!SUPPORTED) return fn;\n\n  return Object.defineProperty(\n    function (...args: A) {\n      return fn(...args);\n    },\n    \"name\",\n    { value: START_HIDING },\n  );\n}\n\nfunction setupPrepareStackTrace() {\n  // @ts-expect-error This function is a singleton\n  setupPrepareStackTrace = () => {};\n\n  const { prepareStackTrace = defaultPrepareStackTrace } = Error;\n\n  // We add some extra frames to Error.stackTraceLimit, so that we can\n  // always show some useful frames even after deleting ours.\n  // STACK_TRACE_LIMIT_DELTA should be around the maximum expected number\n  // of internal frames, and not too big because capturing the stack trace\n  // is slow (this is why Error.stackTraceLimit does not default to Infinity!).\n  // Increase it if needed.\n  // However, we only do it if the user did not explicitly set it to 0.\n  const MIN_STACK_TRACE_LIMIT = 50;\n  Error.stackTraceLimit &&= Math.max(\n    Error.stackTraceLimit,\n    MIN_STACK_TRACE_LIMIT,\n  );\n\n  Error.prepareStackTrace = function stackTraceRewriter(err, trace) {\n    let newTrace = [];\n\n    const isExpected = expectedErrors.has(err);\n    let status: \"showing\" | \"hiding\" | \"unknown\" = isExpected\n      ? \"hiding\"\n      : \"unknown\";\n    for (let i = 0; i < trace.length; i++) {\n      const name = trace[i].getFunctionName();\n      if (name === START_HIDING) {\n        status = \"hiding\";\n      } else if (name === STOP_HIDING) {\n        if (status === \"hiding\") {\n          status = \"showing\";\n          if (virtualFrames.has(err)) {\n            newTrace.unshift(...virtualFrames.get(err));\n          }\n        } else if (status === \"unknown\") {\n          // Unexpected internal error, show the full stack trace\n          newTrace = trace;\n          break;\n        }\n      } else if (status !== \"hiding\") {\n        newTrace.push(trace[i]);\n      }\n    }\n\n    return prepareStackTrace(err, newTrace);\n  };\n}\n\nfunction defaultPrepareStackTrace(err: Error, trace: CallSite[]) {\n  if (trace.length === 0) return ErrorToString(err);\n  return `${ErrorToString(err)}\\n    at ${trace.join(\"\\n    at \")}`;\n}\n", "import {\n  injectVirtualStackFrame,\n  expectedError,\n} from \"./rewrite-stack-trace.ts\";\n\nexport default class ConfigError extends Error {\n  constructor(message: string, filename?: string) {\n    super(message);\n    expectedError(this);\n    if (filename) injectVirtualStackFrame(this, filename);\n  }\n}\n", "import type { InputTargets, Targets } from \"@babel/helper-compilation-targets\";\n\nimport type { ConfigItem } from \"../item.ts\";\nimport type Plugin from \"../plugin.ts\";\n\nimport removed from \"./removed.ts\";\nimport {\n  msg,\n  access,\n  assertString,\n  assertBoolean,\n  assertObject,\n  assertArray,\n  assertCallerMetadata,\n  assertInputSourceMap,\n  assertIgnoreList,\n  assertPluginList,\n  assertConfigApplicableTest,\n  assertConfigFileSearch,\n  assertBabelrcSearch,\n  assertFunction,\n  assertRootMode,\n  assertSourceMaps,\n  assertCompact,\n  assertSourceType,\n  assertTargets,\n  assertAssumptions,\n} from \"./option-assertions.ts\";\nimport type {\n  ValidatorSet,\n  Validator,\n  OptionPath,\n} from \"./option-assertions.ts\";\nimport type { UnloadedDescriptor } from \"../config-descriptors.ts\";\nimport type { PluginAPI } from \"../helpers/config-api.ts\";\nimport type { ParserOptions } from \"@babel/parser\";\nimport type { GeneratorOptions } from \"@babel/generator\";\nimport ConfigError from \"../../errors/config-error.ts\";\n\nconst ROOT_VALIDATORS: ValidatorSet = {\n  cwd: assertString as Validator<ValidatedOptions[\"cwd\"]>,\n  root: assertString as Validator<ValidatedOptions[\"root\"]>,\n  rootMode: assertRootMode as Validator<ValidatedOptions[\"rootMode\"]>,\n  configFile: assertConfigFileSearch as Validator<\n    ValidatedOptions[\"configFile\"]\n  >,\n\n  caller: assertCallerMetadata as Validator<ValidatedOptions[\"caller\"]>,\n  filename: assertString as Validator<ValidatedOptions[\"filename\"]>,\n  filenameRelative: assertString as Validator<\n    ValidatedOptions[\"filenameRelative\"]\n  >,\n  code: assertBoolean as Validator<ValidatedOptions[\"code\"]>,\n  ast: assertBoolean as Validator<ValidatedOptions[\"ast\"]>,\n\n  cloneInputAst: assertBoolean as Validator<ValidatedOptions[\"cloneInputAst\"]>,\n\n  envName: assertString as Validator<ValidatedOptions[\"envName\"]>,\n};\n\nconst BABELRC_VALIDATORS: ValidatorSet = {\n  babelrc: assertBoolean as Validator<ValidatedOptions[\"babelrc\"]>,\n  babelrcRoots: assertBabelrcSearch as Validator<\n    ValidatedOptions[\"babelrcRoots\"]\n  >,\n};\n\nconst NONPRESET_VALIDATORS: ValidatorSet = {\n  extends: assertString as Validator<ValidatedOptions[\"extends\"]>,\n  ignore: assertIgnoreList as Validator<ValidatedOptions[\"ignore\"]>,\n  only: assertIgnoreList as Validator<ValidatedOptions[\"only\"]>,\n\n  targets: assertTargets as Validator<ValidatedOptions[\"targets\"]>,\n  browserslistConfigFile: assertConfigFileSearch as Validator<\n    ValidatedOptions[\"browserslistConfigFile\"]\n  >,\n  browserslistEnv: assertString as Validator<\n    ValidatedOptions[\"browserslistEnv\"]\n  >,\n};\n\nconst COMMON_VALIDATORS: ValidatorSet = {\n  // TODO: Should 'inputSourceMap' be moved to be a root-only option?\n  // We may want a boolean-only version to be a common option, with the\n  // object only allowed as a root config argument.\n  inputSourceMap: assertInputSourceMap as Validator<\n    ValidatedOptions[\"inputSourceMap\"]\n  >,\n  presets: assertPluginList as Validator<ValidatedOptions[\"presets\"]>,\n  plugins: assertPluginList as Validator<ValidatedOptions[\"plugins\"]>,\n  passPerPreset: assertBoolean as Validator<ValidatedOptions[\"passPerPreset\"]>,\n  assumptions: assertAssumptions as Validator<ValidatedOptions[\"assumptions\"]>,\n\n  env: assertEnvSet as Validator<ValidatedOptions[\"env\"]>,\n  overrides: assertOverridesList as Validator<ValidatedOptions[\"overrides\"]>,\n\n  // We could limit these to 'overrides' blocks, but it's not clear why we'd\n  // bother, when the ability to limit a config to a specific set of files\n  // is a fairly general useful feature.\n  test: assertConfigApplicableTest as Validator<ValidatedOptions[\"test\"]>,\n  include: assertConfigApplicableTest as Validator<ValidatedOptions[\"include\"]>,\n  exclude: assertConfigApplicableTest as Validator<ValidatedOptions[\"exclude\"]>,\n\n  retainLines: assertBoolean as Validator<ValidatedOptions[\"retainLines\"]>,\n  comments: assertBoolean as Validator<ValidatedOptions[\"comments\"]>,\n  shouldPrintComment: assertFunction as Validator<\n    ValidatedOptions[\"shouldPrintComment\"]\n  >,\n  compact: assertCompact as Validator<ValidatedOptions[\"compact\"]>,\n  minified: assertBoolean as Validator<ValidatedOptions[\"minified\"]>,\n  auxiliaryCommentBefore: assertString as Validator<\n    ValidatedOptions[\"auxiliaryCommentBefore\"]\n  >,\n  auxiliaryCommentAfter: assertString as Validator<\n    ValidatedOptions[\"auxiliaryCommentAfter\"]\n  >,\n  sourceType: assertSourceType as Validator<ValidatedOptions[\"sourceType\"]>,\n  wrapPluginVisitorMethod: assertFunction as Validator<\n    ValidatedOptions[\"wrapPluginVisitorMethod\"]\n  >,\n  highlightCode: assertBoolean as Validator<ValidatedOptions[\"highlightCode\"]>,\n  sourceMaps: assertSourceMaps as Validator<ValidatedOptions[\"sourceMaps\"]>,\n  sourceMap: assertSourceMaps as Validator<ValidatedOptions[\"sourceMap\"]>,\n  sourceFileName: assertString as Validator<ValidatedOptions[\"sourceFileName\"]>,\n  sourceRoot: assertString as Validator<ValidatedOptions[\"sourceRoot\"]>,\n  parserOpts: assertObject as Validator<ValidatedOptions[\"parserOpts\"]>,\n  generatorOpts: assertObject as Validator<ValidatedOptions[\"generatorOpts\"]>,\n};\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(COMMON_VALIDATORS, {\n    getModuleId: assertFunction,\n    moduleRoot: assertString,\n    moduleIds: assertBoolean,\n    moduleId: assertString,\n  });\n}\n\nexport type InputOptions = ValidatedOptions;\n\nexport type ValidatedOptions = {\n  cwd?: string;\n  filename?: string;\n  filenameRelative?: string;\n  babelrc?: boolean;\n  babelrcRoots?: BabelrcSearch;\n  configFile?: ConfigFileSearch;\n  root?: string;\n  rootMode?: RootMode;\n  code?: boolean;\n  ast?: boolean;\n  cloneInputAst?: boolean;\n  inputSourceMap?: RootInputSourceMapOption;\n  envName?: string;\n  caller?: CallerMetadata;\n  extends?: string;\n  env?: EnvSet<ValidatedOptions>;\n  ignore?: IgnoreList;\n  only?: IgnoreList;\n  overrides?: OverridesList;\n  // Generally verify if a given config object should be applied to the given file.\n  test?: ConfigApplicableTest;\n  include?: ConfigApplicableTest;\n  exclude?: ConfigApplicableTest;\n  presets?: PluginList;\n  plugins?: PluginList;\n  passPerPreset?: boolean;\n  assumptions?: {\n    [name: string]: boolean;\n  };\n  // browserslists-related options\n  targets?: TargetsListOrObject;\n  browserslistConfigFile?: ConfigFileSearch;\n  browserslistEnv?: string;\n  // Options for @babel/generator\n  retainLines?: boolean;\n  comments?: boolean;\n  shouldPrintComment?: Function;\n  compact?: CompactOption;\n  minified?: boolean;\n  auxiliaryCommentBefore?: string;\n  auxiliaryCommentAfter?: string;\n  // Parser\n  sourceType?: SourceTypeOption;\n  wrapPluginVisitorMethod?: Function;\n  highlightCode?: boolean;\n  // Sourcemap generation options.\n  sourceMaps?: SourceMapsOption;\n  sourceMap?: SourceMapsOption;\n  sourceFileName?: string;\n  sourceRoot?: string;\n  // Deprecate top level parserOpts\n  parserOpts?: ParserOptions;\n  // Deprecate top level generatorOpts\n  generatorOpts?: GeneratorOptions;\n};\n\nexport type NormalizedOptions = {\n  readonly targets: Targets;\n} & Omit<ValidatedOptions, \"targets\">;\n\nexport type CallerMetadata = {\n  // If 'caller' is specified, require that the name is given for debugging\n  // messages.\n  name: string;\n};\nexport type EnvSet<T> = {\n  [x: string]: T;\n};\nexport type IgnoreItem =\n  | string\n  | RegExp\n  | ((\n      path: string | undefined,\n      context: { dirname: string; caller: CallerMetadata; envName: string },\n    ) => unknown);\nexport type IgnoreList = ReadonlyArray<IgnoreItem>;\n\nexport type PluginOptions = object | void | false;\nexport type PluginTarget = string | object | Function;\nexport type PluginItem =\n  | ConfigItem<PluginAPI>\n  | Plugin\n  | PluginTarget\n  | [PluginTarget, PluginOptions]\n  | [PluginTarget, PluginOptions, string | void];\nexport type PluginList = ReadonlyArray<PluginItem>;\n\nexport type OverridesList = Array<ValidatedOptions>;\nexport type ConfigApplicableTest = IgnoreItem | Array<IgnoreItem>;\n\nexport type ConfigFileSearch = string | boolean;\nexport type BabelrcSearch = boolean | IgnoreItem | IgnoreList;\nexport type SourceMapsOption = boolean | \"inline\" | \"both\";\nexport type SourceTypeOption = \"module\" | \"script\" | \"unambiguous\";\nexport type CompactOption = boolean | \"auto\";\nexport type RootInputSourceMapOption = {} | boolean;\nexport type RootMode = \"root\" | \"upward\" | \"upward-optional\";\n\nexport type TargetsListOrObject =\n  | Targets\n  | InputTargets\n  | InputTargets[\"browsers\"];\n\nexport type OptionsSource =\n  | \"arguments\"\n  | \"configfile\"\n  | \"babelrcfile\"\n  | \"extendsfile\"\n  | \"preset\"\n  | \"plugin\";\n\nexport type RootPath = Readonly<{\n  type: \"root\";\n  source: OptionsSource;\n}>;\n\ntype OverridesPath = Readonly<{\n  type: \"overrides\";\n  index: number;\n  parent: RootPath;\n}>;\n\ntype EnvPath = Readonly<{\n  type: \"env\";\n  name: string;\n  parent: RootPath | OverridesPath;\n}>;\n\nexport type NestingPath = RootPath | OverridesPath | EnvPath;\n\nconst knownAssumptions = [\n  \"arrayLikeIsIterable\",\n  \"constantReexports\",\n  \"constantSuper\",\n  \"enumerableModuleMeta\",\n  \"ignoreFunctionLength\",\n  \"ignoreToPrimitiveHint\",\n  \"iterableIsArray\",\n  \"mutableTemplateObject\",\n  \"noClassCalls\",\n  \"noDocumentAll\",\n  \"noIncompleteNsImportDetection\",\n  \"noNewArrows\",\n  \"noUninitializedPrivateFieldAccess\",\n  \"objectRestNoSymbols\",\n  \"privateFieldsAsSymbols\",\n  \"privateFieldsAsProperties\",\n  \"pureGetters\",\n  \"setClassMethods\",\n  \"setComputedProperties\",\n  \"setPublicClassFields\",\n  \"setSpreadProperties\",\n  \"skipForOfIteratorClosing\",\n  \"superIsCallableConstructor\",\n] as const;\nexport type AssumptionName = (typeof knownAssumptions)[number];\nexport const assumptionsNames = new Set(knownAssumptions);\n\nfunction getSource(loc: NestingPath): OptionsSource {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nexport function validate(\n  type: OptionsSource,\n  opts: {},\n  filename?: string,\n): ValidatedOptions {\n  try {\n    return validateNested(\n      {\n        type: \"root\",\n        source: type,\n      },\n      opts,\n    );\n  } catch (error) {\n    const configError = new ConfigError(error.message, filename);\n    // @ts-expect-error TODO: .code is not defined on ConfigError or Error\n    if (error.code) configError.code = error.code;\n    throw configError;\n  }\n}\n\nfunction validateNested(loc: NestingPath, opts: { [key: string]: unknown }) {\n  const type = getSource(loc);\n\n  assertNoDuplicateSourcemap(opts);\n\n  Object.keys(opts).forEach((key: string) => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc,\n    } as const;\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${msg(optLoc)} is not allowed in preset options`);\n    }\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(\n        `${msg(optLoc)} is only allowed in root programmatic options`,\n      );\n    }\n    if (\n      type !== \"arguments\" &&\n      type !== \"configfile\" &&\n      BABELRC_VALIDATORS[key]\n    ) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(\n          `${msg(\n            optLoc,\n          )} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` +\n            `or babel.config.js/config file options`,\n        );\n      }\n\n      throw new Error(\n        `${msg(\n          optLoc,\n        )} is only allowed in root programmatic options, or babel.config.js/config file options`,\n      );\n    }\n\n    const validator =\n      COMMON_VALIDATORS[key] ||\n      NONPRESET_VALIDATORS[key] ||\n      BABELRC_VALIDATORS[key] ||\n      ROOT_VALIDATORS[key] ||\n      (throwUnknownError as Validator<void>);\n\n    validator(optLoc, opts[key]);\n  });\n\n  return opts;\n}\n\nfunction throwUnknownError(loc: OptionPath) {\n  const key = loc.name;\n\n  if (removed[key]) {\n    const { message, version = 5 } = removed[key];\n\n    throw new Error(\n      `Using removed Babel ${version} option: ${msg(loc)} - ${message}`,\n    );\n  } else {\n    const unknownOptErr = new Error(\n      `Unknown option: ${msg(\n        loc,\n      )}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`,\n    );\n    // @ts-expect-error todo(flow->ts): consider creating something like BabelConfigError with code field in it\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n\n    throw unknownOptErr;\n  }\n}\n\nfunction assertNoDuplicateSourcemap(opts: {}): void {\n  if (Object.hasOwn(opts, \"sourceMap\") && Object.hasOwn(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(\n  loc: OptionPath,\n  value: unknown,\n): void | EnvSet<ValidatedOptions> {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${msg(loc)} is not allowed inside of another .env block`);\n  }\n  const parent: RootPath | OverridesPath = loc.parent;\n\n  const obj = assertObject(loc, value);\n  if (obj) {\n    // Validate but don't copy the .env object in order to preserve\n    // object identity for use during config chain processing.\n    for (const envName of Object.keys(obj)) {\n      const env = assertObject(access(loc, envName), obj[envName]);\n      if (!env) continue;\n\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent,\n      } as const;\n      validateNested(envLoc, env);\n    }\n  }\n  return obj;\n}\n\nfunction assertOverridesList(\n  loc: OptionPath,\n  value: unknown[],\n): undefined | OverridesList {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${msg(loc)} is not allowed inside an .env block`);\n  }\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${msg(loc)} is not allowed inside an .overrides block`);\n  }\n  const parent: RootPath = loc.parent;\n\n  const arr = assertArray(loc, value);\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = access(loc, index);\n      const env = assertObject(objLoc, item);\n      if (!env) throw new Error(`${msg(objLoc)} must be an object`);\n\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent,\n      } as const;\n      validateNested(overridesLoc, env);\n    }\n  }\n  return arr as OverridesList;\n}\n\nexport function checkNoUnwrappedItemOptionPairs<API>(\n  items: Array<UnloadedDescriptor<API>>,\n  index: number,\n  type: \"plugin\" | \"preset\",\n  e: Error,\n): void {\n  if (index === 0) return;\n\n  const lastItem = items[index - 1];\n  const thisItem = items[index];\n\n  if (\n    lastItem.file &&\n    lastItem.options === undefined &&\n    typeof thisItem.value === \"object\"\n  ) {\n    e.message +=\n      `\\n- Maybe you meant to use\\n` +\n      `\"${type}s\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(\n        thisItem.value,\n        undefined,\n        2,\n      )}]\\n]\\n` +\n      `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}\n", "import path from \"path\";\n\nconst sep = `\\\\${path.sep}`;\nconst endSep = `(?:${sep}|$)`;\n\nconst substitution = `[^${sep}]+`;\n\nconst starPat = `(?:${substitution}${sep})`;\nconst starPatLast = `(?:${substitution}${endSep})`;\n\nconst starStarPat = `${starPat}*?`;\nconst starStarPatLast = `${starPat}*?${starPatLast}?`;\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n}\n\n/**\n * Implement basic pattern matching that will allow users to do the simple\n * tests with * and **. If users want full complex pattern matching, then can\n * always use regex matching, or function validation.\n */\nexport default function pathToPattern(\n  pattern: string,\n  dirname: string,\n): RegExp {\n  const parts = path.resolve(dirname, pattern).split(path.sep);\n\n  return new RegExp(\n    [\n      \"^\",\n      ...parts.map((part, i) => {\n        const last = i === parts.length - 1;\n\n        // ** matches 0 or more path parts.\n        if (part === \"**\") return last ? starStarPatLast : starStarPat;\n\n        // * matches 1 path part.\n        if (part === \"*\") return last ? starPatLast : starPat;\n\n        // *.ext matches a wildcard with an extension.\n        if (part.indexOf(\"*.\") === 0) {\n          return (\n            substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep)\n          );\n        }\n\n        // Otherwise match the pattern text.\n        return escapeRegExp(part) + (last ? endSep : sep);\n      }),\n    ].join(\"\"),\n  );\n}\n", "import gensync from \"gensync\";\n\nimport type { Handler } from \"gensync\";\n\nimport type {\n  OptionsAndDescriptors,\n  UnloadedDescriptor,\n} from \"./config-descriptors.ts\";\n\n// todo: Use flow enums when @babel/transform-flow-types supports it\nexport const ChainFormatter = {\n  Programmatic: 0,\n  Config: 1,\n};\n\ntype PrintableConfig = {\n  content: OptionsAndDescriptors;\n  type: (typeof ChainFormatter)[keyof typeof ChainFormatter];\n  callerName: string | undefined | null;\n  filepath: string | undefined | null;\n  index: number | undefined | null;\n  envName: string | undefined | null;\n};\n\nconst Formatter = {\n  title(\n    type: (typeof ChainFormatter)[keyof typeof ChainFormatter],\n    callerName?: string | null,\n    filepath?: string | null,\n  ): string {\n    let title = \"\";\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n    return title;\n  },\n  loc(index?: number | null, envName?: string | null): string {\n    let loc = \"\";\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n    return loc;\n  },\n\n  *optionsAndDescriptors(opt: OptionsAndDescriptors) {\n    const content = { ...opt.options };\n    // overrides and env will be printed as separated config items\n    delete content.overrides;\n    delete content.env;\n    // resolve to descriptors\n    const pluginDescriptors = [...(yield* opt.plugins())];\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n    const presetDescriptors = [...(yield* opt.presets())];\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n    return JSON.stringify(content, undefined, 2);\n  },\n};\n\nfunction descriptorToConfig<API>(\n  d: UnloadedDescriptor<API>,\n): object | string | [string, unknown] | [string, unknown, string] {\n  let name: object | string = d.file?.request;\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      // If the unloaded descriptor is a function, i.e. `plugins: [ require(\"my-plugin\") ]`,\n      // we print the first 50 characters of the function source code and hopefully we can see\n      // `name: 'my-plugin'` in the source\n      name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;\n    }\n  }\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nexport class ConfigPrinter {\n  _stack: Array<PrintableConfig> = [];\n  configure(\n    enabled: boolean,\n    type: (typeof ChainFormatter)[keyof typeof ChainFormatter],\n    {\n      callerName,\n      filepath,\n    }: {\n      callerName?: string;\n      filepath?: string;\n    },\n  ) {\n    if (!enabled) return () => {};\n    return (\n      content: OptionsAndDescriptors,\n      index?: number | null,\n      envName?: string | null,\n    ) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName,\n      });\n    };\n  }\n  static *format(config: PrintableConfig): Handler<string> {\n    let title = Formatter.title(\n      config.type,\n      config.callerName,\n      config.filepath,\n    );\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = yield* Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  *output(): Handler<string> {\n    if (this._stack.length === 0) return \"\";\n    const configs = yield* gensync.all(\n      this._stack.map(s => ConfigPrinter.format(s)),\n    );\n    return configs.join(\"\\n\\n\");\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { validate } from \"./validation/options.ts\";\nimport type {\n  ValidatedOptions,\n  IgnoreList,\n  ConfigApplicableTest,\n  BabelrcSearch,\n  CallerMetadata,\n  IgnoreItem,\n} from \"./validation/options.ts\";\nimport pathPatternToRegex from \"./pattern-to-regex.ts\";\nimport { ConfigPrinter, ChainFormatter } from \"./printer.ts\";\nimport type { ReadonlyDeepArray } from \"./helpers/deep-array.ts\";\n\nimport { endHiddenCallStack } from \"../errors/rewrite-stack-trace.ts\";\nimport ConfigError from \"../errors/config-error.ts\";\nimport type { PluginAPI, PresetAPI } from \"./helpers/config-api.ts\";\n\nconst debug = buildDebug(\"babel:config:config-chain\");\n\nimport {\n  findPackageData,\n  findRelativeConfig,\n  findRootConfig,\n  loadConfig,\n} from \"./files/index.ts\";\nimport type { ConfigFile, IgnoreFile, FilePackageData } from \"./files/index.ts\";\n\nimport { makeWeakCacheSync, makeStrongCacheSync } from \"./caching.ts\";\n\nimport {\n  createCachedDescriptors,\n  createUncachedDescriptors,\n} from \"./config-descriptors.ts\";\nimport type {\n  UnloadedDescriptor,\n  OptionsAndDescriptors,\n  ValidatedFile,\n} from \"./config-descriptors.ts\";\n\nexport type ConfigChain = {\n  plugins: Array<UnloadedDescriptor<PluginAPI>>;\n  presets: Array<UnloadedDescriptor<PresetAPI>>;\n  options: Array<ValidatedOptions>;\n  files: Set<string>;\n};\n\nexport type PresetInstance = {\n  options: ValidatedOptions;\n  alias: string;\n  dirname: string;\n  externalDependencies: ReadonlyDeepArray<string>;\n};\n\nexport type ConfigContext = {\n  filename: string | undefined;\n  cwd: string;\n  root: string;\n  envName: string;\n  caller: CallerMetadata | undefined;\n  showConfig: boolean;\n};\n\n/**\n * Build a config chain for a given preset.\n */\nexport function* buildPresetChain(\n  arg: PresetInstance,\n  context: any,\n): Handler<ConfigChain | null> {\n  const chain = yield* buildPresetChainWalker(arg, context);\n  if (!chain) return null;\n\n  return {\n    plugins: dedupDescriptors(chain.plugins),\n    presets: dedupDescriptors(chain.presets),\n    options: chain.options.map(o => normalizeOptions(o)),\n    files: new Set(),\n  };\n}\n\nexport const buildPresetChainWalker = makeChainWalker<PresetInstance>({\n  root: preset => loadPresetDescriptors(preset),\n  env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),\n  overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),\n  overridesEnv: (preset, index, envName) =>\n    loadPresetOverridesEnvDescriptors(preset)(index)(envName),\n  createLogger: () => () => {}, // Currently we don't support logging how preset is expanded\n});\nconst loadPresetDescriptors = makeWeakCacheSync((preset: PresetInstance) =>\n  buildRootDescriptors(preset, preset.alias, createUncachedDescriptors),\n);\nconst loadPresetEnvDescriptors = makeWeakCacheSync((preset: PresetInstance) =>\n  makeStrongCacheSync((envName: string) =>\n    buildEnvDescriptors(\n      preset,\n      preset.alias,\n      createUncachedDescriptors,\n      envName,\n    ),\n  ),\n);\nconst loadPresetOverridesDescriptors = makeWeakCacheSync(\n  (preset: PresetInstance) =>\n    makeStrongCacheSync((index: number) =>\n      buildOverrideDescriptors(\n        preset,\n        preset.alias,\n        createUncachedDescriptors,\n        index,\n      ),\n    ),\n);\nconst loadPresetOverridesEnvDescriptors = makeWeakCacheSync(\n  (preset: PresetInstance) =>\n    makeStrongCacheSync((index: number) =>\n      makeStrongCacheSync((envName: string) =>\n        buildOverrideEnvDescriptors(\n          preset,\n          preset.alias,\n          createUncachedDescriptors,\n          index,\n          envName,\n        ),\n      ),\n    ),\n);\n\nexport type FileHandling = \"transpile\" | \"ignored\" | \"unsupported\";\nexport type RootConfigChain = ConfigChain & {\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  ignore: IgnoreFile | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n};\n\n/**\n * Build a config chain for Babel's full root configuration.\n */\nexport function* buildRootChain(\n  opts: ValidatedOptions,\n  context: ConfigContext,\n): Handler<RootConfigChain | null> {\n  let configReport, babelRcReport;\n  const programmaticLogger = new ConfigPrinter();\n  const programmaticChain = yield* loadProgrammaticChain(\n    {\n      options: opts,\n      dirname: context.cwd,\n    },\n    context,\n    undefined,\n    programmaticLogger,\n  );\n  if (!programmaticChain) return null;\n  const programmaticReport = yield* programmaticLogger.output();\n\n  let configFile;\n  if (typeof opts.configFile === \"string\") {\n    configFile = yield* loadConfig(\n      opts.configFile,\n      context.cwd,\n      context.envName,\n      context.caller,\n    );\n  } else if (opts.configFile !== false) {\n    configFile = yield* findRootConfig(\n      context.root,\n      context.envName,\n      context.caller,\n    );\n  }\n\n  let { babelrc, babelrcRoots } = opts;\n  let babelrcRootsDirectory = context.cwd;\n\n  const configFileChain = emptyChain();\n  const configFileLogger = new ConfigPrinter();\n  if (configFile) {\n    const validatedFile = validateConfigFile(configFile);\n    const result = yield* loadFileChain(\n      validatedFile,\n      context,\n      undefined,\n      configFileLogger,\n    );\n    if (!result) return null;\n    configReport = yield* configFileLogger.output();\n\n    // Allow config files to toggle `.babelrc` resolution on and off and\n    // specify where the roots are.\n    if (babelrc === undefined) {\n      babelrc = validatedFile.options.babelrc;\n    }\n    if (babelrcRoots === undefined) {\n      babelrcRootsDirectory = validatedFile.dirname;\n      babelrcRoots = validatedFile.options.babelrcRoots;\n    }\n\n    mergeChain(configFileChain, result);\n  }\n\n  let ignoreFile, babelrcFile;\n  let isIgnored = false;\n  const fileChain = emptyChain();\n  // resolve all .babelrc files\n  if (\n    (babelrc === true || babelrc === undefined) &&\n    typeof context.filename === \"string\"\n  ) {\n    const pkgData = yield* findPackageData(context.filename);\n\n    if (\n      pkgData &&\n      babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)\n    ) {\n      ({ ignore: ignoreFile, config: babelrcFile } = yield* findRelativeConfig(\n        pkgData,\n        context.envName,\n        context.caller,\n      ));\n\n      if (ignoreFile) {\n        fileChain.files.add(ignoreFile.filepath);\n      }\n\n      if (\n        ignoreFile &&\n        shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)\n      ) {\n        isIgnored = true;\n      }\n\n      if (babelrcFile && !isIgnored) {\n        const validatedFile = validateBabelrcFile(babelrcFile);\n        const babelrcLogger = new ConfigPrinter();\n        const result = yield* loadFileChain(\n          validatedFile,\n          context,\n          undefined,\n          babelrcLogger,\n        );\n        if (!result) {\n          isIgnored = true;\n        } else {\n          babelRcReport = yield* babelrcLogger.output();\n          mergeChain(fileChain, result);\n        }\n      }\n\n      if (babelrcFile && isIgnored) {\n        fileChain.files.add(babelrcFile.filepath);\n      }\n    }\n  }\n\n  if (context.showConfig) {\n    console.log(\n      `Babel configs on \"${context.filename}\" (ascending priority):\\n` +\n        // print config by the order of ascending priority\n        [configReport, babelRcReport, programmaticReport]\n          .filter(x => !!x)\n          .join(\"\\n\\n\") +\n        \"\\n-----End Babel configs-----\",\n    );\n  }\n  // Insert file chain in front so programmatic options have priority\n  // over configuration file chain items.\n  const chain = mergeChain(\n    mergeChain(mergeChain(emptyChain(), configFileChain), fileChain),\n    programmaticChain,\n  );\n\n  return {\n    plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),\n    presets: isIgnored ? [] : dedupDescriptors(chain.presets),\n    options: isIgnored ? [] : chain.options.map(o => normalizeOptions(o)),\n    fileHandling: isIgnored ? \"ignored\" : \"transpile\",\n    ignore: ignoreFile || undefined,\n    babelrc: babelrcFile || undefined,\n    config: configFile || undefined,\n    files: chain.files,\n  };\n}\n\nfunction babelrcLoadEnabled(\n  context: ConfigContext,\n  pkgData: FilePackageData,\n  babelrcRoots: BabelrcSearch | undefined,\n  babelrcRootsDirectory: string,\n): boolean {\n  if (typeof babelrcRoots === \"boolean\") return babelrcRoots;\n\n  const absoluteRoot = context.root;\n\n  // Fast path to avoid having to match patterns if the babelrc is just\n  // loading in the standard root directory.\n  if (babelrcRoots === undefined) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  let babelrcPatterns = babelrcRoots;\n  if (!Array.isArray(babelrcPatterns)) {\n    babelrcPatterns = [babelrcPatterns as IgnoreItem];\n  }\n  babelrcPatterns = babelrcPatterns.map(pat => {\n    return typeof pat === \"string\"\n      ? path.resolve(babelrcRootsDirectory, pat)\n      : pat;\n  });\n\n  // Fast path to avoid having to match patterns if the babelrc is just\n  // loading in the standard root directory.\n  if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  return babelrcPatterns.some(pat => {\n    if (typeof pat === \"string\") {\n      pat = pathPatternToRegex(pat, babelrcRootsDirectory);\n    }\n\n    return pkgData.directories.some(directory => {\n      return matchPattern(pat, babelrcRootsDirectory, directory, context);\n    });\n  });\n}\n\nconst validateConfigFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"configfile\", file.options, file.filepath),\n  }),\n);\n\nconst validateBabelrcFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"babelrcfile\", file.options, file.filepath),\n  }),\n);\n\nconst validateExtendFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"extendsfile\", file.options, file.filepath),\n  }),\n);\n\n/**\n * Build a config chain for just the programmatic options passed into Babel.\n */\nconst loadProgrammaticChain = makeChainWalker({\n  root: input => buildRootDescriptors(input, \"base\", createCachedDescriptors),\n  env: (input, envName) =>\n    buildEnvDescriptors(input, \"base\", createCachedDescriptors, envName),\n  overrides: (input, index) =>\n    buildOverrideDescriptors(input, \"base\", createCachedDescriptors, index),\n  overridesEnv: (input, index, envName) =>\n    buildOverrideEnvDescriptors(\n      input,\n      \"base\",\n      createCachedDescriptors,\n      index,\n      envName,\n    ),\n  createLogger: (input, context, baseLogger) =>\n    buildProgrammaticLogger(input, context, baseLogger),\n});\n\n/**\n * Build a config chain for a given file.\n */\nconst loadFileChainWalker = makeChainWalker<ValidatedFile>({\n  root: file => loadFileDescriptors(file),\n  env: (file, envName) => loadFileEnvDescriptors(file)(envName),\n  overrides: (file, index) => loadFileOverridesDescriptors(file)(index),\n  overridesEnv: (file, index, envName) =>\n    loadFileOverridesEnvDescriptors(file)(index)(envName),\n  createLogger: (file, context, baseLogger) =>\n    buildFileLogger(file.filepath, context, baseLogger),\n});\n\nfunction* loadFileChain(\n  input: ValidatedFile,\n  context: ConfigContext,\n  files: Set<ConfigFile>,\n  baseLogger: ConfigPrinter,\n) {\n  const chain = yield* loadFileChainWalker(input, context, files, baseLogger);\n  chain?.files.add(input.filepath);\n\n  return chain;\n}\n\nconst loadFileDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  buildRootDescriptors(file, file.filepath, createUncachedDescriptors),\n);\nconst loadFileEnvDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  makeStrongCacheSync((envName: string) =>\n    buildEnvDescriptors(\n      file,\n      file.filepath,\n      createUncachedDescriptors,\n      envName,\n    ),\n  ),\n);\nconst loadFileOverridesDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  makeStrongCacheSync((index: number) =>\n    buildOverrideDescriptors(\n      file,\n      file.filepath,\n      createUncachedDescriptors,\n      index,\n    ),\n  ),\n);\nconst loadFileOverridesEnvDescriptors = makeWeakCacheSync(\n  (file: ValidatedFile) =>\n    makeStrongCacheSync((index: number) =>\n      makeStrongCacheSync((envName: string) =>\n        buildOverrideEnvDescriptors(\n          file,\n          file.filepath,\n          createUncachedDescriptors,\n          index,\n          envName,\n        ),\n      ),\n    ),\n);\n\nfunction buildFileLogger(\n  filepath: string,\n  context: ConfigContext,\n  baseLogger: ConfigPrinter | void,\n) {\n  if (!baseLogger) {\n    return () => {};\n  }\n  return baseLogger.configure(context.showConfig, ChainFormatter.Config, {\n    filepath,\n  });\n}\n\nfunction buildRootDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n) {\n  return descriptors(dirname, options, alias);\n}\n\nfunction buildProgrammaticLogger(\n  _: unknown,\n  context: ConfigContext,\n  baseLogger: ConfigPrinter | void,\n) {\n  if (!baseLogger) {\n    return () => {};\n  }\n  return baseLogger.configure(context.showConfig, ChainFormatter.Programmatic, {\n    callerName: context.caller?.name,\n  });\n}\n\nfunction buildEnvDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  envName: string,\n) {\n  const opts = options.env?.[envName];\n  return opts ? descriptors(dirname, opts, `${alias}.env[\"${envName}\"]`) : null;\n}\n\nfunction buildOverrideDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  index: number,\n) {\n  const opts = options.overrides?.[index];\n  if (!opts) throw new Error(\"Assertion failure - missing override\");\n\n  return descriptors(dirname, opts, `${alias}.overrides[${index}]`);\n}\n\nfunction buildOverrideEnvDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  index: number,\n  envName: string,\n) {\n  const override = options.overrides?.[index];\n  if (!override) throw new Error(\"Assertion failure - missing override\");\n\n  const opts = override.env?.[envName];\n  return opts\n    ? descriptors(\n        dirname,\n        opts,\n        `${alias}.overrides[${index}].env[\"${envName}\"]`,\n      )\n    : null;\n}\n\nfunction makeChainWalker<\n  ArgT extends {\n    options: ValidatedOptions;\n    dirname: string;\n    filepath?: string;\n  },\n>({\n  root,\n  env,\n  overrides,\n  overridesEnv,\n  createLogger,\n}: {\n  root: (configEntry: ArgT) => OptionsAndDescriptors;\n  env: (configEntry: ArgT, env: string) => OptionsAndDescriptors | null;\n  overrides: (configEntry: ArgT, index: number) => OptionsAndDescriptors;\n  overridesEnv: (\n    configEntry: ArgT,\n    index: number,\n    env: string,\n  ) => OptionsAndDescriptors | null;\n  createLogger: (\n    configEntry: ArgT,\n    context: ConfigContext,\n    printer: ConfigPrinter | void,\n  ) => (\n    opts: OptionsAndDescriptors,\n    index?: number | null,\n    env?: string | null,\n  ) => void;\n}): (\n  configEntry: ArgT,\n  context: ConfigContext,\n  files?: Set<ConfigFile>,\n  baseLogger?: ConfigPrinter,\n) => Handler<ConfigChain | null> {\n  return function* chainWalker(input, context, files = new Set(), baseLogger) {\n    const { dirname } = input;\n\n    const flattenedConfigs: Array<{\n      config: OptionsAndDescriptors;\n      index: number | undefined | null;\n      envName: string | undefined | null;\n    }> = [];\n\n    const rootOpts = root(input);\n    if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {\n      flattenedConfigs.push({\n        config: rootOpts,\n        envName: undefined,\n        index: undefined,\n      });\n\n      const envOpts = env(input, context.envName);\n      if (\n        envOpts &&\n        configIsApplicable(envOpts, dirname, context, input.filepath)\n      ) {\n        flattenedConfigs.push({\n          config: envOpts,\n          envName: context.envName,\n          index: undefined,\n        });\n      }\n\n      (rootOpts.options.overrides || []).forEach((_, index) => {\n        const overrideOps = overrides(input, index);\n        if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {\n          flattenedConfigs.push({\n            config: overrideOps,\n            index,\n            envName: undefined,\n          });\n\n          const overrideEnvOpts = overridesEnv(input, index, context.envName);\n          if (\n            overrideEnvOpts &&\n            configIsApplicable(\n              overrideEnvOpts,\n              dirname,\n              context,\n              input.filepath,\n            )\n          ) {\n            flattenedConfigs.push({\n              config: overrideEnvOpts,\n              index,\n              envName: context.envName,\n            });\n          }\n        }\n      });\n    }\n\n    // Process 'ignore' and 'only' before 'extends' items are processed so\n    // that we don't do extra work loading extended configs if a file is\n    // ignored.\n    if (\n      flattenedConfigs.some(\n        ({\n          config: {\n            options: { ignore, only },\n          },\n        }) => shouldIgnore(context, ignore, only, dirname),\n      )\n    ) {\n      return null;\n    }\n\n    const chain = emptyChain();\n    const logger = createLogger(input, context, baseLogger);\n\n    for (const { config, index, envName } of flattenedConfigs) {\n      if (\n        !(yield* mergeExtendsChain(\n          chain,\n          config.options,\n          dirname,\n          context,\n          files,\n          baseLogger,\n        ))\n      ) {\n        return null;\n      }\n\n      logger(config, index, envName);\n      yield* mergeChainOpts(chain, config);\n    }\n    return chain;\n  };\n}\n\nfunction* mergeExtendsChain(\n  chain: ConfigChain,\n  opts: ValidatedOptions,\n  dirname: string,\n  context: ConfigContext,\n  files: Set<ConfigFile>,\n  baseLogger?: ConfigPrinter,\n): Handler<boolean> {\n  if (opts.extends === undefined) return true;\n\n  const file = yield* loadConfig(\n    opts.extends,\n    dirname,\n    context.envName,\n    context.caller,\n  );\n\n  if (files.has(file)) {\n    throw new Error(\n      `Configuration cycle detected loading ${file.filepath}.\\n` +\n        `File already loaded following the config chain:\\n` +\n        Array.from(files, file => ` - ${file.filepath}`).join(\"\\n\"),\n    );\n  }\n\n  files.add(file);\n  const fileChain = yield* loadFileChain(\n    validateExtendFile(file),\n    context,\n    files,\n    baseLogger,\n  );\n  files.delete(file);\n\n  if (!fileChain) return false;\n\n  mergeChain(chain, fileChain);\n\n  return true;\n}\n\nfunction mergeChain(target: ConfigChain, source: ConfigChain): ConfigChain {\n  target.options.push(...source.options);\n  target.plugins.push(...source.plugins);\n  target.presets.push(...source.presets);\n  for (const file of source.files) {\n    target.files.add(file);\n  }\n\n  return target;\n}\n\nfunction* mergeChainOpts(\n  target: ConfigChain,\n  { options, plugins, presets }: OptionsAndDescriptors,\n): Handler<ConfigChain> {\n  target.options.push(options);\n  target.plugins.push(...(yield* plugins()));\n  target.presets.push(...(yield* presets()));\n\n  return target;\n}\n\nfunction emptyChain(): ConfigChain {\n  return {\n    options: [],\n    presets: [],\n    plugins: [],\n    files: new Set(),\n  };\n}\n\nfunction normalizeOptions(opts: ValidatedOptions): ValidatedOptions {\n  const options = {\n    ...opts,\n  };\n  delete options.extends;\n  delete options.env;\n  delete options.overrides;\n  delete options.plugins;\n  delete options.presets;\n  delete options.passPerPreset;\n  delete options.ignore;\n  delete options.only;\n  delete options.test;\n  delete options.include;\n  delete options.exclude;\n\n  // \"sourceMap\" is just aliased to sourceMap, so copy it over as\n  // we merge the options together.\n  if (Object.hasOwn(options, \"sourceMap\")) {\n    options.sourceMaps = options.sourceMap;\n    delete options.sourceMap;\n  }\n  return options;\n}\n\nfunction dedupDescriptors<API>(\n  items: Array<UnloadedDescriptor<API>>,\n): Array<UnloadedDescriptor<API>> {\n  const map: Map<\n    Function,\n    Map<string | void, { value: UnloadedDescriptor<API> }>\n  > = new Map();\n\n  const descriptors = [];\n\n  for (const item of items) {\n    if (typeof item.value === \"function\") {\n      const fnKey = item.value;\n      let nameMap = map.get(fnKey);\n      if (!nameMap) {\n        nameMap = new Map();\n        map.set(fnKey, nameMap);\n      }\n      let desc = nameMap.get(item.name);\n      if (!desc) {\n        desc = { value: item };\n        descriptors.push(desc);\n\n        // Treat passPerPreset presets as unique, skipping them\n        // in the merge processing steps.\n        if (!item.ownPass) nameMap.set(item.name, desc);\n      } else {\n        desc.value = item;\n      }\n    } else {\n      descriptors.push({ value: item });\n    }\n  }\n\n  return descriptors.reduce((acc, desc) => {\n    acc.push(desc.value);\n    return acc;\n  }, []);\n}\n\nfunction configIsApplicable(\n  { options }: OptionsAndDescriptors,\n  dirname: string,\n  context: ConfigContext,\n  configName: string,\n): boolean {\n  return (\n    (options.test === undefined ||\n      configFieldIsApplicable(context, options.test, dirname, configName)) &&\n    (options.include === undefined ||\n      configFieldIsApplicable(context, options.include, dirname, configName)) &&\n    (options.exclude === undefined ||\n      !configFieldIsApplicable(context, options.exclude, dirname, configName))\n  );\n}\n\nfunction configFieldIsApplicable(\n  context: ConfigContext,\n  test: ConfigApplicableTest,\n  dirname: string,\n  configName: string,\n): boolean {\n  const patterns = Array.isArray(test) ? test : [test];\n\n  return matchesPatterns(context, patterns, dirname, configName);\n}\n\n/**\n * Print the ignoreList-values in a more helpful way than the default.\n */\nfunction ignoreListReplacer(\n  _key: string,\n  value: IgnoreList | IgnoreItem,\n): IgnoreList | IgnoreItem | string {\n  if (value instanceof RegExp) {\n    return String(value);\n  }\n\n  return value;\n}\n\n/**\n * Tests if a filename should be ignored based on \"ignore\" and \"only\" options.\n */\nfunction shouldIgnore(\n  context: ConfigContext,\n  ignore: IgnoreList | undefined | null,\n  only: IgnoreList | undefined | null,\n  dirname: string,\n): boolean {\n  if (ignore && matchesPatterns(context, ignore, dirname)) {\n    const message = `No config is applied to \"${\n      context.filename ?? \"(unknown)\"\n    }\" because it matches one of \\`ignore: ${JSON.stringify(\n      ignore,\n      ignoreListReplacer,\n    )}\\` from \"${dirname}\"`;\n    debug(message);\n    if (context.showConfig) {\n      console.log(message);\n    }\n    return true;\n  }\n\n  if (only && !matchesPatterns(context, only, dirname)) {\n    const message = `No config is applied to \"${\n      context.filename ?? \"(unknown)\"\n    }\" because it fails to match one of \\`only: ${JSON.stringify(\n      only,\n      ignoreListReplacer,\n    )}\\` from \"${dirname}\"`;\n    debug(message);\n    if (context.showConfig) {\n      console.log(message);\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns result of calling function with filename if pattern is a function.\n * Otherwise returns result of matching pattern Regex with filename.\n */\nfunction matchesPatterns(\n  context: ConfigContext,\n  patterns: IgnoreList,\n  dirname: string,\n  configName?: string,\n): boolean {\n  return patterns.some(pattern =>\n    matchPattern(pattern, dirname, context.filename, context, configName),\n  );\n}\n\nfunction matchPattern(\n  pattern: IgnoreItem,\n  dirname: string,\n  pathToTest: string | undefined,\n  context: ConfigContext,\n  configName?: string,\n): boolean {\n  if (typeof pattern === \"function\") {\n    return !!endHiddenCallStack(pattern)(pathToTest, {\n      dirname,\n      envName: context.envName,\n      caller: context.caller,\n    });\n  }\n\n  if (typeof pathToTest !== \"string\") {\n    throw new ConfigError(\n      `Configuration contains string/RegExp pattern, but no filename was passed to Babel`,\n      configName,\n    );\n  }\n\n  if (typeof pattern === \"string\") {\n    pattern = pathPatternToRegex(pattern, dirname);\n  }\n  return pattern.test(pathToTest);\n}\n", "import {\n  assertString,\n  assertFunction,\n  assertObject,\n  msg,\n} from \"./option-assertions.ts\";\n\nimport type {\n  ValidatorSet,\n  Validator,\n  OptionPath,\n  RootPath,\n} from \"./option-assertions.ts\";\nimport type { ParserOptions } from \"@babel/parser\";\nimport type { Visitor } from \"@babel/traverse\";\nimport type { ValidatedOptions } from \"./options.ts\";\nimport type { File, PluginAPI, PluginPass } from \"../../index.ts\";\n\n// Note: The casts here are just meant to be static assertions to make sure\n// that the assertion functions actually assert that the value's type matches\n// the declared types.\nconst VALIDATORS: ValidatorSet = {\n  name: assertString as Validator<PluginObject[\"name\"]>,\n  manipulateOptions: assertFunction as Validator<\n    PluginObject[\"manipulateOptions\"]\n  >,\n  pre: assertFunction as Validator<PluginObject[\"pre\"]>,\n  post: assertFunction as Validator<PluginObject[\"post\"]>,\n  inherits: assertFunction as Validator<PluginObject[\"inherits\"]>,\n  visitor: assertVisitorMap as Validator<PluginObject[\"visitor\"]>,\n\n  parserOverride: assertFunction as Validator<PluginObject[\"parserOverride\"]>,\n  generatorOverride: assertFunction as Validator<\n    PluginObject[\"generatorOverride\"]\n  >,\n};\n\nfunction assertVisitorMap(loc: OptionPath, value: unknown): Visitor {\n  const obj = assertObject(loc, value);\n  if (obj) {\n    Object.keys(obj).forEach(prop => {\n      if (prop !== \"_exploded\" && prop !== \"_verified\") {\n        assertVisitorHandler(prop, obj[prop]);\n      }\n    });\n\n    if (obj.enter || obj.exit) {\n      throw new Error(\n        `${msg(\n          loc,\n        )} cannot contain catch-all \"enter\" or \"exit\" handlers. Please target individual nodes.`,\n      );\n    }\n  }\n  return obj as Visitor;\n}\n\nfunction assertVisitorHandler(\n  key: string,\n  value: unknown,\n): asserts value is VisitorHandler {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach((handler: string) => {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(\n          `.visitor[\"${key}\"] may only have .enter and/or .exit handlers.`,\n        );\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(`.visitor[\"${key}\"] must be a function`);\n  }\n}\n\ntype VisitorHandler =\n  | Function\n  | {\n      enter?: Function;\n      exit?: Function;\n    };\n\nexport type PluginObject<S extends PluginPass = PluginPass> = {\n  name?: string;\n  manipulateOptions?: (\n    options: ValidatedOptions,\n    parserOpts: ParserOptions,\n  ) => void;\n  pre?: (this: S, file: File) => void;\n  post?: (this: S, file: File) => void;\n  inherits?: (\n    api: PluginAPI,\n    options: unknown,\n    dirname: string,\n  ) => PluginObject;\n  visitor?: Visitor<S>;\n  parserOverride?: Function;\n  generatorOverride?: Function;\n};\n\nexport function validatePluginObject(obj: {\n  [key: string]: unknown;\n}): PluginObject {\n  const rootPath: RootPath = {\n    type: \"root\",\n    source: \"plugin\",\n  };\n  Object.keys(obj).forEach((key: string) => {\n    const validator = VALIDATORS[key];\n\n    if (validator) {\n      const optLoc: OptionPath = {\n        type: \"option\",\n        name: key,\n        parent: rootPath,\n      };\n      validator(optLoc, obj[key]);\n    } else {\n      const invalidPluginPropertyError = new Error(\n        `.${key} is not a valid Plugin property`,\n      );\n      // @ts-expect-error todo(flow->ts) consider adding BabelConfigError with code field\n      invalidPluginPropertyError.code = \"BABEL_UNKNOWN_PLUGIN_PROPERTY\";\n      throw invalidPluginPropertyError;\n    }\n  });\n\n  return obj as any;\n}\n", "import semver from \"semver\";\nimport type { Targets } from \"@babel/helper-compilation-targets\";\n\nimport { version as coreVersion } from \"../../index.ts\";\nimport { assertSimpleType } from \"../caching.ts\";\nimport type {\n  CacheConfigurator,\n  SimpleCacheConfigurator,\n  SimpleType,\n} from \"../caching.ts\";\n\nimport type { AssumptionName, CallerMetadata } from \"../validation/options.ts\";\n\nimport type * as Context from \"../cache-contexts\";\n\ntype EnvFunction = {\n  (): string;\n  <T>(extractor: (babelEnv: string) => T): T;\n  (envVar: string): boolean;\n  (envVars: Array<string>): boolean;\n};\n\ntype CallerFactory = {\n  <T extends SimpleType>(\n    extractor: (callerMetadata: CallerMetadata | undefined) => T,\n  ): T;\n  (\n    extractor: (callerMetadata: CallerMetadata | undefined) => unknown,\n  ): SimpleType;\n};\ntype TargetsFunction = () => Targets;\ntype AssumptionFunction = (name: AssumptionName) => boolean | undefined;\n\nexport type ConfigAPI = {\n  version: string;\n  cache: SimpleCacheConfigurator;\n  env: EnvFunction;\n  async: () => boolean;\n  assertVersion: typeof assertVersion;\n  caller?: CallerFactory;\n};\n\nexport type PresetAPI = {\n  targets: TargetsFunction;\n  addExternalDependency: (ref: string) => void;\n} & ConfigAPI;\n\nexport type PluginAPI = {\n  assumption: AssumptionFunction;\n} & PresetAPI;\n\nexport function makeConfigAPI<SideChannel extends Context.SimpleConfig>(\n  cache: CacheConfigurator<SideChannel>,\n): ConfigAPI {\n  // TODO(@nicolo-ribaudo): If we remove the explicit type from `value`\n  // and the `as any` type cast, TypeScript crashes in an infinite\n  // recursion. After upgrading to TS4.7 and finishing the noImplicitAny\n  // PR, we should check if it still crashes and report it to the TS team.\n  const env: EnvFunction = ((\n    value: string | string[] | (<T>(babelEnv: string) => T),\n  ) =>\n    cache.using(data => {\n      if (typeof value === \"undefined\") return data.envName;\n      if (typeof value === \"function\") {\n        return assertSimpleType(value(data.envName));\n      }\n      return (Array.isArray(value) ? value : [value]).some(entry => {\n        if (typeof entry !== \"string\") {\n          throw new Error(\"Unexpected non-string value\");\n        }\n        return entry === data.envName;\n      });\n    })) as any;\n\n  const caller = (cb: {\n    (CallerMetadata: CallerMetadata | undefined): SimpleType;\n  }) => cache.using(data => assertSimpleType(cb(data.caller)));\n\n  return {\n    version: coreVersion,\n    cache: cache.simple(),\n    // Expose \".env()\" so people can easily get the same env that we expose using the \"env\" key.\n    env,\n    async: () => false,\n    caller,\n    assertVersion,\n  };\n}\n\nexport function makePresetAPI<SideChannel extends Context.SimplePreset>(\n  cache: CacheConfigurator<SideChannel>,\n  externalDependencies: Array<string>,\n): PresetAPI {\n  const targets = () =>\n    // We are using JSON.parse/JSON.stringify because it's only possible to cache\n    // primitive values. We can safely stringify the targets object because it\n    // only contains strings as its properties.\n    // Please make the Record and Tuple proposal happen!\n    JSON.parse(cache.using(data => JSON.stringify(data.targets)));\n\n  const addExternalDependency = (ref: string) => {\n    externalDependencies.push(ref);\n  };\n\n  return { ...makeConfigAPI(cache), targets, addExternalDependency };\n}\n\nexport function makePluginAPI<SideChannel extends Context.SimplePlugin>(\n  cache: CacheConfigurator<SideChannel>,\n  externalDependencies: Array<string>,\n): PluginAPI {\n  const assumption = (name: string) =>\n    cache.using(data => data.assumptions[name]);\n\n  return { ...makePresetAPI(cache, externalDependencies), assumption };\n}\n\nfunction assertVersion(range: string | number): void {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = `^${range}.0.0-0`;\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  // We want \"*\" to also allow any pre-release, but we do not pass\n  // the includePrerelease option to semver.satisfies because we\n  // do not want ^7.0.0 to match 8.0.0-alpha.1.\n  if (range === \"*\" || semver.satisfies(coreVersion, range)) return;\n\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    // Bump up the limit if needed so that users are more likely\n    // to be able to see what is calling Babel.\n    Error.stackTraceLimit = 25;\n  }\n\n  const err = new Error(\n    `Requires Babel \"${range}\", but was loaded with \"${coreVersion}\". ` +\n      `If you are sure you have a compatible version of @babel/core, ` +\n      `it is likely that something in your build process is loading the ` +\n      `wrong version. Inspect the stack trace of this error to look for ` +\n      `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` +\n      `to see what is calling Babel.`,\n  );\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: coreVersion,\n    range,\n  });\n}\n", "import path from \"path\";\nimport type { Handler } from \"gensync\";\nimport Plugin from \"./plugin.ts\";\nimport { mergeOptions } from \"./util.ts\";\nimport { createItemFromDescriptor } from \"./item.ts\";\nimport { buildRootChain } from \"./config-chain.ts\";\nimport type { ConfigContext, FileHandling } from \"./config-chain.ts\";\nimport { getEnv } from \"./helpers/environment.ts\";\nimport { validate } from \"./validation/options.ts\";\n\nimport type {\n  ValidatedOptions,\n  NormalizedOptions,\n  RootMode,\n} from \"./validation/options.ts\";\n\nimport {\n  findConfigUpwards,\n  resolveShowConfigPath,\n  ROOT_CONFIG_FILENAMES,\n} from \"./files/index.ts\";\nimport type { ConfigFile, IgnoreFile } from \"./files/index.ts\";\nimport { resolveTargets } from \"./resolve-targets.ts\";\n\nfunction resolveRootMode(rootDir: string, rootMode: RootMode): string {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      return upwardRootDir === null ? rootDir : upwardRootDir;\n    }\n\n    case \"upward\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      if (upwardRootDir !== null) return upwardRootDir;\n\n      throw Object.assign(\n        new Error(\n          `Babel was run with rootMode:\"upward\" but a root could not ` +\n            `be found when searching upward from \"${rootDir}\".\\n` +\n            `One of the following config files must be in the directory tree: ` +\n            `\"${ROOT_CONFIG_FILENAMES.join(\", \")}\".`,\n        ) as any,\n        {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir,\n        },\n      );\n    }\n    default:\n      throw new Error(`Assertion failure - unknown rootMode value.`);\n  }\n}\n\ntype PrivPartialConfig = {\n  options: NormalizedOptions;\n  context: ConfigContext;\n  fileHandling: FileHandling;\n  ignore: IgnoreFile | void;\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  files: Set<string>;\n};\n\nexport default function* loadPrivatePartialConfig(\n  inputOpts: unknown,\n): Handler<PrivPartialConfig | null> {\n  if (\n    inputOpts != null &&\n    (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))\n  ) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? validate(\"arguments\", inputOpts) : {};\n\n  const {\n    envName = getEnv(),\n    cwd = \".\",\n    root: rootDir = \".\",\n    rootMode = \"root\",\n    caller,\n    cloneInputAst = true,\n  } = args;\n  const absoluteCwd = path.resolve(cwd);\n  const absoluteRootDir = resolveRootMode(\n    path.resolve(absoluteCwd, rootDir),\n    rootMode,\n  );\n\n  const filename =\n    typeof args.filename === \"string\"\n      ? path.resolve(cwd, args.filename)\n      : undefined;\n\n  const showConfigPath = yield* resolveShowConfigPath(absoluteCwd);\n\n  const context: ConfigContext = {\n    filename,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller,\n    showConfig: showConfigPath === filename,\n  };\n\n  const configChain = yield* buildRootChain(args, context);\n  if (!configChain) return null;\n\n  const merged: ValidatedOptions = {\n    assumptions: {},\n  };\n  configChain.options.forEach(opts => {\n    mergeOptions(merged as any, opts);\n  });\n\n  const options: NormalizedOptions = {\n    ...merged,\n    targets: resolveTargets(merged, absoluteRootDir),\n\n    // Tack the passes onto the object itself so that, if this object is\n    // passed back to Babel a second time, it will be in the right structure\n    // to not change behavior.\n    cloneInputAst,\n    babelrc: false,\n    configFile: false,\n    browserslistConfigFile: false,\n    passPerPreset: false,\n    envName: context.envName,\n    cwd: context.cwd,\n    root: context.root,\n    rootMode: \"root\",\n    filename:\n      typeof context.filename === \"string\" ? context.filename : undefined,\n\n    plugins: configChain.plugins.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n    presets: configChain.presets.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n  };\n\n  return {\n    options,\n    context,\n    fileHandling: configChain.fileHandling,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config,\n    files: configChain.files,\n  };\n}\n\ntype LoadPartialConfigOpts = {\n  showIgnoredFiles?: boolean;\n};\n\nexport function* loadPartialConfig(\n  opts?: LoadPartialConfigOpts,\n): Handler<PartialConfig | null> {\n  let showIgnoredFiles = false;\n  // We only extract showIgnoredFiles if opts is an object, so that\n  // loadPrivatePartialConfig can throw the appropriate error if it's not.\n  if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n    ({ showIgnoredFiles, ...opts } = opts);\n  }\n\n  const result: PrivPartialConfig | undefined | null =\n    yield* loadPrivatePartialConfig(opts);\n  if (!result) return null;\n\n  const { options, babelrc, ignore, config, fileHandling, files } = result;\n\n  if (fileHandling === \"ignored\" && !showIgnoredFiles) {\n    return null;\n  }\n\n  (options.plugins || []).forEach(item => {\n    // @ts-expect-error todo(flow->ts): better type annotation for `item.value`\n    if (item.value instanceof Plugin) {\n      throw new Error(\n        \"Passing cached plugin instances is not supported in \" +\n          \"babel.loadPartialConfig()\",\n      );\n    }\n  });\n\n  return new PartialConfig(\n    options,\n    babelrc ? babelrc.filepath : undefined,\n    ignore ? ignore.filepath : undefined,\n    config ? config.filepath : undefined,\n    fileHandling,\n    files,\n  );\n}\n\nexport type { PartialConfig };\n\nclass PartialConfig {\n  /**\n   * These properties are public, so any changes to them should be considered\n   * a breaking change to Babel's API.\n   */\n  options: NormalizedOptions;\n  babelrc: string | void;\n  babelignore: string | void;\n  config: string | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n\n  constructor(\n    options: NormalizedOptions,\n    babelrc: string | void,\n    ignore: string | void,\n    config: string | void,\n    fileHandling: FileHandling,\n    files: Set<string>,\n  ) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n\n    // Freeze since this is a public API and it should be extremely obvious that\n    // reassigning properties on here does nothing.\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns true if there is a config file in the filesystem for this config.\n   */\n  hasFilesystemConfig(): boolean {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n}\nObject.freeze(PartialConfig.prototype);\n", "import gensync, { type Handler } from \"gensync\";\nimport {\n  forwardAsync,\n  maybeAsync,\n  isThenable,\n} from \"../gensync-utils/async.ts\";\n\nimport { mergeOptions } from \"./util.ts\";\nimport * as context from \"../index.ts\";\nimport Plugin from \"./plugin.ts\";\nimport { getItemDescriptor } from \"./item.ts\";\nimport { buildPresetChain } from \"./config-chain.ts\";\nimport { finalize as freezeDeepArray } from \"./helpers/deep-array.ts\";\nimport type { DeepArray, ReadonlyDeepArray } from \"./helpers/deep-array.ts\";\nimport type {\n  ConfigContext,\n  ConfigChain,\n  PresetInstance,\n} from \"./config-chain.ts\";\nimport type { UnloadedDescriptor } from \"./config-descriptors.ts\";\nimport traverse from \"@babel/traverse\";\nimport { makeWeakCache, makeWeakCacheSync } from \"./caching.ts\";\nimport type { CacheConfigurator } from \"./caching.ts\";\nimport {\n  validate,\n  checkNoUnwrappedItemOptionPairs,\n} from \"./validation/options.ts\";\nimport type { PluginItem } from \"./validation/options.ts\";\nimport { validatePluginObject } from \"./validation/plugins.ts\";\nimport { makePluginAPI, makePresetAPI } from \"./helpers/config-api.ts\";\nimport type { PluginAPI, PresetAPI } from \"./helpers/config-api.ts\";\n\nimport loadPrivatePartialConfig from \"./partial.ts\";\nimport type { ValidatedOptions } from \"./validation/options.ts\";\n\nimport type * as Context from \"./cache-contexts.ts\";\nimport ConfigError from \"../errors/config-error.ts\";\n\ntype LoadedDescriptor = {\n  value: {};\n  options: {};\n  dirname: string;\n  alias: string;\n  externalDependencies: ReadonlyDeepArray<string>;\n};\n\nexport type { InputOptions } from \"./validation/options.ts\";\n\nexport type ResolvedConfig = {\n  options: any;\n  passes: PluginPasses;\n  externalDependencies: ReadonlyDeepArray<string>;\n};\n\nexport type { Plugin };\nexport type PluginPassList = Array<Plugin>;\nexport type PluginPasses = Array<PluginPassList>;\n\nexport default gensync(function* loadFullConfig(\n  inputOpts: unknown,\n): Handler<ResolvedConfig | null> {\n  const result = yield* loadPrivatePartialConfig(inputOpts);\n  if (!result) {\n    return null;\n  }\n  const { options, context, fileHandling } = result;\n\n  if (fileHandling === \"ignored\") {\n    return null;\n  }\n\n  const optionDefaults = {};\n\n  const { plugins, presets } = options;\n\n  if (!plugins || !presets) {\n    throw new Error(\"Assertion failure - plugins and presets exist\");\n  }\n\n  const presetContext: Context.FullPreset = {\n    ...context,\n    targets: options.targets,\n  };\n\n  const toDescriptor = (item: PluginItem) => {\n    const desc = getItemDescriptor(item);\n    if (!desc) {\n      throw new Error(\"Assertion failure - must be config item\");\n    }\n\n    return desc;\n  };\n\n  const presetsDescriptors = presets.map(toDescriptor);\n  const initialPluginsDescriptors = plugins.map(toDescriptor);\n  const pluginDescriptorsByPass: Array<Array<UnloadedDescriptor<PluginAPI>>> = [\n    [],\n  ];\n  const passes: Array<Array<Plugin>> = [];\n\n  const externalDependencies: DeepArray<string> = [];\n\n  const ignored = yield* enhanceError(\n    context,\n    function* recursePresetDescriptors(\n      rawPresets: Array<UnloadedDescriptor<PresetAPI>>,\n      pluginDescriptorsPass: Array<UnloadedDescriptor<PluginAPI>>,\n    ): Handler<true | void> {\n      const presets: Array<{\n        preset: ConfigChain | null;\n        pass: Array<UnloadedDescriptor<PluginAPI>>;\n      }> = [];\n\n      for (let i = 0; i < rawPresets.length; i++) {\n        const descriptor = rawPresets[i];\n        if (descriptor.options !== false) {\n          try {\n            // eslint-disable-next-line no-var\n            var preset = yield* loadPresetDescriptor(descriptor, presetContext);\n          } catch (e) {\n            if (e.code === \"BABEL_UNKNOWN_OPTION\") {\n              checkNoUnwrappedItemOptionPairs(rawPresets, i, \"preset\", e);\n            }\n            throw e;\n          }\n\n          externalDependencies.push(preset.externalDependencies);\n\n          // Presets normally run in reverse order, but if they\n          // have their own pass they run after the presets\n          // in the previous pass.\n          if (descriptor.ownPass) {\n            presets.push({ preset: preset.chain, pass: [] });\n          } else {\n            presets.unshift({\n              preset: preset.chain,\n              pass: pluginDescriptorsPass,\n            });\n          }\n        }\n      }\n\n      // resolve presets\n      if (presets.length > 0) {\n        // The passes are created in the same order as the preset list, but are inserted before any\n        // existing additional passes.\n        pluginDescriptorsByPass.splice(\n          1,\n          0,\n          ...presets.map(o => o.pass).filter(p => p !== pluginDescriptorsPass),\n        );\n\n        for (const { preset, pass } of presets) {\n          if (!preset) return true;\n\n          pass.push(...preset.plugins);\n\n          const ignored = yield* recursePresetDescriptors(preset.presets, pass);\n          if (ignored) return true;\n\n          preset.options.forEach(opts => {\n            mergeOptions(optionDefaults, opts);\n          });\n        }\n      }\n    },\n  )(presetsDescriptors, pluginDescriptorsByPass[0]);\n\n  if (ignored) return null;\n\n  const opts: any = optionDefaults;\n  mergeOptions(opts, options);\n\n  const pluginContext: Context.FullPlugin = {\n    ...presetContext,\n    assumptions: opts.assumptions ?? {},\n  };\n\n  yield* enhanceError(context, function* loadPluginDescriptors() {\n    pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);\n\n    for (const descs of pluginDescriptorsByPass) {\n      const pass: Plugin[] = [];\n      passes.push(pass);\n\n      for (let i = 0; i < descs.length; i++) {\n        const descriptor = descs[i];\n        if (descriptor.options !== false) {\n          try {\n            // eslint-disable-next-line no-var\n            var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);\n          } catch (e) {\n            if (e.code === \"BABEL_UNKNOWN_PLUGIN_PROPERTY\") {\n              // print special message for `plugins: [\"@babel/foo\", { foo: \"option\" }]`\n              checkNoUnwrappedItemOptionPairs(descs, i, \"plugin\", e);\n            }\n            throw e;\n          }\n          pass.push(plugin);\n\n          externalDependencies.push(plugin.externalDependencies);\n        }\n      }\n    }\n  })();\n\n  opts.plugins = passes[0];\n  opts.presets = passes\n    .slice(1)\n    .filter(plugins => plugins.length > 0)\n    .map(plugins => ({ plugins }));\n  opts.passPerPreset = opts.presets.length > 0;\n\n  return {\n    options: opts,\n    passes: passes,\n    externalDependencies: freezeDeepArray(externalDependencies),\n  };\n});\n\nfunction enhanceError<T extends Function>(context: ConfigContext, fn: T): T {\n  return function* (arg1: unknown, arg2: unknown) {\n    try {\n      return yield* fn(arg1, arg2);\n    } catch (e) {\n      // There are a few case where thrown errors will try to annotate themselves multiple times, so\n      // to keep things simple we just bail out if re-wrapping the message.\n      if (!/^\\[BABEL\\]/.test(e.message)) {\n        e.message = `[BABEL] ${context.filename ?? \"unknown file\"}: ${\n          e.message\n        }`;\n      }\n\n      throw e;\n    }\n  } as any;\n}\n\n/**\n * Load a generic plugin/preset from the given descriptor loaded from the config object.\n */\nconst makeDescriptorLoader = <Context, API>(\n  apiFactory: (\n    cache: CacheConfigurator<Context>,\n    externalDependencies: Array<string>,\n  ) => API,\n) =>\n  makeWeakCache(function* (\n    { value, options, dirname, alias }: UnloadedDescriptor<API>,\n    cache: CacheConfigurator<Context>,\n  ): Handler<LoadedDescriptor> {\n    // Disabled presets should already have been filtered out\n    if (options === false) throw new Error(\"Assertion failure\");\n\n    options = options || {};\n\n    const externalDependencies: Array<string> = [];\n\n    let item: unknown = value;\n    if (typeof value === \"function\") {\n      const factory = maybeAsync(\n        value as (api: API, options: {}, dirname: string) => unknown,\n        `You appear to be using an async plugin/preset, but Babel has been called synchronously`,\n      );\n\n      const api = {\n        ...context,\n        ...apiFactory(cache, externalDependencies),\n      };\n      try {\n        item = yield* factory(api, options, dirname);\n      } catch (e) {\n        if (alias) {\n          e.message += ` (While processing: ${JSON.stringify(alias)})`;\n        }\n        throw e;\n      }\n    }\n\n    if (!item || typeof item !== \"object\") {\n      throw new Error(\"Plugin/Preset did not return an object.\");\n    }\n\n    if (isThenable(item)) {\n      // @ts-expect-error - if we want to support async plugins\n      yield* [];\n\n      throw new Error(\n        `You appear to be using a promise as a plugin, ` +\n          `which your current version of Babel does not support. ` +\n          `If you're using a published plugin, ` +\n          `you may need to upgrade your @babel/core version. ` +\n          `As an alternative, you can prefix the promise with \"await\". ` +\n          `(While processing: ${JSON.stringify(alias)})`,\n      );\n    }\n\n    if (\n      externalDependencies.length > 0 &&\n      (!cache.configured() || cache.mode() === \"forever\")\n    ) {\n      let error =\n        `A plugin/preset has external untracked dependencies ` +\n        `(${externalDependencies[0]}), but the cache `;\n      if (!cache.configured()) {\n        error += `has not been configured to be invalidated when the external dependencies change. `;\n      } else {\n        error += ` has been configured to never be invalidated. `;\n      }\n      error +=\n        `Plugins/presets should configure their cache to be invalidated when the external ` +\n        `dependencies change, for example using \\`api.cache.invalidate(() => ` +\n        `statSync(filepath).mtimeMs)\\` or \\`api.cache.never()\\`\\n` +\n        `(While processing: ${JSON.stringify(alias)})`;\n\n      throw new Error(error);\n    }\n\n    return {\n      value: item,\n      options,\n      dirname,\n      alias,\n      externalDependencies: freezeDeepArray(externalDependencies),\n    };\n  });\n\nconst pluginDescriptorLoader = makeDescriptorLoader<\n  Context.SimplePlugin,\n  PluginAPI\n>(makePluginAPI);\nconst presetDescriptorLoader = makeDescriptorLoader<\n  Context.SimplePreset,\n  PresetAPI\n>(makePresetAPI);\n\nconst instantiatePlugin = makeWeakCache(function* (\n  { value, options, dirname, alias, externalDependencies }: LoadedDescriptor,\n  cache: CacheConfigurator<Context.SimplePlugin>,\n): Handler<Plugin> {\n  const pluginObj = validatePluginObject(value);\n\n  const plugin = {\n    ...pluginObj,\n  };\n  if (plugin.visitor) {\n    plugin.visitor = traverse.explode({\n      ...plugin.visitor,\n    });\n  }\n\n  if (plugin.inherits) {\n    const inheritsDescriptor: UnloadedDescriptor<PluginAPI> = {\n      name: undefined,\n      alias: `${alias}$inherits`,\n      value: plugin.inherits,\n      options,\n      dirname,\n    };\n\n    const inherits = yield* forwardAsync(loadPluginDescriptor, run => {\n      // If the inherited plugin changes, reinstantiate this plugin.\n      return cache.invalidate(data => run(inheritsDescriptor, data));\n    });\n\n    plugin.pre = chain(inherits.pre, plugin.pre);\n    plugin.post = chain(inherits.post, plugin.post);\n    plugin.manipulateOptions = chain(\n      inherits.manipulateOptions,\n      plugin.manipulateOptions,\n    );\n    plugin.visitor = traverse.visitors.merge([\n      inherits.visitor || {},\n      plugin.visitor || {},\n    ]);\n\n    if (inherits.externalDependencies.length > 0) {\n      if (externalDependencies.length === 0) {\n        externalDependencies = inherits.externalDependencies;\n      } else {\n        externalDependencies = freezeDeepArray([\n          externalDependencies,\n          inherits.externalDependencies,\n        ]);\n      }\n    }\n  }\n\n  return new Plugin(plugin, options, alias, externalDependencies);\n});\n\n/**\n * Instantiate a plugin for the given descriptor, returning the plugin/options pair.\n */\nfunction* loadPluginDescriptor(\n  descriptor: UnloadedDescriptor<PluginAPI>,\n  context: Context.SimplePlugin,\n): Handler<Plugin> {\n  if (descriptor.value instanceof Plugin) {\n    if (descriptor.options) {\n      throw new Error(\n        \"Passed options to an existing Plugin instance will not work.\",\n      );\n    }\n\n    return descriptor.value;\n  }\n\n  return yield* instantiatePlugin(\n    yield* pluginDescriptorLoader(descriptor, context),\n    context,\n  );\n}\n\nconst needsFilename = (val: unknown) => val && typeof val !== \"function\";\n\nconst validateIfOptionNeedsFilename = (\n  options: ValidatedOptions,\n  descriptor: UnloadedDescriptor<PresetAPI>,\n): void => {\n  if (\n    needsFilename(options.test) ||\n    needsFilename(options.include) ||\n    needsFilename(options.exclude)\n  ) {\n    const formattedPresetName = descriptor.name\n      ? `\"${descriptor.name}\"`\n      : \"/* your preset */\";\n    throw new ConfigError(\n      [\n        `Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`,\n        `\\`\\`\\``,\n        `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`,\n        `\\`\\`\\``,\n        `See https://babeljs.io/docs/en/options#filename for more information.`,\n      ].join(\"\\n\"),\n    );\n  }\n};\n\nconst validatePreset = (\n  preset: PresetInstance,\n  context: ConfigContext,\n  descriptor: UnloadedDescriptor<PresetAPI>,\n): void => {\n  if (!context.filename) {\n    const { options } = preset;\n    validateIfOptionNeedsFilename(options, descriptor);\n    options.overrides?.forEach(overrideOptions =>\n      validateIfOptionNeedsFilename(overrideOptions, descriptor),\n    );\n  }\n};\n\nconst instantiatePreset = makeWeakCacheSync(\n  ({\n    value,\n    dirname,\n    alias,\n    externalDependencies,\n  }: LoadedDescriptor): PresetInstance => {\n    return {\n      options: validate(\"preset\", value),\n      alias,\n      dirname,\n      externalDependencies,\n    };\n  },\n);\n\n/**\n * Generate a config object that will act as the root of a new nested config.\n */\nfunction* loadPresetDescriptor(\n  descriptor: UnloadedDescriptor<PresetAPI>,\n  context: Context.FullPreset,\n): Handler<{\n  chain: ConfigChain | null;\n  externalDependencies: ReadonlyDeepArray<string>;\n}> {\n  const preset = instantiatePreset(\n    yield* presetDescriptorLoader(descriptor, context),\n  );\n  validatePreset(preset, context, descriptor);\n  return {\n    chain: yield* buildPresetChain(preset, context),\n    externalDependencies: preset.externalDependencies,\n  };\n}\n\nfunction chain<Args extends any[]>(\n  a: undefined | ((...args: Args) => void),\n  b: undefined | ((...args: Args) => void),\n) {\n  const fns = [a, b].filter(Boolean);\n  if (fns.length <= 1) return fns[0];\n\n  return function (this: unknown, ...args: unknown[]) {\n    for (const fn of fns) {\n      fn.apply(this, args);\n    }\n  };\n}\n", "import gensync, { type Handler } from \"gensync\";\n\nexport type {\n  ResolvedConfig,\n  InputOptions,\n  PluginPasses,\n  Plugin,\n} from \"./full.ts\";\n\nimport type { PluginTarget } from \"./validation/options.ts\";\n\nimport type {\n  PluginAPI as basePluginAPI,\n  PresetAPI as basePresetAPI,\n} from \"./helpers/config-api.ts\";\nexport type { PluginObject } from \"./validation/plugins.ts\";\ntype PluginAPI = basePluginAPI & typeof import(\"..\");\ntype PresetAPI = basePresetAPI & typeof import(\"..\");\nexport type { PluginAPI, PresetAPI };\n// todo: may need to refine PresetObject to be a subset of ValidatedOptions\nexport type {\n  CallerMetadata,\n  ValidatedOptions as PresetObject,\n} from \"./validation/options.ts\";\n\nimport loadFullConfig, { type ResolvedConfig } from \"./full.ts\";\nimport {\n  type PartialConfig,\n  loadPartialConfig as loadPartialConfigImpl,\n} from \"./partial.ts\";\n\nexport { loadFullConfig as default };\nexport type { PartialConfig } from \"./partial.ts\";\n\nimport { createConfigItem as createConfigItemImpl } from \"./item.ts\";\nimport type { ConfigItem } from \"./item.ts\";\nexport type { ConfigItem };\n\nimport { beginHiddenCallStack } from \"../errors/rewrite-stack-trace.ts\";\n\nconst loadPartialConfigRunner = gensync(loadPartialConfigImpl);\nexport function loadPartialConfigAsync(\n  ...args: Parameters<typeof loadPartialConfigRunner.async>\n) {\n  return beginHiddenCallStack(loadPartialConfigRunner.async)(...args);\n}\nexport function loadPartialConfigSync(\n  ...args: Parameters<typeof loadPartialConfigRunner.sync>\n) {\n  return beginHiddenCallStack(loadPartialConfigRunner.sync)(...args);\n}\nexport function loadPartialConfig(\n  opts: Parameters<typeof loadPartialConfigImpl>[0],\n  callback?: (err: Error, val: PartialConfig | null) => void,\n) {\n  if (callback !== undefined) {\n    beginHiddenCallStack(loadPartialConfigRunner.errback)(opts, callback);\n  } else if (typeof opts === \"function\") {\n    beginHiddenCallStack(loadPartialConfigRunner.errback)(\n      undefined,\n      opts as (err: Error, val: PartialConfig | null) => void,\n    );\n  } else {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'loadPartialConfig' function expects a callback. If you need to call it synchronously, please use 'loadPartialConfigSync'.\",\n      );\n    } else {\n      return loadPartialConfigSync(opts);\n    }\n  }\n}\n\nfunction* loadOptionsImpl(opts: unknown): Handler<ResolvedConfig | null> {\n  const config = yield* loadFullConfig(opts);\n  // NOTE: We want to return \"null\" explicitly, while ?. alone returns undefined\n  return config?.options ?? null;\n}\nconst loadOptionsRunner = gensync(loadOptionsImpl);\nexport function loadOptionsAsync(\n  ...args: Parameters<typeof loadOptionsRunner.async>\n) {\n  return beginHiddenCallStack(loadOptionsRunner.async)(...args);\n}\nexport function loadOptionsSync(\n  ...args: Parameters<typeof loadOptionsRunner.sync>\n) {\n  return beginHiddenCallStack(loadOptionsRunner.sync)(...args);\n}\nexport function loadOptions(\n  opts: Parameters<typeof loadOptionsImpl>[0],\n  callback?: (err: Error, val: ResolvedConfig | null) => void,\n) {\n  if (callback !== undefined) {\n    beginHiddenCallStack(loadOptionsRunner.errback)(opts, callback);\n  } else if (typeof opts === \"function\") {\n    beginHiddenCallStack(loadOptionsRunner.errback)(\n      undefined,\n      opts as (err: Error, val: ResolvedConfig | null) => void,\n    );\n  } else {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'loadOptions' function expects a callback. If you need to call it synchronously, please use 'loadOptionsSync'.\",\n      );\n    } else {\n      return loadOptionsSync(opts);\n    }\n  }\n}\n\nconst createConfigItemRunner = gensync(createConfigItemImpl);\nexport function createConfigItemAsync(\n  ...args: Parameters<typeof createConfigItemRunner.async>\n) {\n  return beginHiddenCallStack(createConfigItemRunner.async)(...args);\n}\nexport function createConfigItemSync(\n  ...args: Parameters<typeof createConfigItemRunner.sync>\n) {\n  return beginHiddenCallStack(createConfigItemRunner.sync)(...args);\n}\nexport function createConfigItem(\n  target: PluginTarget,\n  options: Parameters<typeof createConfigItemImpl>[1],\n  callback?: (err: Error, val: ConfigItem<PluginAPI> | null) => void,\n) {\n  if (callback !== undefined) {\n    beginHiddenCallStack(createConfigItemRunner.errback)(\n      target,\n      options,\n      callback,\n    );\n  } else if (typeof options === \"function\") {\n    beginHiddenCallStack(createConfigItemRunner.errback)(\n      target,\n      undefined,\n      callback,\n    );\n  } else {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'createConfigItem' function expects a callback. If you need to call it synchronously, please use 'createConfigItemSync'.\",\n      );\n    } else {\n      return createConfigItemSync(target, options);\n    }\n  }\n}\n", "import type * as t from \"@babel/types\";\nimport type File from \"./file/file.ts\";\n\nexport default class PluginPass<Options = {}> {\n  _map: Map<unknown, unknown> = new Map();\n  key: string | undefined | null;\n  file: File;\n  opts: Partial<Options>;\n\n  // The working directory that Babel's programmatic options are loaded\n  // relative to.\n  cwd: string;\n\n  // The absolute path of the file being compiled.\n  filename: string | void;\n\n  constructor(file: File, key?: string | null, options?: Options) {\n    this.key = key;\n    this.file = file;\n    this.opts = options || {};\n    this.cwd = file.opts.cwd;\n    this.filename = file.opts.filename;\n  }\n\n  set(key: unknown, val: unknown) {\n    this._map.set(key, val);\n  }\n\n  get(key: unknown): any {\n    return this._map.get(key);\n  }\n\n  availableHelper(name: string, versionRange?: string | null) {\n    return this.file.availableHelper(name, versionRange);\n  }\n\n  addHelper(name: string) {\n    return this.file.addHelper(name);\n  }\n\n  buildCodeFrameError(\n    node: t.Node | undefined | null,\n    msg: string,\n    _Error?: typeof Error,\n  ) {\n    return this.file.buildCodeFrameError(node, msg, _Error);\n  }\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  (PluginPass as any).prototype.getModuleName = function getModuleName(\n    this: PluginPass,\n  ): string | undefined {\n    return this.file.getModuleName();\n  };\n  (PluginPass as any).prototype.addImport = function addImport(\n    this: PluginPass,\n  ): void {\n    // @ts-expect-error only exists in Babel 7\n    this.file.addImport();\n  };\n}\n", "import traverse from \"@babel/traverse\";\nimport type { Statement } from \"@babel/types\";\nimport type { PluginObject } from \"../config/index.ts\";\nimport Plugin from \"../config/plugin.ts\";\n\nlet LOADED_PLUGIN: Plugin | void;\n\nconst blockHoistPlugin: PluginObject = {\n  /**\n   * [Please add a description.]\n   *\n   * Priority:\n   *\n   *  - 0 We want this to be at the **very** bottom\n   *  - 1 Default node position\n   *  - 2 Priority over normal nodes\n   *  - 3 We want this to be at the **very** top\n   *  - 4 Reserved for the helpers used to implement module imports.\n   */\n\n  name: \"internal.blockHoist\",\n\n  visitor: {\n    Block: {\n      exit({ node }) {\n        node.body = performHoisting(node.body);\n      },\n    },\n    SwitchCase: {\n      exit({ node }) {\n        // In case statements, hoisting is difficult to perform correctly due to\n        // functions that are declared and referenced in different blocks.\n        // Nevertheless, hoisting the statements *inside* of each case should at\n        // least mitigate the failure cases.\n        node.consequent = performHoisting(node.consequent);\n      },\n    },\n  },\n};\n\nfunction performHoisting(body: Statement[]): Statement[] {\n  // Largest SMI\n  let max = 2 ** 30 - 1;\n  let hasChange = false;\n  for (let i = 0; i < body.length; i++) {\n    const n = body[i];\n    const p = priority(n);\n    if (p > max) {\n      hasChange = true;\n      break;\n    }\n    max = p;\n  }\n  if (!hasChange) return body;\n\n  // My kingdom for a stable sort!\n  return stableSort(body.slice());\n}\n\nexport default function loadBlockHoistPlugin(): Plugin {\n  if (!LOADED_PLUGIN) {\n    // cache the loaded blockHoist plugin plugin\n    LOADED_PLUGIN = new Plugin(\n      {\n        ...blockHoistPlugin,\n        visitor: traverse.explode(blockHoistPlugin.visitor),\n      },\n      {},\n    );\n  }\n\n  return LOADED_PLUGIN;\n}\n\nfunction priority(bodyNode: Statement & { _blockHoist?: number | true }) {\n  const priority = bodyNode?._blockHoist;\n  if (priority == null) return 1;\n  if (priority === true) return 2;\n  return priority;\n}\n\nfunction stableSort(body: Statement[]) {\n  // By default, we use priorities of 0-4.\n  const buckets = Object.create(null);\n\n  // By collecting into buckets, we can guarantee a stable sort.\n  for (let i = 0; i < body.length; i++) {\n    const n = body[i];\n    const p = priority(n);\n\n    // In case some plugin is setting an unexpected priority.\n    const bucket = buckets[p] || (buckets[p] = []);\n    bucket.push(n);\n  }\n\n  // Sort our keys in descending order. Keys are unique, so we don't have to\n  // worry about stability.\n  const keys = Object.keys(buckets)\n    .map(k => +k)\n    .sort((a, b) => b - a);\n\n  let index = 0;\n  for (const key of keys) {\n    const bucket = buckets[key];\n    for (const n of bucket) {\n      body[index++] = n;\n    }\n  }\n  return body;\n}\n", "import path from \"path\";\nimport type { ResolvedConfig } from \"../config/index.ts\";\n\nexport default function normalizeOptions(config: ResolvedConfig): {} {\n  const {\n    filename,\n    cwd,\n    filenameRelative = typeof filename === \"string\"\n      ? path.relative(cwd, filename)\n      : \"unknown\",\n    sourceType = \"module\",\n    inputSourceMap,\n    sourceMaps = !!inputSourceMap,\n    sourceRoot = process.env.BABEL_8_BREAKING\n      ? undefined\n      : config.options.moduleRoot,\n\n    sourceFileName = path.basename(filenameRelative),\n\n    comments = true,\n    compact = \"auto\",\n  } = config.options;\n\n  const opts = config.options;\n\n  const options = {\n    ...opts,\n\n    parserOpts: {\n      sourceType:\n        path.extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n\n      sourceFileName: filename,\n      plugins: [],\n      ...opts.parserOpts,\n    },\n\n    generatorOpts: {\n      // General generator flags.\n      filename,\n\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact,\n      minified: opts.minified,\n\n      // Source-map generation flags.\n      sourceMaps,\n\n      sourceRoot,\n      sourceFileName,\n      ...opts.generatorOpts,\n    },\n  };\n\n  for (const plugins of config.passes) {\n    for (const plugin of plugins) {\n      if (plugin.manipulateOptions) {\n        plugin.manipulateOptions(options, options.parserOpts);\n      }\n    }\n  }\n\n  return options;\n}\n", "'use strict';\n\nObject.defineProperty(exports, 'commentRegex', {\n  get: function getCommentRegex () {\n    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n  }\n});\n\n\nObject.defineProperty(exports, 'mapFileCommentRegex', {\n  get: function getMapFileCommentRegex () {\n    // Matches sourceMappingURL in either // or /* comment styles.\n    return /(?:\\/\\/[@#][ \\t]+?sourceMappingURL=([^\\s'\"`]+?)[ \\t]*?$)|(?:\\/\\*[@#][ \\t]+sourceMappingURL=([^*]+?)[ \\t]*?(?:\\*\\/){1}[ \\t]*?$)/mg;\n  }\n});\n\nvar decodeBase64;\nif (typeof Buffer !== 'undefined') {\n  if (typeof Buffer.from === 'function') {\n    decodeBase64 = decodeBase64WithBufferFrom;\n  } else {\n    decodeBase64 = decodeBase64WithNewBuffer;\n  }\n} else {\n  decodeBase64 = decodeBase64WithAtob;\n}\n\nfunction decodeBase64WithBufferFrom(base64) {\n  return Buffer.from(base64, 'base64').toString();\n}\n\nfunction decodeBase64WithNewBuffer(base64) {\n  if (typeof value === 'number') {\n    throw new TypeError('The value to decode must not be of type number.');\n  }\n  return new Buffer(base64, 'base64').toString();\n}\n\nfunction decodeBase64WithAtob(base64) {\n  return decodeURIComponent(escape(atob(base64)));\n}\n\nfunction stripComment(sm) {\n  return sm.split(',').pop();\n}\n\nfunction readFromFileMap(sm, read) {\n  var r = exports.mapFileCommentRegex.exec(sm);\n  // for some odd reason //# .. captures in 1 and /* .. */ in 2\n  var filename = r[1] || r[2];\n\n  try {\n    var sm = read(filename);\n    if (sm != null && typeof sm.catch === 'function') {\n      return sm.catch(throwError);\n    } else {\n      return sm;\n    }\n  } catch (e) {\n    throwError(e);\n  }\n\n  function throwError(e) {\n    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n  }\n}\n\nfunction Converter (sm, opts) {\n  opts = opts || {};\n\n  if (opts.hasComment) {\n    sm = stripComment(sm);\n  }\n\n  if (opts.encoding === 'base64') {\n    sm = decodeBase64(sm);\n  } else if (opts.encoding === 'uri') {\n    sm = decodeURIComponent(sm);\n  }\n\n  if (opts.isJSON || opts.encoding) {\n    sm = JSON.parse(sm);\n  }\n\n  this.sourcemap = sm;\n}\n\nConverter.prototype.toJSON = function (space) {\n  return JSON.stringify(this.sourcemap, null, space);\n};\n\nif (typeof Buffer !== 'undefined') {\n  if (typeof Buffer.from === 'function') {\n    Converter.prototype.toBase64 = encodeBase64WithBufferFrom;\n  } else {\n    Converter.prototype.toBase64 = encodeBase64WithNewBuffer;\n  }\n} else {\n  Converter.prototype.toBase64 = encodeBase64WithBtoa;\n}\n\nfunction encodeBase64WithBufferFrom() {\n  var json = this.toJSON();\n  return Buffer.from(json, 'utf8').toString('base64');\n}\n\nfunction encodeBase64WithNewBuffer() {\n  var json = this.toJSON();\n  if (typeof json === 'number') {\n    throw new TypeError('The json to encode must not be of type number.');\n  }\n  return new Buffer(json, 'utf8').toString('base64');\n}\n\nfunction encodeBase64WithBtoa() {\n  var json = this.toJSON();\n  return btoa(unescape(encodeURIComponent(json)));\n}\n\nConverter.prototype.toURI = function () {\n  var json = this.toJSON();\n  return encodeURIComponent(json);\n};\n\nConverter.prototype.toComment = function (options) {\n  var encoding, content, data;\n  if (options != null && options.encoding === 'uri') {\n    encoding = '';\n    content = this.toURI();\n  } else {\n    encoding = ';base64';\n    content = this.toBase64();\n  }\n  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n  return options != null && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n};\n\n// returns copy instead of original\nConverter.prototype.toObject = function () {\n  return JSON.parse(this.toJSON());\n};\n\nConverter.prototype.addProperty = function (key, value) {\n  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property \"' + key + '\" already exists on the sourcemap, use set property instead');\n  return this.setProperty(key, value);\n};\n\nConverter.prototype.setProperty = function (key, value) {\n  this.sourcemap[key] = value;\n  return this;\n};\n\nConverter.prototype.getProperty = function (key) {\n  return this.sourcemap[key];\n};\n\nexports.fromObject = function (obj) {\n  return new Converter(obj);\n};\n\nexports.fromJSON = function (json) {\n  return new Converter(json, { isJSON: true });\n};\n\nexports.fromURI = function (uri) {\n  return new Converter(uri, { encoding: 'uri' });\n};\n\nexports.fromBase64 = function (base64) {\n  return new Converter(base64, { encoding: 'base64' });\n};\n\nexports.fromComment = function (comment) {\n  var m, encoding;\n  comment = comment\n    .replace(/^\\/\\*/g, '//')\n    .replace(/\\*\\/$/g, '');\n  m = exports.commentRegex.exec(comment);\n  encoding = m && m[4] || 'uri';\n  return new Converter(comment, { encoding: encoding, hasComment: true });\n};\n\nfunction makeConverter(sm) {\n  return new Converter(sm, { isJSON: true });\n}\n\nexports.fromMapFileComment = function (comment, read) {\n  if (typeof read === 'string') {\n    throw new Error(\n      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n    )\n  }\n\n  var sm = readFromFileMap(comment, read);\n  if (sm != null && typeof sm.then === 'function') {\n    return sm.then(makeConverter);\n  } else {\n    return makeConverter(sm);\n  }\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromSource = function (content) {\n  var m = content.match(exports.commentRegex);\n  return m ? exports.fromComment(m.pop()) : null;\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromMapFileSource = function (content, read) {\n  if (typeof read === 'string') {\n    throw new Error(\n      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n    )\n  }\n  var m = content.match(exports.mapFileCommentRegex);\n  return m ? exports.fromMapFileComment(m.pop(), read) : null;\n};\n\nexports.removeComments = function (src) {\n  return src.replace(exports.commentRegex, '');\n};\n\nexports.removeMapFileComments = function (src) {\n  return src.replace(exports.mapFileCommentRegex, '');\n};\n\nexports.generateMapFileComment = function (file, options) {\n  var data = 'sourceMappingURL=' + file;\n  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n};\n", "const pluginNameMap: Record<\n  string,\n  Partial<Record<\"syntax\" | \"transform\", Record<\"name\" | \"url\", string>>>\n> = {\n  asyncDoExpressions: {\n    syntax: {\n      name: \"@babel/plugin-syntax-async-do-expressions\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions\",\n    },\n  },\n  decimal: {\n    syntax: {\n      name: \"@babel/plugin-syntax-decimal\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal\",\n    },\n  },\n  decorators: {\n    syntax: {\n      name: \"@babel/plugin-syntax-decorators\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-decorators\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators\",\n    },\n  },\n  doExpressions: {\n    syntax: {\n      name: \"@babel/plugin-syntax-do-expressions\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-do-expressions\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions\",\n    },\n  },\n  exportDefaultFrom: {\n    syntax: {\n      name: \"@babel/plugin-syntax-export-default-from\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-export-default-from\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from\",\n    },\n  },\n  flow: {\n    syntax: {\n      name: \"@babel/plugin-syntax-flow\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow\",\n    },\n    transform: {\n      name: \"@babel/preset-flow\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-preset-flow\",\n    },\n  },\n  functionBind: {\n    syntax: {\n      name: \"@babel/plugin-syntax-function-bind\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-function-bind\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind\",\n    },\n  },\n  functionSent: {\n    syntax: {\n      name: \"@babel/plugin-syntax-function-sent\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-function-sent\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent\",\n    },\n  },\n  jsx: {\n    syntax: {\n      name: \"@babel/plugin-syntax-jsx\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx\",\n    },\n    transform: {\n      name: \"@babel/preset-react\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-preset-react\",\n    },\n  },\n  importAttributes: {\n    syntax: {\n      name: \"@babel/plugin-syntax-import-attributes\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes\",\n    },\n  },\n  pipelineOperator: {\n    syntax: {\n      name: \"@babel/plugin-syntax-pipeline-operator\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-pipeline-operator\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator\",\n    },\n  },\n  recordAndTuple: {\n    syntax: {\n      name: \"@babel/plugin-syntax-record-and-tuple\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple\",\n    },\n  },\n  throwExpressions: {\n    syntax: {\n      name: \"@babel/plugin-syntax-throw-expressions\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions\",\n    },\n    transform: {\n      name: \"@babel/plugin-proposal-throw-expressions\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions\",\n    },\n  },\n  typescript: {\n    syntax: {\n      name: \"@babel/plugin-syntax-typescript\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript\",\n    },\n    transform: {\n      name: \"@babel/preset-typescript\",\n      url: \"https://github.com/babel/babel/tree/main/packages/babel-preset-typescript\",\n    },\n  },\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  // TODO: This plugins are now supported by default by @babel/parser.\n  Object.assign(pluginNameMap, {\n    asyncGenerators: {\n      syntax: {\n        name: \"@babel/plugin-syntax-async-generators\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-async-generator-functions\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions\",\n      },\n    },\n    classProperties: {\n      syntax: {\n        name: \"@babel/plugin-syntax-class-properties\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-class-properties\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties\",\n      },\n    },\n    classPrivateProperties: {\n      syntax: {\n        name: \"@babel/plugin-syntax-class-properties\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-class-properties\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties\",\n      },\n    },\n    classPrivateMethods: {\n      syntax: {\n        name: \"@babel/plugin-syntax-class-properties\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-private-methods\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods\",\n      },\n    },\n    classStaticBlock: {\n      syntax: {\n        name: \"@babel/plugin-syntax-class-static-block\",\n        url: \"https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-class-static-block\",\n        url: \"https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block\",\n      },\n    },\n    dynamicImport: {\n      syntax: {\n        name: \"@babel/plugin-syntax-dynamic-import\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import\",\n      },\n    },\n    exportNamespaceFrom: {\n      syntax: {\n        name: \"@babel/plugin-syntax-export-namespace-from\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-export-namespace-from\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from\",\n      },\n    },\n    // Will be removed\n    importAssertions: {\n      syntax: {\n        name: \"@babel/plugin-syntax-import-assertions\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions\",\n      },\n    },\n    importMeta: {\n      syntax: {\n        name: \"@babel/plugin-syntax-import-meta\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta\",\n      },\n    },\n    logicalAssignment: {\n      syntax: {\n        name: \"@babel/plugin-syntax-logical-assignment-operators\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-logical-assignment-operators\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators\",\n      },\n    },\n    moduleStringNames: {\n      syntax: {\n        name: \"@babel/plugin-syntax-module-string-names\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names\",\n      },\n    },\n    numericSeparator: {\n      syntax: {\n        name: \"@babel/plugin-syntax-numeric-separator\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-numeric-separator\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator\",\n      },\n    },\n    nullishCoalescingOperator: {\n      syntax: {\n        name: \"@babel/plugin-syntax-nullish-coalescing-operator\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-nullish-coalescing-operator\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator\",\n      },\n    },\n    objectRestSpread: {\n      syntax: {\n        name: \"@babel/plugin-syntax-object-rest-spread\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-object-rest-spread\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread\",\n      },\n    },\n    optionalCatchBinding: {\n      syntax: {\n        name: \"@babel/plugin-syntax-optional-catch-binding\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-optional-catch-binding\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding\",\n      },\n    },\n    optionalChaining: {\n      syntax: {\n        name: \"@babel/plugin-syntax-optional-chaining\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-optional-chaining\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining\",\n      },\n    },\n    privateIn: {\n      syntax: {\n        name: \"@babel/plugin-syntax-private-property-in-object\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-private-property-in-object\",\n        url: \"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object\",\n      },\n    },\n    regexpUnicodeSets: {\n      syntax: {\n        name: \"@babel/plugin-syntax-unicode-sets-regex\",\n        url: \"https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md\",\n      },\n      transform: {\n        name: \"@babel/plugin-transform-unicode-sets-regex\",\n        url: \"https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md\",\n      },\n    },\n  });\n}\n\nconst getNameURLCombination = ({ name, url }: { name: string; url: string }) =>\n  `${name} (${url})`;\n\n/*\nReturns a string of the format:\nSupport for the experimental syntax [@babel/parser plugin name] isn't currently enabled ([loc]):\n\n[code frame]\n\nAdd [npm package name] ([url]) to the 'plugins' section of your Babel config\nto enable [parsing|transformation].\n*/\nexport default function generateMissingPluginMessage(\n  missingPluginName: string,\n  loc: {\n    line: number;\n    column: number;\n  },\n  codeFrame: string,\n  filename: string,\n): string {\n  let helpMessage =\n    `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` +\n    `(${loc.line}:${loc.column + 1}):\\n\\n` +\n    codeFrame;\n  const pluginInfo = pluginNameMap[missingPluginName];\n  if (pluginInfo) {\n    const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;\n    if (syntaxPlugin) {\n      const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);\n      if (transformPlugin) {\n        const transformPluginInfo = getNameURLCombination(transformPlugin);\n        const sectionType = transformPlugin.name.startsWith(\"@babel/plugin\")\n          ? \"plugins\"\n          : \"presets\";\n        helpMessage += `\\n\\nAdd ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.\nIf you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;\n      } else {\n        helpMessage +=\n          `\\n\\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` +\n          `to enable parsing.`;\n      }\n    }\n  }\n\n  const msgFilename =\n    filename === \"unknown\" ? \"<name of the input file>\" : filename;\n  helpMessage += `\n\nIf you already added the plugin for this syntax to your config, it's possible that your config \\\nisn't being loaded.\nYou can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded \\\nconfiguration:\n\\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${msgFilename} <your build command>\nSee https://babeljs.io/docs/configuration#print-effective-configs for more info.\n`;\n  return helpMessage;\n}\n", "import type { Handler } from \"gensync\";\nimport { parse, type File as ParseResult } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport generateMissingPluginMessage from \"./util/missing-plugin-helper.ts\";\nimport type { PluginPasses } from \"../config/index.ts\";\n\nexport type { ParseResult };\n\nexport default function* parser(\n  pluginPasses: PluginPasses,\n  { parserOpts, highlightCode = true, filename = \"unknown\" }: any,\n  code: string,\n): Handler<ParseResult> {\n  try {\n    const results = [];\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const { parserOverride } = plugin;\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, parse);\n\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return parse(code, parserOpts);\n    } else if (results.length === 1) {\n      // @ts-expect-error - If we want to allow async parsers\n      yield* [];\n      if (typeof results[0].then === \"function\") {\n        throw new Error(\n          `You appear to be using an async parser plugin, ` +\n            `which your current version of Babel does not support. ` +\n            `If you're using a published plugin, you may need to upgrade ` +\n            `your @babel/core version.`,\n        );\n      }\n      return results[0];\n    }\n    // TODO: Add an error code\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message +=\n        \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" +\n        \"or sourceType:unambiguous in your Babel config for this file.\";\n      // err.code will be changed to BABEL_PARSE_ERROR later.\n    }\n\n    const { loc, missingPlugin } = err;\n    if (loc) {\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        },\n        {\n          highlightCode,\n        },\n      );\n      if (missingPlugin) {\n        err.message =\n          `${filename}: ` +\n          generateMissingPluginMessage(\n            missingPlugin[0],\n            loc,\n            codeFrame,\n            filename,\n          );\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n", "//https://github.com/babel/babel/pull/14583#discussion_r882828856\nfunction deepClone(value: any, cache: Map<any, any>): any {\n  if (value !== null) {\n    if (cache.has(value)) return cache.get(value);\n    let cloned: any;\n    if (Array.isArray(value)) {\n      cloned = new Array(value.length);\n      cache.set(value, cloned);\n      for (let i = 0; i < value.length; i++) {\n        cloned[i] =\n          typeof value[i] !== \"object\" ? value[i] : deepClone(value[i], cache);\n      }\n    } else {\n      cloned = {};\n      cache.set(value, cloned);\n      const keys = Object.keys(value);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        cloned[key] =\n          typeof value[key] !== \"object\"\n            ? value[key]\n            : deepClone(value[key], cache);\n      }\n    }\n    return cloned;\n  }\n  return value;\n}\n\nexport default function <T>(value: T): T {\n  if (typeof value !== \"object\") return value;\n  return deepClone(value, new Map());\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { file, traverseFast } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { PluginPasses } from \"../config/index.ts\";\nimport convertSourceMap from \"convert-source-map\";\nimport type { SourceMapConverter as Converter } from \"convert-source-map\";\nimport File from \"./file/file.ts\";\nimport parser from \"../parser/index.ts\";\nimport cloneDeep from \"./util/clone-deep.ts\";\n\nconst debug = buildDebug(\"babel:transform:file\");\n\n// These regexps are copied from the convert-source-map package,\n// but without // or /* at the beginning of the comment.\n\nconst INLINE_SOURCEMAP_REGEX =\n  /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX =\n  /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nexport type NormalizedFile = {\n  code: string;\n  ast: t.File;\n  inputMap: Converter | null;\n};\n\nexport default function* normalizeFile(\n  pluginPasses: PluginPasses,\n  options: { [key: string]: any },\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<File> {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = cloneDeep(ast);\n    }\n  } else {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = yield* parser(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n  if (options.inputSourceMap !== false) {\n    // If an explicit object is passed in, it overrides the processing of\n    // source maps that may be in the file itself.\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = convertSourceMap.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n      if (lastComment) {\n        try {\n          inputMap = convertSourceMap.fromComment(\"//\" + lastComment);\n        } catch (err) {\n          if (process.env.BABEL_8_BREAKING) {\n            console.warn(\n              \"discarding unknown inline input sourcemap\",\n              options.filename,\n              err,\n            );\n          } else {\n            debug(\"discarding unknown inline input sourcemap\");\n          }\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          // when `lastComment` is non-null, EXTERNAL_SOURCEMAP_REGEX must have matches\n          const match: [string, string] = EXTERNAL_SOURCEMAP_REGEX.exec(\n            lastComment,\n          ) as any;\n          const inputMapContent = fs.readFileSync(\n            path.resolve(path.dirname(options.filename), match[1]),\n            \"utf8\",\n          );\n          inputMap = convertSourceMap.fromJSON(inputMapContent);\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new File(options, {\n    code,\n    ast: ast as t.File,\n    inputMap,\n  });\n}\n\nfunction extractCommentsFromList(\n  regex: RegExp,\n  comments: t.Comment[],\n  lastComment: string | null,\n): [t.Comment[], string | null] {\n  if (comments) {\n    comments = comments.filter(({ value }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n      return true;\n    });\n  }\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex: RegExp, ast: t.Node) {\n  let lastComment: string = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.leadingComments,\n      lastComment,\n    );\n    [node.innerComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.innerComments,\n      lastComment,\n    );\n    [node.trailingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.trailingComments,\n      lastComment,\n    );\n  });\n  return lastComment;\n}\n", "import { GenMapping, maybeAddSegment, setIgnore, setSourceContent } from '@jridgewell/gen-mapping';\nimport { traceSegment, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport type { TraceMap } from '@jridgewell/trace-mapping';\n\nexport type SourceMapSegmentObject = {\n  column: number;\n  line: number;\n  name: string;\n  source: string;\n  content: string | null;\n  ignore: boolean;\n};\n\nexport type OriginalSource = {\n  map: null;\n  sources: Sources[];\n  source: string;\n  content: string | null;\n  ignore: boolean;\n};\n\nexport type MapSource = {\n  map: TraceMap;\n  sources: Sources[];\n  source: string;\n  content: null;\n  ignore: false;\n};\n\nexport type Sources = OriginalSource | MapSource;\n\nconst SOURCELESS_MAPPING = /* #__PURE__ */ SegmentObject('', -1, -1, '', null, false);\nconst EMPTY_SOURCES: Sources[] = [];\n\nfunction SegmentObject(\n  source: string,\n  line: number,\n  column: number,\n  name: string,\n  content: string | null,\n  ignore: boolean\n): SourceMapSegmentObject {\n  return { source, line, column, name, content, ignore };\n}\n\nfunction Source(\n  map: TraceMap,\n  sources: Sources[],\n  source: '',\n  content: null,\n  ignore: false\n): MapSource;\nfunction Source(\n  map: null,\n  sources: Sources[],\n  source: string,\n  content: string | null,\n  ignore: boolean\n): OriginalSource;\nfunction Source(\n  map: TraceMap | null,\n  sources: Sources[],\n  source: string | '',\n  content: string | null,\n  ignore: boolean\n): Sources {\n  return {\n    map,\n    sources,\n    source,\n    content,\n    ignore,\n  } as any;\n}\n\n/**\n * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes\n * (which may themselves be SourceMapTrees).\n */\nexport function MapSource(map: TraceMap, sources: Sources[]): MapSource {\n  return Source(map, sources, '', null, false);\n}\n\n/**\n * A \"leaf\" node in the sourcemap tree, representing an original, unmodified source file. Recursive\n * segment tracing ends at the `OriginalSource`.\n */\nexport function OriginalSource(\n  source: string,\n  content: string | null,\n  ignore: boolean\n): OriginalSource {\n  return Source(null, EMPTY_SOURCES, source, content, ignore);\n}\n\n/**\n * traceMappings is only called on the root level SourceMapTree, and begins the process of\n * resolving each mapping in terms of the original source files.\n */\nexport function traceMappings(tree: MapSource): GenMapping {\n  // TODO: Eventually support sourceRoot, which has to be removed because the sources are already\n  // fully resolved. We'll need to make sources relative to the sourceRoot before adding them.\n  const gen = new GenMapping({ file: tree.map.file });\n  const { sources: rootSources, map } = tree;\n  const rootNames = map.names;\n  const rootMappings = decodedMappings(map);\n\n  for (let i = 0; i < rootMappings.length; i++) {\n    const segments = rootMappings[i];\n\n    for (let j = 0; j < segments.length; j++) {\n      const segment = segments[j];\n      const genCol = segment[0];\n      let traced: SourceMapSegmentObject | null = SOURCELESS_MAPPING;\n\n      // 1-length segments only move the current generated column, there's no source information\n      // to gather from it.\n      if (segment.length !== 1) {\n        const source = rootSources[segment[1]];\n        traced = originalPositionFor(\n          source,\n          segment[2],\n          segment[3],\n          segment.length === 5 ? rootNames[segment[4]] : ''\n        );\n\n        // If the trace is invalid, then the trace ran into a sourcemap that doesn't contain a\n        // respective segment into an original source.\n        if (traced == null) continue;\n      }\n\n      const { column, line, name, content, source, ignore } = traced;\n\n      maybeAddSegment(gen, i, genCol, source, line, column, name);\n      if (source && content != null) setSourceContent(gen, source, content);\n      if (ignore) setIgnore(gen, source, true);\n    }\n  }\n\n  return gen;\n}\n\n/**\n * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own\n * child SourceMapTrees, until we find the original source map.\n */\nexport function originalPositionFor(\n  source: Sources,\n  line: number,\n  column: number,\n  name: string\n): SourceMapSegmentObject | null {\n  if (!source.map) {\n    return SegmentObject(source.source, line, column, name, source.content, source.ignore);\n  }\n\n  const segment = traceSegment(source.map, line, column);\n\n  // If we couldn't find a segment, then this doesn't exist in the sourcemap.\n  if (segment == null) return null;\n  // 1-length segments only move the current generated column, there's no source information\n  // to gather from it.\n  if (segment.length === 1) return SOURCELESS_MAPPING;\n\n  return originalPositionFor(\n    source.sources[segment[1]],\n    segment[2],\n    segment[3],\n    segment.length === 5 ? source.map.names[segment[4]] : name\n  );\n}\n", "import { TraceMap } from '@jridgewell/trace-mapping';\n\nimport { OriginalSource, MapSource } from './source-map-tree';\n\nimport type { Sources, MapSource as MapSourceType } from './source-map-tree';\nimport type { SourceMapInput, SourceMapLoader, LoaderContext } from './types';\n\nfunction asArray<T>(value: T | T[]): T[] {\n  if (Array.isArray(value)) return value;\n  return [value];\n}\n\n/**\n * Recursively builds a tree structure out of sourcemap files, with each node\n * being either an `OriginalSource` \"leaf\" or a `SourceMapTree` composed of\n * `OriginalSource`s and `SourceMapTree`s.\n *\n * Every sourcemap is composed of a collection of source files and mappings\n * into locations of those source files. When we generate a `SourceMapTree` for\n * the sourcemap, we attempt to load each source file's own sourcemap. If it\n * does not have an associated sourcemap, it is considered an original,\n * unmodified source file.\n */\nexport default function buildSourceMapTree(\n  input: SourceMapInput | SourceMapInput[],\n  loader: SourceMapLoader\n): MapSourceType {\n  const maps = asArray(input).map((m) => new TraceMap(m, ''));\n  const map = maps.pop()!;\n\n  for (let i = 0; i < maps.length; i++) {\n    if (maps[i].sources.length > 1) {\n      throw new Error(\n        `Transformation map ${i} must have exactly one source file.\\n` +\n          'Did you specify these with the most recent transformation maps first?'\n      );\n    }\n  }\n\n  let tree = build(map, loader, '', 0);\n  for (let i = maps.length - 1; i >= 0; i--) {\n    tree = MapSource(maps[i], [tree]);\n  }\n  return tree;\n}\n\nfunction build(\n  map: TraceMap,\n  loader: SourceMapLoader,\n  importer: string,\n  importerDepth: number\n): MapSourceType {\n  const { resolvedSources, sourcesContent, ignoreList } = map;\n\n  const depth = importerDepth + 1;\n  const children = resolvedSources.map((sourceFile: string | null, i: number): Sources => {\n    // The loading context gives the loader more information about why this file is being loaded\n    // (eg, from which importer). It also allows the loader to override the location of the loaded\n    // sourcemap/original source, or to override the content in the sourcesContent field if it's\n    // an unmodified source file.\n    const ctx: LoaderContext = {\n      importer,\n      depth,\n      source: sourceFile || '',\n      content: undefined,\n      ignore: undefined,\n    };\n\n    // Use the provided loader callback to retrieve the file's sourcemap.\n    // TODO: We should eventually support async loading of sourcemap files.\n    const sourceMap = loader(ctx.source, ctx);\n\n    const { source, content, ignore } = ctx;\n\n    // If there is a sourcemap, then we need to recurse into it to load its source files.\n    if (sourceMap) return build(new TraceMap(sourceMap, source), loader, source, depth);\n\n    // Else, it's an unmodified source file.\n    // The contents of this unmodified source file can be overridden via the loader context,\n    // allowing it to be explicitly null or a string. If it remains undefined, we fall back to\n    // the importing sourcemap's `sourcesContent` field.\n    const sourceContent =\n      content !== undefined ? content : sourcesContent ? sourcesContent[i] : null;\n    const ignored = ignore !== undefined ? ignore : ignoreList ? ignoreList.includes(i) : false;\n    return OriginalSource(source, sourceContent, ignored);\n  });\n\n  return MapSource(map, children);\n}\n", "import { toDecodedMap, toEncodedMap } from '@jridgewell/gen-mapping';\n\nimport type { GenMapping } from '@jridgewell/gen-mapping';\nimport type { DecodedSourceMap, EncodedSourceMap, Options } from './types';\n\n/**\n * A SourceMap v3 compatible sourcemap, which only includes fields that were\n * provided to it.\n */\nexport default class SourceMap {\n  declare file?: string | null;\n  declare mappings: EncodedSourceMap['mappings'] | DecodedSourceMap['mappings'];\n  declare sourceRoot?: string;\n  declare names: string[];\n  declare sources: (string | null)[];\n  declare sourcesContent?: (string | null)[];\n  declare version: 3;\n  declare ignoreList: number[] | undefined;\n\n  constructor(map: GenMapping, options: Options) {\n    const out = options.decodedMappings ? toDecodedMap(map) : toEncodedMap(map);\n    this.version = out.version; // SourceMap spec says this should be first.\n    this.file = out.file;\n    this.mappings = out.mappings as SourceMap['mappings'];\n    this.names = out.names as SourceMap['names'];\n    this.ignoreList = out.ignoreList as SourceMap['ignoreList'];\n    this.sourceRoot = out.sourceRoot;\n\n    this.sources = out.sources as SourceMap['sources'];\n    if (!options.excludeContent) {\n      this.sourcesContent = out.sourcesContent as SourceMap['sourcesContent'];\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n", "import buildSourceMapTree from './build-source-map-tree';\nimport { traceMappings } from './source-map-tree';\nimport SourceMap from './source-map';\n\nimport type { SourceMapInput, SourceMapLoader, Options } from './types';\nexport type {\n  SourceMapSegment,\n  EncodedSourceMap,\n  EncodedSourceMap as RawSourceMap,\n  DecodedSourceMap,\n  SourceMapInput,\n  SourceMapLoader,\n  LoaderContext,\n  Options,\n} from './types';\nexport type { SourceMap };\n\n/**\n * Traces through all the mappings in the root sourcemap, through the sources\n * (and their sourcemaps), all the way back to the original source location.\n *\n * `loader` will be called every time we encounter a source file. If it returns\n * a sourcemap, we will recurse into that sourcemap to continue the trace. If\n * it returns a falsey value, that source file is treated as an original,\n * unmodified source file.\n *\n * Pass `excludeContent` to exclude any self-containing source file content\n * from the output sourcemap.\n *\n * Pass `decodedMappings` to receive a SourceMap with decoded (instead of\n * VLQ encoded) mappings.\n */\nexport default function remapping(\n  input: SourceMapInput | SourceMapInput[],\n  loader: SourceMapLoader,\n  options?: boolean | Options\n): SourceMap {\n  const opts =\n    typeof options === 'object' ? options : { excludeContent: !!options, decodedMappings: false };\n  const tree = buildSourceMapTree(input, loader);\n  return new SourceMap(traceMappings(tree), opts);\n}\n", "type SourceMap = any;\nimport remapping from \"@ampproject/remapping\";\n\nexport default function mergeSourceMap(\n  inputMap: SourceMap,\n  map: SourceMap,\n  sourceFileName: string,\n): SourceMap {\n  // On win32 machines, the sourceFileName uses backslash paths like\n  // `C:\\foo\\bar.js`. But sourcemaps are always posix paths, so we need to\n  // normalize to regular slashes before we can merge (else we won't find the\n  // source associated with our input map).\n  // This mirrors code done while generating the output map at\n  // https://github.com/babel/babel/blob/5c2fcadc9ae34fd20dd72b1111d5cf50476d700d/packages/babel-generator/src/source-map.ts#L102\n  const source = sourceFileName.replace(/\\\\/g, \"/\");\n\n  // Prevent an infinite recursion if one of the input map's sources has the\n  // same resolved path as the input map. In the case, it would keep find the\n  // input map, then get it's sources which will include a path like the input\n  // map, on and on.\n  let found = false;\n  const result = remapping(rootless(map), (s, ctx) => {\n    if (s === source && !found) {\n      found = true;\n      // We empty the source location, which will prevent the sourcemap from\n      // becoming relative to the input's location. Eg, if we're transforming a\n      // file 'foo/bar.js', and it is a transformation of a `baz.js` file in the\n      // same directory, the expected output is just `baz.js`. Without this step,\n      // it would become `foo/baz.js`.\n      ctx.source = \"\";\n\n      return rootless(inputMap);\n    }\n\n    return null;\n  });\n\n  if (typeof inputMap.sourceRoot === \"string\") {\n    result.sourceRoot = inputMap.sourceRoot;\n  }\n\n  // remapping returns a SourceMap class type, but this breaks code downstream in\n  // @babel/traverse and @babel/types that relies on data being plain objects.\n  // When it encounters the sourcemap type it outputs a \"don't know how to turn\n  // this value into a node\" error. As a result, we are converting the merged\n  // sourcemap to a plain js object.\n  return { ...result };\n}\n\nfunction rootless(map: SourceMap): SourceMap {\n  return {\n    ...map,\n\n    // This is a bit hack. Remapping will create absolute sources in our\n    // sourcemap, but we want to maintain sources relative to the sourceRoot.\n    // We'll re-add the sourceRoot after remapping.\n    sourceRoot: null,\n  };\n}\n", "import type { PluginPasses } from \"../../config/index.ts\";\nimport convertSourceMap from \"convert-source-map\";\nimport type { GeneratorResult } from \"@babel/generator\";\nimport generate from \"@babel/generator\";\n\nimport type File from \"./file.ts\";\nimport mergeSourceMap from \"./merge-map.ts\";\n\nexport default function generateCode(\n  pluginPasses: PluginPasses,\n  file: File,\n): {\n  outputCode: string;\n  outputMap: GeneratorResult[\"map\"] | null;\n} {\n  const { opts, ast, code, inputMap } = file;\n  const { generatorOpts } = opts;\n\n  generatorOpts.inputSourceMap = inputMap?.toObject();\n\n  const results = [];\n  for (const plugins of pluginPasses) {\n    for (const plugin of plugins) {\n      const { generatorOverride } = plugin;\n      if (generatorOverride) {\n        const result = generatorOverride(ast, generatorOpts, code, generate);\n\n        if (result !== undefined) results.push(result);\n      }\n    }\n  }\n\n  let result;\n  if (results.length === 0) {\n    result = generate(ast, generatorOpts, code);\n  } else if (results.length === 1) {\n    result = results[0];\n\n    if (typeof result.then === \"function\") {\n      throw new Error(\n        `You appear to be using an async codegen plugin, ` +\n          `which your current version of Babel does not support. ` +\n          `If you're using a published plugin, ` +\n          `you may need to upgrade your @babel/core version.`,\n      );\n    }\n  } else {\n    throw new Error(\"More than one plugin attempted to override codegen.\");\n  }\n\n  // Decoded maps are faster to merge, so we attempt to get use the decodedMap\n  // first. But to preserve backwards compat with older Generator, we'll fall\n  // back to the encoded map.\n  let { code: outputCode, decodedMap: outputMap = result.map } = result;\n\n  // For backwards compat.\n  if (result.__mergedMap) {\n    /**\n     * @see mergeSourceMap\n     */\n    outputMap = { ...result.map };\n  } else {\n    if (outputMap) {\n      if (inputMap) {\n        // mergeSourceMap returns an encoded map\n        outputMap = mergeSourceMap(\n          inputMap.toObject(),\n          outputMap,\n          generatorOpts.sourceFileName,\n        );\n      } else {\n        // We cannot output a decoded map, so retrieve the encoded form. Because\n        // the decoded form is free, it's fine to prioritize decoded first.\n        outputMap = result.map;\n      }\n    }\n  }\n\n  if (opts.sourceMaps === \"inline\" || opts.sourceMaps === \"both\") {\n    outputCode += \"\\n\" + convertSourceMap.fromObject(outputMap).toComment();\n  }\n\n  if (opts.sourceMaps === \"inline\") {\n    outputMap = null;\n  }\n\n  return { outputCode, outputMap };\n}\n", "import traverse from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\nimport type { GeneratorResult } from \"@babel/generator\";\n\nimport type { Handler } from \"gensync\";\n\nimport type { ResolvedConfig, Plugin, PluginPasses } from \"../config/index.ts\";\n\nimport PluginPass from \"./plugin-pass.ts\";\nimport loadBlockHoistPlugin from \"./block-hoist-plugin.ts\";\nimport normalizeOptions from \"./normalize-opts.ts\";\nimport normalizeFile from \"./normalize-file.ts\";\n\nimport generateCode from \"./file/generate.ts\";\nimport type File from \"./file/file.ts\";\n\nimport { flattenToSet } from \"../config/helpers/deep-array.ts\";\n\nexport type FileResultCallback = {\n  (err: Error, file: null): void;\n  (err: null, file: FileResult | null): void;\n};\n\nexport type FileResult = {\n  metadata: { [key: string]: any };\n  options: { [key: string]: any };\n  ast: t.File | null;\n  code: string | null;\n  map: GeneratorResult[\"map\"] | null;\n  sourceType: \"script\" | \"module\";\n  externalDependencies: Set<string>;\n};\n\nexport function* run(\n  config: ResolvedConfig,\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<FileResult> {\n  const file = yield* normalizeFile(\n    config.passes,\n    normalizeOptions(config),\n    code,\n    ast,\n  );\n\n  const opts = file.opts;\n  try {\n    yield* transformFile(file, config.passes);\n  } catch (e) {\n    e.message = `${opts.filename ?? \"unknown file\"}: ${e.message}`;\n    if (!e.code) {\n      e.code = \"BABEL_TRANSFORM_ERROR\";\n    }\n    throw e;\n  }\n\n  let outputCode, outputMap;\n  try {\n    if (opts.code !== false) {\n      ({ outputCode, outputMap } = generateCode(config.passes, file));\n    }\n  } catch (e) {\n    e.message = `${opts.filename ?? \"unknown file\"}: ${e.message}`;\n    if (!e.code) {\n      e.code = \"BABEL_GENERATE_ERROR\";\n    }\n    throw e;\n  }\n\n  return {\n    metadata: file.metadata,\n    options: opts,\n    ast: opts.ast === true ? file.ast : null,\n    code: outputCode === undefined ? null : outputCode,\n    map: outputMap === undefined ? null : outputMap,\n    sourceType: file.ast.program.sourceType,\n    externalDependencies: flattenToSet(config.externalDependencies),\n  };\n}\n\nfunction* transformFile(file: File, pluginPasses: PluginPasses): Handler<void> {\n  for (const pluginPairs of pluginPasses) {\n    const passPairs: [Plugin, PluginPass][] = [];\n    const passes = [];\n    const visitors = [];\n\n    for (const plugin of pluginPairs.concat([loadBlockHoistPlugin()])) {\n      const pass = new PluginPass(file, plugin.key, plugin.options);\n\n      passPairs.push([plugin, pass]);\n      passes.push(pass);\n      visitors.push(plugin.visitor);\n    }\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.pre;\n      if (fn) {\n        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n        const result = fn.call(pass, file);\n\n        // @ts-expect-error - If we want to support async .pre\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(\n            `You appear to be using an plugin with an async .pre, ` +\n              `which your current version of Babel does not support. ` +\n              `If you're using a published plugin, you may need to upgrade ` +\n              `your @babel/core version.`,\n          );\n        }\n      }\n    }\n\n    // merge all plugin visitors into a single visitor\n    const visitor = traverse.visitors.merge(\n      visitors,\n      passes,\n      file.opts.wrapPluginVisitorMethod,\n    );\n    if (process.env.BABEL_8_BREAKING) {\n      traverse(file.ast.program, visitor, file.scope, null, file.path, true);\n    } else {\n      traverse(file.ast, visitor, file.scope);\n    }\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.post;\n      if (fn) {\n        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n        const result = fn.call(pass, file);\n\n        // @ts-expect-error - If we want to support async .post\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(\n            `You appear to be using an plugin with an async .post, ` +\n              `which your current version of Babel does not support. ` +\n              `If you're using a published plugin, you may need to upgrade ` +\n              `your @babel/core version.`,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction isThenable<T extends PromiseLike<any>>(val: any): val is T {\n  return (\n    !!val &&\n    (typeof val === \"object\" || typeof val === \"function\") &&\n    !!val.then &&\n    typeof val.then === \"function\"\n  );\n}\n", "import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config/index.ts\";\nimport type { InputOptions, ResolvedConfig } from \"./config/index.ts\";\nimport { run } from \"./transformation/index.ts\";\n\nimport type { FileResult, FileResultCallback } from \"./transformation/index.ts\";\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace.ts\";\n\nexport type { FileResult } from \"./transformation/index.ts\";\n\ntype Transform = {\n  (code: string, callback: FileResultCallback): void;\n  (\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileResultCallback,\n  ): void;\n  (code: string, opts?: InputOptions | null): FileResult | null;\n};\n\nconst transformRunner = gensync(function* transform(\n  code: string,\n  opts?: InputOptions,\n): Handler<FileResult | null> {\n  const config: ResolvedConfig | null = yield* loadConfig(opts);\n  if (config === null) return null;\n\n  return yield* run(config, code);\n});\n\nexport const transform: Transform = function transform(\n  code,\n  optsOrCallback?: InputOptions | null | undefined | FileResultCallback,\n  maybeCallback?: FileResultCallback,\n) {\n  let opts: InputOptions | undefined | null;\n  let callback: FileResultCallback | undefined;\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'transform' function expects a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'transform' function will expect a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      // );\n      return beginHiddenCallStack(transformRunner.sync)(code, opts);\n    }\n  }\n\n  beginHiddenCallStack(transformRunner.errback)(code, opts, callback);\n};\n\nexport function transformSync(\n  ...args: Parameters<typeof transformRunner.sync>\n) {\n  return beginHiddenCallStack(transformRunner.sync)(...args);\n}\nexport function transformAsync(\n  ...args: Parameters<typeof transformRunner.async>\n) {\n  return beginHiddenCallStack(transformRunner.async)(...args);\n}\n", "// duplicated from transform-file so we do not have to import anything here\ntype TransformFile = {\n  (filename: string, callback: (error: Error, file: null) => void): void;\n  (\n    filename: string,\n    opts: any,\n    callback: (error: Error, file: null) => void,\n  ): void;\n};\n\nexport const transformFile: TransformFile = function transformFile(\n  filename,\n  opts,\n  callback?: (error: Error, file: null) => void,\n) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n  }\n\n  callback(new Error(\"Transforming files is not supported in browsers\"), null);\n};\n\nexport function transformFileSync(): never {\n  throw new Error(\"Transforming files is not supported in browsers\");\n}\n\nexport function transformFileAsync() {\n  return Promise.reject(\n    new Error(\"Transforming files is not supported in browsers\"),\n  );\n}\n", "import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config/index.ts\";\nimport type { InputOptions, ResolvedConfig } from \"./config/index.ts\";\nimport { run } from \"./transformation/index.ts\";\nimport type * as t from \"@babel/types\";\n\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace.ts\";\n\nimport type { FileResult, FileResultCallback } from \"./transformation/index.ts\";\ntype AstRoot = t.File | t.Program;\n\ntype TransformFromAst = {\n  (ast: AstRoot, code: string, callback: FileResultCallback): void;\n  (\n    ast: AstRoot,\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileResultCallback,\n  ): void;\n  (ast: AstRoot, code: string, opts?: InputOptions | null): FileResult | null;\n};\n\nconst transformFromAstRunner = gensync(function* (\n  ast: AstRoot,\n  code: string,\n  opts: InputOptions | undefined | null,\n): Handler<FileResult | null> {\n  const config: ResolvedConfig | null = yield* loadConfig(opts);\n  if (config === null) return null;\n\n  if (!ast) throw new Error(\"No AST given\");\n\n  return yield* run(config, code, ast);\n});\n\nexport const transformFromAst: TransformFromAst = function transformFromAst(\n  ast,\n  code,\n  optsOrCallback?: InputOptions | null | undefined | FileResultCallback,\n  maybeCallback?: FileResultCallback,\n) {\n  let opts: InputOptions | undefined | null;\n  let callback: FileResultCallback | undefined;\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'transformFromAst' function expects a callback. If you need to call it synchronously, please use 'transformFromAstSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'transformFromAst' function will expect a callback. If you need to call it synchronously, please use 'transformFromAstSync'.\",\n      // );\n      return beginHiddenCallStack(transformFromAstRunner.sync)(ast, code, opts);\n    }\n  }\n\n  beginHiddenCallStack(transformFromAstRunner.errback)(\n    ast,\n    code,\n    opts,\n    callback,\n  );\n};\n\nexport function transformFromAstSync(\n  ...args: Parameters<typeof transformFromAstRunner.sync>\n) {\n  return beginHiddenCallStack(transformFromAstRunner.sync)(...args);\n}\n\nexport function transformFromAstAsync(\n  ...args: Parameters<typeof transformFromAstRunner.async>\n) {\n  return beginHiddenCallStack(transformFromAstRunner.async)(...args);\n}\n", "import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig, { type InputOptions } from \"./config/index.ts\";\nimport parser, { type ParseResult } from \"./parser/index.ts\";\nimport normalizeOptions from \"./transformation/normalize-opts.ts\";\nimport type { ValidatedOptions } from \"./config/validation/options.ts\";\n\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace.ts\";\n\ntype FileParseCallback = {\n  (err: Error, ast: null): void;\n  (err: null, ast: ParseResult | null): void;\n};\n\ntype Parse = {\n  (code: string, callback: FileParseCallback): void;\n  (\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileParseCallback,\n  ): void;\n  (code: string, opts?: InputOptions | null): ParseResult | null;\n};\n\nconst parseRunner = gensync(function* parse(\n  code: string,\n  opts: InputOptions | undefined | null,\n): Handler<ParseResult | null> {\n  const config = yield* loadConfig(opts);\n\n  if (config === null) {\n    return null;\n  }\n\n  return yield* parser(config.passes, normalizeOptions(config), code);\n});\n\nexport const parse: Parse = function parse(\n  code,\n  opts?,\n  callback?: FileParseCallback,\n) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n    opts = undefined as ValidatedOptions;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'parse' function expects a callback. If you need to call it synchronously, please use 'parseSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'parse' function will expect a callback. If you need to call it synchronously, please use 'parseSync'.\",\n      // );\n      return beginHiddenCallStack(parseRunner.sync)(code, opts);\n    }\n  }\n\n  beginHiddenCallStack(parseRunner.errback)(code, opts, callback);\n};\n\nexport function parseSync(...args: Parameters<typeof parseRunner.sync>) {\n  return beginHiddenCallStack(parseRunner.sync)(...args);\n}\nexport function parseAsync(...args: Parameters<typeof parseRunner.async>) {\n  return beginHiddenCallStack(parseRunner.async)(...args);\n}\n", "if (!process.env.IS_PUBLISH && !USE_ESM && process.env.BABEL_8_BREAKING) {\n  throw new Error(\n    \"BABEL_8_BREAKING is only supported in ESM. Please run `make use-esm`.\",\n  );\n}\n\nexport const version = PACKAGE_JSON.version;\n\nexport { default as File } from \"./transformation/file/file.ts\";\nexport type { default as PluginPass } from \"./transformation/plugin-pass.ts\";\nexport { default as buildExternalHelpers } from \"./tools/build-external-helpers.ts\";\nexport { resolvePlugin, resolvePreset } from \"./config/files/index.ts\";\n\nexport { getEnv } from \"./config/helpers/environment.ts\";\n\n// NOTE: Lazy re-exports aren't detected by the Node.js CJS-ESM interop.\n// These are handled by pluginInjectNodeReexportsHints in our babel.config.js\n// so that they can work well.\nexport * as types from \"@babel/types\";\nexport { tokTypes } from \"@babel/parser\";\nexport { default as traverse } from \"@babel/traverse\";\nexport { default as template } from \"@babel/template\";\n\n// rollup-plugin-dts assumes that all re-exported types are also valid values\n// Visitor is only a type, so we need to use this workaround to prevent\n// rollup-plugin-dts from breaking it.\n// TODO: Figure out how to fix this upstream.\nexport type { NodePath, Scope } from \"@babel/traverse\";\nexport type Visitor<S = unknown> = import(\"@babel/traverse\").Visitor<S>;\n\nexport {\n  createConfigItem,\n  createConfigItemSync,\n  createConfigItemAsync,\n} from \"./config/index.ts\";\n\nexport {\n  loadPartialConfig,\n  loadPartialConfigSync,\n  loadPartialConfigAsync,\n  loadOptions,\n  loadOptionsAsync,\n} from \"./config/index.ts\";\nimport { loadOptionsSync } from \"./config/index.ts\";\nexport { loadOptionsSync };\n\nexport type {\n  CallerMetadata,\n  InputOptions,\n  PluginAPI,\n  PluginObject,\n  PresetAPI,\n  PresetObject,\n  ConfigItem,\n} from \"./config/index.ts\";\n\nexport {\n  transform,\n  transformSync,\n  transformAsync,\n  type FileResult,\n} from \"./transform.ts\";\nexport {\n  transformFile,\n  transformFileSync,\n  transformFileAsync,\n} from \"./transform-file.ts\";\nexport {\n  transformFromAst,\n  transformFromAstSync,\n  transformFromAstAsync,\n} from \"./transform-ast.ts\";\nexport { parse, parseSync, parseAsync } from \"./parse.ts\";\n\n/**\n * Recommended set of compilable extensions. Not used in @babel/core directly, but meant as\n * as an easy source for tooling making use of @babel/core.\n */\nexport const DEFAULT_EXTENSIONS = Object.freeze([\n  \".js\",\n  \".jsx\",\n  \".es6\",\n  \".es\",\n  \".mjs\",\n  \".cjs\",\n] as const);\n\nimport Module from \"module\";\nimport * as thisFile from \"./index.ts\";\nif (USE_ESM && !IS_STANDALONE) {\n  // Pass this module to the CJS proxy, so that it can be synchronously accessed.\n  const cjsProxy = Module.createRequire(import.meta.url)(\"../cjs-proxy.cjs\");\n  cjsProxy[\"__ initialize @babel/core cjs proxy __\"] = thisFile;\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // For easier backward-compatibility, provide an API like the one we exposed in Babel 6.\n  // eslint-disable-next-line no-restricted-globals\n  exports.OptionManager = class OptionManager {\n    init(opts: {}) {\n      return loadOptionsSync(opts);\n    }\n  };\n\n  // eslint-disable-next-line no-restricted-globals\n  exports.Plugin = function Plugin(alias: string) {\n    throw new Error(\n      `The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`,\n    );\n  };\n}\n"],
  "mappings": "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,IAAG,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE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aAASE,YACdC,QAKgB,MAChBT,MACe;AACf,cAAO,GAAAZ,cAAAA,SAA4B;QACjCC,MAAM;QACNoB;QACAT;MACF,CAAC;IACH;AACO,aAASU,sBACdC,MACAC,YACAC,WACyB;AACzB,cAAO,GAAAzB,cAAAA,SAAsC;QAC3CC,MAAM;QACNsB;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,kBACdX,QAA6B,MACR;AACrB,cAAO,GAAAf,cAAAA,SAAkC;QACvCC,MAAM;QACNc;MACF,CAAC;IACH;AACO,aAASY,oBAAyC;AACvD,aAAO;QACL1B,MAAM;MACR;IACF;AACO,aAAS2B,iBACdL,MACAX,MACoB;AACpB,cAAO,GAAAZ,cAAAA,SAAiC;QACtCC,MAAM;QACNsB;QACAX;MACF,CAAC;IACH;AACO,aAASiB,iBAAmC;AACjD,aAAO;QACL5B,MAAM;MACR;IACF;AACO,aAAS6B,oBACdC,YACuB;AACvB,cAAO,GAAA/B,cAAAA,SAAoC;QACzCC,MAAM;QACN8B;MACF,CAAC;IACH;AACO,aAASC,KACdC,UACAC,WAAyD,MACzDC,SAA4B,MACpB;AACR,cAAO,GAAAnC,cAAAA,SAAqB;QAC1BC,MAAM;QACNgC,SAAAA;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,eACdhC,MACAC,OACAO,MACkB;AAClB,cAAO,GAAAZ,cAAAA,SAA+B;QACpCC,MAAM;QACNG;QACAC;QACAO;MACF,CAAC;IACH;AACO,aAASyB,aACdC,OAAgE,MAChEf,OAAwC,MACxCgB,SAA0C,MAC1C3B,MACgB;AAChB,cAAO,GAAAZ,cAAAA,SAA6B;QAClCC,MAAM;QACNqC;QACAf;QACAgB;QACA3B;MACF,CAAC;IACH;AACO,aAAS4B,oBACdC,KAAsC,MACtCC,QACA9B,MACA+B,YAAqB,OACrBC,QAAiB,OACM;AACvB,cAAO,GAAA5C,cAAAA,SAAoC;QACzCC,MAAM;QACNwC;QACAC;QACA9B;QACA+B;QACAC;MACF,CAAC;IACH;AACO,aAASC,mBACdJ,KAAsC,MACtCC,QACA9B,MACA+B,YAAqB,OACrBC,QAAiB,OACK;AACtB,cAAO,GAAA5C,cAAAA,SAAmC;QACxCC,MAAM;QACNwC;QACAC;QACA9B;QACA+B;QACAC;MACF,CAAC;IACH;AACO,aAASE,WAAWC,MAA4B;AACrD,cAAO,GAAA/C,cAAAA,SAA2B;QAChCC,MAAM;QACN8C;MACF,CAAC;IACH;AACO,aAASC,YACdzB,MACAC,YACAC,YAAgC,MACjB;AACf,cAAO,GAAAzB,cAAAA,SAA4B;QACjCC,MAAM;QACNsB;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASwB,iBACdlC,OACAH,MACoB;AACpB,cAAO,GAAAZ,cAAAA,SAAiC;QACtCC,MAAM;QACNc;QACAH;MACF,CAAC;IACH;AACO,aAASsC,cAAc1C,QAAgC;AAC5D,cAAO,GAAAR,cAAAA,SAA8B;QACnCC,MAAM;QACNO,OAAAA;MACF,CAAC;IACH;AACO,aAAS2C,eAAe3C,QAAiC;AAC9D,cAAO,GAAAR,cAAAA,SAA+B;QACpCC,MAAM;QACNO,OAAAA;MACF,CAAC;IACH;AACO,aAAS4C,cAA6B;AAC3C,aAAO;QACLnD,MAAM;MACR;IACF;AACO,aAASoD,eAAe7C,QAAkC;AAC/D,cAAO,GAAAR,cAAAA,SAA+B;QACpCC,MAAM;QACNO,OAAAA;MACF,CAAC;IACH;AACO,aAAS8C,cACdC,SACAC,QAAgB,IACC;AACjB,cAAO,GAAAxD,cAAAA,SAA8B;QACnCC,MAAM;QACNsD;QACAC;MACF,CAAC;IACH;AACO,aAASC,kBACdtD,UACAC,MACAC,OACqB;AACrB,cAAO,GAAAL,cAAAA,SAAkC;QACvCC,MAAM;QACNE;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASqD,iBACdC,QACAC,UACAC,WAAoB,OACpBC,WAAgC,MACZ;AACpB,cAAO,GAAA9D,cAAAA,SAAiC;QACtCC,MAAM;QACN0D;QACAC;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,cACd9C,QACAC,YACiB;AACjB,cAAO,GAAAlB,cAAAA,SAA8B;QACnCC,MAAM;QACNgB;QACAE,WAAWD;MACb,CAAC;IACH;AACO,aAASe,QACdrB,MACAC,aAAiC,CAAA,GACjCmD,aAAkC,UAClCC,cAA6C,MAClC;AACX,cAAO,GAAAjE,cAAAA,SAAwB;QAC7BC,MAAM;QACNW;QACAC;QACAmD;QACAC;MACF,CAAC;IACH;AACO,aAASC,iBACdC,YACoB;AACpB,cAAO,GAAAnE,cAAAA,SAAiC;QACtCC,MAAM;QACNkE;MACF,CAAC;IACH;AACO,aAASC,aACdC,OAA6C,UAC7CC,KAMA5B,QACA9B,MACAiD,WAAoB,OACpBlB,YAAqB,OACrBC,QAAiB,OACD;AAChB,cAAO,GAAA5C,cAAAA,SAA6B;QAClCC,MAAM;QACNoE;QACAC;QACA5B;QACA9B;QACAiD;QACAlB;QACAC;MACF,CAAC;IACH;AACO,aAAS2B,eACdD,KAQA9D,QACAqD,WAAoB,OACpBW,YAAqB,OACrBC,aAAwC,MACtB;AAClB,cAAO,GAAAzE,cAAAA,SAA+B;QACpCC,MAAM;QACNqE;QACA9D,OAAAA;QACAqD;QACAW;QACAC;MACF,CAAC;IACH;AACO,aAASC,YAAYC,UAAiC;AAC3D,cAAO,GAAA3E,cAAAA,SAA4B;QACjCC,MAAM;QACN0E;MACF,CAAC;IACH;AACO,aAASC,gBACdD,WAAgC,MACb;AACnB,cAAO,GAAA3E,cAAAA,SAAgC;QACrCC,MAAM;QACN0E;MACF,CAAC;IACH;AACO,aAASE,mBACdC,aACsB;AACtB,cAAO,GAAA9E,cAAAA,SAAmC;QACxCC,MAAM;QACN6E;MACF,CAAC;IACH;AACO,aAASC,wBACdhD,YAC2B;AAC3B,cAAO,GAAA/B,cAAAA,SAAwC;QAC7CC,MAAM;QACN8B;MACF,CAAC;IACH;AACO,aAASiD,WACdzD,OAAwC,MACxCC,YACc;AACd,cAAO,GAAAxB,cAAAA,SAA2B;QAChCC,MAAM;QACNsB;QACAC;MACF,CAAC;IACH;AACO,aAASyD,gBACdC,cACAC,OACmB;AACnB,cAAO,GAAAnF,cAAAA,SAAgC;QACrCC,MAAM;QACNiF;QACAC;MACF,CAAC;IACH;AACO,aAASC,iBAAmC;AACjD,aAAO;QACLnF,MAAM;MACR;IACF;AACO,aAASoF,eAAeV,UAA0C;AACvE,cAAO,GAAA3E,cAAAA,SAA+B;QACpCC,MAAM;QACN0E;MACF,CAAC;IACH;AACO,aAASW,aACdC,OACAC,UAAgC,MAChCC,YAAqC,MACrB;AAChB,cAAO,GAAAzF,cAAAA,SAA6B;QAClCC,MAAM;QACNsF;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,gBACdvF,UACAwE,UACAgB,SAAkB,MACC;AACnB,cAAO,GAAA3F,cAAAA,SAAgC;QACrCC,MAAM;QACNE;QACAwE;QACAgB;MACF,CAAC;IACH;AACO,aAASC,iBACdzF,UACAwE,UACAgB,SAAkB,OACE;AACpB,cAAO,GAAA3F,cAAAA,SAAiC;QACtCC,MAAM;QACNE;QACAwE;QACAgB;MACF,CAAC;IACH;AACO,aAASE,oBACdxB,MACAyB,cACuB;AACvB,cAAO,GAAA9F,cAAAA,SAAoC;QACzCC,MAAM;QACNoE;QACAyB;MACF,CAAC;IACH;AACO,aAASC,mBACdtD,IACAH,OAA4B,MACN;AACtB,cAAO,GAAAtC,cAAAA,SAAmC;QACxCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAAS0D,eACdzE,MACAX,MACkB;AAClB,cAAO,GAAAZ,cAAAA,SAA+B;QACpCC,MAAM;QACNsB;QACAX;MACF,CAAC;IACH;AACO,aAASqF,cACdtC,QACA/C,MACiB;AACjB,cAAO,GAAAZ,cAAAA,SAA8B;QACnCC,MAAM;QACN0D;QACA/C;MACF,CAAC;IACH;AACO,aAASsF,kBACd9F,MASAC,OACqB;AACrB,cAAO,GAAAL,cAAAA,SAAkC;QACvCC,MAAM;QACNG;QACAC;MACF,CAAC;IACH;AACO,aAAS8F,aACdpG,UACgB;AAChB,cAAO,GAAAC,cAAAA,SAA6B;QAClCC,MAAM;QACNF;MACF,CAAC;IACH;AACO,aAASqG,wBACd1D,QACA9B,MACAgC,QAAiB,OACU;AAC3B,cAAO,GAAA5C,cAAAA,SAAwC;QAC7CC,MAAM;QACNyC;QACA9B;QACAgC;QACAb,YAAY;MACd,CAAC;IACH;AACO,aAASsE,UACdzF,MAUa;AACb,cAAO,GAAAZ,cAAAA,SAA0B;QAC/BC,MAAM;QACNW;MACF,CAAC;IACH;AACO,aAAS0F,gBACd7D,KAAsC,MACtC8D,aAA8C,MAC9C3F,MACA6D,aAAwC,MACrB;AACnB,cAAO,GAAAzE,cAAAA,SAAgC;QACrCC,MAAM;QACNwC;QACA8D;QACA3F;QACA6D;MACF,CAAC;IACH;AACO,aAAS+B,iBACd/D,KAAsC,MACtC8D,aAA8C,MAC9C3F,MACA6D,aAAwC,MACpB;AACpB,cAAO,GAAAzE,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACA8D;QACA3F;QACA6D;MACF,CAAC;IACH;AACO,aAASgC,qBACdC,QACwB;AACxB,cAAO,GAAA1G,cAAAA,SAAqC;QAC1CC,MAAM;QACNyG;MACF,CAAC;IACH;AACO,aAASC,yBACdC,aAK4B;AAC5B,cAAO,GAAA5G,cAAAA,SAAyC;QAC9CC,MAAM;QACN2G;MACF,CAAC;IACH;AACO,aAASC,uBACdD,cAAoC,MACpCE,aAEI,CAAA,GACJJ,SAAiC,MACP;AAC1B,cAAO,GAAA1G,cAAAA,SAAuC;QAC5CC,MAAM;QACN2G;QACAE;QACAJ;MACF,CAAC;IACH;AACO,aAASK,gBACdC,OACAC,UACmB;AACnB,cAAO,GAAAjH,cAAAA,SAAgC;QACrCC,MAAM;QACN+G;QACAC;MACF,CAAC;IACH;AACO,aAASC,eACd9G,MACAC,OACAO,MACAuG,SAAkB,OACA;AAClB,cAAO,GAAAnH,cAAAA,SAA+B;QACpCC,MAAM;QACNG;QACAC;QACAO;QACAwG,OAAOD;MACT,CAAC;IACH;AACO,aAASE,kBACdP,YAGAJ,QACqB;AACrB,cAAO,GAAA1G,cAAAA,SAAkC;QACvCC,MAAM;QACN6G;QACAJ;MACF,CAAC;IACH;AACO,aAASY,uBACdN,OAC0B;AAC1B,cAAO,GAAAhH,cAAAA,SAAuC;QAC5CC,MAAM;QACN+G;MACF,CAAC;IACH;AACO,aAASO,yBACdP,OAC4B;AAC5B,cAAO,GAAAhH,cAAAA,SAAyC;QAC9CC,MAAM;QACN+G;MACF,CAAC;IACH;AACO,aAASQ,gBACdR,OACAS,UACmB;AACnB,cAAO,GAAAzH,cAAAA,SAAgC;QACrCC,MAAM;QACN+G;QACAS;MACF,CAAC;IACH;AACO,aAASC,iBACdhB,QACAiB,UAA+B,MACX;AACpB,cAAO,GAAA3H,cAAAA,SAAiC;QACtCC,MAAM;QACNyG;QACAiB;MACF,CAAC;IACH;AACO,aAASC,aACdC,MACAjE,UACgB;AAChB,cAAO,GAAA5D,cAAAA,SAA6B;QAClCC,MAAM;QACN4H;QACAjE;MACF,CAAC;IACH;AACO,aAASkE,YACdzD,OAA6D,UAC7DC,KAMA5B,QAGA9B,MACAiD,WAAoB,OACpBkE,UAAmB,OACnBpF,YAAqB,OACrBC,QAAiB,OACF;AACf,cAAO,GAAA5C,cAAAA,SAA4B;QACjCC,MAAM;QACNoE;QACAC;QACA5B;QACA9B;QACAiD;QACAmE,QAAQD;QACRpF;QACAC;MACF,CAAC;IACH;AACO,aAASqF,cACd9D,YACiB;AACjB,cAAO,GAAAnE,cAAAA,SAA8B;QACnCC,MAAM;QACNkE;MACF,CAAC;IACH;AACO,aAAS+D,cAAcvD,UAAyC;AACrE,cAAO,GAAA3E,cAAAA,SAA8B;QACnCC,MAAM;QACN0E;MACF,CAAC;IACH;AACA,aAASwD,SAAkB;AACzB,aAAO;QACLlI,MAAM;MACR;IACF;AAEO,aAASmI,yBACdC,KACAC,OAC4B;AAC5B,cAAO,GAAAtI,cAAAA,SAAyC;QAC9CC,MAAM;QACNoI;QACAC;MACF,CAAC;IACH;AACO,aAASC,gBACd/H,QACAgI,OAAgB,OACG;AACnB,cAAO,GAAAxI,cAAAA,SAAgC;QACrCC,MAAM;QACNO,OAAAA;QACAgI;MACF,CAAC;IACH;AACO,aAASC,gBACdC,QACA5D,aACmB;AACnB,cAAO,GAAA9E,cAAAA,SAAgC;QACrCC,MAAM;QACNyI;QACA5D;MACF,CAAC;IACH;AACO,aAAS6D,gBACdhE,WAAgC,MAChCiE,WAAoB,OACD;AACnB,cAAO,GAAA5I,cAAAA,SAAgC;QACrCC,MAAM;QACN0E;QACAiE;MACF,CAAC;IACH;AACO,aAA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eACdH,SACkB;AAClB,cAAO,GAAApO,cAAAA,SAA+B;QACpCC,MAAM;QACNmO;QACAC,cAAc;QACdC,mBAAmB;MACrB,CAAC;IACH;AACO,aAASE,eACdJ,SACkB;AAClB,cAAO,GAAApO,cAAAA,SAA+B;QACpCC,MAAM;QACNmO;QACAC,cAAc;QACdC,mBAAmB;MACrB,CAAC;IACH;AACO,aAASG,eACdL,SACkB;AAClB,cAAO,GAAApO,cAAAA,SAA+B;QACpCC,MAAM;QACNmO;QACAE,mBAAmB;MACrB,CAAC;IACH;AACO,aAASI,kBAAkBjM,IAAuC;AACvE,cAAO,GAAAzC,cAAAA,SAAkC;QACvCC,MAAM;QACNwC;QACAH,MAAM;MACR,CAAC;IACH;AACO,aAASqM,iBACdlM,IACAH,MACoB;AACpB,cAAO,GAAAtC,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAASsM,iBACdnM,IACAH,MACoB;AACpB,cAAO,GAAAtC,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAASuM,oBAAoBpM,IAAyC;AAC3E,cAAO,GAAAzC,cAAAA,SAAoC;QACzCC,MAAM;QACNwC;MACF,CAAC;IACH;AACO,aAASqM,kBACdC,YACAC,WACqB;AACrB,cAAO,GAAAhP,cAAAA,SAAkC;QACvCC,MAAM;QACN8O;QACAC;MACF,CAAC;IACH;AACO,aAASC,0BACdF,YACAC,WAC6B;AAC7B,cAAO,GAAAhP,cAAAA,SAA0C;QAC/CC,MAAM;QACN8O;QACAC;QACAlL,UAAU;MACZ,CAAC;IACH;AACO,aAASoL,aACdnM,MACAvC,SAKW,MACK;AAChB,cAAO,GAAAR,cAAAA,SAA6B;QAClCC,MAAM;QACN8C;QACAvC,OAAAA;MACF,CAAC;IACH;AAEO,aAAS2O,kBACdpM,MACqB;AACrB,cAAO,GAAA/C,cAAAA,SAAkC;QACvCC,MAAM;QACN8C;MACF,CAAC;IACH;AAEO,aAASqM,WACdC,gBACAC,iBAAyD,MACzDC,UAOAC,cAA8B,MAChB;AACd,cAAO,GAAAxP,c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G,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,IAAG,KAAI,MAAK,KAAI,MAAK,MAAK,GAAE,IAAI;AAEv+C,QAAMC,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,MAAK,GAAE,GAAE,IAAG,OAAM,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,OAAM,GAAE,MAAK,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAA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,GAAE,MAAK,GAAE,MAAK,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,KAAI,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,MAAK,OAAM,MAAK,QAAO,MAAK,QAAO,MAAK,QAAO,MAAK,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,KAAI,IAAG,MAAK,IAAG,MAAK,IAAG,MAAK,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,QAAO,IAAG,aAAY,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,WAAU,IAAG,OAAM,IAAG,KAAI,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,OAAM,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,MAAK,IAAG,WAAU,IAAG,aAAY,IAAG,QAAO,IAAG,QAAO,IAAG,QAAO,IAAG,WAAU,IAAG,WAAU,IAAG,WAAU,IAAG,WAAU,IAAG,WAAU,MAAK,WAAU,MAAK,OAAM,MAAK,aAAY,MAAK,QAAO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G,WAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,GAAE,YAAW,MAAK,YAAW,IAAG,YAAW,IAAG,YAAW,GAAE,YAAW,MAAK,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,WAAW,IAAG,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,IAAG,WAAW,IAAG,WAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,UAAW,IAAG,WAAW,IAAG,WAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,YAAW,IAAG,WAAW,IAAG,YAAW,IAAG,UAAW,MAAK,WAAW,MAAK,WAAW,MAAK,WAAW,MAAK,YAAW,MAAK,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,WAAW,IAAG,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,WAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,YAAW,GAAE,UAAW,GAAE,UAAW,GAAE,WAAW,GAAE,WAAW,GAAE,YAAW,GAAE,YAAW,GAAE,UAAU,GAAE,GAAE,EAAC,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,MAAK,KAAI,IAAG,KAAI,IAAG,KAAI,MAAK,IAAG,EAAC,GAAE,GAAE,EAAC,GAAE,EAAC,GAAE,GAA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",
  "names": ["shallowEqual", "actual", "expected", "keys", "Object", "key", "warnings", "Set", "deprecationWarning", "oldName", "newName", "prefix", "has", "add", "internal", "trace", "captureShortStackTrace", "console", "warn", "skip", "length", "stackTraceLimit", "prepareStackTrace", "Error", "stackTrace", "err", "stack", "shortStackTrace", "slice", "test", "getFileName", "map", "frame", "join", "_shallowEqual", "require", "_deprecationWarning", "isArrayExpression", "node", "opts", "type", "shallowEqual", "isAssignmentExpression", "isBinaryExpression", "isInterpreterDirective", "isDirective", "isDirectiveLiteral", "isBlockStatement", "isBreakStatement", "isCallExpression", "isCatchClause", "isConditionalExpression", "isContinueStatement", "isDebuggerStatement", "isDoWhileStatement", "isEmptyStatement", "isExpressionStatement", "isFile", "isForInStatement", "isForStatement", "isFunctionDeclaration", "isFunctionExpression", "isIdentifier", "isIfStatement", "isLabeledStatement", "isStringLiteral", "isNumericLiteral", "isNullLiteral", "isBooleanLiteral", "isRegExpLiteral", "isLogicalExpression", "isMemberExpression", "isNewExpression", "isProgram", "isObjectExpression", "isObjectMethod", "isObjectProperty", "isRestElement", "isReturnStatement", "isSequenceExpression", "isParenthesizedExpression", "isSwitchCase", "isSwitchStatement", "isThisExpression", "isThrowStatement", "isTryStatement", "isUnaryExpression", "isUpdateExpression", "isVariableDeclaration", "isVariableDeclarator", "isWhileStatement", "isWithStatement", "isAssignmentPattern", "isArrayPattern", "isArrowFunctionExpression", "isClassBody", "isClassExpression", "isClassDeclaration", "isExportAllDeclaration", "isExportDefaultDeclaration", "isExportNamedDeclaration", "isExportSpecifier", "isForOfStatement", "isImportDeclaration", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isImportSpecifier", "isImportExpression", "isMetaProperty", "isClassMethod", "isObjectPattern", "isSpreadElement", "isSuper", "isTaggedTemplateExpression", "isTemplateElement", "isTemplateLiteral", "isYieldExpression", "isAwaitExpression", "isImport", "isBigIntLiteral", "isExportNamespaceSpecifier", "isOptionalMemberExpression", "isOptionalCallExpression", "isClassProperty", "isClassAccessorProperty", "isClassPrivateProperty", "isClassPrivateMethod", "isPrivateName", "isStaticBlock", "isAnyTypeAnnotation", "isArrayTypeAnnotation", "isBooleanTypeAnnotation", "isBooleanLiteralTypeAnnotation", "isNullLiteralTypeAnnotation", "isClassImplements", "isDeclareClass", "isDeclareFunction", "isDeclareInterface", "isDeclareModule", "isDeclareModuleExports", "isDeclareTypeAlias", "isDeclareOpaqueType", "isDeclareVariable", "isDeclareExportDeclaration", "isDeclareExportAllDeclaration", "isDeclaredPredicate", "isExistsTypeAnnotation", "isFunctionTypeAnnotation", "isFunctionTypeParam", "isGenericTypeAnnotation", "isInferredPredicate", "isInterfaceExtends", "isInterfaceDeclaration", "isInterfaceTypeAnnotation", "isIntersectionTypeAnnotation", "isMixedTypeAnnotation", "isEmptyTypeAnnotation", "isNullableTypeAnnotation", "isNumberLiteralTypeAnnotation", "isNumberTypeAnnotation", "isObjectTypeAnnotation", "isObjectTypeInternalSlot", "isObjectTypeCallProperty", "isObjectTypeIndexer", "isObjectTypeProperty", "isObjectTypeSpreadProperty", "isOpaqueType", "isQualifiedTypeIdentifier", "isStringLiteralTypeAnnotation", "isStringTypeAnnotation", "isSymbolTypeAnnotation", "isThisTypeAnnotation", "isTupleTypeAnnotation", "isTypeofTypeAnnotation", "isTypeAlias", "isTypeAnnotation", "isTypeCastExpression", "isTypeParameter", "isTypeParameterDeclaration", "isTypeParameterInstantiation", "isUnionTypeAnnotation", "isVariance", "isVoidTypeAnnotation", "isEnumDeclaration", "isEnumBooleanBody", "isEnumNumberBody", "isEnumStringBody", "isEnumSymbolBody", "isEnumBooleanMember", "isEnumNumberMember", "isEnumStringMember", "isEnumDefaultedMember", "isIndexedAccessType", "isOptionalIndexedAccessType", "isJSXAttribute", "isJSXClosingElement", "isJSXElement", "isJSXEmptyExpression", "isJSXExpressionContainer", "isJSXSpreadChild", "isJSXIdentifier", "isJSXMemberExpression", "isJSXNamespacedName", "isJSXOpeningElement", "isJSXSpreadAttribute", "isJSXText", "isJSXFragment", "isJSXOpeningFragment", "isJSXClosingFragment", "isNoop", "isPlaceholder", "isV8IntrinsicIdentifier", "isArgumentPlaceholder", "isBindExpression", "isImportAttribute", "isDecorator", "isDoExpression", "isExportDefaultSpecifier", "isRecordExpression", "isTupleExpression", "isDecimalLiteral", "isModuleExpression", "isTopicReference", "isPipelineTopicExpression", "isPipelineBareFunction", "isPipelinePrimaryTopicReference", "isTSParameterProperty", "isTSDeclareFunction", "isTSDeclareMethod", "isTSQualifiedName", "isTSCallSignatureDeclaration", "isTSConstructSignatureDeclaration", "isTSPropertySignature", "isTSMethodSignature", "isTSIndexSignature", "isTSAnyKeyword", "isTSBooleanKeyword", "isTSBigIntKeyword", "isTSIntrinsicKeyword", "isTSNeverKeyword", "isTSNullKeyword", "isTSNumberKeyword", "isTSObjectKeyword", "isTSStringKeyword", "isTSSymbolKeyword", "isTSUndefinedKeyword", "isTSUnknownKeyword", "isTSVoidKeyword", "isTSThisType", "isTSFunctionType", "isTSConstructorType", "isTSTypeReference", "isTSTypePredicate", "isTSTypeQuery", "isTSTypeLiteral", "isTSArrayType", "isTSTupleType", "isTSOptionalType", "isTSRestType", "isTSNamedTupleMember", "isTSUnionType", "isTSIntersectionType", "isTSConditionalType", "isTSInferType", "isTSParenthesizedType", "isTSTypeOperator", "isTSIndexedAccessType", "isTSMappedType", "isTSLiteralType", "isTSExpressionWithTypeArguments", "isTSInterfaceDeclaration", "isTSInterfaceBody", "isTSTypeAliasDeclaration", "isTSInstantiationExpression", "isTSAsExpression", "isTSSatisfiesExpression", "isTSTypeAssertion", "isTSEnumDeclaration", "isTSEnumMember", "isTSModuleDeclaration", "isTSModuleBlock", "isTSImportType", "isTSImportEqualsDeclaration", "isTSExternalModuleReference", "isTSNonNullExpression", "isTSExportAssignment", "isTSNamespaceExportDeclaration", "isTSTypeAnnotation", "isTSTypeParameterInstantiation", "isTSTypeParameterDeclaration", "isTSTypeParameter", "isStandardized", "expectedNode", "isExpression", "isBinary", "isScopable", "isBlockParent", "isBlock", "isStatement", "isTerminatorless", "isCompletionStatement", "isConditional", "isLoop", "isWhile", "isExpressionWrapper", "isFor", "isForXStatement", "isFunction", "isFunctionParent", "isPureish", "isDeclaration", "isPatternLike", "isLVal", "isTSEntityName", "isLiteral", "isImmutable", "isUserWhitespacable", "isMethod", "isObjectMember", "isProperty", "isUnaryLike", "isPattern", "isClass", "isImportOrExportDeclaration", "isExportDeclaration", "isModuleSpecifier", "isAccessor", "isPrivate", "isFlow", "isFlowType", "isFlowBaseAnnotation", "isFlowDeclaration", "isFlowPredicate", "isEnumBody", "isEnumMember", "isJSX", "isMiscellaneous", "isTypeScript", "isTSTypeElement", "isTSType", "isTSBaseType", "isNumberLiteral", "deprecationWarning", "isRegexLiteral", "isRestProperty", "isSpreadProperty", "isModuleDeclaration", "_index", "require", "matchesPattern", "member", "match", "allowPartial", "isMemberExpression", "parts", "Array", "isArray", "split", "nodes", "node", "object", "push", "property", "length", "i", "j", "value", "isIdentifier", "name", "isStringLiteral", "isThisExpression", "_matchesPattern", "require", "buildMatchMemberExpression", "match", "allowPartial", "parts", "split", "member", "matchesPattern", "_buildMatchMemberExpression", "require", "isReactComponent", "buildMatchMemberExpression", "_default", "exports", "default", "isCompatTag", "tagName", "test", "_index", "require", "isType", "nodeType", "targetType", "ALIAS_KEYS", "aliases", "FLIPPED_ALIAS_KEYS", "alias", "_index", "require", "isPlaceholderType", "placeholderType", "targetType", "aliases", "PLACEHOLDERS_ALIAS", "alias", "_shallowEqual", "require", "_isType", "_isPlaceholderType", "_index", "is", "type", "node", "opts", "matches", "isType", "FLIPPED_ALIAS_KEYS", "isPlaceholderType", "expectedNode", "shallowEqual", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "RegExp", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "code", "set", "pos", "i", "length", "isIdentifierStart", "test", "String", "fromCharCode", "isIdentifierChar", "isIdentifierName", "name", "isFirst", "cp", "charCodeAt", "trail", "reservedWords", "keyword", "strict", "strictBind", "keywords", "Set", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "_identifier", "require", "_keyword", "_helperValidatorIdentifier", "require", "isValidIdentifier", "name", "reserved", "isKeyword", "isStrictReservedWord", "isIdentifierName", "isDigit", "code", "forbiddenNumericSeparatorSiblings", "decBinOct", "Set", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "type", "input", "pos", "lineStart", "curLine", "errors", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "length", "unterminated", "slice", "charCodeAt", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "String", "fromCharCode", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "octalStr", "octal", "parseInt", "next", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "radix", "allowNumSeparator", "bailOnError", "start", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "i", "e", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "has", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "indexOf", "invalidCodePoint", "STATEMENT_OR_BLOCK_KEYS", "exports", "FLATTENABLE_KEYS", "FOR_INIT_KEYS", "COMMENT_KEYS", "LOGICAL_OPERATORS", "UPDATE_OPERATORS", "BOOLEAN_NUMBER_BINARY_OPERATORS", "EQUALITY_BINARY_OPERATORS", "COMPARISON_BINARY_OPERATORS", "BOOLEAN_BINARY_OPERATORS", "NUMBER_BINARY_OPERATORS", "BINARY_OPERATORS", "ASSIGNMENT_OPERATORS", "map", "op", "BOOLEAN_UNARY_OPERATORS", "NUMBER_UNARY_OPERATORS", "STRING_UNARY_OPERATORS", "UNARY_OPERATORS", "INHERIT_KEYS", "optional", "force", "BLOCK_SCOPED_SYMBOL", "Symbol", "for", "NOT_LOCAL_BINDING", "_is", "require", "_validate", "VISITOR_KEYS", "exports", "ALIAS_KEYS", "FLIPPED_ALIAS_KEYS", "NODE_FIELDS", "BUILDER_KEYS", "DEPRECATED_KEYS", "NODE_PARENT_VALIDATIONS", "getType", "val", "Array", "isArray", "validate", "typeIs", "typeName", "assertNodeType", "validateType", "validateOptional", "optional", "validateOptionalType", "arrayOf", "elementType", "chain", "assertValueType", "assertEach", "arrayOfType", "validateArrayOfType", "callback", "validator", "node", "key", "i", "length", "subkey", "v", "process", "env", "BABEL_TYPES_8_BREAKING", "validateChild", "each", "assertOneOf", "values", "indexOf", "TypeError", "JSON", "stringify", "oneOf", "types", "type", "is", "oneOfNodeTypes", "assertNodeOrValueType", "oneOfNodeOrValueTypes", "valid", "assertShape", "shape", "errors", "property", "Object", "keys", "validateField", "error", "push", "message", "join", "shapeOf", "assertOptionalChainStart", "_current", "current", "callee", "object", "fns", "args", "fn", "chainOf", "Error", "validTypeOpts", "validFieldKeys", "store", "defineAliasedType", "aliases", "opts", "defined", "_store$opts$inherits$", "_defined", "inherits", "slice", "additional", "filter", "a", "includes", "unshift", "defineType", "fields", "getOwnPropertyNames", "field", "def", "default", "deprecated", "visitor", "builder", "k", "deprecatedAlias", "concat", "undefined", "forEach", "alias", "_is", "require", "_isValidIdentifier", "_helperValidatorIdentifier", "_helperStringParser", "_index", "_utils", "defineType", "defineAliasedType", "fields", "elements", "validate", "chain", "assertValueType", "assertEach", "assertNodeOrValueType", "default", "process", "env", "BABEL_TYPES_8_BREAKING", "undefined", "visitor", "aliases", "operator", "identifier", "assertOneOf", "ASSIGNMENT_OPERATORS", "pattern", "node", "key", "val", "validator", "is", "left", "assertNodeType", "right", "builder", "BINARY_OPERATORS", "expression", "inOp", "Object", "assign", "oneOfNodeTypes", "value", "directives", "body", "label", "optional", "callee", "arguments", "typeArguments", "typeParameters", "param", "test", "consequent", "alternate", "program", "comments", "each", "tokens", "type", "init", "update", "functionCommon", "params", "generator", "async", "exports", "functionTypeAnnotationCommon", "returnType", "functionDeclarationCommon", "declare", "id", "predicate", "parent", "inherits", "patternLikeCommon", "typeAnnotation", "decorators", "name", "isValidIdentifier", "TypeError", "match", "exec", "parentKey", "nonComp", "computed", "imported", "meta", "isKeyword", "isReservedWord", "deprecatedAlias", "Number", "isFinite", "error", "Error", "flags", "invalid", "LOGICAL_OPERATORS", "object", "property", "normal", "sourceType", "interpreter", "properties", "kind", "shorthand", "argument", "listKey", "index", "length", "expressions", "discriminant", "cases", "block", "handler", "finalizer", "prefix", "UNARY_OPERATORS", "UPDATE_OPERATORS", "declarations", "without", "definite", "superClass", "superTypeParameters", "implements", "mixins", "abstract", "source", "exportKind", "validateOptional", "attributes", "assertions", "declaration", "specifiers", "sourced", "sourceless", "local", "exported", "lval", "await", "module", "phase", "importKind", "options", "classMethodOrPropertyCommon", "accessibility", "static", "override", "classMethodOrDeclareMethodCommon", "access", "tag", "quasi", "assertShape", "raw", "cooked", "templateElementCookedValidator", "unterminatedCalled", "str", "firstInvalidLoc", "readStringContents", "unterminated", "strictNumericEscape", "invalidEscapeSequence", "numericSeparatorInEscapeSequence", "unexpectedNumericSeparator", "invalidDigit", "invalidCodePoint", "tail", "quasis", "delegate", "assertOptionalChainStart", "readonly", "variance", "_utils", "require", "defineType", "defineAliasedType", "defineInterfaceishType", "name", "isDeclareClass", "builder", "visitor", "aliases", "fields", "Object", "assign", "id", "validateType", "typeParameters", "validateOptionalType", "extends", "validateOptional", "arrayOfType", "mixins", "implements", "body", "elementType", "value", "validate", "assertValueType", "predicate", "kind", "assertOneOf", "typeAnnotation", "right", "supertype", "impltype", "declaration", "specifiers", "source", "default", "exportKind", "params", "rest", "this", "returnType", "optional", "types", "properties", "indexers", "callProperties", "internalSlots", "exact", "inexact", "static", "method", "key", "variance", "proto", "argument", "qualification", "expression", "bound", "explicitType", "members", "validateArrayOfType", "hasUnknownMembers", "init", "objectType", "indexType", "_utils", "require", "defineType", "defineAliasedType", "visitor", "aliases", "fields", "name", "validate", "assertNodeType", "value", "optional", "builder", "Object", "assign", "openingElement", "closingElement", "children", "chain", "assertValueType", "assertEach", "selfClosing", "expression", "object", "property", "namespace", "default", "attributes", "typeParameters", "argument", "openingFragment", "closingFragment", "_utils", "require", "PLACEHOLDERS", "exports", "PLACEHOLDERS_ALIAS", "Declaration", "Pattern", "type", "alias", "ALIAS_KEYS", "length", "PLACEHOLDERS_FLIPPED_ALIAS", "Object", "keys", "forEach", "hasOwnProperty", "call", "push", "_utils", "require", "_placeholders", "defineType", "defineAliasedType", "visitor", "builder", "fields", "name", "validate", "assertNodeType", "expectedNode", "assertOneOf", "PLACEHOLDERS", "assertValueType", "_utils", "require", "defineType", "visitor", "aliases", "fields", "process", "env", "BABEL_TYPES_8_BREAKING", "object", "validate", "Object", "assign", "oneOfNodeTypes", "callee", "assertNodeType", "key", "value", "expression", "builder", "body", "async", "assertValueType", "default", "exported", "properties", "chain", "assertEach", "elements", "_utils", "require", "_core", "_is", "defineType", "defineAliasedType", "bool", "assertValueType", "tSFunctionTypeAnnotationCommon", "returnType", "validate", "assertNodeType", "optional", "typeParameters", "aliases", "visitor", "fields", "accessibility", "assertOneOf", "readonly", "parameter", "override", "decorators", "chain", "assertEach", "Object", "assign", "functionDeclarationCommon", "classMethodOrDeclareMethodCommon", "left", "validateType", "right", "signatureDeclarationCommon", "validateOptionalType", "validateArrayOfType", "callConstructSignatureDeclaration", "namedTypeElementCommon", "key", "computed", "default", "validateOptional", "typeAnnotation", "kind", "static", "parameters", "tsKeywordTypes", "type", "fnOrCtrBase", "abstract", "typeName", "builder", "parameterName", "asserts", "exprName", "members", "elementType", "elementTypes", "label", "unionOrIntersection", "types", "checkType", "extendsType", "trueType", "falseType", "typeParameter", "operator", "objectType", "indexType", "nameType", "literal", "unaryExpression", "unaryOperator", "validator", "parent", "node", "is", "argument", "oneOfNodeTypes", "expression", "declare", "id", "extends", "arrayOfType", "body", "TSTypeExpression", "const", "initializer", "global", "qualifier", "options", "isExport", "moduleReference", "importKind", "params", "name", "in", "out", "constraint", "DEPRECATED_ALIASES", "exports", "ModuleDeclaration", "_toFastProperties", "require", "_utils", "_placeholders", "_deprecatedAliases", "Object", "keys", "DEPRECATED_ALIASES", "forEach", "deprecatedAlias", "FLIPPED_ALIAS_KEYS", "toFastProperties", "VISITOR_KEYS", "ALIAS_KEYS", "NODE_FIELDS", "BUILDER_KEYS", "DEPRECATED_KEYS", "PLACEHOLDERS_ALIAS", "PLACEHOLDERS_FLIPPED_ALIAS", "TYPES", "exports", "concat", "_index", "require", "validate", "node", "key", "val", "fields", "NODE_FIELDS", "type", "field", "validateField", "validateChild", "optional", "NODE_PARENT_VALIDATIONS", "_validate", "require", "_index", "validateNode", "node", "keys", "BUILDER_KEYS", "type", "key", "validate", "_validateNode", "require", "_deprecationWarning", "arrayExpression", "elements", "validateNode", "type", "assignmentExpression", "operator", "left", "right", "binaryExpression", "interpreterDirective", "value", "directive", "directiveLiteral", "blockStatement", "body", "directives", "breakStatement", "label", "callExpression", "callee", "_arguments", "arguments", "catchClause", "param", "conditionalExpression", "test", "consequent", "alternate", "continueStatement", "debuggerStatement", "doWhileStatement", "emptyStatement", "expressionStatement", "expression", "file", "program", "comments", "tokens", "forInStatement", "forStatement", "init", "update", "functionDeclaration", "id", "params", "generator", "async", "functionExpression", "identifier", "name", "ifStatement", "labeledStatement", "stringLiteral", "numericLiteral", "nullLiteral", "booleanLiteral", "regExpLiteral", "pattern", "flags", "logicalExpression", "memberExpression", "object", "property", "computed", "optional", "newExpression", "sourceType", "interpreter", "objectExpression", "properties", "objectMethod", "kind", "key", "objectProperty", "shorthand", "decorators", "restElement", "argument", "returnStatement", "sequenceExpression", "expressions", "parenthesizedExpression", "switchCase", "switchStatement", "discriminant", "cases", "thisExpression", "throwStatement", "tryStatement", "block", "handler", "finalizer", "unaryExpression", "prefix", "updateExpression", "variableDeclaration", "declarations", "variableDeclarator", "whileStatement", "withStatement", "assignmentPattern", "arrayPattern", "arrowFunctionExpression", "classBody", "classExpression", "superClass", "classDeclaration", "exportAllDeclaration", "source", "exportDefaultDeclaration", "declaration", "exportNamedDeclaration", "specifiers", "exportSpecifier", "local", "exported", "forOfStatement", "_await", "await", "importDeclaration", "importDefaultSpecifier", "importNamespaceSpecifier", "importSpecifier", "imported", "importExpression", "options", "metaProperty", "meta", "classMethod", "_static", "static", "objectPattern", "spreadElement", "_super", "taggedTemplateExpression", "tag", "quasi", "templateElement", "tail", "templateLiteral", "quasis", "yieldExpression", "delegate", "awaitExpression", "_import", "bigIntLiteral", "exportNamespaceSpecifier", "optionalMemberExpression", "optionalCallExpression", "classProperty", "typeAnnotation", "classAccessorProperty", "classPrivateProperty", "classPrivateMethod", "privateName", "staticBlock", "anyTypeAnnotation", "arrayTypeAnnotation", "elementType", "booleanTypeAnnotation", "booleanLiteralTypeAnnotation", "nullLiteralTypeAnnotation", "classImplements", "typeParameters", "declareClass", "_extends", "extends", "declareFunction", "declareInterface", "declareModule", "declareModuleExports", "declareTypeAlias", "declareOpaqueType", "supertype", "declareVariable", "declareExportDeclaration", "declareExportAllDeclaration", "declaredPredicate", "existsTypeAnnotation", "functionTypeAnnotation", "rest", "returnType", "functionTypeParam", "genericTypeAnnotation", "inferredPredicate", "interfaceExtends", "interfaceDeclaration", "interfaceTypeAnnotation", "intersectionTypeAnnotation", "types", "mixedTypeAnnotation", "emptyTypeAnnotation", "nullableTypeAnnotation", "numberLiteralTypeAnnotation", "numberTypeAnnotation", "objectTypeAnnotation", "indexers", "callProperties", "internalSlots", "exact", "objectTypeInternalSlot", "method", "objectTypeCallProperty", "objectTypeIndexer", "variance", "objectTypeProperty", "proto", "objectTypeSpreadProperty", "opaqueType", "impltype", "qualifiedTypeIdentifier", "qualification", "stringLiteralTypeAnnotation", "stringTypeAnnotation", "symbolTypeAnnotation", "thisTypeAnnotation", "tupleTypeAnnotation", "typeofTypeAnnotation", "typeAlias", "typeCastExpression", "typeParameter", "bound", "_default", "default", "typeParameterDeclaration", "typeParameterInstantiation", "unionTypeAnnotation", "voidTypeAnnotation", "enumDeclaration", "enumBooleanBody", "members", "explicitType", "hasUnknownMembers", "enumNumberBody", "enumStringBody", "enumSymbolBody", "enumBooleanMember", "enumNumberMember", "enumStringMember", "enumDefaultedMember", "indexedAccessType", "objectType", "indexType", "optionalIndexedAccessType", "jsxAttribute", "jsxClosingElement", "jsxElement", "openingElement", "closingElement", "children", "selfClosing", "jsxEmptyExpression", "jsxExpressionContainer", "jsxSpreadChild", "jsxIdentifier", "jsxMemberExpression", "jsxNamespacedName", "namespace", "jsxOpeningElement", "attributes", "jsxSpreadAttribute", "jsxText", "jsxFragment", "openingFragment", "closingFragment", "jsxOpeningFragment", "jsxClosingFragment", "noop", "placeholder", "expectedNode", "v8IntrinsicIdentifier", "argumentPlaceholder", "bindExpression", "importAttribute", "decorator", "doExpression", "exportDefaultSpecifier", "recordExpression", "tupleExpression", "decimalLiteral", "moduleExpression", "topicReference", "pipelineTopicExpression", "pipelineBareFunction", "pipelinePrimaryTopicReference", "tsParameterProperty", "parameter", "tsDeclareFunction", "tsDeclareMethod", "tsQualifiedName", "tsCallSignatureDeclaration", "parameters", "tsConstructSignatureDeclaration", "tsPropertySignature", "tsMethodSignature", "tsIndexSignature", "tsAnyKeyword", "tsBooleanKeyword", "tsBigIntKeyword", "tsIntrinsicKeyword", "tsNeverKeyword", "tsNullKeyword", "tsNumberKeyword", "tsObjectKeyword", "tsStringKeyword", "tsSymbolKeyword", "tsUndefinedKeyword", "tsUnknownKeyword", "tsVoidKeyword", "tsThisType", "tsFunctionType", "tsConstructorType", "tsTypeReference", "typeName", "tsTypePredicate", "parameterName", "asserts", "tsTypeQuery", "exprName", "tsTypeLiteral", "tsArrayType", "tsTupleType", "elementTypes", "tsOptionalType", "tsRestType", "tsNamedTupleMember", "tsUnionType", "tsIntersectionType", "tsConditionalType", "checkType", "extendsType", "trueType", "falseType", "tsInferType", "tsParenthesizedType", "tsTypeOperator", "tsIndexedAccessType", "tsMappedType", "nameType", "tsLiteralType", "literal", "tsExpressionWithTypeArguments", "tsInterfaceDeclaration", "tsInterfaceBody", "tsTypeAliasDeclaration", "tsInstantiationExpression", "tsAsExpression", "tsSatisfiesExpression", "tsTypeAssertion", "tsEnumDeclaration", "tsEnumMember", "initializer", "tsModuleDeclaration", "tsModuleBlock", "tsImportType", "qualifier", "tsImportEqualsDeclaration", "moduleReference", "isExport", "tsExternalModuleReference", "tsNonNullExpression", "tsExportAssignment", "tsNamespaceExportDeclaration", "tsTypeAnnotation", "tsTypeParameterInstantiation", "tsTypeParameterDeclaration", "tsTypeParameter", "constraint", "NumberLiteral", "deprecationWarning", "RegexLiteral", "RestProperty", "SpreadProperty", "_index", "require", "_index2", "cleanJSXElementLiteralChild", "child", "args", "lines", "value", "split", "lastNonEmptyLine", "i", "length", "match", "str", "line", "isFirstLine", "isLastLine", "isLastNonEmptyLine", "trimmedLine", "replace", "push", "inherits", "stringLiteral", "_index", "require", "_cleanJSXElementLiteralChild", "buildChildren", "node", "elements", "i", "children", "length", "child", "isJSXText", "cleanJSXElementLiteralChild", "isJSXExpressionContainer", "expression", "isJSXEmptyExpression", "push", "_index", "require", "isNode", "node", "VISITOR_KEYS", "type", "_isNode", "require", "assertNode", "node", "isNode", "_node$type", "type", "JSON", "stringify", "TypeError", "_is", "require", "_deprecationWarning", "assert", "type", "node", "opts", "is", "Error", "JSON", "stringify", "assertArrayExpression", "assertAssignmentExpression", "assertBinaryExpression", "assertInterpreterDirective", "assertDirective", "assertDirectiveLiteral", "assertBlockStatement", "assertBreakStatement", "assertCallExpression", "assertCatchClause", "assertConditionalExpression", "assertContinueStatement", "assertDebuggerStatement", "assertDoWhileStatement", "assertEmptyStatement", "assertExpressionStatement", "assertFile", "assertForInStatement", "assertForStatement", "assertFunctionDeclaration", "assertFunctionExpression", "assertIdentifier", "assertIfStatement", "assertLabeledStatement", "assertStringLiteral", "assertNumericLiteral", "assertNullLiteral", "assertBooleanLiteral", "assertRegExpLiteral", "assertLogicalExpression", "assertMemberExpression", "assertNewExpression", "assertProgram", "assertObjectExpression", "assertObjectMethod", "assertObjectProperty", "assertRestElement", "assertReturnStatement", "assertSequenceExpression", "assertParenthesizedExpression", "assertSwitchCase", "assertSwitchStatement", "assertThisExpression", "assertThrowStatement", "assertTryStatement", "assertUnaryExpression", "assertUpdateExpression", "assertVariableDeclaration", "assertVariableDeclarator", "assertWhileStatement", "assertWithStatement", "assertAssignmentPattern", "assertArrayPattern", "assertArrowFunctionExpression", "assertClassBody", "assertClassExpression", "assertClassDeclaration", "assertExportAllDeclaration", "assertExportDefaultDeclaration", "assertExportNamedDeclaration", "assertExportSpecifier", "assertForOfStatement", "assertImportDeclaration", "assertImportDefaultSpecifier", "assertImportNamespaceSpecifier", "assertImportSpecifier", "assertImportExpression", "assertMetaProperty", "assertClassMethod", "assertObjectPattern", "assertSpreadElement", "assertSuper", "assertTaggedTemplateExpression", "assertTemplateElement", "assertTemplateLiteral", "assertYieldExpression", "assertAwaitExpression", "assertImport", "assertBigIntLiteral", "assertExportNamespaceSpecifier", "assertOptionalMemberExpression", "assertOptionalCallExpression", "assertClassProperty", "assertClassAccessorProperty", "assertClassPrivateProperty", "assertClassPrivateMethod", "assertPrivateName", "assertStaticBlock", "assertAnyTypeAnnotation", "assertArrayTypeAnnotation", "assertBooleanTypeAnnotation", "assertBooleanLiteralTypeAnnotation", "assertNullLiteralTypeAnnotation", "assertClassImplements", "assertDeclareClass", "assertDeclareFunction", "assertDeclareInterface", "assertDeclareModule", "assertDeclareModuleExports", "assertDeclareTypeAlias", "assertDeclareOpaqueType", "assertDeclareVariable", "assertDeclareExportDeclaration", "assertDeclareExportAllDeclaration", "assertDeclaredPredicate", "assertExistsTypeAnnotation", "assertFunctionTypeAnnotation", "assertFunctionTypeParam", "assertGenericTypeAnnotation", "assertInferredPredicate", "assertInterfaceExtends", "assertInterfaceDeclaration", "assertInterfaceTypeAnnotation", "assertIntersectionTypeAnnotation", "assertMixedTypeAnnotation", "assertEmptyTypeAnnotation", "assertNullableTypeAnnotation", "assertNumberLiteralTypeAnnotation", "assertNumberTypeAnnotation", "assertObjectTypeAnnotation", "assertObjectTypeInternalSlot", "assertObjectTypeCallProperty", "assertObjectTypeIndexer", "assertObjectTypeProperty", "assertObjectTypeSpreadProperty", "assertOpaqueType", "assertQualifiedTypeIdentifier", "assertStringLiteralTypeAnnotation", "assertStringTypeAnnotation", "assertSymbolTypeAnnotation", "assertThisTypeAnnotation", "assertTupleTypeAnnotation", "assertTypeofTypeAnnotation", "assertTypeAlias", "assertTypeAnnotation", "assertTypeCastExpression", "assertTypeParameter", "assertTypeParameterDeclaration", "assertTypeParameterInstantiation", "assertUnionTypeAnnotation", "assertVariance", "assertVoidTypeAnnotation", "assertEnumDeclaration", "assertEnumBooleanBody", "assertEnumNumberBody", "assertEnumStringBody", "assertEnumSymbolBody", "assertEnumBooleanMember", "assertEnumNumberMember", "assertEnumStringMember", "assertEnumDefaultedMember", "assertIndexedAccessType", "assertOptionalIndexedAccessType", "assertJSXAttribute", "assertJSXClosingElement", "assertJSXElement", "assertJSXEmptyExpression", "assertJSXExpressionContainer", "assertJSXSpreadChild", "assertJSXIdentifier", "assertJSXMemberExpression", "assertJSXNamespacedName", "assertJSXOpeningElement", "assertJSXSpreadAttribute", "assertJSXText", "assertJSXFragment", "assertJSXOpeningFragment", "assertJSXClosingFragment", "assertNoop", "assertPlaceholder", "assertV8IntrinsicIdentifier", "assertArgumentPlaceholder", "assertBindExpression", "assertImportAttribute", "assertDecorator", "assertDoExpression", "assertExportDefaultSpecifier", "assertRecordExpression", "assertTupleExpression", "assertDecimalLiteral", "assertModuleExpression", "assertTopicReference", "assertPipelineTopicExpression", "assertPipelineBareFunction", "assertPipelinePrimaryTopicReference", "assertTSParameterProperty", "assertTSDeclareFunction", "assertTSDeclareMethod", "assertTSQualifiedName", "assertTSCallSignatureDeclaration", "assertTSConstructSignatureDeclaration", "assertTSPropertySignature", "assertTSMethodSignature", "assertTSIndexSignature", "assertTSAnyKeyword", "assertTSBooleanKeyword", "assertTSBigIntKeyword", "assertTSIntrinsicKeyword", "assertTSNeverKeyword", "assertTSNullKeyword", "assertTSNumberKeyword", "assertTSObjectKeyword", "assertTSStringKeyword", "assertTSSymbolKeyword", "assertTSUndefinedKeyword", "assertTSUnknownKeyword", "assertTSVoidKeyword", "assertTSThisType", "assertTSFunctionType", "assertTSConstructorType", "assertTSTypeReference", "assertTSTypePredicate", "assertTSTypeQuery", "assertTSTypeLiteral", "assertTSArrayType", "assertTSTupleType", "assertTSOptionalType", "assertTSRestType", "assertTSNamedTupleMember", "assertTSUnionType", "assertTSIntersectionType", "assertTSConditionalType", "assertTSInferType", "assertTSParenthesizedType", "assertTSTypeOperator", "assertTSIndexedAccessType", "assertTSMappedType", "assertTSLiteralType", "assertTSExpressionWithTypeArguments", "assertTSInterfaceDeclaration", "assertTSInterfaceBody", "assertTSTypeAliasDeclaration", "assertTSInstantiationExpression", "assertTSAsExpression", "assertTSSatisfiesExpression", "assertTSTypeAssertion", "assertTSEnumDeclaration", "assertTSEnumMember", "assertTSModuleDeclaration", "assertTSModuleBlock", "assertTSImportType", "assertTSImportEqualsDeclaration", "assertTSExternalModuleReference", "assertTSNonNullExpression", "assertTSExportAssignment", "assertTSNamespaceExportDeclaration", "assertTSTypeAnnotation", "assertTSTypeParameterInstantiation", "assertTSTypeParameterDeclaration", "assertTSTypeParameter", "assertStandardized", "assertExpression", "assertBinary", "assertScopable", "assertBlockParent", "assertBlock", "assertStatement", "assertTerminatorless", "assertCompletionStatement", "assertConditional", "assertLoop", "assertWhile", "assertExpressionWrapper", "assertFor", "assertForXStatement", "assertFunction", "assertFunctionParent", "assertPureish", "assertDeclaration", "assertPatternLike", "assertLVal", "assertTSEntityName", "assertLiteral", "assertImmutable", "assertUserWhitespacable", "assertMethod", "assertObjectMember", "assertProperty", "assertUnaryLike", "assertPattern", "assertClass", "assertImportOrExportDeclaration", "assertExportDeclaration", "assertModuleSpecifier", "assertAccessor", "assertPrivate", "assertFlow", "assertFlowType", "assertFlowBaseAnnotation", "assertFlowDeclaration", "assertFlowPredicate", "assertEnumBody", "assertEnumMember", "assertJSX", "assertMiscellaneous", "assertTypeScript", "assertTSTypeElement", "assertTSType", "assertTSBaseType", "assertNumberLiteral", "deprecationWarning", "assertRegexLiteral", "assertRestProperty", "assertSpreadProperty", "assertModuleDeclaration", "_index", "require", "_default", "exports", "default", "createTypeAnnotationBasedOnTypeof", "type", "stringTypeAnnotation", "numberTypeAnnotation", "voidTypeAnnotation", "booleanTypeAnnotation", "genericTypeAnnotation", "identifier", "anyTypeAnnotation", "Error", "_index", "require", "getQualifiedName", "node", "isIdentifier", "name", "id", "qualification", "removeTypeDuplicates", "nodesIn", "nodes", "Array", "from", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "indexOf", "isAnyTypeAnnotation", "isFlowBaseAnnotation", "set", "type", "isUnionTypeAnnotation", "has", "push", "add", "isGenericTypeAnnotation", "existing", "get", "typeParameters", "params", "baseType", "genericName", "_index", "require", "_removeTypeDuplicates", "createFlowUnionType", "types", "flattened", "removeTypeDuplicates", "length", "unionTypeAnnotation", "_index", "require", "getQualifiedName", "node", "isIdentifier", "name", "right", "left", "removeTypeDuplicates", "nodesIn", "nodes", "Array", "from", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "indexOf", "isTSAnyKeyword", "isTSBaseType", "set", "type", "isTSUnionType", "has", "push", "add", "isTSTypeReference", "typeParameters", "typeName", "existing", "get", "params", "baseType", "genericName", "_index", "require", "_removeTypeDuplicates", "_index2", "createTSUnionType", "typeAnnotations", "types", "map", "type", "isTSTypeAnnotation", "typeAnnotation", "flattened", "removeTypeDuplicates", "length", "tsUnionType", "_index", "require", "_index", "require", "buildUndefinedNode", "unaryExpression", "numericLiteral", "_index", "require", "_index2", "hasOwn", "Function", "call", "bind", "Object", "prototype", "hasOwnProperty", "cloneIfNode", "obj", "deep", "withoutLoc", "commentsCache", "type", "cloneNodeInternal", "cloneIfNodeOrArray", "Array", "isArray", "map", "node", "cloneNode", "Map", "newNode", "isIdentifier", "name", "optional", "typeAnnotation", "NODE_FIELDS", "Error", "field", "keys", "isFile", "maybeCloneComments", "comments", "loc", "leadingComments", "innerComments", "trailingComments", "extra", "assign", "comment", "cache", "get", "value", "ret", "set", "_cloneNode", "require", "clone", "node", "cloneNode", "_cloneNode", "require", "cloneDeep", "node", "cloneNode", "_cloneNode", "require", "cloneDeepWithoutLoc", "node", "cloneNode", "_cloneNode", "require", "cloneWithoutLoc", "node", "cloneNode", "addComments", "node", "type", "comments", "key", "concat", "push", "_addComments", "require", "addComment", "node", "type", "content", "line", "addComments", "value", "inherit", "key", "child", "parent", "Array", "from", "Set", "concat", "filter", "Boolean", "_inherit", "require", "inheritInnerComments", "child", "parent", "inherit", "_inherit", "require", "inheritLeadingComments", "child", "parent", "inherit", "_inherit", "require", "inheritTrailingComments", "child", "parent", "inherit", "_inheritTrailingComments", "require", "_inheritLeadingComments", "_inheritInnerComments", "inheritsComments", "child", "parent", "inheritTrailingComments", "inheritLeadingComments", "inheritInnerComments", "_index", "require", "removeComments", "node", "COMMENT_KEYS", "forEach", "key", "_index", "require", "STANDARDIZED_TYPES", "exports", "FLIPPED_ALIAS_KEYS", "EXPRESSION_TYPES", "BINARY_TYPES", "SCOPABLE_TYPES", "BLOCKPARENT_TYPES", "BLOCK_TYPES", "STATEMENT_TYPES", "TERMINATORLESS_TYPES", "COMPLETIONSTATEMENT_TYPES", "CONDITIONAL_TYPES", "LOOP_TYPES", "WHILE_TYPES", "EXPRESSIONWRAPPER_TYPES", "FOR_TYPES", "FORXSTATEMENT_TYPES", "FUNCTION_TYPES", "FUNCTIONPARENT_TYPES", "PUREISH_TYPES", "DECLARATION_TYPES", "PATTERNLIKE_TYPES", "LVAL_TYPES", "TSENTITYNAME_TYPES", "LITERAL_TYPES", "IMMUTABLE_TYPES", "USERWHITESPACABLE_TYPES", "METHOD_TYPES", "OBJECTMEMBER_TYPES", "PROPERTY_TYPES", "UNARYLIKE_TYPES", "PATTERN_TYPES", "CLASS_TYPES", "IMPORTOREXPORTDECLARATION_TYPES", "EXPORTDECLARATION_TYPES", "MODULESPECIFIER_TYPES", "ACCESSOR_TYPES", "PRIVATE_TYPES", "FLOW_TYPES", "FLOWTYPE_TYPES", "FLOWBASEANNOTATION_TYPES", "FLOWDECLARATION_TYPES", "FLOWPREDICATE_TYPES", "ENUMBODY_TYPES", "ENUMMEMBER_TYPES", "JSX_TYPES", "MISCELLANEOUS_TYPES", "TYPESCRIPT_TYPES", "TSTYPEELEMENT_TYPES", "TSTYPE_TYPES", "TSBASETYPE_TYPES", "MODULEDECLARATION_TYPES", "_index", "require", "_index2", "toBlock", "node", "parent", "isBlockStatement", "blockNodes", "isEmptyStatement", "isStatement", "isFunction", "returnStatement", "expressionStatement", "blockStatement", "_toBlock", "require", "ensureBlock", "node", "key", "result", "toBlock", "_isValidIdentifier", "require", "_helperValidatorIdentifier", "toIdentifier", "input", "name", "c", "isIdentifierChar", "codePointAt", "replace", "match", "toUpperCase", "isValidIdentifier", "_toIdentifier", "require", "toBindingIdentifierName", "name", "toIdentifier", "_index", "require", "_index2", "toComputedKey", "node", "key", "property", "computed", "isIdentifier", "stringLiteral", "name", "_index", "require", "_default", "exports", "default", "toExpression", "node", "isExpressionStatement", "expression", "isExpression", "isClass", "type", "isFunction", "Error", "_index", "require", "traverseFast", "node", "enter", "opts", "keys", "VISITOR_KEYS", "type", "key", "subNode", "Array", "isArray", "_index", "require", "CLEAR_KEYS", "CLEAR_KEYS_PLUS_COMMENTS", "COMMENT_KEYS", "removeProperties", "node", "opts", "map", "preserveComments", "key", "undefined", "Object", "keys", "symbols", "getOwnPropertySymbols", "sym", "_traverseFast", "require", "_removeProperties", "removePropertiesDeep", "tree", "opts", "traverseFast", "removeProperties", "_index", "require", "_cloneNode", "_removePropertiesDeep", "toKeyAlias", "node", "key", "alias", "kind", "increment", "isIdentifier", "name", "isStringLiteral", "JSON", "stringify", "value", "removePropertiesDeep", "cloneNode", "computed", "static", "uid", "Number", "MAX_SAFE_INTEGER", "_index", "require", "_index2", "_default", "exports", "default", "toStatement", "node", "ignore", "isStatement", "mustHaveId", "newType", "isClass", "isFunction", "isAssignmentExpression", "expressionStatement", "id", "Error", "type", "_isValidIdentifier", "require", "_index", "_default", "exports", "default", "valueToNode", "objectToString", "Function", "call", "bind", "Object", "prototype", "toString", "isRegExp", "value", "isPlainObject", "proto", "getPrototypeOf", "undefined", "identifier", "booleanLiteral", "nullLiteral", "stringLiteral", "result", "Number", "isFinite", "numericLiteral", "Math", "abs", "numerator", "isNaN", "binaryExpression", "is", "unaryExpression", "pattern", "source", "flags", "match", "regExpLiteral", "Array", "isArray", "arrayExpression", "map", "props", "key", "keys", "nodeKey", "isValidIdentifier", "push", "objectProperty", "objectExpression", "Error", "_index", "require", "appendToMemberExpression", "member", "append", "computed", "object", "memberExpression", "property", "_index", "require", "_inheritsComments", "inherits", "child", "parent", "key", "INHERIT_KEYS", "optional", "Object", "keys", "force", "inheritsComments", "_index", "require", "_index2", "prependToMemberExpression", "member", "prepend", "isSuper", "object", "Error", "memberExpression", "_index", "require", "getBindingIdentifiers", "node", "duplicates", "outerOnly", "newBindingsOnly", "search", "concat", "ids", "Object", "create", "length", "id", "shift", "isAssignmentExpression", "isUnaryExpression", "isUpdateExpression", "isIdentifier", "_ids", "name", "push", "isExportDeclaration", "isExportAllDeclaration", "isDeclaration", "declaration", "isFunctionDeclaration", "isFunctionExpression", "keys", "type", "i", "key", "nodes", "Array", "isArray", "DeclareClass", "DeclareFunction", "DeclareModule", "DeclareVariable", "DeclareInterface", "DeclareTypeAlias", "DeclareOpaqueType", "InterfaceDeclaration", "TypeAlias", "OpaqueType", "CatchClause", "LabeledStatement", "UnaryExpression", "AssignmentExpression", "ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier", "ImportDeclaration", "ExportSpecifier", "ExportNamespaceSpecifier", "ExportDefaultSpecifier", "FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression", "ObjectMethod", "ClassMethod", "ClassPrivateMethod", "ForInStatement", "ForOfStatement", "ClassDeclaration", "ClassExpression", "RestElement", "UpdateExpression", "ObjectProperty", "AssignmentPattern", "ArrayPattern", "ObjectPattern", "VariableDeclaration", "VariableDeclarator", "_getBindingIdentifiers", "require", "_default", "exports", "default", "getOuterBindingIdentifiers", "node", "duplicates", "getBindingIdentifiers", "_index", "require", "traverse", "node", "handlers", "state", "enter", "exit", "traverseSimpleImpl", "ancestors", "keys", "VISITOR_KEYS", "type", "key", "subNode", "Array", "isArray", "i", "length", "child", "push", "index", "pop", "_getBindingIdentifiers", "require", "isBinding", "node", "parent", "grandparent", "type", "keys", "getBindingIdentifiers", "i", "length", "key", "val", "Array", "isArray", "indexOf", "_index", "require", "_index2", "isLet", "node", "isVariableDeclaration", "kind", "BLOCK_SCOPED_SYMBOL", "_index", "require", "_isLet", "isBlockScoped", "node", "isFunctionDeclaration", "isClassDeclaration", "isLet", "_isType", "require", "_index", "isImmutable", "node", "isType", "type", "isIdentifier", "name", "_index", "require", "isNodesEquivalent", "a", "b", "type", "fields", "Object", "keys", "NODE_FIELDS", "visitorKeys", "VISITOR_KEYS", "field", "val_a", "val_b", "Array", "isArray", "length", "i", "includes", "key", "isReferenced", "node", "parent", "grandparent", "type", "property", "computed", "object", "init", "body", "key", "superClass", "right", "source", "local", "id", "_index", "require", "isScope", "node", "parent", "isBlockStatement", "isFunction", "isCatchClause", "isPattern", "isScopable", "_index", "require", "isSpecifierDefault", "specifier", "isImportDefaultSpecifier", "isIdentifier", "imported", "exported", "name", "_isValidIdentifier", "require", "RESERVED_WORDS_ES3_ONLY", "Set", "isValidES3Identifier", "name", "isValidIdentifier", "has", "_index", "require", "_index2", "isVar", "node", "isVariableDeclaration", "kind", "BLOCK_SCOPED_SYMBOL", "_getBindingIdentifiers", "require", "_index", "_index2", "_productions", "_cloneNode", "gatherSequenceExpressions", "nodes", "declars", "exprs", "ensureLastUndefined", "node", "isEmptyStatement", "isExpression", "push", "isExpressionStatement", "expression", "isVariableDeclaration", "kind", "declar", "declarations", "bindings", "getBindingIdentifiers", "key", "Object", "keys", "id", "cloneNode", "init", "assignmentExpression", "isIfStatement", "consequent", "buildUndefinedNode", "alternate", "conditionalExpression", "test", "isBlockStatement", "body", "indexOf", "length", "sequenceExpression", "_gatherSequenceExpressions", "require", "toSequenceExpression", "nodes", "scope", "length", "declars", "result", "gatherSequenceExpressions", "declar", "push", "_isReactComponent", "require", "_isCompatTag", "_buildChildren", "_assertNode", "_index", "Object", "keys", "forEach", "key", "prototype", "hasOwnProperty", "call", "_exportNames", "exports", "defineProperty", "enumerable", "get", "_createTypeAnnotationBasedOnTypeof", "_createFlowUnionType", "_createTSUnionType", "_index2", "_uppercase", "_productions", "_cloneNode", "_clone", "_cloneDeep", "_cloneDeepWithoutLoc", "_cloneWithoutLoc", "_addComment", "_addComments", "_inheritInnerComments", "_inheritLeadingComments", "_inheritsComments", "_inheritTrailingComments", "_removeComments", "_index3", "_index4", "_ensureBlock", "_toBindingIdentifierName", "_toBlock", "_toComputedKey", "_toExpression", "_toIdentifier", "_toKeyAlias", "_toStatement", "_valueToNode", "_index5", "_appendToMemberExpression", "_inherits", "_prependToMemberExpression", "_removeProperties", "_removePropertiesDeep", "_removeTypeDuplicates", "_getBindingIdentifiers", "_getOuterBindingIdentifiers", "_traverse", "_traverseFast", "_shallowEqual", "_is", "_isBinding", "_isBlockScoped", "_isImmutable", "_isLet", "_isNode", "_isNodesEquivalent", "_isPlaceholderType", "_isReferenced", "_isScope", "_isSpecifierDefault", "_isType", "_isValidES3Identifier", "_isValidIdentifier", "_isVar", "_matchesPattern", "_validate", "_buildMatchMemberExpression", "_index6", "_deprecationWarning", "react", "isReactComponent", "isCompatTag", "buildChildren", "toSequenceExpression", "default", "_t", "require", "assertExpressionStatement", "makeStatementFormatter", "fn", "code", "str", "validate", "unwrap", "ast", "program", "body", "slice", "smart", "exports", "length", "statements", "statement", "Error", "expression", "start", "stmt", "merge", "a", "b", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "parser", "Object", "assign", "validate", "opts", "Error", "_ref", "_objectWithoutPropertiesLoose", "_excluded", "Set", "RegExp", "undefined", "normalizeReplacements", "replacements", "Array", "isArray", "reduce", "acc", "replacement", "i", "Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "AwaitNotInAsyncFunction", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "DynamicImportPhaseRequiresImportExpressions", "phase", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArgumentTrailingComma", "ImportCallArity", "maxArgumentCount", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "YieldBindingIdentifier", "YieldInParameter", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "UnparenthesizedPipeBodyDescriptions", "Set", "PipelineOperatorErrors", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "Object", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "_ref", "toMessage", "properties", "_objectWithoutPropertiesLoose", "_excluded", "loc", "details", "error", "SyntaxError", "assign", "pos", "clone", "overrides", "_overrides$loc", "get", "set", "writable", "ParseErrorEnum", "argument", "syntaxPlugin", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "reasonCode", "keys", "template", "_ref2", "rest", "_excluded2", "Errors", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "options", "tokens", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "e", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "String", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "directiveToStmt", "directive", "expression", "raw", "extra", "expressionValue", "stmt", "rawValue", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "pushClassMethod", "classBody", "isGenerator", "isConstructor", "allowsDirectSuper", "parseMethod", "typeParameters", "push", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "computed", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseObjectMethod", "prop", "isPattern", "isAccessor", "shorthand", "parseObjectProperty", "startLoc", "refExpressionErrors", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "source", "arguments", "hasPlugin", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "parseSubscript", "base", "noCalls", "optionalChainMember", "substring", "stop", "chain", "startNodeAtNode", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "finishNodeAt", "endLoc", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "placeholder", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "pluginConfig", "plugins", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "undefined", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "elements", "commentWS", "lastElement", "CommentsParser", "addComment", "comment", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "nodeStart", "commentEnd", "containingNode", "finalizeComment", "splice", "trailingNode", "commentStart", "input", "charCodeAt", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "resetPreviousIdentifierLeadingComments", "takeSurroundingComments", "lineBreak", "lineBreakG", "isNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "skipWhiteSpaceToLineBreak", "isWhitespace", "State", "curLine", "lineStart", "errors", "potentialArrowAt", "noArrowAt", "noArrowParamsConversionAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "init", "strictMode", "sourceType", "startLine", "startColumn", "maybeInArrowParameters", "inType", "noAnonFunctionType", "hasFlowComment", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "canStartJSXElement", "containsEsc", "curPosition", "slice", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "octalStr", "octal", "parseInt", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "indexOf", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorRecovery", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "nextToken", "eat", "createLookaheadState", "curContext", "lookahead", "old", "curr", "nextTokenStart", "nextTokenStartSince", "lastIndex", "lookaheadCharCode", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "codePointAtPos", "cp", "trail", "setStrict", "forEach", "toParseError", "clear", "skipSpace", "finishToken", "getTokenFromCode", "skipBlockComment", "skipLineComment", "startSkip", "spaceStart", "loop", "attachComment", "annexB", "commentWhitespace", "prevType", "replaceToken", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readWord1", "finishOp", "readToken_dot", "readNumber", "readToken_slash", "readToken_mult_modulo", "width", "readToken_pipe_amp", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "readToken_lt", "readToken_gt", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "includes", "isBigInt", "replace", "startsWithDot", "isFloat", "isDecimal", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "parseFloat", "quote", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "stack", "oldClassScope", "from", "declarePrivateName", "elementType", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "UtilParser", "addExtra", "isContextual", "isUnparsedContextual", "nameStart", "nameEnd", "nextCh", "isLookaheadContextual", "eatContextual", "expectContextual", "canInsertSemicolon", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "semicolon", "allowAsi", "expect", "tryParse", "fn", "oldState", "abortSignal", "failState", "thrown", "aborted", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "hasErrors", "isLiteralPropertyName", "property", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "getScopeHandler", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "ranges", "range", "NodePrototype", "prototype", "__clone", "newNode", "clonePlaceholder", "cloneIdentifier", "cloned", "create", "expectedNode", "cloneStringLiteral", "NodeUtils", "startNodeAt", "resetStartLocationFromNode", "locationNode", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "shouldParseTypes", "shouldParseEnums", "matches", "exec", "Error", "flowParseTypeInitialiser", "tok", "oldInType", "flowParseType", "flowParsePredicate", "moduloLoc", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "flowParseDeclareModuleExports", "flowParseDeclareModule", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "oldNoAnonFunctionType", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "valueNode", "callProperties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "isInexactToken", "proto", "flowCheckGetterSetterParams", "paramCount", "_startLoc", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "setOptionalParametersError", "originalNoArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "parseMaybeAssignAllowIn", "disallowInvalid", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "result", "parseParenItem", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "fullWord", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "canBePattern", "isTuple", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "parseAssignableListItemTypes", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "applyImportPhase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "async", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "parseSubscripts", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "subscriptState", "isLookaheadToken_lt", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "parseTopLevel", "program", "fileNode", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "afterNext", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "jsxReadString", "codePoint", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "jsxParseOpeningElementAfterName", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "isConst", "wasConst", "getOwn", "hasOwnProperty", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseAssignableListItem", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "_left", "ObjectProperty", "checkLVal", "in", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccesorCannotDeclareThisParameter", "AccesorCannotHaveTypeParameters", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifer", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SetAccesorCannotHaveOptionalParameter", "SetAccesorCannotHaveRestParameter", "SetAccesorCannotHaveReturnType", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "expectImportAttributesPlugin", "qualifier", "tsParseEntityName", "tsParseTypeArguments", "allowReservedWords", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "nodeAny", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedTypeParameter", "tsExpectThenParseType", "tsParseMappedType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "abstract", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInNoContext", "cb", "oldContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "nany", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "reScan_lt", "reScan_lt_gt", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "parseClassAccessorProperty", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "TSTypeCastExpression", "TSParameterProperty", "TSNonNullExpression", "TSInstantiationExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldInAbstractClass", "maybeTakeDecorators", "hasBody", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "assertNoSpace", "finishPlaceholder", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "oldStrict", "parseClassBody", "startsWith", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "expectedConfig", "expectedName", "expectedOptions", "expectedKeys", "expectedOptionsIsEmpty", "p", "option", "find", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "decoratorsBeforeExport", "allowCallParenthesized", "proposalList", "recordAndTupleConfigItem", "syntaxType", "tupleSyntaxIsHash", "tokenList", "moduleAttributesVersionPluginOption", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "defaultOptions", "sourceFilename", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "createImportExpressions", "createParenthesizedExpressions", "getOptions", "opts", "_opts$key", "ExpressionParser", "checkProto", "isRecord", "protoRef", "used", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "resultError", "_resultError$loc", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "startIndex", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "isAwaitAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "isAmbiguousAwait", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseMember", "parseNoCallExpr", "tag", "quasi", "dynamicImport", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaProperty", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "propHash", "parsePropertyDefinition", "maybeAsyncOrAccessorProp", "keyName", "_params", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "endCh", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifier", "startsUsingForOf", "startsAwaitUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "starttype", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextType", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "phaseIdentifier", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "pluginsMap", "pluginMap", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginsFromOptions", "pluginList", "value", "unescape", "escape", "self", "_jsTokens", "require", "_helperValidatorIdentifier", "_picocolors", "_interopRequireWildcard", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "hasOwnProperty", "call", "i", "set", "colors", "process", "env", "FORCE_COLOR", "createColors", "_colors", "compose", "f", "g", "v", "sometimesKeywords", "Set", "getDefs", "keyword", "cyan", "capitalized", "yellow", "jsxIdentifier", "punctuator", "number", "magenta", "string", "green", "regex", "comment", "gray", "invalid", "white", "bgRed", "bold", "NEWLINE", "BRACKET", "tokenize", "JSX_TAG", "getTokenType", "token", "offset", "text", "type", "isKeyword", "value", "isStrictReservedWord", "test", "slice", "toLowerCase", "match", "jsTokens", "exec", "matchToToken", "index", "highlightTokens", "defs", "highlighted", "colorize", "split", "map", "str", "join", "shouldHighlight", "options", "isColorSupported", "forceColor", "pcWithForcedColor", "undefined", "getColors", "_pcWithForcedColor", "highlight", "code", "chalk", "chalkWithForcedColor", "exports", "getChalk", "_chalk", "_chalkWithForcedColor", "constructor", "enabled", "level", "_highlight", "require", "_picocolors", "_interopRequireWildcard", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "hasOwnProperty", "call", "i", "set", "colors", "process", "env", "FORCE_COLOR", "createColors", "_colors", "compose", "f", "g", "v", "pcWithForcedColor", "undefined", "getColors", "forceColor", "_pcWithForcedColor", "deprecationWarningShown", "getDefs", "gutter", "gray", "marker", "red", "bold", "message", "NEWLINE", "getMarkerLines", "loc", "source", "opts", "startLoc", "assign", "column", "line", "start", "endLoc", "end", "linesAbove", "linesBelow", "startLine", "startColumn", "endLine", "endColumn", "Math", "max", "min", "length", "lineDiff", "markerLines", "lineNumber", "sourceLength", "codeFrameColumns", "rawLines", "highlighted", "highlightCode", "shouldHighlight", "defs", "maybeHighlight", "fmt", "string", "lines", "split", "hasColumns", "numberMaxWidth", "String", "highlightedLines", "highlight", "frame", "slice", "map", "index", "number", "paddedNumber", "hasMarker", "lastMarkerLine", "markerLine", "Array", "isArray", "markerSpacing", "replace", "numberOfMarkers", "repeat", "join", "reset", "_default", "colNumber", "emitWarning", "deprecationError", "Error", "name", "console", "warn", "location", "_t", "require", "_parser", "_codeFrame", "isCallExpression", "isExpressionStatement", "isFunction", "isIdentifier", "isJSXIdentifier", "isNewExpression", "isPlaceholder", "isStatement", "isStringLiteral", "removePropertiesDeep", "traverse", "PATTERN", "parseAndBuildMetadata", "formatter", "code", "opts", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "ast", "parseWithCodeFrame", "parser", "validate", "state", "syntactic", "placeholders", "placeholderNames", "Set", "legacy", "placeholderVisitorHandler", "Object", "assign", "length", "node", "ancestors", "_state$placeholderWhi", "name", "hasSyntacticPlaceholders", "Error", "value", "test", "has", "slice", "parent", "key", "type", "expectedNode", "push", "resolve", "resolveAncestors", "isDuplicate", "add", "i", "index", "undefined", "parserOpts", "plugins", "allowReturnOutsideFunction", "allowSuperOutsideMethod", "sourceType", "parse", "err", "loc", "message", "codeFrameColumns", "start", "_t", "require", "blockStatement", "cloneNode", "emptyStatement", "expressionStatement", "identifier", "isStatement", "isStringLiteral", "stringLiteral", "validate", "populatePlaceholders", "metadata", "replacements", "ast", "placeholders", "forEach", "placeholder", "hasOwnProperty", "call", "name", "placeholderName", "Error", "Object", "keys", "key", "placeholderNames", "has", "slice", "reverse", "applyReplacement", "e", "message", "replacement", "isDuplicate", "Array", "isArray", "map", "node", "parent", "index", "resolve", "type", "undefined", "items", "splice", "_options", "require", "_parse", "_populate", "stringTemplate", "formatter", "code", "opts", "metadata", "arg", "replacements", "normalizeReplacements", "parseAndBuildMetadata", "unwrap", "populatePlaceholders", "_options", "require", "_parse", "_populate", "literalTemplate", "formatter", "tpl", "opts", "metadata", "names", "buildLiteralData", "arg", "defaultReplacements", "forEach", "replacement", "i", "replacements", "normalizeReplacements", "Object", "keys", "key", "hasOwnProperty", "call", "Error", "unwrap", "populatePlaceholders", "assign", "prefix", "raw", "join", "includes", "code", "buildTemplateCode", "parseAndBuildMetadata", "parser", "placeholderWhitelist", "Set", "concat", "Array", "from", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "length", "value", "push", "_options", "require", "_string", "_literal", "NO_PLACEHOLDER", "validate", "placeholderPattern", "createTemplateBuilder", "formatter", "defaultOpts", "templateFnCache", "WeakMap", "templateAstCache", "cachedOpts", "Object", "assign", "tpl", "args", "length", "Error", "extendedTrace", "stringTemplate", "merge", "Array", "isArray", "builder", "get", "literalTemplate", "set", "ast", "fn", "rootStack", "error", "stack", "split", "slice", "join", "arg", "err", "formatters", "require", "_builder", "smart", "exports", "createTemplateBuilder", "statement", "statements", "expression", "program", "_default", "default", "Object", "assign", "bind", "undefined", "ast", "_template", "require", "helper", "minVersion", "source", "metadata", "Object", "freeze", "ast", "template", "program", "preserveComments", "helpers", "exports", "default", "__proto__", "OverloadYield", "globals", "locals", "_OverloadYield", "exportBindingAssignments", "exportName", "dependencies", "applyDecoratedDescriptor", "_applyDecoratedDescriptor", "applyDecs2311", "checkInRHS", "setFunctionName", "toPropertyKey", "arrayLikeToArray", "_arrayLikeToArray", "arrayWithHoles", "_arrayWithHoles", "arrayWithoutHoles", "_arrayWithoutHoles", "assertClassBrand", "_assertClassBrand", "assertThisInitialized", "_assertThisInitialized", "asyncGeneratorDelegate", "_asyncGeneratorDelegate", "asyncIterator", "_asyncIterator", "AsyncFromSyncIterator", "asyncToGenerator", "asyncGeneratorStep", "_asyncToGenerator", "awaitAsyncGenerator", "_awaitAsyncGenerator", "callSuper", "_callSuper", "getPrototypeOf", "isNativeReflectConstruct", "possibleConstructorReturn", "_checkInRHS", "checkPrivateRedeclaration", "_checkPrivateRedeclaration", "classCallCheck", "_classCallCheck", "classNameTDZError", "_classNameTDZError", "classPrivateFieldGet2", "_classPrivateFieldGet2", "classPrivateFieldInitSpec", "_classPrivateFieldInitSpec", "classPrivateFieldLooseBase", "_classPrivateFieldBase", "classPrivateFieldLooseKey", "id", "_classPrivateFieldKey", "classPrivateFieldSet2", "_classPrivateFieldSet2", "classPrivateGetter", "_classPrivateGetter", "classPrivateMethodInitSpec", "_classPrivateMethodInitSpec", "classPrivateSetter", "_classPrivateSetter", "classStaticPrivateMethodGet", "_classStaticPrivateMethodGet", "construct", "_construct", "setPrototypeOf", "createClass", "_defineProperties", "_createClass", "createForOfIteratorHelper", "_createForOfIteratorHelper", "unsupportedIterableToArray", "createForOfIteratorHelperLoose", "_createForOfIteratorHelperLoose", "createSuper", "_createSuper", "decorate", "_decorate", "_getDecoratorsApi", "_createElementDescriptor", "_coalesceGetterSetter", "_coalesceClassElements", "_hasDecorators", "_isDataDescriptor", "_optionalCallableProperty", "toArray", "defaults", "_defaults", "defineAccessor", "_defineAccessor", "defineProperty", "_defineProperty", "extends", "_extends", "get", "_get", "superPropBase", "_getPrototypeOf", "identity", "_identity", "importDeferProxy", "_importDeferProxy", "inherits", "_inherits", "inheritsLoose", "_inheritsLoose", "initializerDefineProperty", "_initializerDefineProperty", "initializerWarningHelper", "_initializerWarningHelper", "instanceof", "_instanceof", "interopRequireDefault", "_interopRequireDefault", "interopRequireWildcard", "_getRequireWildcardCache", "_interopRequireWildcard", "isNativeFunction", "_isNativeFunction", "_isNativeReflectConstruct", "iterableToArray", "_iterableToArray", "iterableToArrayLimit", "_iterableToArrayLimit", "jsx", "REACT_ELEMENT_TYPE", "_createRawReactElement", "maybeArrayLike", "_maybeArrayLike", "newArrowCheck", "_newArrowCheck", "nonIterableRest", "_nonIterableRest", "nonIterableSpread", "_nonIterableSpread", "nullishReceiverError", "_nullishReceiverError", "objectDestructuringEmpty", "_objectDestructuringEmpty", "objectSpread2", "ownKeys", "_objectSpread2", "objectWithoutProperties", "_objectWithoutProperties", "objectWithoutPropertiesLoose", "_objectWithoutPropertiesLoose", "_possibleConstructorReturn", "readOnlyError", "_readOnlyError", "regeneratorRuntime", "_regeneratorRuntime", "set", "_set", "_setPrototypeOf", "skipFirstGeneratorNext", "_skipFirstGeneratorNext", "slicedToArray", "_slicedToArray", "_superPropBase", "taggedTemplateLiteral", "_taggedTemplateLiteral", "taggedTemplateLiteralLoose", "_taggedTemplateLiteralLoose", "tdz", "_tdzError", "temporalRef", "_temporalRef", "temporalUndefined", "_temporalUndefined", "_toArray", "toConsumableArray", "_toConsumableArray", "toPrimitive", "toSetter", "_toSetter", "typeof", "_typeof", "_unsupportedIterableToArray", "usingCtx", "_usingCtx", "wrapAsyncGenerator", "_wrapAsyncGenerator", "AsyncGenerator", "wrapNativeSuper", "_wrapNativeSuper", "wrapRegExp", "_wrapRegExp", "writeOnlyError", "_writeOnlyError", "assign", "AwaitValue", "_AwaitValue", "applyDecs", "old_createMetadataMethodsForProperty", "old_convertMetadataMapToFinal", "old_createAddInitializerMethod", "old_memberDec", "old_assertNotFinished", "old_assertMetadataKey", "old_assertCallable", "old_assertValidReturnValue", "old_getInit", "old_applyMemberDec", "old_applyMemberDecs", "old_pushInitializers", "old_applyClassDecs", "applyDecs2203", "applyDecs2203Factory", "applyDecs2203Impl", "applyDecs2203R", "applyDecs2203RFactory", "applyDecs2301", "applyDecs2301Factory", "applyDecs2305", "classApplyDescriptorDestructureSet", "_classApplyDescriptorDestructureSet", "classApplyDescriptorGet", "_classApplyDescriptorGet", "classApplyDescriptorSet", "_classApplyDescriptorSet", "classCheckPrivateStaticAccess", "_classCheckPrivateStaticAccess", "classCheckPrivateStaticFieldDescriptor", "_classCheckPrivateStaticFieldDescriptor", "classExtractFieldDescriptor", "_classExtractFieldDescriptor", "classPrivateFieldDestructureSet", "_classPrivateFieldDestructureSet", "classPrivateFieldGet", "_classPrivateFieldGet", "classPrivateFieldSet", "_classPrivateFieldSet", "classPrivateMethodGet", "_classPrivateMethodGet", "classPrivateMethodSet", "_classPrivateMethodSet", "classStaticPrivateFieldDestructureSet", "_classStaticPrivateFieldDestructureSet", "classStaticPrivateFieldSpecGet", "_classStaticPrivateFieldSpecGet", "classStaticPrivateFieldSpecSet", "_classStaticPrivateFieldSpecSet", "classStaticPrivateMethodSet", "_classStaticPrivateMethodSet", "defineEnumerableProperties", "_defineEnumerableProperties", "dispose", "dispose_SuppressedError", "_dispose", "objectSpread", "_objectSpread", "using", "_using", "_t", "require", "_helpersGenerated", "cloneNode", "identifier", "deep", "obj", "path", "value", "parts", "split", "last", "shift", "length", "arguments", "e", "message", "permuteHelperAST", "ast", "metadata", "bindingName", "localBindings", "getDependency", "adjustAst", "locals", "dependencies", "exportBindingAssignments", "exportName", "bindings", "Set", "add", "name", "paths", "Object", "entries", "o", "keys", "map", "k", "newName", "has", "ref", "forEach", "p", "helperData", "create", "loadHelper", "helper", "helpers", "assign", "ReferenceError", "code", "minVersion", "build", "nodes", "body", "globals", "getDependencies", "get", "id", "type", "undefined", "exports", "ensure", "list", "replace", "_default", "default", "ReferencedIdentifier", "exports", "ReferencedMemberExpression", "BindingIdentifier", "Statement", "Expression", "Scope", "Referenced", "BlockScoped", "Var", "User", "Generated", "Pure", "Flow", "RestProperty", "SpreadProperty", "ExistentialTypeParam", "NumericLiteralTypeAnnotation", "ForAwaitStatement", "_t", "require", "isBinding", "isBlockScoped", "nodeIsBlockScoped", "isExportDeclaration", "isExpression", "nodeIsExpression", "isFlow", "nodeIsFlow", "isForStatement", "isForXStatement", "isIdentifier", "isImportDeclaration", "isImportSpecifier", "isJSXIdentifier", "isJSXMemberExpression", "isMemberExpression", "isRestElement", "nodeIsRestElement", "isReferenced", "nodeIsReferenced", "isScope", "nodeIsScope", "isStatement", "nodeIsStatement", "isVar", "nodeIsVar", "isVariableDeclaration", "react", "isForOfStatement", "isCompatTag", "isReferencedIdentifier", "opts", "node", "parent", "name", "parentPath", "isReferencedMemberExpression", "isBindingIdentifier", "grandparent", "left", "init", "isUser", "loc", "isGenerated", "isPure", "constantsOnly", "scope", "importKind", "exportKind", "isRestProperty", "_this$parentPath", "isObjectPattern", "isSpreadProperty", "_this$parentPath2", "isObjectExpression", "isForAwaitStatement", "await", "exports", "isExistentialTypeParam", "Error", "isNumericLiteralTypeAnnotation", "virtualTypes", "require", "virtualTypesValidators", "_t", "DEPRECATED_KEYS", "DEPRECATED_ALIASES", "FLIPPED_ALIAS_KEYS", "TYPES", "__internal__deprecationWarning", "deprecationWarning", "isVirtualType", "type", "isExplodedVisitor", "visitor", "_exploded", "explode$1", "nodeType", "Object", "keys", "shouldIgnoreKey", "parts", "split", "length", "fns", "part", "verify$1", "__esModule", "ensureEntranceObjects", "ensureCallbackArrays", "wrapCheck", "types", "mergePair", "aliases", "deprecatedKey", "deprecatedAlias", "alias", "existing", "assign", "_verified", "Error", "validateVisitorMethods", "indexOf", "visitors", "visitorKey", "path", "val", "concat", "fn", "TypeError", "merge", "states", "wrapper", "mergedVisitor", "i", "state", "topVisitor", "wrapWithStateOrWrapper", "key", "typeVisitor", "nodeVisitor", "oldVisitor", "newVisitor", "phase", "Array", "isArray", "map", "newFn", "call", "toString", "obj", "enter", "exit", "fnKey", "validator", "apply", "arguments", "dest", "src", "pathsCache", "exports", "path", "WeakMap", "scope", "clear", "clearPath", "clearScope", "nullHub", "Object", "freeze", "getCachedPaths", "hub", "parent", "_pathsCache$get", "_hub", "get", "getOrCreateCachedPaths", "_hub2", "_hub3", "parents", "set", "paths", "Map", "self", "require_browser", "_t", "require", "cloneNode", "exportNamedDeclaration", "exportSpecifier", "identifier", "variableDeclaration", "variableDeclarator", "splitExportDeclaration", "exportDeclaration", "isExportDeclaration", "isExportAllDeclaration", "Error", "isExportDefaultDeclaration", "declaration", "get", "standaloneDeclaration", "isFunctionDeclaration", "isClassDeclaration", "exportExpr", "isFunctionExpression", "isClassExpression", "scope", "isScope", "parent", "id", "node", "needBindingRegistration", "generateUidIdentifier", "hasBinding", "name", "updatedDeclaration", "updatedExportDeclaration", "insertAfter", "replaceWith", "registerDeclaration", "length", "bindingIdentifiers", "getOuterBindingIdentifiers", "specifiers", "Object", "keys", "map", "aliasDeclar", "exports", "skipAllButComputedKey", "path", "skip", "node", "computed", "context", "maybeQueue", "get", "requeueComputedKeyAndDecorators", "decorators", "decorator", "visitor", "FunctionParent", "isArrowFunctionExpression", "isMethod", "Property", "isObjectProperty", "_default", "default", "_helperSplitExportDeclaration", "require", "t", "_helperEnvironmentVisitor", "_traverseNode", "_visitors", "renameVisitor", "ReferencedIdentifier", "node", "state", "name", "oldName", "newName", "Scope", "path", "scope", "bindingIdentifierEquals", "binding", "identifier", "skip", "isMethod", "requeueComputedKeyAndDecorators", "ObjectProperty", "key", "shorthand", "getBindingIdentifier", "_node$extra", "extra", "isVariableDeclaration", "ids", "getOuterBindingIdentifiers", "Renamer", "constructor", "maybeConvertFromExportDeclaration", "parentDeclar", "maybeExportDeclar", "parentPath", "isExportDeclaration", "isExportDefaultDeclaration", "declaration", "isDeclaration", "id", "isExportAllDeclaration", "splitExportDeclaration", "maybeConvertFromClassFunctionDeclaration", "maybeConvertFromClassFunctionExpression", "rename", "find", "isFunctionExpression", "isClassExpression", "bindingIds", "blockToTraverse", "arguments", "block", "traverseNode", "explode", "discriminant", "removeOwnBinding", "bindings", "exports", "default", "Binding", "constructor", "identifier", "scope", "path", "kind", "constantViolations", "constant", "referencePaths", "referenced", "references", "isDeclaredInLoop", "reassign", "clearValue", "deoptValue", "hasDeoptedValue", "setValue", "value", "hasValue", "indexOf", "push", "reference", "dereference", "exports", "default", "parentPath", "key", "isFunctionParent", "isWhile", "isForXStatement", "isForStatement", "require_globals", "_renamer", "require", "_index", "_binding", "_globals", "_t", "t", "_cache", "_visitors", "NOT_LOCAL_BINDING", "callExpression", "cloneNode", "getBindingIdentifiers", "identifier", "isArrayExpression", "isBinary", "isCallExpression", "isClass", "isClassBody", "isClassDeclaration", "isExportAllDeclaration", "isExportDefaultDeclaration", "isExportNamedDeclaration", "isFunctionDeclaration", "isIdentifier", "isImportDeclaration", "isLiteral", "isMemberExpression", "isMethod", "isModuleSpecifier", "isNullLiteral", "isObjectExpression", "isProperty", "isPureish", "isRegExpLiteral", "isSuper", "isTaggedTemplateExpression", "isTemplateLiteral", "isThisExpression", "isUnaryExpression", "isVariableDeclaration", "matchesPattern", "memberExpression", "numericLiteral", "toIdentifier", "variableDeclaration", "variableDeclarator", "isRecordExpression", "isTupleExpression", "isObjectProperty", "isTopicReference", "isMetaProperty", "isPrivateName", "isExportDeclaration", "buildUndefinedNode", "gatherNodeParts", "node", "parts", "type", "_node$specifiers", "source", "specifiers", "length", "e", "declaration", "local", "push", "value", "object", "property", "name", "callee", "properties", "argument", "key", "left", "id", "expression", "meta", "openingElement", "openingFragment", "namespace", "collectorVisitor", "ForStatement", "path", "declar", "get", "isVar", "scope", "parentScope", "getFunctionParent", "getProgramParent", "registerBinding", "Declaration", "isBlockScoped", "parent", "registerDeclaration", "ImportDeclaration", "getBlockParent", "ReferencedIdentifier", "state", "references", "ForXStatement", "isPattern", "constantViolations", "ExportDeclaration", "exit", "binding", "getBinding", "reference", "decl", "declarations", "Object", "keys", "LabeledStatement", "AssignmentExpression", "assignments", "UpdateExpression", "UnaryExpression", "operator", "BlockScoped", "bindings", "CatchClause", "Function", "params", "param", "isFunctionExpression", "has", "ClassExpression", "TSTypeAnnotation", "skip", "uid", "Scope", "constructor", "block", "labels", "inited", "globals", "uids", "data", "crawling", "cached", "scopeCache", "set", "Map", "_parent", "_path", "shouldSkip", "listKey", "parentPath", "isScope", "parentBlock", "hub", "traverse", "opts", "generateDeclaredUidIdentifier", "generateUidIdentifier", "generateUid", "replace", "i", "_generateUid", "hasLabel", "hasBinding", "hasGlobal", "hasReference", "program", "generateUidBasedOnNode", "defaultName", "join", "slice", "generateUidIdentifierBasedOnNode", "isStatic", "constant", "maybeGenerateMemoised", "dontPush", "checkBlockScopedCollisions", "kind", "duplicate", "buildError", "TypeError", "rename", "oldName", "newName", "renamer", "Renamer", "arguments", "_renameFromMap", "map", "dump", "sep", "repeat", "console", "log", "violations", "toArray", "arrayLikeIsIterable", "isGenericType", "helperName", "args", "unshift", "addHelper", "getLabel", "registerLabel", "label", "isLabeledStatement", "declare", "isTypeDeclaration", "importKind", "specifier", "isTypeSpecifier", "isImportSpecifier", "registerConstantViolation", "ids", "_this$getBinding", "reassign", "bindingPath", "ReferenceError", "declarators", "getOuterBindingIdentifiers", "getOwnBinding", "Binding", "addGlobal", "hasUid", "isPure", "constantsOnly", "_node$decorators", "superClass", "decorators", "body", "method", "right", "elem", "elements", "prop", "_node$decorators2", "computed", "_node$decorators3", "static", "expressions", "tag", "noGlobals", "quasi", "isStringLiteral", "setData", "val", "getData", "removeData", "init", "crawl", "create", "programParent", "isExplodedVisitor", "visit", "enter", "call", "typeVisitors", "ref", "getPatternParent", "isBlockStatement", "isProgram", "isSwitchStatement", "unique", "isFunction", "pushContainer", "isLoop", "isCatchClause", "ensureBlock", "blockHoist", "_blockHoist", "dataKey", "declarPath", "unshiftContainer", "declarator", "len", "Error", "isFunctionParent", "isBlockParent", "getAllBindings", "getAllBindingsOfKind", "kinds", "bindingIdentifierEquals", "getBindingIdentifier", "previousPath", "_previousPath", "isArrowFunctionExpression", "_this$getBinding2", "getOwnBindingIdentifier", "hasOwnBinding", "_opts", "_opts2", "_opts3", "parentHasBinding", "noUids", "includes", "contextVariables", "_this$parent", "moveBindingTo", "info", "removeOwnBinding", "removeBinding", "_this$getBinding3", "exports", "default", "builtin", "value", "url", "sourceIndex", "value", "encode", "decode", "bsFound", "SetArray", "put", "remove", "encode", "TraceMap", "decodedMappings", "value", "_genMapping", "require", "_traceMapping", "SourceMap", "constructor", "opts", "code", "_opts$sourceFileName", "_map", "_rawMappings", "_sourceFileName", "_lastGenLine", "_lastSourceLine", "_lastSourceColumn", "_inputMap", "map", "GenMapping", "sourceRoot", "sourceFileName", "replace", "undefined", "inputSourceMap", "TraceMap", "resolvedSources", "length", "i", "_this$_inputMap$sourc", "setSourceContent", "sourcesContent", "Object", "keys", "get", "toEncodedMap", "getDecoded", "toDecodedMap", "getRawMappings", "allMappings", "mark", "generated", "line", "column", "identifierName", "identifierNamePos", "filename", "_originalMapping", "originalMapping", "originalPositionFor", "name", "originalIdentifierMapping", "source", "maybeAddMapping", "original", "exports", "default", "Buffer", "constructor", "map", "indentChar", "_map", "_buf", "_str", "_appendCount", "_last", "_queue", "_queueCursor", "_canMarkIdName", "_indentChar", "_fastIndentations", "_position", "line", "column", "_sourcePosition", "identifierName", "undefined", "identifierNamePos", "filename", "i", "push", "repeat", "_allocQueue", "queue", "char", "_pushQueue", "cursor", "length", "item", "_popQueue", "Error", "get", "_flush", "result", "code", "trimRight", "decodedMap", "getDecoded", "__mergedMap", "resultMap", "value", "Object", "defineProperty", "writable", "rawMappings", "mappings", "getRawMappings", "append", "str", "maybeNewline", "_append", "appendChar", "_appendChar", "sourcePosition", "queueIndentation", "queueCursor", "sourcePos", "fastIndentation", "String", "fromCharCode", "_mark", "len", "position", "charCodeAt", "indexOf", "last", "_this$_map", "mark", "removeTrailingNewline", "removeLastSemicolon", "getLastChar", "getNewlineCount", "count", "endsWithCharAndNewline", "lastCp", "hasContent", "exactSource", "loc", "cb", "source", "prop", "_normalizePosition", "sourceWithOffset", "columnOffset", "withSource", "pos", "target", "Math", "max", "getCurrentColumn", "lastIndex", "getCurrentLine", "exports", "default", "_t", "require", "FLIPPED_ALIAS_KEYS", "isArrayExpression", "isAssignmentExpression", "isBinary", "isBlockStatement", "isCallExpression", "isFunction", "isIdentifier", "isLiteral", "isMemberExpression", "isObjectExpression", "isOptionalCallExpression", "isOptionalMemberExpression", "isStringLiteral", "crawlInternal", "node", "state", "object", "computed", "property", "left", "right", "hasCall", "callee", "hasFunction", "hasHelper", "isHelper", "crawl", "name", "charCodeAt", "isType", "nodes", "exports", "AssignmentExpression", "SwitchCase", "parent", "consequent", "length", "cases", "LogicalExpression", "Literal", "value", "CallExpression", "OptionalCallExpression", "VariableDeclaration", "i", "declarations", "declar", "enabled", "id", "init", "IfStatement", "ObjectProperty", "ObjectTypeProperty", "ObjectMethod", "properties", "ObjectTypeCallProperty", "_parent$properties", "callProperties", "ObjectTypeIndexer", "_parent$properties2", "_parent$callPropertie", "indexers", "ObjectTypeInternalSlot", "_parent$properties3", "_parent$callPropertie2", "_parent$indexers", "internalSlots", "forEach", "type", "amounts", "concat", "ret", "_t", "require", "isArrayTypeAnnotation", "isArrowFunctionExpression", "isBinaryExpression", "isCallExpression", "isExportDeclaration", "isForOfStatement", "isIndexedAccessType", "isMemberExpression", "isObjectPattern", "isOptionalMemberExpression", "isYieldExpression", "PRECEDENCE", "Map", "isTSTypeExpression", "nodeType", "isClassExtendsClause", "node", "parent", "parentType", "type", "superClass", "hasPostfixPart", "object", "callee", "tag", "NullableTypeAnnotation", "FunctionTypeAnnotation", "printStack", "length", "UpdateExpression", "ObjectExpression", "isFirstInContext", "DoExpression", "async", "Binary", "operator", "left", "parentPos", "get", "nodePos", "right", "undefined", "UnionTypeAnnotation", "OptionalIndexedAccessType", "objectType", "TSAsExpression", "TSUnionType", "TSInferType", "TSInstantiationExpression", "typeParameters", "BinaryExpression", "SequenceExpression", "test", "discriminant", "expression", "YieldExpression", "ClassExpression", "UnaryLike", "FunctionExpression", "ArrowFunctionExpression", "ConditionalExpression", "OptionalMemberExpression", "AssignmentExpression", "LogicalExpression", "Identifier", "_node$extra", "extra", "parenthesized", "rightType", "id", "name", "isFollowedByBracket", "computed", "optional", "checkParam", "expressionStatement", "arrowBody", "exportDefault", "forHead", "forInHead", "forOfHead", "i", "declaration", "body", "init", "expressions", "prefix", "whitespace", "require", "parens", "_t", "FLIPPED_ALIAS_KEYS", "isCallExpression", "isExpressionStatement", "isMemberExpression", "isNewExpression", "expandAliases", "obj", "map", "Map", "add", "type", "func", "fn", "get", "set", "node", "parent", "stack", "_fn", "Object", "keys", "aliases", "alias", "expandedParens", "expandedWhitespaceNodes", "nodes", "isOrHasCallExpression", "object", "needsWhitespace", "_expandedWhitespaceNo", "expression", "flag", "needsWhitespaceBefore", "needsWhitespaceAfter", "needsParens", "printStack", "_expandedParens$get", "callee", "TaggedTemplateExpression", "node", "print", "tag", "typeParameters", "quasi", "TemplateElement", "Error", "TemplateLiteral", "quasis", "partRaw", "i", "length", "value", "raw", "token", "expressions", "_t", "require", "n", "isCallExpression", "isLiteral", "isMemberExpression", "isNewExpression", "UnaryExpression", "node", "operator", "word", "space", "token", "print", "argument", "DoExpression", "async", "body", "ParenthesizedExpression", "expression", "rightParens", "UpdateExpression", "prefix", "printTerminatorless", "ConditionalExpression", "test", "consequent", "alternate", "NewExpression", "parent", "callee", "format", "minified", "arguments", "length", "optional", "typeArguments", "typeParameters", "printList", "SequenceExpression", "expressions", "ThisExpression", "Super", "isDecoratorMemberExpression", "type", "computed", "property", "object", "shouldParenthesizeDecoratorExpression", "_shouldPrintDecoratorsBeforeExport", "decoratorsBeforeExport", "start", "declaration", "Decorator", "newline", "OptionalMemberExpression", "TypeError", "value", "OptionalCallExpression", "CallExpression", "Import", "AwaitExpression", "YieldExpression", "delegate", "EmptyStatement", "semicolon", "ExpressionStatement", "AssignmentPattern", "left", "typeAnnotation", "right", "AssignmentExpression", "parens", "inForStatementInitCounter", "needsParens", "BindExpression", "MemberExpression", "MetaProperty", "meta", "PrivateName", "id", "V8IntrinsicIdentifier", "name", "ModuleExpression", "indent", "directives", "dedent", "rightBrace", "_t", "require", "isFor", "isForStatement", "isIfStatement", "isStatement", "WithStatement", "node", "word", "space", "token", "print", "object", "printBlock", "IfStatement", "test", "needsBlock", "alternate", "getLastStatement", "consequent", "newline", "indent", "printAndIndentOnComments", "dedent", "endsWith", "statement", "body", "ForStatement", "inForStatementInitCounter", "init", "update", "WhileStatement", "ForXStatement", "isForOf", "type", "await", "noIndentInnerCommentsHere", "left", "right", "ForInStatement", "exports", "ForOfStatement", "DoWhileStatement", "semicolon", "printStatementAfterKeyword", "printer", "parent", "isLabel", "printTerminatorless", "BreakStatement", "label", "ContinueStatement", "ReturnStatement", "argument", "ThrowStatement", "LabeledStatement", "TryStatement", "block", "handlers", "handler", "finalizer", "CatchClause", "param", "typeAnnotation", "SwitchStatement", "discriminant", "printSequence", "cases", "addNewlines", "leading", "cas", "length", "rightBrace", "SwitchCase", "DebuggerStatement", "VariableDeclaration", "declare", "kind", "hasInits", "declar", "declarations", "printList", "separator", "undefined", "VariableDeclarator", "id", "definite", "_t", "require", "isExportDefaultDeclaration", "isExportNamedDeclaration", "ClassDeclaration", "node", "parent", "inExport", "_shouldPrintDecoratorsBeforeExport", "printJoin", "decorators", "declare", "word", "space", "abstract", "id", "print", "typeParameters", "superClass", "superTypeParameters", "implements", "printList", "body", "ClassBody", "token", "length", "newline", "printSequence", "indent", "endsWith", "rightBrace", "ClassProperty", "_node$key$loc", "endLine", "key", "loc", "end", "line", "catchUp", "tsPrintClassMemberModifiers", "computed", "_variance", "optional", "definite", "typeAnnotation", "value", "semicolon", "ClassAccessorProperty", "_node$key$loc2", "ClassPrivateProperty", "static", "ClassMethod", "_classMethodHead", "ClassPrivateMethod", "_node$key$loc3", "_methodHead", "StaticBlock", "_t", "require", "isIdentifier", "_params", "node", "idNode", "parentNode", "print", "typeParameters", "nameInfo", "_getFuncIdName", "call", "sourceIdentifierName", "name", "pos", "token", "_parameters", "params", "noLineTerminator", "type", "returnType", "_noLineTerminator", "parameters", "parent", "paramLength", "length", "i", "_param", "space", "parameter", "printJoin", "decorators", "optional", "typeAnnotation", "_methodHead", "kind", "key", "word", "async", "generator", "computed", "undefined", "_predicate", "noLineTerminatorAfter", "predicate", "_functionHead", "_endsWithInnerRaw", "id", "FunctionExpression", "body", "ArrowFunctionExpression", "firstParam", "format", "retainLines", "hasTypesOrComments", "printInnerComments", "param", "_param$leadingComment", "_param$trailingCommen", "leadingComments", "trailingComments", "parentType", "left", "_id$loc", "_id$loc2", "loc", "start", "identifierName", "_id$loc3", "_id$loc4", "value", "_t", "require", "isClassDeclaration", "isExportDefaultSpecifier", "isExportNamespaceSpecifier", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isStatement", "ImportSpecifier", "node", "importKind", "word", "space", "print", "imported", "local", "name", "ImportDefaultSpecifier", "ExportDefaultSpecifier", "exported", "ExportSpecifier", "exportKind", "ExportNamespaceSpecifier", "token", "warningShown", "_printAttributes", "importAttributesKeyword", "format", "attributes", "assertions", "console", "warn", "useAssertKeyword", "printList", "ExportAllDeclaration", "_node$attributes", "_node$assertions", "length", "source", "semicolon", "maybePrintDecoratorsBeforeExport", "printer", "declaration", "_shouldPrintDecoratorsBeforeExport", "printJoin", "decorators", "ExportNamedDeclaration", "declar", "specifiers", "slice", "hasSpecial", "first", "shift", "_node$attributes2", "_node$assertions2", "ExportDefaultDeclaration", "noIndentInnerCommentsHere", "ImportDeclaration", "_node$attributes3", "_node$assertions3", "isTypeKind", "module", "phase", "hasSpecifiers", "ImportAttribute", "key", "value", "ImportNamespaceSpecifier", "ImportExpression", "options", "hasOwnProperty", "object", "value", "hexadecimal", "_t", "require", "_jsesc", "isAssignmentPattern", "isIdentifier", "Identifier", "node", "_node$loc", "sourceIdentifierName", "loc", "identifierName", "name", "word", "ArgumentPlaceholder", "token", "RestElement", "print", "argument", "ObjectExpression", "props", "properties", "length", "space", "printList", "indent", "statement", "sourceWithOffset", "ObjectMethod", "printJoin", "decorators", "_methodHead", "body", "ObjectProperty", "computed", "key", "value", "left", "shorthand", "ArrayExpression", "elems", "elements", "len", "i", "elem", "RecordExpression", "startToken", "endToken", "format", "recordAndTupleSyntaxType", "Error", "JSON", "stringify", "TupleExpression", "RegExpLiteral", "pattern", "flags", "BooleanLiteral", "NullLiteral", "NumericLiteral", "raw", "getPossibleRaw", "opts", "jsescOption", "str", "numbers", "number", "jsesc", "minified", "StringLiteral", "undefined", "val", "BigIntLiteral", "DecimalLiteral", "validTopicTokenSet", "Set", "TopicReference", "topicToken", "has", "givenTopicTokenJSON", "validTopics", "Array", "from", "v", "join", "PipelineTopicExpression", "expression", "PipelineBareFunction", "callee", "PipelinePrimaryTopicReference", "_t", "require", "_modules", "_types2", "isDeclareExportDeclaration", "isStatement", "AnyTypeAnnotation", "word", "ArrayTypeAnnotation", "node", "print", "elementType", "token", "BooleanTypeAnnotation", "BooleanLiteralTypeAnnotation", "value", "NullLiteralTypeAnnotation", "DeclareClass", "parent", "space", "_interfaceish", "DeclareFunction", "id", "typeAnnotation", "predicate", "semicolon", "InferredPredicate", "DeclaredPredicate", "DeclareInterface", "InterfaceDeclaration", "DeclareModule", "body", "DeclareModuleExports", "DeclareTypeAlias", "TypeAlias", "DeclareOpaqueType", "OpaqueType", "DeclareVariable", "DeclareExportDeclaration", "default", "FlowExportDeclaration", "call", "DeclareExportAllDeclaration", "ExportAllDeclaration", "EnumDeclaration", "enumExplicitType", "context", "name", "hasExplicitType", "enumBody", "members", "indent", "newline", "member", "hasUnknownMembers", "dedent", "EnumBooleanBody", "explicitType", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody", "EnumDefaultedMember", "enumInitializedMember", "init", "EnumBooleanMember", "EnumNumberMember", "EnumStringMember", "declaration", "declar", "specifiers", "length", "printList", "source", "ExistsTypeAnnotation", "FunctionTypeAnnotation", "typeParameters", "this", "params", "rest", "type", "method", "returnType", "FunctionTypeParam", "optional", "InterfaceExtends", "_node$extends", "extends", "_node$mixins", "_node$implements", "mixins", "implements", "_variance", "_node$variance", "kind", "variance", "andSeparator", "InterfaceTypeAnnotation", "_node$extends2", "IntersectionTypeAnnotation", "printJoin", "types", "separator", "MixedTypeAnnotation", "EmptyTypeAnnotation", "NullableTypeAnnotation", "NumberTypeAnnotation", "StringTypeAnnotation", "ThisTypeAnnotation", "TupleTypeAnnotation", "TypeofTypeAnnotation", "argument", "right", "TypeAnnotation", "TypeParameterInstantiation", "TypeParameter", "bound", "supertype", "impltype", "ObjectTypeAnnotation", "exact", "props", "properties", "callProperties", "indexers", "internalSlots", "addNewlines", "leading", "statement", "iterator", "inexact", "ObjectTypeInternalSlot", "static", "ObjectTypeCallProperty", "ObjectTypeIndexer", "key", "ObjectTypeProperty", "proto", "ObjectTypeSpreadProperty", "QualifiedTypeIdentifier", "qualification", "SymbolTypeAnnotation", "orSeparator", "UnionTypeAnnotation", "TypeCastExpression", "expression", "Variance", "VoidTypeAnnotation", "IndexedAccessType", "objectType", "indexType", "OptionalIndexedAccessType", "File", "node", "program", "print", "interpreter", "Program", "_node$directives", "noIndentInnerCommentsHere", "printInnerComments", "directivesLen", "directives", "length", "_node$directives$trai", "newline", "body", "printSequence", "trailingCommentsLineOffset", "trailingComments", "BlockStatement", "_node$directives2", "token", "_node$directives$trai2", "indent", "rightBrace", "Directive", "value", "semicolon", "unescapedSingleQuoteRE", "unescapedDoubleQuoteRE", "DirectiveLiteral", "raw", "getPossibleRaw", "format", "minified", "undefined", "test", "Error", "InterpreterDirective", "Placeholder", "name", "expectedNode", "JSXAttribute", "node", "print", "name", "value", "token", "JSXIdentifier", "word", "JSXNamespacedName", "namespace", "JSXMemberExpression", "object", "property", "JSXSpreadAttribute", "argument", "JSXExpressionContainer", "expression", "JSXSpreadChild", "JSXText", "raw", "getPossibleRaw", "undefined", "JSXElement", "open", "openingElement", "selfClosing", "indent", "child", "children", "dedent", "closingElement", "spaceSeparator", "space", "JSXOpeningElement", "typeParameters", "attributes", "length", "printJoin", "separator", "JSXClosingElement", "JSXEmptyExpression", "printInnerComments", "JSXFragment", "openingFragment", "closingFragment", "JSXOpeningFragment", "JSXClosingFragment", "TSTypeAnnotation", "node", "token", "space", "optional", "print", "typeAnnotation", "TSTypeParameterInstantiation", "parent", "printList", "params", "type", "length", "TSTypeParameter", "in", "word", "out", "name", "constraint", "default", "TSParameterProperty", "accessibility", "readonly", "_param", "parameter", "TSDeclareFunction", "declare", "_functionHead", "TSDeclareMethod", "_classMethodHead", "TSQualifiedName", "left", "right", "TSCallSignatureDeclaration", "tsPrintSignatureDeclarationBase", "TSConstructSignatureDeclaration", "TSPropertySignature", "tsPrintPropertyOrMethodName", "computed", "key", "TSMethodSignature", "kind", "TSIndexSignature", "static", "isStatic", "_parameters", "parameters", "TSAnyKeyword", "TSBigIntKeyword", "TSUnknownKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSBooleanKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSVoidKeyword", "TSUndefinedKeyword", "TSNullKeyword", "TSNeverKeyword", "TSIntrinsicKeyword", "TSThisType", "TSFunctionType", "tsPrintFunctionOrConstructorType", "TSConstructorType", "abstract", "typeParameters", "returnType", "TSTypeReference", "typeName", "TSTypePredicate", "asserts", "parameterName", "TSTypeQuery", "exprName", "TSTypeLiteral", "tsPrintTypeLiteralOrInterfaceBody", "members", "tsPrintBraced", "printer", "indent", "newline", "member", "dedent", "rightBrace", "TSArrayType", "elementType", "TSTupleType", "elementTypes", "TSOptionalType", "TSRestType", "TSNamedTupleMember", "label", "TSUnionType", "tsPrintUnionOrIntersectionType", "TSIntersectionType", "sep", "printJoin", "types", "separator", "TSConditionalType", "checkType", "extendsType", "trueType", "falseType", "TSInferType", "typeParameter", "TSParenthesizedType", "TSTypeOperator", "operator", "TSIndexedAccessType", "objectType", "indexType", "TSMappedType", "nameType", "tokenIfPlusMinus", "self", "tok", "TSLiteralType", "literal", "TSExpressionWithTypeArguments", "expression", "TSInterfaceDeclaration", "id", "extends", "extendz", "body", "TSInterfaceBody", "TSTypeAliasDeclaration", "TSTypeExpression", "_expression$trailingC", "forceParens", "trailingComments", "undefined", "TSTypeAssertion", "TSInstantiationExpression", "TSEnumDeclaration", "const", "isConst", "TSEnumMember", "initializer", "TSModuleDeclaration", "global", "TSModuleBlock", "TSImportType", "argument", "qualifier", "TSImportEqualsDeclaration", "isExport", "moduleReference", "TSExternalModuleReference", "TSNonNullExpression", "TSExportAssignment", "TSNamespaceExportDeclaration", "tsPrintClassMemberModifiers", "isField", "override", "_templateLiterals", "require", "Object", "keys", "forEach", "key", "exports", "defineProperty", "enumerable", "get", "_expressions", "_statements", "_classes", "_methods", "_modules", "_types", "_flow", "_base", "_jsx", "_typescript", "_buffer", "require", "n", "_t", "generatorFunctions", "isFunction", "isStatement", "isClassBody", "isTSInterfaceBody", "isTSEnumDeclaration", "SCIENTIFIC_NOTATION", "ZERO_DECIMAL_INTEGER", "HAS_NEWLINE", "HAS_NEWLINE_OR_BlOCK_COMMENT_END", "needsParens", "Printer", "constructor", "format", "map", "inForStatementInitCounter", "_printStack", "_indent", "_indentRepeat", "_insideAux", "_parenPushNewlineState", "_noLineTerminator", "_printAuxAfterOnNextUserNode", "_printedComments", "Set", "_endsWithInteger", "_endsWithWord", "_lastCommentLine", "_endsWithInnerRaw", "_indentInnerComments", "indent", "style", "length", "_inputMap", "_buf", "Buffer", "generate", "ast", "print", "_maybeAddAuxComment", "get", "compact", "concise", "dedent", "semicolon", "force", "_appendChar", "_queue", "rightBrace", "node", "minified", "removeLastSemicolon", "sourceWithOffset", "loc", "token", "rightParens", "space", "_space", "hasContent", "lastCp", "getLastChar", "word", "str", "noLineTerminatorAfter", "_maybePrintInnerComments", "charCodeAt", "endsWith", "_append", "number", "isNonDecimalLiteral", "secondChar", "Number", "isInteger", "test", "maybeNewline", "lastChar", "strFirst", "tokenChar", "char", "newline", "i", "retainLines", "getNewlineCount", "j", "_newline", "endsWithCharAndNewline", "removeTrailingNewline", "exactSource", "cb", "_catchUp", "source", "prop", "columnOffset", "withSource", "sourceIdentifierName", "identifierName", "pos", "_canMarkIdName", "sourcePosition", "_sourcePosition", "identifierNamePos", "_maybeAddParen", "_maybeIndent", "append", "_maybeAddParenChar", "appendChar", "queue", "firstChar", "queueIndentation", "_getIndent", "_shouldIndent", "parenPushNewlineState", "printed", "len", "cha", "chaPost", "catchUp", "line", "count", "getCurrentLine", "_loc$prop", "printTerminatorless", "parent", "isLabel", "terminatorState", "trailingCommentsLineOffset", "forceParens", "_node$extra", "_node$leadingComments", "nodeType", "type", "oldConcise", "_compact", "printMethod", "undefined", "ReferenceError", "JSON", "stringify", "name", "push", "oldInAux", "parenthesized", "extra", "shouldPrintParens", "retainFunctionParens", "leadingComments", "parentType", "callee", "_printLeadingComments", "bind", "_printTrailingComments", "pop", "enteredPositionlessNode", "_printAuxBeforeComment", "_printAuxAfterComment", "comment", "auxiliaryCommentBefore", "_printComment", "value", "auxiliaryCommentAfter", "getPossibleRaw", "raw", "rawValue", "printJoin", "nodes", "opts", "_nodes$0$loc", "startLine", "start", "newlineOpts", "addNewlines", "nextNodeStartLine", "separator", "statement", "_printNewline", "iterator", "_node$trailingComment", "trailingComments", "_nextNode$loc", "nextNode", "printAndIndentOnComments", "printBlock", "body", "lineOffset", "innerComments", "_printComments", "comments", "printInnerComments", "hasSpace", "printedCommentsCount", "size", "noIndentInnerCommentsHere", "printSequence", "_opts$indent", "printList", "items", "commaSeparator", "newLine", "lastCommentLine", "offset", "_shouldPrintComment", "ignore", "has", "add", "shouldPrintComment", "skipNewLines", "noLineTerminator", "isBlockComment", "printNewLines", "lastCharCode", "val", "adjustMultilineComment", "_comment$loc", "column", "newlineRegex", "RegExp", "replace", "indentSize", "getCurrentColumn", "repeat", "nodeLoc", "hasLoc", "nodeStartLine", "nodeEndLine", "end", "lastLine", "leadingCommentNewline", "shouldPrint", "commentStartLine", "commentEndLine", "Math", "max", "min", "singleLine", "shouldSkipNewline", "properties", "Object", "assign", "prototype", "Noop", "_default", "exports", "default", "_sourceMap", "require", "_printer", "normalizeOptions", "code", "opts", "format", "auxiliaryCommentBefore", "auxiliaryCommentAfter", "shouldPrintComment", "retainLines", "retainFunctionParens", "comments", "compact", "minified", "concise", "indent", "adjustMultilineComment", "style", "jsescOption", "Object", "assign", "quotes", "wrap", "minimal", "topicToken", "importAttributesKeyword", "_opts$recordAndTupleS", "decoratorsBeforeExport", "json", "jsonCompatibleStrings", "recordAndTupleSyntaxType", "value", "includes", "length", "console", "error", "filename", "undefined", "exports", "CodeGenerator", "constructor", "ast", "_ast", "_format", "_map", "sourceMaps", "SourceMap", "generate", "printer", "Printer", "map", "_t", "require", "VISITOR_KEYS", "findParent", "callback", "path", "parentPath", "find", "getFunctionParent", "p", "isFunction", "getStatementParent", "Array", "isArray", "container", "isStatement", "isProgram", "isFile", "Error", "getEarliestCommonAncestorFrom", "paths", "getDeepestCommonAncestorFrom", "deepest", "i", "ancestries", "earliest", "keys", "type", "ancestry", "listKey", "key", "earliestKeyIndex", "indexOf", "parentKey", "currentKeyIndex", "filter", "length", "minDepth", "Infinity", "lastCommonIndex", "lastCommon", "map", "unshift", "first", "depthLoop", "shouldMatch", "getAncestry", "push", "isAncestor", "maybeDescendant", "isDescendant", "maybeAncestor", "parent", "inType", "candidateTypes", "node", "_t", "require", "createFlowUnionType", "createTSUnionType", "createUnionTypeAnnotation", "isFlowType", "isTSType", "createUnionType", "types", "every", "v", "_t", "require", "_util", "BOOLEAN_NUMBER_BINARY_OPERATORS", "createTypeAnnotationBasedOnTypeof", "numberTypeAnnotation", "voidTypeAnnotation", "_default", "node", "isReferenced", "binding", "scope", "getBinding", "name", "identifier", "typeAnnotation", "getTypeAnnotationBindingConstantViolations", "path", "types", "functionConstantViolations", "constantViolations", "getConstantViolationsBefore", "testType", "getConditionalAnnotation", "testConstantViolations", "ifStatement", "filter", "indexOf", "push", "length", "violation", "getTypeAnnotation", "createUnionType", "functions", "violations", "slice", "unshift", "resolve", "status", "_guessExecutionStatusRelativeTo", "inferAnnotationFromBinaryExpression", "operator", "right", "get", "left", "target", "isIdentifier", "typeofPath", "typePath", "isUnaryExpression", "isLiteral", "typeValue", "value", "getParentConditionalPath", "parentPath", "isIfStatement", "isConditionalExpression", "key", "isFunction", "test", "paths", "i", "isLogicalExpression", "isBinaryExpression", "type", "_t", "require", "_infererReference", "_util", "BOOLEAN_BINARY_OPERATORS", "BOOLEAN_UNARY_OPERATORS", "NUMBER_BINARY_OPERATORS", "NUMBER_UNARY_OPERATORS", "STRING_UNARY_OPERATORS", "anyTypeAnnotation", "arrayTypeAnnotation", "booleanTypeAnnotation", "buildMatchMemberExpression", "genericTypeAnnotation", "identifier", "nullLiteralTypeAnnotation", "numberTypeAnnotation", "stringTypeAnnotation", "tupleTypeAnnotation", "unionTypeAnnotation", "voidTypeAnnotation", "isIdentifier", "VariableDeclarator", "get", "getTypeAnnotation", "TypeCastExpression", "node", "typeAnnotation", "validParent", "TSAsExpression", "TSNonNullExpression", "NewExpression", "callee", "type", "TemplateLiteral", "UnaryExpression", "operator", "indexOf", "BinaryExpression", "right", "left", "isBaseType", "LogicalExpression", "argumentTypes", "createUnionType", "ConditionalExpression", "SequenceExpression", "pop", "ParenthesizedExpression", "AssignmentExpression", "UpdateExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "RegExpLiteral", "ObjectExpression", "ArrayExpression", "RestElement", "Func", "isArrayFrom", "isObjectKeys", "isObjectValues", "isObjectEntries", "CallExpression", "name", "resolveCall", "TaggedTemplateExpression", "resolve", "isFunction", "async", "generator", "returnType", "inferers", "require", "_t", "anyTypeAnnotation", "isAnyTypeAnnotation", "isArrayTypeAnnotation", "isBooleanTypeAnnotation", "isEmptyTypeAnnotation", "isFlowBaseAnnotation", "isGenericTypeAnnotation", "isIdentifier", "isMixedTypeAnnotation", "isNumberTypeAnnotation", "isStringTypeAnnotation", "isTSArrayType", "isTSTypeAnnotation", "isTSTypeReference", "isTupleTypeAnnotation", "isTypeAnnotation", "isUnionTypeAnnotation", "isVoidTypeAnnotation", "stringTypeAnnotation", "voidTypeAnnotation", "getTypeAnnotation", "type", "getData", "_getTypeAnnotation", "typeAnnotation", "setData", "typeAnnotationInferringNodes", "WeakSet", "node", "key", "parentPath", "isVariableDeclarator", "declar", "declarParent", "isForInStatement", "isForOfStatement", "has", "add", "_inferer", "inferer", "call", "validParent", "delete", "isBaseType", "baseName", "soft", "_isBaseType", "Error", "couldBeBaseType", "name", "type2", "types", "baseTypeStrictlyMatches", "rightArg", "left", "right", "isGenericType", "genericName", "id", "typeName", "_t", "require", "assignmentExpression", "expressionStatement", "identifier", "visitor", "Scope", "path", "state", "kind", "skip", "FunctionParent", "VariableDeclaration", "node", "nodes", "declarations", "get", "firstId", "declar", "id", "init", "push", "name", "Object", "keys", "getBindingIdentifiers", "emit", "parentPath", "isFor", "left", "replaceWith", "replaceWithMultiple", "hoistVariables", "traverse", "_codeFrame", "require", "_index", "_index2", "_cache", "_parser", "_t", "_helperHoistVariables", "FUNCTION_TYPES", "arrowFunctionExpression", "assignmentExpression", "awaitExpression", "blockStatement", "buildUndefinedNode", "callExpression", "cloneNode", "conditionalExpression", "expressionStatement", "getBindingIdentifiers", "identifier", "inheritLeadingComments", "inheritTrailingComments", "inheritsComments", "isBlockStatement", "isEmptyStatement", "isExpression", "isExpressionStatement", "isIfStatement", "isProgram", "isStatement", "isVariableDeclaration", "removeComments", "returnStatement", "sequenceExpression", "validate", "yieldExpression", "replaceWithMultiple", "nodes", "_getCachedPaths", "resync", "_verifyNodeList", "node", "length", "getCachedPaths", "hub", "parent", "delete", "container", "key", "paths", "insertAfter", "requeue", "remove", "replaceWithSourceString", "replacement", "ast", "parse", "err", "loc", "message", "codeFrameColumns", "start", "line", "column", "code", "expressionAST", "program", "body", "expression", "traverse", "removeProperties", "replaceWith", "replacementPath", "removed", "Error", "NodePath", "Array", "isArray", "nodePath", "isNodeType", "canHaveVariableDeclarationOrExpression", "canSwapBetweenExpressionAndStatement", "parentPath", "isExportDefaultDeclaration", "replaceExpressionWithStatements", "oldNode", "_replaceWith", "type", "setScope", "get", "_getCachedPaths2", "ReferenceError", "inList", "debug", "set", "declars", "nodesAsSingleExpression", "gatherSequenceExpressions", "id", "scope", "push", "functionParent", "getFunctionParent", "isParentAsync", "is", "isParentGenerator", "callee", "hoistVariables", "completionRecords", "getCompletionRecords", "path", "loop", "findParent", "isLoop", "uid", "getData", "generateDeclaredUidIdentifier", "pushContainer", "setData", "name", "arrowFunctionToExpression", "newCallee", "needToAwaitFunction", "hasType", "needToYieldFunction", "exprs", "ensureLastUndefined", "kind", "declar", "declarations", "bindings", "Object", "keys", "init", "consequent", "alternate", "test", "indexOf", "replaceInline", "_containerInsertAfter", "VALID_OBJECT_CALLEES", "VALID_IDENTIFIER_CALLEES", "INVALID_METHODS", "isValidObjectCallee", "val", "includes", "isValidIdentifierCallee", "isInvalidMethod", "evaluateTruthy", "res", "evaluate", "confident", "value", "deopt", "path", "state", "deoptPath", "Globals", "Map", "undefined", "Infinity", "NaN", "evaluateCached", "node", "seen", "has", "existing", "get", "resolved", "item", "set", "_evaluate", "isSequenceExpression", "exprs", "length", "isStringLiteral", "isNumericLiteral", "isBooleanLiteral", "isNullLiteral", "isTemplateLiteral", "evaluateQuasis", "quasis", "isTaggedTemplateExpression", "isMemberExpression", "object", "name", "property", "isIdentifier", "scope", "getBinding", "quasi", "isConditionalExpression", "testResult", "isExpressionWrapper", "parentPath", "isCallExpression", "callee", "isLiteral", "type", "key", "computed", "isReferencedIdentifier", "binding", "constantViolations", "start", "end", "hasValue", "resolve", "isUnaryExpression", "prefix", "operator", "argument", "isFunction", "isClass", "arg", "isArrayExpression", "arr", "elems", "elem", "elemValue", "push", "isObjectExpression", "obj", "props", "prop", "isObjectMethod", "isSpreadElement", "keyPath", "valuePath", "isLogicalExpression", "wasConfident", "left", "leftConfident", "right", "rightConfident", "isBinaryExpression", "Math", "pow", "context", "func", "global", "hasOwnProperty", "call", "args", "map", "apply", "raw", "str", "i", "cooked", "expr", "String", "_template", "require", "_t", "NOT_LOCAL_BINDING", "cloneNode", "identifier", "isAssignmentExpression", "isAssignmentPattern", "isFunction", "isIdentifier", "isLiteral", "isNullLiteral", "isObjectMethod", "isObjectProperty", "isRegExpLiteral", "isRestElement", "isTemplateLiteral", "isVariableDeclarator", "toBindingIdentifierName", "getFunctionArity", "node", "count", "params", "findIndex", "param", "length", "buildPropertyMethodAssignmentWrapper", "template", "statement", "buildGeneratorPropertyMethodAssignmentWrapper", "visitor", "path", "state", "name", "localDeclar", "scope", "getBindingIdentifier", "outerDeclar", "selfReference", "stop", "getNameFromLiteralId", "id", "pattern", "flags", "quasis", "map", "quasi", "value", "raw", "join", "undefined", "wrap", "method", "hasBinding", "hasGlobal", "rename", "build", "generator", "FUNCTION", "FUNCTION_ID", "FUNCTION_KEY", "generateUidIdentifier", "expression", "callee", "body", "i", "len", "push", "getProgramParent", "references", "visit", "selfAssignment", "binding", "getOwnBinding", "kind", "traverse", "_default", "parent", "localBinding", "supportUnicodeId", "computed", "key", "getBinding", "constant", "operator", "left", "test", "newId", "_t", "require", "_helperEnvironmentVisitor", "_helperFunctionName", "_visitors", "arrowFunctionExpression", "assignmentExpression", "binaryExpression", "blockStatement", "callExpression", "conditionalExpression", "expressionStatement", "identifier", "isIdentifier", "jsxIdentifier", "logicalExpression", "LOGICAL_OPERATORS", "memberExpression", "metaProperty", "numericLiteral", "objectExpression", "restElement", "returnStatement", "sequenceExpression", "spreadElement", "stringLiteral", "super", "_super", "thisExpression", "toExpression", "unaryExpression", "toComputedKey", "key", "isMemberExpression", "node", "property", "isProperty", "isMethod", "ReferenceError", "computed", "name", "ensureBlock", "body", "get", "bodyNode", "Array", "isArray", "Error", "isBlockStatement", "statements", "stringPath", "listKey", "isStatement", "push", "isFunction", "parentPath", "setup", "exports", "arrowFunctionToShadowed", "isArrowFunctionExpression", "arrowFunctionToExpression", "unwrapFunctionEnvironment", "isFunctionExpression", "isFunctionDeclaration", "buildCodeFrameError", "hoistFunctionEnvironment", "setType", "path", "type", "allowInsertArrow", "allowInsertArrowWithRest", "noNewArrows", "_arguments$", "arguments", "specCompliant", "thisBinding", "fnPath", "fn", "checkBinding", "scope", "generateUidIdentifier", "id", "init", "unshiftContainer", "hub", "addHelper", "replaceWith", "nameFunction", "getSuperCallsVisitor", "mergeVisitors", "CallExpression", "child", "allSuperCalls", "isSuper", "environmentVisitor", "arrowParent", "thisEnvFn", "findParent", "p", "_arrowParent", "isProgram", "isClassProperty", "static", "isClassPrivateProperty", "inConstructor", "isClassMethod", "kind", "thisPaths", "argumentsPaths", "newTargetPaths", "superProps", "superCalls", "getScopeInformation", "length", "traverse", "superBinding", "getSuperBinding", "forEach", "superCall", "callee", "loc", "argumentsBinding", "getBinding", "args", "buildUndefinedNode", "argumentsChild", "argsRef", "newTargetBinding", "targetChild", "targetRef", "flatSuperProps", "reduce", "acc", "superProp", "concat", "standardizeSuperProperty", "superParentPath", "isAssignment", "isAssignmentExpression", "left", "isCall", "isCallExpression", "isTaggedTemplate", "isTaggedTemplateExpression", "tag", "getSuperPropBinding", "value", "right", "call", "getThisBinding", "hasSuperClass", "thisChild", "thisRef", "isJSX", "isLogicalOp", "op", "includes", "operator", "assignmentPath", "slice", "isLogicalAssignment", "tmp", "generateDeclaredUidIdentifier", "object", "rightExpression", "isUpdateExpression", "updateExpr", "computedKey", "parts", "prefix", "superClass", "assignSuperThisVisitor", "supers", "has", "add", "replaceWithMultiple", "WeakSet", "argsBinding", "propName", "argsList", "fnBody", "method", "unshift", "valueIdent", "cacheKey", "data", "getData", "setData", "getScopeInformationVisitor", "ThisExpression", "JSXIdentifier", "isJSXMemberExpression", "isJSXOpeningElement", "MemberExpression", "Identifier", "isReferencedIdentifier", "curr", "hasOwnBinding", "rename", "parent", "MetaProperty", "_t", "require", "STATEMENT_OR_BLOCK_KEYS", "VISITOR_KEYS", "isBlockStatement", "isExpression", "isIdentifier", "isLiteral", "isStringLiteral", "isType", "matchesPattern", "_matchesPattern", "pattern", "allowPartial", "node", "has", "key", "_this$node", "val", "Array", "isArray", "length", "isStatic", "scope", "is", "exports", "isnt", "equals", "value", "isNodeType", "type", "canHaveVariableDeclarationOrExpression", "parentPath", "isFor", "canSwapBetweenExpressionAndStatement", "replacement", "isArrowFunctionExpression", "isCompletionRecord", "allowInsideFunction", "path", "first", "container", "isFunction", "isProgram", "isDoExpression", "isStatementOrBlock", "isLabeledStatement", "includes", "referencesImport", "moduleSource", "importName", "isReferencedIdentifier", "isJSXMemberExpression", "property", "name", "isMemberExpression", "isOptionalMemberExpression", "computed", "object", "get", "binding", "getBinding", "kind", "parent", "isImportDeclaration", "source", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isImportSpecifier", "imported", "getSource", "end", "code", "hub", "getCode", "slice", "start", "willIMaybeExecuteBefore", "target", "_guessExecutionStatusRelativeTo", "getOuterFunction", "getFunctionParent", "getProgramParent", "isExecutionUncertain", "isExecutionUncertainInList", "paths", "maxIndex", "i", "parentKey", "SYMBOL_CHECKING", "Symbol", "_guessExecutionStatusRelativeToCached", "Map", "base", "cache", "funcParent", "this", "_guessExecutionStatusRelativeToDifferentFunctionsCached", "getAncestry", "indexOf", "commonPath", "commonIndex", "Error", "divergence", "listKey", "keys", "keyPosition", "_guessExecutionStatusRelativeToDifferentFunctionsInternal", "isFunctionDeclaration", "isExportDeclaration", "id", "references", "referencePaths", "allStatus", "childOfFunction", "find", "isCallExpression", "status", "nodeMap", "cached", "set", "result", "resolve", "dangerous", "resolved", "_resolve", "push", "isVariableDeclarator", "constant", "ret", "isTypeCastExpression", "targetKey", "toComputedKey", "targetName", "isObjectExpression", "props", "prop", "isProperty", "match", "isArrayExpression", "isNaN", "elems", "elem", "isConstantExpression", "isRegExpLiteral", "isTemplateLiteral", "every", "expression", "isUnaryExpression", "operator", "isBinaryExpression", "hasBinding", "noGlobals", "arguments", "isInStrictMode", "strictParent", "sourceType", "isClass", "body", "directive", "directives", "_traverseNode", "require", "_index", "call", "key", "opts", "debug", "node", "_call", "_opts$this$node$type", "type", "fns", "fn", "ret", "state", "then", "Error", "_traverseFlags", "isDenylisted", "_this$opts$denylist", "denylist", "blacklist", "indexOf", "restoreContext", "path", "context", "visit", "_this$opts$shouldSkip", "_this$opts", "shouldSkip", "currentContext", "shouldStop", "traverseNode", "scope", "skipKeys", "skip", "skipKey", "stop", "SHOULD_SKIP", "SHOULD_STOP", "setScope", "_this$opts2", "_this$scope", "noScope", "parentPath", "listKey", "isMethod", "isSwitchStatement", "target", "_path$opts", "getScope", "init", "setContext", "resync", "removed", "_resyncParent", "_resyncList", "_resyncKey", "parent", "container", "Array", "isArray", "i", "length", "setKey", "Object", "keys", "inList", "newContainer", "_resyncRemoved", "_markRemoved", "popContext", "contexts", "pop", "undefined", "pushContext", "push", "setup", "_this$node", "requeue", "pathToQueue", "maybeQueue", "_getQueueContexts", "hooks", "exports", "self", "parent", "removeParent", "key", "isWhile", "isSwitchCase", "isExportDeclaration", "isLabeledStatement", "listKey", "isVariableDeclaration", "node", "declarations", "length", "isExpressionStatement", "remove", "isSequenceExpression", "expressions", "replaceWith", "isBinary", "right", "left", "isIfStatement", "isLoop", "isArrowFunctionExpression", "type", "body", "_removalHooks", "require", "_cache", "_index", "_t", "getBindingIdentifiers", "remove", "_this$opts", "_assertUnremoved", "resync", "opts", "noScope", "_removeFromScope", "_callRemovalHooks", "_markRemoved", "shareCommentsWithSiblings", "_remove", "bindings", "node", "Object", "keys", "forEach", "name", "scope", "removeBinding", "parentPath", "fn", "hooks", "Array", "isArray", "container", "splice", "key", "updateSiblingKeys", "_replaceWith", "_traverseFlags", "SHOULD_SKIP", "REMOVED", "parent", "getCachedPaths", "hub", "delete", "removed", "buildCodeFrameError", "_t", "require", "_t2", "react", "cloneNode", "jsxExpressionContainer", "variableDeclaration", "variableDeclarator", "referenceVisitor", "ReferencedIdentifier", "path", "state", "isJSXIdentifier", "isCompatTag", "node", "name", "parentPath", "isJSXMemberExpression", "scope", "isFunction", "isArrowFunctionExpression", "parent", "breakOnScopePaths", "push", "binding", "getBinding", "violation", "constantViolations", "mutableBinding", "stop", "bindings", "PathHoister", "constructor", "scopes", "attachAfter", "isCompatibleScope", "key", "Object", "keys", "bindingIdentifierEquals", "identifier", "getCompatibleScopes", "indexOf", "getAttachmentPath", "_getAttachmentPath", "targetScope", "isProgram", "hasOwnBinding", "kind", "parentKey", "bindingParentPath", "getAttachmentParentForPath", "violationPath", "pop", "hasOwnParamBindings", "bodies", "get", "i", "length", "_blockHoist", "getNextScopeAttachmentParent", "Array", "isArray", "container", "isStatement", "constant", "run", "traverse", "attachTo", "getFunctionParent", "uid", "generateUidIdentifier", "declarator", "insertFn", "attached", "isVariableDeclarator", "isJSXElement", "children", "replaceWith", "exports", "default", "_cache", "require", "_hoister", "_index", "_t", "arrowFunctionExpression", "assertExpression", "assignmentExpression", "blockStatement", "callExpression", "cloneNode", "expressionStatement", "isAssignmentExpression", "isCallExpression", "isExportNamedDeclaration", "isExpression", "isIdentifier", "isSequenceExpression", "isSuper", "thisExpression", "insertBefore", "nodes_", "_assertUnremoved", "nodes", "_verifyNodeList", "parentPath", "parent", "isExpressionStatement", "isLabeledStatement", "isExportDefaultDeclaration", "isDeclaration", "isNodeType", "isJSXElement", "isForStatement", "key", "node", "push", "replaceExpressionWithStatements", "Array", "isArray", "container", "_containerInsertBefore", "isStatementOrBlock", "shouldInsertCurrentNode", "expression", "replaceWith", "unshiftContainer", "Error", "_containerInsert", "from", "updateSiblingKeys", "length", "paths", "splice", "i", "_this$context", "to", "path", "getSibling", "context", "queue", "pushContext", "contexts", "_getQueueContexts", "setScope", "debug", "maybeQueue", "_containerInsertAfter", "last", "arr", "isHiddenInSequenceExpression", "expressions", "isAlmostConstantAssignment", "scope", "left", "blockScope", "getBlockParent", "hasOwnBinding", "name", "getOwnBinding", "constantViolations", "insertAfter", "get", "map", "self", "isPattern", "unshift", "callee", "isPure", "isMethod", "computed", "temp", "generateDeclaredUidIdentifier", "pushContainer", "fromIndex", "incrementBy", "getCachedPaths", "hub", "msg", "type", "NodePath", "listKey", "setContext", "verifiedNodes", "replaceWithMultiple", "hoist", "hoister", "PathHoister", "run", "_index", "require", "_t", "getBindingIdentifiers", "_getBindingIdentifiers", "getOuterBindingIdentifiers", "_getOuterBindingIdentifiers", "numericLiteral", "unaryExpression", "NORMAL_COMPLETION", "BREAK_COMPLETION", "NormalCompletion", "path", "type", "BreakCompletion", "getOpposite", "key", "getSibling", "addCompletionRecords", "records", "context", "push", "_getCompletionRecords", "completionRecordForSwitch", "cases", "lastNormalCompletions", "i", "length", "casePath", "caseCompletions", "normalCompletions", "breakCompletions", "c", "normalCompletionToBreak", "completions", "forEach", "replaceBreakStatementInBreakCompletion", "reachable", "isBreakStatement", "label", "replaceWith", "remove", "getStatementListCompletion", "paths", "canHaveBreak", "newContext", "Object", "assign", "inCaseClause", "isBlockStatement", "shouldPopulateBreak", "statementCompletions", "every", "some", "isDeclaration", "pathCompletions", "isVariableDeclaration", "isIfStatement", "get", "isDoExpression", "isFor", "isWhile", "isLabeledStatement", "isProgram", "isFunction", "isTryStatement", "isCatchClause", "isSwitchStatement", "isSwitchCase", "getCompletionRecords", "map", "r", "NodePath", "parentPath", "parent", "container", "listKey", "setContext", "getPrevSibling", "getNextSibling", "getAllNextSiblings", "_key", "sibling", "siblings", "node", "getAllPrevSiblings", "parts", "split", "_getKey", "_getPattern", "Array", "isArray", "_", "part", "duplicates", "getBindingIdentifierPaths", "outerOnly", "search", "ids", "create", "id", "shift", "keys", "isIdentifier", "_ids", "name", "isExportDeclaration", "declaration", "isFunctionDeclaration", "isFunctionExpression", "child", "getOuterBindingIdentifierPaths", "_t", "require", "addComment", "_addComment", "addComments", "_addComments", "shareCommentsWithSiblings", "key", "node", "trailing", "trailingComments", "leading", "leadingComments", "prev", "getSibling", "next", "hasPrev", "Boolean", "hasNext", "removeIfExisting", "list", "toRemove", "length", "set", "Set", "filter", "el", "has", "type", "content", "line", "comments", "virtualTypes", "require", "_debug", "_index", "_index2", "_t", "t", "cache", "_generator", "NodePath_ancestry", "NodePath_inference", "NodePath_replacement", "NodePath_evaluation", "NodePath_conversion", "NodePath_introspection", "NodePath_context", "NodePath_removal", "NodePath_modification", "NodePath_family", "NodePath_comments", "NodePath_virtual_types_validator", "validate", "debug", "buildDebug", "REMOVED", "exports", "SHOULD_STOP", "SHOULD_SKIP", "NodePath_Final", "default", "NodePath", "constructor", "hub", "parent", "contexts", "state", "opts", "_traverseFlags", "skipKeys", "parentPath", "container", "listKey", "key", "node", "type", "data", "context", "scope", "removed", "v", "shouldStop", "shouldSkip", "get", "Error", "targetNode", "paths", "getOrCreateCachedPaths", "path", "set", "setup", "getScope", "isScope", "Scope", "setData", "val", "Object", "create", "getData", "def", "undefined", "hasNode", "buildCodeFrameError", "msg", "SyntaxError", "buildError", "traverse", "visitor", "getPathLocation", "parts", "inList", "unshift", "join", "message", "enabled", "toString", "generator", "code", "parentKey", "methods", "findParent", "find", "getFunctionParent", "getStatementParent", "getEarliestCommonAncestorFrom", "getDeepestCommonAncestorFrom", "getAncestry", "isAncestor", "isDescendant", "inType", "getTypeAnnotation", "_getTypeAnnotation", "isBaseType", "couldBeBaseType", "baseTypeStrictlyMatches", "isGenericType", "replaceWithMultiple", "replaceWithSourceString", "replaceWith", "_replaceWith", "replaceExpressionWithStatements", "replaceInline", "evaluateTruthy", "evaluate", "toComputedKey", "ensureBlock", "unwrapFunctionEnvironment", "arrowFunctionToExpression", "matchesPattern", "has", "isStatic", "is", "isnt", "equals", "isNodeType", "canHaveVariableDeclarationOrExpression", "canSwapBetweenExpressionAndStatement", "isCompletionRecord", "isStatementOrBlock", "referencesImport", "getSource", "willIMaybeExecuteBefore", "_guessExecutionStatusRelativeTo", "resolve", "_resolve", "isConstantExpression", "isInStrictMode", "call", "_call", "isDenylisted", "isBlacklisted", "visit", "skip", "skipKey", "stop", "setScope", "setContext", "resync", "_resyncParent", "_resyncKey", "_resyncList", "_resyncRemoved", "popContext", "pushContext", "setKey", "requeue", "_getQueueContexts", "remove", "_removeFromScope", "_callRemovalHooks", "_remove", "_markRemoved", "_assertUnremoved", "insertBefore", "_containerInsert", "_containerInsertBefore", "_containerInsertAfter", "insertAfter", "updateSiblingKeys", "_verifyNodeList", "unshiftContainer", "pushContainer", "hoist", "getOpposite", "getCompletionRecords", "getSibling", "getPrevSibling", "getNextSibling", "getAllNextSiblings", "getAllPrevSiblings", "_getKey", "_getPattern", "getBindingIdentifiers", "getOuterBindingIdentifiers", "getBindingIdentifierPaths", "getOuterBindingIdentifierPaths", "shareCommentsWithSiblings", "addComment", "addComments", "assign", "prototype", "arrowFunctionToShadowed", "String", "_guessExecutionStatusRelativeToDifferentFunctions", "TYPES", "typeKey", "fn", "TypeError", "keys", "includes", "push", "_index", "require", "_t", "VISITOR_KEYS", "TraversalContext", "constructor", "scope", "opts", "state", "parentPath", "queue", "priorityQueue", "shouldVisit", "node", "enter", "exit", "type", "keys", "length", "key", "create", "container", "listKey", "NodePath", "get", "parent", "maybeQueue", "path", "notPriority", "push", "visitMultiple", "visitQueue", "visitSingle", "visited", "WeakSet", "stop", "visitIndex", "resync", "contexts", "pushContext", "has", "add", "visit", "i", "popContext", "nodes", "Array", "isArray", "exports", "default", "_context", "require", "_t", "VISITOR_KEYS", "traverseNode", "node", "opts", "scope", "state", "path", "skipKeys", "visitSelf", "keys", "type", "context", "TraversalContext", "parentKey", "visitQueue", "key", "visit", "Hub", "getCode", "getScope", "addHelper", "Error", "buildError", "node", "msg", "TypeError", "exports", "default", "visitors", "require", "exports", "_t", "cache", "_traverseNode", "_index", "_index2", "_hub", "VISITOR_KEYS", "removeProperties", "traverseFast", "traverse", "parent", "opts", "scope", "state", "parentPath", "visitSelf", "noScope", "type", "Error", "explode", "traverseNode", "_default", "default", "verify", "cheap", "node", "enter", "path", "skipKeys", "clearNode", "tree", "hasDenylistedType", "has", "stop", "hasType", "denylistTypes", "includes", "denylist", "_assert", "require", "_t", "callExpression", "cloneNode", "expressionStatement", "identifier", "importDeclaration", "importDefaultSpecifier", "importNamespaceSpecifier", "importSpecifier", "memberExpression", "stringLiteral", "variableDeclaration", "variableDeclarator", "ImportBuilder", "constructor", "importedSource", "scope", "hub", "_statements", "_resultName", "_importedSource", "_scope", "_hub", "done", "statements", "resultName", "import", "push", "namespace", "name", "local", "generateUidIdentifier", "statement", "length", "assert", "type", "specifiers", "default", "id", "named", "importName", "var", "expression", "defaultInterop", "_interop", "addHelper", "wildcardInterop", "callee", "declarations", "init", "fail", "prop", "read", "exports", "isModule", "path", "node", "sourceType", "_assert", "require", "_t", "_importBuilder", "_isModule", "identifier", "importSpecifier", "numericLiteral", "sequenceExpression", "isImportDeclaration", "ImportInjector", "constructor", "path", "importedSource", "opts", "_defaultOpts", "importedType", "importedInterop", "importingInterop", "ensureLiveReference", "ensureNoContext", "importPosition", "programPath", "find", "p", "isProgram", "_programPath", "_programScope", "scope", "_hub", "hub", "_applyDefaults", "addDefault", "importedSourceIn", "addNamed", "importName", "assert", "_generateImport", "addNamespace", "addSideEffect", "isInit", "newOpts", "Object", "assign", "nameHint", "undefined", "blockHoist", "isDefault", "isNamed", "isNamespace", "name", "isMod", "isModule", "isModuleForNode", "isModuleForBabel", "Error", "builder", "ImportBuilder", "import", "namespace", "named", "es6Default", "default", "var", "wildcardInterop", "defaultInterop", "read", "prop", "statements", "resultName", "done", "_insertStatements", "type", "_insertStatementsAfter", "_insertStatementsBefore", "unshiftContainer", "length", "isValueImport", "firstImportDecl", "get", "node", "source", "value", "maybeAppendImportSpecifiers", "forEach", "_blockHoist", "targetPath", "val", "Number", "isFinite", "insertBefore", "statementsSet", "Set", "importDeclarations", "Map", "statement", "has", "set", "push", "lastImportPath", "bodyStmt", "newImports", "decl", "delete", "size", "insertAfter", "Array", "from", "exports", "importKind", "hasNamespaceImport", "specifiers", "hasDefaultImport", "target", "local", "unshift", "shift", "_importInjector", "require", "_isModule", "addDefault", "path", "importedSource", "opts", "ImportInjector", "addNamed", "name", "addNamespace", "addSideEffect", "_helperEnvironmentVisitor", "require", "_core", "numericLiteral", "unaryExpression", "t", "rewriteThisVisitor", "traverse", "visitors", "merge", "environmentVisitor", "ThisExpression", "path", "replaceWith", "rewriteThis", "programPath", "node", "Object", "assign", "noScope", "_t", "require", "LOGICAL_OPERATORS", "assignmentExpression", "binaryExpression", "cloneNode", "identifier", "logicalExpression", "numericLiteral", "sequenceExpression", "unaryExpression", "simpleAssignmentVisitor", "AssignmentExpression", "exit", "path", "scope", "seen", "bindingNames", "node", "operator", "has", "add", "left", "get", "isIdentifier", "localName", "name", "getBinding", "slice", "includes", "replaceWith", "right", "UpdateExpression", "includeUpdateExpression", "arg", "parentPath", "isExpressionStatement", "isCompletionRecord", "prefix", "old", "generateUidIdentifierBasedOnNode", "varName", "push", "id", "binary", "simplifyAccess", "_arguments$", "traverse", "WeakSet", "arguments", "_assert", "require", "_core", "_helperSimpleAccess", "assignmentExpression", "cloneNode", "expressionStatement", "getOuterBindingIdentifiers", "identifier", "isArrowFunctionExpression", "isClassExpression", "isFunctionExpression", "isIdentifier", "isMemberExpression", "isVariableDeclaration", "jsxIdentifier", "jsxMemberExpression", "memberExpression", "numericLiteral", "sequenceExpression", "stringLiteral", "variableDeclaration", "variableDeclarator", "t", "isInType", "path", "parent", "type", "parentPath", "exportKind", "isStatement", "isExpression", "rewriteLiveReferences", "programPath", "metadata", "wrapReference", "imported", "Map", "exported", "requeueInParent", "requeue", "source", "data", "localName", "importName", "imports", "set", "importsNamespace", "local", "exportMeta", "get", "push", "names", "rewriteBindingInitVisitorState", "scope", "traverse", "rewriteBindingInitVisitor", "bindingNames", "Set", "Array", "from", "keys", "simplifyAccess", "rewriteReferencesVisitorState", "seen", "WeakSet", "buildImportReference", "identNode", "meta", "referenced", "wrap", "_wrapReference", "namespace", "name", "_wrapReference2", "interop", "computed", "stringSpecifiers", "has", "rewriteReferencesVisitor", "Scope", "skip", "ClassDeclaration", "id", "node", "Error", "exportNames", "length", "statement", "buildBindingExportAssignmentExpression", "_blockHoist", "insertAfter", "VariableDeclaration", "isVar", "kind", "decl", "init", "buildUndefinedNode", "Object", "localExpr", "exportsObjectName", "exportName", "currentScope", "hasOwnBinding", "rename", "reduce", "expr", "buildImportThrow", "template", "expression", "ast", "ReferencedIdentifier", "add", "importData", "buildCodeFrameError", "localBinding", "getBinding", "rootBinding", "ref", "loc", "isCallExpression", "callee", "isOptionalCallExpression", "isTaggedTemplateExpression", "tag", "replaceWith", "isJSXIdentifier", "object", "property", "UpdateExpression", "arg", "update", "exportedNames", "operator", "prefix", "generateDeclaredUidIdentifier", "AssignmentExpression", "exit", "left", "assert", "assignment", "right", "ids", "programScopeIds", "filter", "find", "items", "forEach", "isExpressionStatement", "programScope", "didTransformExport", "importConstViolationName", "loopBodyScope", "ensureBlock", "bodyPath", "newLoopId", "generateUidIdentifierBasedOnNode", "registerDeclaration", "unshiftContainer", "_path", "require", "_helperValidatorIdentifier", "_helperSplitExportDeclaration", "hasExports", "metadata", "isSideEffectImport", "source", "imports", "size", "importsNamespace", "reexports", "reexportNamespace", "reexportAll", "validateImportInteropOption", "importInterop", "Error", "resolveImportInterop", "filename", "normalizeModuleAndLoadMetadata", "programPath", "exportName", "initializeReexports", "getWrapperPayload", "esNamespaceOnly", "scope", "generateUidIdentifier", "name", "stringSpecifiers", "Set", "nameAnonymousExports", "local", "sources", "getModuleMetadata", "removeImportExportDeclarations", "nameOfnamespace", "resolvedInterop", "interop", "exportNameListName", "getExportSpecifierName", "path", "isIdentifier", "node", "isStringLiteral", "stringValue", "value", "isIdentifierName", "add", "type", "assertExportSpecifier", "isExportSpecifier", "isExportNamespaceSpecifier", "buildCodeFrameError", "localData", "getLocalExportMetadata", "importNodes", "Map", "sourceData", "getData", "sourceNode", "data", "get", "basename", "extname", "loc", "wrap", "lazy", "referenced", "set", "push", "forEach", "child", "isImportDeclaration", "spec", "isImportDefaultSpecifier", "localName", "reexport", "delete", "names", "isImportNamespaceSpecifier", "isImportSpecifier", "importName", "isExportAllDeclaration", "isExportNamedDeclaration", "isExportDefaultDeclaration", "values", "needsDefault", "needsNamed", "bindingKindLookup", "kind", "declaration", "isFunctionDeclaration", "isClassDeclaration", "isVariableDeclaration", "Object", "keys", "getOuterBindingIdentifiers", "localMetadata", "getLocalMetadata", "idPath", "undefined", "ids", "getOuterBindingIdentifierPaths", "exported", "splitExportDeclaration", "remove", "_blockHoist", "replaceWith", "_core", "require", "_normalizeAndLoadMetadata", "toGetWrapperPayload", "lazy", "source", "metadata", "isSideEffectImport", "reexportAll", "test", "Array", "isArray", "indexOf", "Error", "wrapReference", "ref", "payload", "t", "callExpression", "_core", "require", "exports", "getDynamicImportSource", "node", "source", "arguments", "t", "isStringLiteral", "isTemplateLiteral", "template", "expression", "ast", "buildDynamicImport", "deferToThen", "wrapWithPromise", "builder", "specifier", "isCallExpression", "quasis", "length", "specifierToString", "identifier", "templateLiteral", "templateElement", "raw", "originalGetModuleName", "getModuleName", "exports", "default", "rootOpts", "pluginOpts", "_pluginOpts$moduleId", "_pluginOpts$moduleIds", "_pluginOpts$getModule", "_pluginOpts$moduleRoo", "moduleId", "moduleIds", "getModuleId", "moduleRoot", "filename", "filenameRelative", "sourceRoot", "moduleName", "sourceRootReplacer", "RegExp", "replace", "_assert", "require", "_core", "_helperModuleImports", "_rewriteThis", "_rewriteLiveReferences", "_normalizeAndLoadMetadata", "Lazy", "_dynamicImport", "_getModuleName", "booleanLiteral", "callExpression", "cloneNode", "directive", "directiveLiteral", "expressionStatement", "identifier", "isIdentifier", "memberExpression", "stringLiteral", "valueToNode", "variableDeclaration", "variableDeclarator", "t", "exports", "getDynamicImportSource", "rewriteModuleStatementsAndPrepareHeader", "path", "exportName", "strict", "allowTopLevelThis", "strictMode", "noInterop", "importInterop", "lazy", "getWrapperPayload", "toGetWrapperPayload", "wrapReference", "esNamespaceOnly", "filename", "constantReexports", "arguments", "loose", "enumerableModuleMeta", "noIncompleteNsImportDetection", "validateImportInteropOption", "assert", "isModule", "node", "sourceType", "meta", "normalizeModuleAndLoadMetadata", "initializeReexports", "rewriteThis", "rewriteLiveReferences", "hasStrict", "directives", "some", "value", "unshiftContainer", "headers", "hasExports", "push", "buildESModuleHeader", "nameList", "buildExportNameListDeclaration", "exportNameListName", "name", "statement", "buildExportInitializationStatements", "ensureStatementsHoisted", "statements", "forEach", "header", "_blockHoist", "wrapInterop", "programPath", "expr", "type", "hub", "addHelper", "helper", "Error", "buildNamespaceInitStatements", "metadata", "sourceMetadata", "_wrapReference", "srcNamespaceId", "localName", "importsNamespace", "template", "NAME", "SOURCE", "srcNamespace", "wrap", "buildReexportsFromMeta", "reexportNamespace", "EXPORTS", "NAMESPACE", "reexportAll", "buildNamespaceReexport", "loc", "ReexportTemplate", "constant", "constantComputed", "spec", "_wrapReference2", "namespace", "stringSpecifiers", "Array", "from", "reexports", "importName", "NAMESPACE_IMPORT", "interop", "has", "astNodes", "EXPORT_NAME", "VERIFY_NAME_LIST", "EXPORTS_LIST", "exportedVars", "Object", "create", "data", "local", "values", "names", "hasReexport", "source", "keys", "length", "scope", "generateUidIdentifier", "default", "initStatements", "kind", "buildInitStatement", "reexportsStatements", "i", "sort", "a", "b", "results", "initStatement", "chunkSize", "uninitializedExportNames", "j", "buildUndefinedNode", "InitTemplate", "computed", "expression", "define", "exportNames", "initExpr", "reduce", "acc", "params", "VALUE", "value", "i", "range", "comp", "helpers", "data", "require", "_traverse", "_codeFrame", "_t", "_helperModuleTransforms", "_semver", "cloneNode", "interpreterDirective", "errorVisitor", "enter", "path", "state", "loc", "node", "stop", "File", "constructor", "options", "code", "ast", "inputMap", "_map", "Map", "opts", "declarations", "scope", "metadata", "hub", "file", "getCode", "getScope", "addHelper", "bind", "buildError", "buildCodeFrameError", "NodePath", "get", "parentPath", "parent", "container", "key", "setContext", "shebang", "interpreter", "value", "replaceWith", "remove", "set", "val", "Error", "has", "getModuleName", "availableHelper", "name", "versionRange", "minVersion", "err", "semver", "valid", "intersects", "declar", "generator", "res", "uid", "generateUidIdentifier", "dependencies", "dep", "getDependencies", "nodes", "globals", "Object", "keys", "getAllBindings", "forEach", "hasBinding", "rename", "_compact", "added", "unshiftContainer", "isVariableDeclaration", "registerDeclaration", "msg", "_Error", "SyntaxError", "traverse", "txt", "highlightCode", "codeFrameColumns", "start", "line", "column", "end", "undefined", "exports", "default", "prototype", "addImport", "addTemplateObject", "helpers", "data", "require", "_generator", "_template", "_t", "arrayExpression", "assignmentExpression", "binaryExpression", "blockStatement", "callExpression", "cloneNode", "conditionalExpression", "exportNamedDeclaration", "exportSpecifier", "expressionStatement", "functionExpression", "identifier", "memberExpression", "objectExpression", "program", "stringLiteral", "unaryExpression", "variableDeclaration", "variableDeclarator", "buildUmdWrapper", "replacements", "template", "statement", "buildGlobal", "allowlist", "namespace", "body", "container", "tree", "push", "buildHelpers", "buildModule", "refs", "unshift", "Object", "keys", "map", "name", "buildUmd", "FACTORY_PARAMETERS", "BROWSER_ARGUMENTS", "COMMON_ARGUMENTS", "AMD_ARGUMENTS", "FACTORY_BODY", "UMD_ROOT", "buildVar", "getHelperReference", "list", "forEach", "indexOf", "ref", "nodes", "get", "ast", "exportName", "mapExportBindingAssignments", "node", "_default", "outputType", "build", "global", "module", "umd", "var", "Error", "generator", "code", "findConfigUpwards", "rootDir", "findPackageData", "filepath", "directories", "pkg", "isPackage", "findRelativeConfig", "pkgData", "envName", "caller", "config", "ignore", "findRootConfig", "dirname", "loadConfig", "name", "Error", "resolveShowConfigPath", "ROOT_CONFIG_FILENAMES", "exports", "resolvePlugin", "resolvePreset", "loadPlugin", "loadPreset", "getEnv", "defaultValue", "process", "env", "BABEL_ENV", "value", "_gensync", "data", "require", "asyncGeneratorStep", "gen", "resolve", "reject", "_next", "_throw", "key", "arg", "info", "value", "error", "done", "Promise", "then", "_asyncToGenerator", "fn", "self", "args", "arguments", "apply", "err", "undefined", "runGenerator", "gensync", "item", "isAsync", "exports", "sync", "errback", "cb", "maybeAsync", "message", "result", "isThenable", "Error", "async", "withKind", "_ref", "_x", "forwardAsync", "action", "g", "kind", "adapted", "onFirstPause", "name", "arity", "firstPause", "completed", "waitFor", "x", "_ref2", "_x2", "val", "mergeOptions", "target", "source", "k", "Object", "keys", "parserOpts", "targetObj", "mergeDefaultFields", "val", "undefined", "isIterableIterator", "value", "next", "Symbol", "iterator", "finalize", "deepArr", "Object", "freeze", "flattenToSet", "arr", "result", "Set", "stack", "length", "el", "pop", "Array", "isArray", "push", "add", "_deepArray", "require", "Plugin", "constructor", "plugin", "options", "key", "externalDependencies", "finalize", "manipulateOptions", "post", "pre", "visitor", "parserOverride", "generatorOverride", "name", "exports", "default", "_async", "require", "once", "fn", "result", "resultP", "promiseReferenced", "waitFor", "isAsync", "ok", "value", "error", "resolve", "reject", "Promise", "res", "rej", "_gensync", "data", "require", "_async", "_util", "synchronize", "gen", "gensync", "sync", "genTrue", "makeWeakCache", "handler", "makeCachedFunction", "WeakMap", "makeWeakCacheSync", "makeStrongCache", "Map", "makeStrongCacheSync", "CallCache", "callCacheSync", "callCacheAsync", "futureCache", "cachedFunction", "arg", "asyncContext", "isAsync", "callCache", "cached", "getCachedValueOrWait", "valid", "value", "cache", "CacheConfigurator", "handlerResult", "finishLock", "isIterableIterator", "onFirstPause", "setupAsyncLocks", "updateFunctionCache", "delete", "release", "getCachedValue", "cachedValue", "get", "waitFor", "promise", "config", "Lock", "configured", "forever", "deactivate", "mode", "set", "validator", "push", "constructor", "_active", "_never", "_forever", "_invalidate", "_configured", "_pairs", "_data", "simple", "makeSimpleConfigurator", "Error", "never", "using", "key", "fn", "maybeAsync", "isThenable", "then", "invalidate", "pairs", "cacheFn", "val", "assertSimpleType", "cb", "released", "_resolve", "Promise", "resolve", "require_browsers", "require_browserVersions", "require_agents", "require_parse", "require_browser", "min", "Math", "levenshtein", "a", "b", "t", "u", "i", "j", "m", "length", "n", "findSuggestion", "str", "arr", "distances", "map", "el", "indexOf", "_findSuggestion", "require", "OptionValidator", "constructor", "descriptor", "validateTopLevelOptions", "options", "TopLevelOptionShape", "validOptionNames", "Object", "keys", "option", "includes", "Error", "formatMessage", "findSuggestion", "validateBooleanOption", "name", "value", "defaultValue", "undefined", "invariant", "validateStringOption", "condition", "message", "exports", "_validator", "require", "_findSuggestion", "require_native_modules", "self", "value", "value", "self", "unreleasedLabels", "exports", "safari", "browserNameMap", "and_chr", "and_ff", "android", "chrome", "edge", "firefox", "ie", "ie_mob", "ios_saf", "node", "deno", "op_mob", "opera", "samsung", "_semver", "require", "_helperValidatorOption", "_targets", "versionRegExp", "v", "OptionValidator", "semverMin", "first", "second", "semver", "lt", "semverify", "version", "valid", "invariant", "test", "toString", "pos", "num", "indexOf", "repeat", "isUnreleasedVersion", "env", "unreleasedLabel", "unreleasedLabels", "toLowerCase", "getLowestUnreleased", "a", "b", "getHighestUnreleased", "getLowestImplementedVersion", "plugin", "environment", "result", "chrome", "TargetNames", "exports", "node", "deno", "chrome", "opera", "edge", "firefox", "safari", "ie", "ios", "android", "electron", "samsung", "rhino", "opera_mobile", "_semver", "require", "_targets", "prettifyVersion", "version", "major", "minor", "patch", "semver", "parse", "parts", "push", "join", "prettifyTargets", "targets", "Object", "keys", "reduce", "results", "target", "value", "unreleasedLabel", "unreleasedLabels", "_semver", "require", "_pretty", "_utils", "getInclusionReasons", "item", "targetVersions", "list", "minVersions", "Object", "keys", "reduce", "result", "env", "minVersion", "getLowestImplementedVersion", "targetVersion", "prettifyVersion", "minIsUnreleased", "isUnreleasedVersion", "targetIsUnreleased", "semver", "lt", "toString", "semverify", "require_plugins", "_semver", "require", "_plugins", "_utils", "targetsSupported", "target", "support", "targetEnvironments", "Object", "keys", "length", "unsupportedEnvironments", "filter", "environment", "lowestImplementedVersion", "getLowestImplementedVersion", "lowestTargetedVersion", "isUnreleasedVersion", "semver", "valid", "toString", "Error", "gt", "semverify", "isRequired", "name", "targets", "compatData", "pluginsCompatData", "includes", "excludes", "has", "filterItems", "list", "defaultIncludes", "defaultExcludes", "pluginSyntaxMap", "result", "Set", "options", "item", "add", "shippedProposalsSyntax", "get", "forEach", "delete", "_browserslist", "require", "_helperValidatorOption", "_nativeModules", "_lruCache", "_utils", "_targets", "_options", "_pretty", "_debug", "_filterItems", "ESM_SUPPORT", "browserModulesData", "v", "OptionValidator", "validateTargetNames", "targets", "validTargets", "Object", "keys", "TargetNames", "target", "Error", "formatMessage", "findSuggestion", "isBrowsersQueryValid", "browsers", "Array", "isArray", "every", "b", "validateBrowsers", "invariant", "undefined", "String", "getLowestVersions", "reduce", "all", "browser", "browserName", "browserVersion", "split", "browserNameMap", "splitVersion", "toLowerCase", "isSplitUnreleased", "isUnreleasedVersion", "semverify", "version", "isUnreleased", "getLowestUnreleased", "parsedBrowserVersion", "semverMin", "e", "outputDecimalWarning", "decimalTargets", "length", "console", "warn", "forEach", "value", "semverifyTarget", "error", "nodeTargetParser", "parsed", "process", "versions", "node", "defaultTargetParser", "generateTargets", "inputTargets", "input", "assign", "esmodules", "resolveTargets", "queries", "env", "resolved", "browserslist", "mobileToDesktop", "targetsCache", "LruCache", "max", "resolveTargetsCached", "cacheKey", "join", "cached", "get", "set", "getTargets", "options", "_browsers", "_browsers2", "configPath", "shouldParseBrowsers", "hasTargets", "shouldSearchForConfig", "ignoreBrowserslistConfig", "loadConfig", "config", "configFile", "path", "browserslistEnv", "map", "queryBrowsers", "esmSupportVersion", "getHighestUnreleased", "result", "decimalWarnings", "sort", "push", "parsedTarget", "parsedValue", "_helperCompilationTargets", "data", "require", "resolveBrowserslistConfigFile", "browserslistConfigFile", "configFilePath", "undefined", "resolveTargets", "options", "root", "optTargets", "targets", "Array", "isArray", "browsers", "Object", "assign", "esmodules", "getTargets", "ignoreBrowserslistConfig", "browserslistEnv", "_gensync", "data", "require", "_functional", "_index", "_item", "_caching", "_resolveTargets", "isEqualDescriptor", "a", "b", "_a$file", "_b$file", "_a$file2", "_b$file2", "name", "value", "options", "dirname", "alias", "ownPass", "file", "request", "resolved", "handlerOf", "optionsWithResolvedBrowserslistConfigFile", "browserslistConfigFile", "resolveBrowserslistConfigFile", "createCachedDescriptors", "plugins", "presets", "passPerPreset", "createCachedPluginDescriptors", "createCachedPresetDescriptors", "createUncachedDescriptors", "once", "createPluginDescriptors", "createPresetDescriptors", "PRESET_DESCRIPTOR_CACHE", "WeakMap", "makeWeakCacheSync", "items", "cache", "using", "dir", "makeStrongCacheSync", "makeStrongCache", "descriptors", "map", "desc", "loadCachedDescriptor", "PLUGIN_DESCRIPTOR_CACHE", "DEFAULT_OPTIONS", "cacheByOptions", "get", "set", "possibilities", "indexOf", "matches", "filter", "possibility", "length", "push", "createDescriptors", "type", "gensync", "all", "item", "index", "createDescriptor", "assertNoDuplicates", "pair", "getItemDescriptor", "Array", "isArray", "undefined", "filepath", "Error", "resolver", "loadPlugin", "loadPreset", "String", "__esModule", "default", "Map", "nameMap", "Set", "has", "conflicts", "i", "JSON", "stringify", "join", "add", "_path", "data", "require", "_configDescriptors", "createItemFromDescriptor", "desc", "ConfigItem", "createConfigItem", "value", "dirname", "type", "descriptor", "createDescriptor", "path", "resolve", "alias", "CONFIG_ITEM_BRAND", "Symbol", "for", "getItemDescriptor", "item", "_descriptor", "undefined", "constructor", "options", "name", "file", "Object", "defineProperty", "enumerable", "request", "resolved", "freeze", "prototype", "auxiliaryComment", "message", "blacklist", "breakConfig", "experimental", "externalHelpers", "extra", "jsxPragma", "loose", "metadataUsedHelpers", "modules", "nonStandard", "optional", "sourceMapName", "stage", "whitelist", "resolveModuleSource", "version", "metadata", "sourceMapTarget", "_helperCompilationTargets", "data", "require", "_options", "msg", "loc", "type", "parent", "name", "index", "JSON", "stringify", "Error", "access", "assertRootMode", "value", "undefined", "assertSourceMaps", "assertCompact", "assertSourceType", "assertCallerMetadata", "obj", "assertObject", "prop", "Object", "keys", "propLoc", "assertInputSourceMap", "assertString", "assertFunction", "assertBoolean", "Array", "isArray", "assertArray", "assertIgnoreList", "arr", "forEach", "item", "i", "assertIgnoreItem", "RegExp", "assertConfigApplicableTest", "checkValidTest", "assertConfigFileSearch", "assertBabelrcSearch", "assertPluginList", "assertPluginItem", "length", "assertPluginTarget", "opts", "assertTargets", "isBrowsersQueryValid", "browsersLoc", "esmodulesLoc", "assertBrowsersList", "browsers", "esmodules", "key", "val", "subLoc", "hasOwnProperty", "call", "TargetNames", "validTargets", "join", "assertBrowserVersion", "Math", "round", "assertAssumptions", "root", "inPreset", "source", "assumptionsNames", "has", "ErrorToString", "Function", "call", "bind", "Error", "prototype", "toString", "SUPPORTED", "captureStackTrace", "_Object$getOwnPropert", "Object", "getOwnPropertyDescriptor", "writable", "START_HIDING", "STOP_HIDING", "expectedErrors", "WeakSet", "virtualFrames", "WeakMap", "CallSite", "filename", "create", "isNative", "isConstructor", "isToplevel", "getFileName", "getLineNumber", "undefined", "getColumnNumber", "getFunctionName", "getMethodName", "getTypeName", "injectVirtualStackFrame", "error", "frames", "get", "set", "push", "expectedError", "add", "beginHiddenCallStack", "fn", "defineProperty", "args", "setupPrepareStackTrace", "value", "endHiddenCallStack", "prepareStackTrace", "defaultPrepareStackTrace", "MIN_STACK_TRACE_LIMIT", "stackTraceLimit", "Math", "max", "stackTraceRewriter", "err", "trace", "newTrace", "isExpected", "has", "status", "i", "length", "name", "unshift", "join", "_rewriteStackTrace", "require", "ConfigError", "Error", "constructor", "message", "filename", "expectedError", "injectVirtualStackFrame", "exports", "default", "_removed", "require", "_optionAssertions", "_configError", "ROOT_VALIDATORS", "cwd", "assertString", "root", "rootMode", "assertRootMode", "configFile", "assertConfigFileSearch", "caller", "assertCallerMetadata", "filename", "filenameRelative", "code", "assertBoolean", "ast", "cloneInputAst", "envName", "BABELRC_VALIDATORS", "babelrc", "babelrcRoots", "assertBabelrcSearch", "NONPRESET_VALIDATORS", "extends", "ignore", "assertIgnoreList", "only", "targets", "assertTargets", "browserslistConfigFile", "browserslistEnv", "COMMON_VALIDATORS", "inputSourceMap", "assertInputSourceMap", "presets", "assertPluginList", "plugins", "passPerPreset", "assumptions", "assertAssumptions", "env", "assertEnvSet", "overrides", "assertOverridesList", "test", "assertConfigApplicableTest", "include", "exclude", "retainLines", "comments", "shouldPrintComment", "assertFunction", "compact", "assertCompact", "minified", "auxiliaryCommentBefore", "auxiliaryCommentAfter", "sourceType", "assertSourceType", "wrapPluginVisitorMethod", "highlightCode", "sourceMaps", "assertSourceMaps", "sourceMap", "sourceFileName", "sourceRoot", "parserOpts", "assertObject", "generatorOpts", "Object", "assign", "getModuleId", "moduleRoot", "moduleIds", "moduleId", "knownAssumptions", "assumptionsNames", "exports", "Set", "getSource", "loc", "type", "source", "parent", "validate", "opts", "validateNested", "error", "configError", "ConfigError", "message", "assertNoDuplicateSourcemap", "keys", "forEach", "key", "optLoc", "name", "Error", "msg", "validator", "throwUnknownError", "removed", "version", "unknownOptErr", "hasOwnProperty", "call", "value", "obj", "access", "envLoc", "arr", "assertArray", "index", "item", "entries", "objLoc", "overridesLoc", "checkNoUnwrappedItemOptionPairs", "items", "e", "lastItem", "thisItem", "file", "options", "undefined", "request", "JSON", "stringify", "_path", "data", "require", "sep", "path", "endSep", "substitution", "starPat", "starPatLast", "starStarPat", "starStarPatLast", "escapeRegExp", "string", "replace", "pathToPattern", "pattern", "dirname", "parts", "resolve", "split", "RegExp", "map", "part", "i", "last", "length", "indexOf", "slice", "join", "_gensync", "data", "require", "ChainFormatter", "exports", "Programmatic", "Config", "Formatter", "title", "type", "callerName", "filepath", "loc", "index", "envName", "optionsAndDescriptors", "opt", "content", "Object", "assign", "options", "overrides", "env", "pluginDescriptors", "plugins", "length", "map", "d", "descriptorToConfig", "presetDescriptors", "presets", "JSON", "stringify", "undefined", "_d$file", "name", "file", "request", "value", "toString", "slice", "ConfigPrinter", "constructor", "_stack", "configure", "enabled", "push", "format", "config", "output", "configs", "gensync", "all", "s", "join", "_path", "data", "require", "_debug", "_options", "_patternToRegex", "_printer", "_rewriteStackTrace", "_configError", "_index", "_caching", "_configDescriptors", "debug", "buildDebug", "buildPresetChain", "arg", "context", "chain", "buildPresetChainWalker", "plugins", "dedupDescriptors", "presets", "options", "map", "o", "normalizeOptions", "files", "Set", "exports", "makeChainWalker", "root", "preset", "loadPresetDescriptors", "env", "envName", "loadPresetEnvDescriptors", "overrides", "index", "loadPresetOverridesDescriptors", "overridesEnv", "loadPresetOverridesEnvDescriptors", "createLogger", "makeWeakCacheSync", "buildRootDescriptors", "alias", "createUncachedDescriptors", "makeStrongCacheSync", "buildEnvDescriptors", "buildOverrideDescriptors", "buildOverrideEnvDescriptors", "buildRootChain", "opts", "configReport", "babelRcReport", "programmaticLogger", "ConfigPrinter", "programmaticChain", "loadProgrammaticChain", "dirname", "cwd", "undefined", "programmaticReport", "output", "configFile", "loadConfig", "caller", "findRootConfig", "babelrc", "babelrcRoots", "babelrcRootsDirectory", "configFileChain", "emptyChain", "configFileLogger", "validatedFile", "validateConfigFile", "result", "loadFileChain", "mergeChain", "ignoreFile", "babelrcFile", "isIgnored", "fileChain", "filename", "pkgData", "findPackageData", "babelrcLoadEnabled", "ignore", "config", "findRelativeConfig", "add", "filepath", "shouldIgnore", "validateBabelrcFile", "babelrcLogger", "showConfig", "console", "log", "filter", "x", "join", "fileHandling", "absoluteRoot", "directories", "indexOf", "babelrcPatterns", "Array", "isArray", "pat", "path", "resolve", "length", "some", "pathPatternToRegex", "directory", "matchPattern", "file", "validate", "validateExtendFile", "input", "createCachedDescriptors", "baseLogger", "buildProgrammaticLogger", "loadFileChainWalker", "loadFileDescriptors", "loadFileEnvDescriptors", "loadFileOverridesDescriptors", "loadFileOverridesEnvDescriptors", "buildFileLogger", "configure", "ChainFormatter", "Config", "descriptors", "_", "_context$caller", "Programmatic", "callerName", "name", "_options$env", "_options$overrides", "Error", "_options$overrides2", "_override$env", "override", "chainWalker", "flattenedConfigs", "rootOpts", "configIsApplicable", "push", "envOpts", "forEach", "overrideOps", "overrideEnvOpts", "only", "logger", "mergeExtendsChain", "mergeChainOpts", "extends", "has", "from", "delete", "target", "source", "Object", "assign", "passPerPreset", "test", "include", "exclude", "hasOwnProperty", "call", "sourceMaps", "sourceMap", "items", "Map", "item", "value", "fnKey", "nameMap", "get", "set", "desc", "ownPass", "reduce", "acc", "configName", "configFieldIsApplicable", "patterns", "matchesPatterns", "ignoreListReplacer", "_key", "RegExp", "String", "_context$filename", "message", "JSON", "stringify", "_context$filename2", "pattern", "pathToTest", "endHiddenCallStack", "ConfigError", "_optionAssertions", "require", "VALIDATORS", "name", "assertString", "manipulateOptions", "assertFunction", "pre", "post", "inherits", "visitor", "assertVisitorMap", "parserOverride", "generatorOverride", "loc", "value", "obj", "assertObject", "Object", "keys", "forEach", "prop", "assertVisitorHandler", "enter", "exit", "Error", "msg", "key", "handler", "validatePluginObject", "rootPath", "type", "source", "validator", "optLoc", "parent", "invalidPluginPropertyError", "code", "_semver", "data", "require", "_index", "_caching", "makeConfigAPI", "cache", "env", "value", "using", "envName", "assertSimpleType", "Array", "isArray", "some", "entry", "Error", "caller", "cb", "version", "coreVersion", "simple", "async", "assertVersion", "makePresetAPI", "externalDependencies", "targets", "JSON", "parse", "stringify", "addExternalDependency", "ref", "push", "Object", "assign", "makePluginAPI", "assumption", "name", "assumptions", "range", "Number", "isInteger", "semver", "satisfies", "limit", "stackTraceLimit", "err", "code", "_path", "data", "require", "_plugin", "_util", "_item", "_configChain", "_environment", "_options", "_index", "_resolveTargets", "_excluded", "_objectWithoutPropertiesLoose", "source", "excluded", "target", "sourceKeys", "Object", "keys", "key", "i", "length", "indexOf", "resolveRootMode", "rootDir", "rootMode", "upwardRootDir", "findConfigUpwards", "assign", "Error", "ROOT_CONFIG_FILENAMES", "join", "code", "dirname", "loadPrivatePartialConfig", "inputOpts", "Array", "isArray", "args", "validate", "envName", "getEnv", "cwd", "root", "caller", "cloneInputAst", "absoluteCwd", "path", "resolve", "absoluteRootDir", "filename", "undefined", "showConfigPath", "resolveShowConfigPath", "context", "showConfig", "configChain", "buildRootChain", "merged", "assumptions", "options", "forEach", "opts", "mergeOptions", "targets", "resolveTargets", "babelrc", "configFile", "browserslistConfigFile", "passPerPreset", "plugins", "map", "descriptor", "createItemFromDescriptor", "presets", "fileHandling", "ignore", "config", "files", "loadPartialConfig", "showIgnoredFiles", "_opts", "result", "item", "value", "Plugin", "PartialConfig", "filepath", "constructor", "babelignore", "freeze", "hasFilesystemConfig", "prototype", "_gensync", "data", "require", "_async", "_util", "context", "_plugin", "_item", "_configChain", "_deepArray", "_traverse", "_caching", "_options", "_plugins", "_configApi", "_partial", "_configError", "_default", "exports", "default", "gensync", "loadFullConfig", "inputOpts", "_opts$assumptions", "result", "loadPrivatePartialConfig", "options", "fileHandling", "optionDefaults", "plugins", "presets", "Error", "presetContext", "Object", "assign", "targets", "toDescriptor", "item", "desc", "getItemDescriptor", "presetsDescriptors", "map", "initialPluginsDescriptors", "pluginDescriptorsByPass", "passes", "externalDependencies", "ignored", "enhanceError", "recursePresetDescriptors", "rawPresets", "pluginDescriptorsPass", "i", "length", "descriptor", "preset", "loadPresetDescriptor", "e", "code", "checkNoUnwrappedItemOptionPairs", "push", "ownPass", "chain", "pass", "unshift", "splice", "o", "filter", "p", "forEach", "opts", "mergeOptions", "pluginContext", "assumptions", "loadPluginDescriptors", "descs", "plugin", "loadPluginDescriptor", "slice", "passPerPreset", "freezeDeepArray", "fn", "arg1", "arg2", "test", "message", "_context$filename", "filename", "makeDescriptorLoader", "apiFactory", "makeWeakCache", "value", "dirname", "alias", "cache", "factory", "maybeAsync", "api", "JSON", "stringify", "isThenable", "configured", "mode", "error", "pluginDescriptorLoader", "makePluginAPI", "presetDescriptorLoader", "makePresetAPI", "instantiatePlugin", "pluginObj", "validatePluginObject", "visitor", "traverse", "explode", "inherits", "inheritsDescriptor", "name", "undefined", "forwardAsync", "run", "invalidate", "pre", "post", "manipulateOptions", "visitors", "merge", "Plugin", "needsFilename", "val", "validateIfOptionNeedsFilename", "include", "exclude", "formattedPresetName", "ConfigError", "join", "validatePreset", "_options$overrides", "overrides", "overrideOptions", "instantiatePreset", "makeWeakCacheSync", "validate", "buildPresetChain", "a", "b", "fns", "Boolean", "args", "apply", "_gensync", "data", "require", "_full", "_partial", "_item", "_rewriteStackTrace", "loadPartialConfigRunner", "gensync", "loadPartialConfigImpl", "loadPartialConfigAsync", "args", "beginHiddenCallStack", "async", "loadPartialConfigSync", "sync", "loadPartialConfig", "opts", "callback", "undefined", "errback", "loadOptionsImpl", "_config$options", "config", "loadFullConfig", "options", "loadOptionsRunner", "loadOptionsAsync", "loadOptionsSync", "loadOptions", "createConfigItemRunner", "createConfigItemImpl", "createConfigItemAsync", "createConfigItemSync", "createConfigItem", "target", "PluginPass", "constructor", "file", "key", "options", "_map", "Map", "opts", "cwd", "filename", "set", "val", "get", "availableHelper", "name", "versionRange", "addHelper", "buildCodeFrameError", "node", "msg", "_Error", "exports", "default", "prototype", "getModuleName", "addImport", "_traverse", "data", "require", "_plugin", "LOADED_PLUGIN", "blockHoistPlugin", "name", "visitor", "Block", "exit", "node", "body", "performHoisting", "SwitchCase", "consequent", "max", "Math", "pow", "hasChange", "i", "length", "n", "p", "priority", "stableSort", "slice", "loadBlockHoistPlugin", "Plugin", "Object", "assign", "traverse", "explode", "bodyNode", "_blockHoist", "buckets", "create", "bucket", "push", "keys", "map", "k", "sort", "a", "b", "index", "key", "_path", "data", "require", "normalizeOptions", "config", "filename", "cwd", "filenameRelative", "path", "relative", "sourceType", "inputSourceMap", "sourceMaps", "sourceRoot", "options", "moduleRoot", "sourceFileName", "basename", "comments", "compact", "opts", "Object", "assign", "parserOpts", "extname", "plugins", "generatorOpts", "auxiliaryCommentBefore", "auxiliaryCommentAfter", "retainLines", "shouldPrintComment", "minified", "passes", "plugin", "manipulateOptions", "value", "pluginNameMap", "asyncDoExpressions", "syntax", "name", "url", "decimal", "decorators", "transform", "doExpressions", "exportDefaultFrom", "flow", "functionBind", "functionSent", "jsx", "importAttributes", "pipelineOperator", "recordAndTuple", "throwExpressions", "typescript", "Object", "assign", "asyncGenerators", "classProperties", "classPrivateProperties", "classPrivateMethods", "classStaticBlock", "dynamicImport", "exportNamespaceFrom", "importAssertions", "importMeta", "logicalAssignment", "moduleStringNames", "numericSeparator", "nullishCoalescingOperator", "objectRestSpread", "optionalCatchBinding", "optionalChaining", "privateIn", "regexpUnicodeSets", "getNameURLCombination", "generateMissingPluginMessage", "missingPluginName", "loc", "codeFrame", "filename", "helpMessage", "line", "column", "pluginInfo", "syntaxPlugin", "transformPlugin", "syntaxPluginInfo", "transformPluginInfo", "sectionType", "startsWith", "msgFilename", "_parser", "data", "require", "_codeFrame", "_missingPluginHelper", "parser", "pluginPasses", "parserOpts", "highlightCode", "filename", "code", "results", "plugins", "plugin", "parserOverride", "ast", "parse", "undefined", "push", "length", "then", "Error", "err", "message", "loc", "missingPlugin", "codeFrame", "codeFrameColumns", "start", "line", "column", "generateMissingPluginMessage", "deepClone", "value", "cache", "has", "get", "cloned", "Array", "isArray", "length", "set", "i", "keys", "Object", "key", "_default", "Map", "_fs", "data", "require", "_path", "_debug", "_t", "_convertSourceMap", "_file", "_index", "_cloneDeep", "file", "traverseFast", "debug", "buildDebug", "INLINE_SOURCEMAP_REGEX", "EXTERNAL_SOURCEMAP_REGEX", "normalizeFile", "pluginPasses", "options", "code", "ast", "type", "Error", "cloneInputAst", "cloneDeep", "parser", "inputMap", "inputSourceMap", "convertSourceMap", "fromObject", "lastComment", "extractComments", "fromComment", "err", "filename", "match", "exec", "inputMapContent", "fs", "readFileSync", "path", "resolve", "dirname", "fromJSON", "File", "extractCommentsFromList", "regex", "comments", "filter", "value", "test", "node", "leadingComments", "innerComments", "trailingComments", "GenMapping", "decodedMappings", "source", "maybeAddSegment", "setSourceContent", "setIgnore", "traceSegment", "value", "TraceMap", "toDecodedMap", "toEncodedMap", "_remapping", "data", "require", "mergeSourceMap", "inputMap", "map", "sourceFileName", "source", "replace", "found", "result", "remapping", "rootless", "s", "ctx", "sourceRoot", "Object", "assign", "_convertSourceMap", "data", "require", "_generator", "_mergeMap", "generateCode", "pluginPasses", "file", "opts", "ast", "code", "inputMap", "generatorOpts", "inputSourceMap", "toObject", "results", "plugins", "plugin", "generatorOverride", "result", "generate", "undefined", "push", "length", "then", "Error", "outputCode", "decodedMap", "outputMap", "map", "__mergedMap", "Object", "assign", "mergeSourceMap", "sourceFileName", "sourceMaps", "convertSourceMap", "fromObject", "toComment", "_traverse", "data", "require", "_pluginPass", "_blockHoistPlugin", "_normalizeOpts", "_normalizeFile", "_generate", "_deepArray", "run", "config", "code", "ast", "file", "normalizeFile", "passes", "normalizeOptions", "opts", "transformFile", "e", "_opts$filename", "message", "filename", "outputCode", "outputMap", "generateCode", "_opts$filename2", "metadata", "options", "undefined", "map", "sourceType", "program", "externalDependencies", "flattenToSet", "pluginPasses", "pluginPairs", "passPairs", "visitors", "plugin", "concat", "loadBlockHoistPlugin", "pass", "PluginPass", "key", "push", "visitor", "fn", "pre", "result", "call", "isThenable", "Error", "traverse", "merge", "wrapPluginVisitorMethod", "scope", "post", "val", "then", "_gensync", "data", "require", "_index", "_index2", "_rewriteStackTrace", "transformRunner", "gensync", "transform", "code", "opts", "config", "loadConfig", "run", "exports", "optsOrCallback", "maybeCallback", "callback", "undefined", "beginHiddenCallStack", "sync", "errback", "transformSync", "args", "transformAsync", "async", "transformFile", "exports", "filename", "opts", "callback", "Error", "transformFileSync", "transformFileAsync", "Promise", "reject", "_gensync", "data", "require", "_index", "_index2", "_rewriteStackTrace", "transformFromAstRunner", "gensync", "ast", "code", "opts", "config", "loadConfig", "Error", "run", "transformFromAst", "exports", "optsOrCallback", "maybeCallback", "callback", "undefined", "beginHiddenCallStack", "sync", "errback", "transformFromAstSync", "args", "transformFromAstAsync", "async", "_gensync", "data", "require", "_index", "_index2", "_normalizeOpts", "_rewriteStackTrace", "parseRunner", "gensync", "parse", "code", "opts", "config", "loadConfig", "parser", "passes", "normalizeOptions", "exports", "callback", "undefined", "beginHiddenCallStack", "sync", "errback", "parseSync", "args", "parseAsync", "async", "_file", "require", "_buildExternalHelpers", "_index", "_environment", "_types", "data", "Object", "defineProperty", "exports", "enumerable", "get", "_parser", "_traverse", "_template", "_index2", "_transform", "_transformFile", "_transformAst", "_parse", "thisFile", "version", "DEFAULT_EXTENSIONS", "freeze", "OptionManager", "init", "opts", "loadOptionsSync", "Plugin", "alias", "Error"]
}
