{
  "version": 3,
  "sources": ["../../../../../src/lib/tools/SelectTool/childStates/EditingShape.ts"],
  "sourcesContent": ["import { StateNode, TLEventHandlers, TLFrameShape, TLShape, TLTextShape } from '@tldraw/editor'\nimport { getTextLabels } from '../../../utils/shapes/shapes'\nimport { getHitShapeOnCanvasPointerDown } from '../../selection-logic/getHitShapeOnCanvasPointerDown'\nimport { updateHoveredShapeId } from '../../selection-logic/updateHoveredShapeId'\n\nexport class EditingShape extends StateNode {\n\tstatic override id = 'editing_shape'\n\n\thitShapeForPointerUp: TLShape | null = null\n\n\toverride onEnter = () => {\n\t\tconst editingShape = this.editor.getEditingShape()\n\t\tif (!editingShape) throw Error('Entered editing state without an editing shape')\n\t\tthis.hitShapeForPointerUp = null\n\t\tupdateHoveredShapeId(this.editor)\n\t\tthis.editor.select(editingShape)\n\t}\n\n\toverride onExit = () => {\n\t\tconst { editingShapeId } = this.editor.getCurrentPageState()\n\t\tif (!editingShapeId) return\n\n\t\t// Clear the editing shape\n\t\tthis.editor.setEditingShape(null)\n\n\t\tupdateHoveredShapeId.cancel()\n\n\t\tconst shape = this.editor.getShape(editingShapeId)!\n\t\tconst util = this.editor.getShapeUtil(shape)\n\n\t\t// Check for changes on editing end\n\t\tutil.onEditEnd?.(shape)\n\t}\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = (info) => {\n\t\t// In the case where on pointer down we hit a shape's label, we need to check if the user is dragging.\n\t\t// and if they are, we need to transition to translating instead.\n\t\tif (this.hitShapeForPointerUp && this.editor.inputs.isDragging) {\n\t\t\tif (this.editor.getInstanceState().isReadonly) return\n\t\t\tif (this.hitShapeForPointerUp.isLocked) return\n\t\t\tthis.editor.select(this.hitShapeForPointerUp)\n\t\t\tthis.parent.transition('translating', info)\n\t\t\tthis.hitShapeForPointerUp = null\n\t\t\treturn\n\t\t}\n\n\t\tswitch (info.target) {\n\t\t\tcase 'shape':\n\t\t\tcase 'canvas': {\n\t\t\t\tupdateHoveredShapeId(this.editor)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\toverride onPointerDown: TLEventHandlers['onPointerDown'] = (info) => {\n\t\tthis.hitShapeForPointerUp = null\n\n\t\tswitch (info.target) {\n\t\t\tcase 'canvas': {\n\t\t\t\tconst hitShape = getHitShapeOnCanvasPointerDown(this.editor, true /* hitLabels */)\n\t\t\t\tif (hitShape) {\n\t\t\t\t\tthis.onPointerDown({\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\tshape: hitShape,\n\t\t\t\t\t\ttarget: 'shape',\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'shape': {\n\t\t\t\tconst { shape: selectingShape } = info\n\t\t\t\tconst editingShape = this.editor.getEditingShape()\n\n\t\t\t\tif (!editingShape) {\n\t\t\t\t\tthrow Error('Expected an editing shape!')\n\t\t\t\t}\n\n\t\t\t\t// for shapes with labels, check to see if the click was inside of the shape's label\n\t\t\t\tconst geometry = this.editor.getShapeUtil(selectingShape).getGeometry(selectingShape)\n\t\t\t\tconst textLabels = getTextLabels(geometry)\n\t\t\t\tconst textLabel = textLabels.length === 1 ? textLabels[0] : undefined\n\t\t\t\t// N.B. One nuance here is that we want empty text fields to be removed from the canvas when the user clicks away from them.\n\t\t\t\tconst isEmptyTextShape =\n\t\t\t\t\tthis.editor.isShapeOfType<TLTextShape>(editingShape, 'text') &&\n\t\t\t\t\teditingShape.props.text.trim() === ''\n\t\t\t\tif (textLabel && !isEmptyTextShape) {\n\t\t\t\t\tconst pointInShapeSpace = this.editor.getPointInShapeSpace(\n\t\t\t\t\t\tselectingShape,\n\t\t\t\t\t\tthis.editor.inputs.currentPagePoint\n\t\t\t\t\t)\n\t\t\t\t\tif (\n\t\t\t\t\t\ttextLabel.bounds.containsPoint(pointInShapeSpace, 0) &&\n\t\t\t\t\t\ttextLabel.hitTestPoint(pointInShapeSpace)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// it's a hit to the label!\n\t\t\t\t\t\tif (selectingShape.id === editingShape.id) {\n\t\t\t\t\t\t\t// If we clicked on the editing geo / arrow shape's label, do nothing\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.hitShapeForPointerUp = selectingShape\n\n\t\t\t\t\t\t\tthis.editor.mark('editing on pointer up')\n\t\t\t\t\t\t\tthis.editor.select(selectingShape.id)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (selectingShape.id === editingShape.id) {\n\t\t\t\t\t\t// If we clicked on a frame, while editing its heading, cancel editing\n\t\t\t\t\t\tif (this.editor.isShapeOfType<TLFrameShape>(selectingShape, 'frame')) {\n\t\t\t\t\t\t\tthis.editor.setEditingShape(null)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If we clicked on the editing shape (which isn't a shape with a label), do nothing\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// But if we clicked on a different shape of the same type, transition to pointing_shape instead\n\t\t\t\t\t\tthis.parent.transition('pointing_shape', info)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// still here? Cancel editing and transition back to select idle\n\t\tthis.parent.transition('idle', info)\n\t\t// then feed the pointer down event back into the state chart as if it happened in that state\n\t\tthis.editor.root.handleEvent(info)\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = (info) => {\n\t\t// If we're not dragging, and it's a hit to the label, begin editing the shape.\n\t\tconst hitShape = this.hitShapeForPointerUp\n\t\tif (!hitShape) return\n\t\tthis.hitShapeForPointerUp = null\n\n\t\t// Stay in edit mode to maintain flow of editing.\n\t\tconst util = this.editor.getShapeUtil(hitShape)\n\t\tif (hitShape.isLocked) return\n\n\t\tif (this.editor.getInstanceState().isReadonly) {\n\t\t\tif (!util.canEditInReadOnly(hitShape)) {\n\t\t\t\tthis.parent.transition('pointing_shape', info)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tthis.editor.select(hitShape.id)\n\n\t\tthis.editor.setEditingShape(hitShape.id)\n\t\tupdateHoveredShapeId(this.editor)\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = (info) => {\n\t\tthis.parent.transition('idle', info)\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = (info) => {\n\t\tthis.parent.transition('idle', info)\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
