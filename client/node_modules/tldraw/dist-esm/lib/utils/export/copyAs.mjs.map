{
  "version": 3,
  "sources": ["../../../../src/lib/utils/export/copyAs.ts"],
  "sourcesContent": ["import { Editor, TLShapeId, TLSvgOptions, exhaustiveSwitchError } from '@tldraw/editor'\nimport { exportToBlobPromise, exportToString } from './export'\n\n/** @public */\nexport type TLCopyType = 'svg' | 'png' | 'jpeg' | 'json'\n\n/**\n * Copy the given shapes to the clipboard.\n *\n * @param editor - The editor instance.\n * @param ids - The ids of the shapes to copy.\n * @param format - The format to copy as.\n * @param opts - Options for the copy.\n *\n * @public\n */\nexport function copyAs(\n\teditor: Editor,\n\tids: TLShapeId[],\n\tformat: TLCopyType = 'svg',\n\topts: TLSvgOptions = {}\n): Promise<void> {\n\t// Note:  it's important that this function itself isn't async and doesn't really use promises -\n\t// we need to create the relevant `ClipboardItem`s and call window.navigator.clipboard.write\n\t// synchronously to make sure safari knows that the user _wants_ to copy See\n\t// https://bugs.webkit.org/show_bug.cgi?id=222262\n\n\tif (!window.navigator.clipboard) return Promise.reject(new Error('Copy not supported'))\n\tif (window.navigator.clipboard.write) {\n\t\tconst { blobPromise, mimeType } = exportToBlobPromise(editor, ids, format, opts)\n\n\t\treturn window.navigator.clipboard\n\t\t\t.write([new ClipboardItem({ [mimeType]: blobPromise })])\n\t\t\t.catch((err) => {\n\t\t\t\t// Firefox will fail with the above if `dom.events.asyncClipboard.clipboardItem` is enabled.\n\t\t\t\t// See <https://github.com/tldraw/tldraw/issues/1325>\n\t\t\t\tconsole.error(err)\n\t\t\t\treturn blobPromise.then((blob) => {\n\t\t\t\t\treturn window.navigator.clipboard.write([new ClipboardItem({ [mimeType]: blob })])\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tswitch (format) {\n\t\tcase 'json':\n\t\tcase 'svg':\n\t\t\treturn fallbackWriteTextAsync(async () => exportToString(editor, ids, format, opts))\n\n\t\tcase 'jpeg':\n\t\tcase 'png':\n\t\t\tthrow new Error('Copy not supported')\n\t\tdefault:\n\t\t\texhaustiveSwitchError(format)\n\t}\n}\n\nasync function fallbackWriteTextAsync(getText: () => Promise<string>) {\n\tawait navigator.clipboard?.writeText?.(await getText())\n}\n"],
  "mappings": "AAAA,SAA0C,6BAA6B;AACvE,SAAS,qBAAqB,sBAAsB;AAe7C,SAAS,OACf,QACA,KACA,SAAqB,OACrB,OAAqB,CAAC,GACN;AAMhB,MAAI,CAAC,OAAO,UAAU;AAAW,WAAO,QAAQ,OAAO,IAAI,MAAM,oBAAoB,CAAC;AACtF,MAAI,OAAO,UAAU,UAAU,OAAO;AACrC,UAAM,EAAE,aAAa,SAAS,IAAI,oBAAoB,QAAQ,KAAK,QAAQ,IAAI;AAE/E,WAAO,OAAO,UAAU,UACtB,MAAM,CAAC,IAAI,cAAc,EAAE,CAAC,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,EACtD,MAAM,CAAC,QAAQ;AAGf,cAAQ,MAAM,GAAG;AACjB,aAAO,YAAY,KAAK,CAAC,SAAS;AACjC,eAAO,OAAO,UAAU,UAAU,MAAM,CAAC,IAAI,cAAc,EAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC;AAAA,MAClF,CAAC;AAAA,IACF,CAAC;AAAA,EACH;AAEA,UAAQ,QAAQ;AAAA,IACf,KAAK;AAAA,IACL,KAAK;AACJ,aAAO,uBAAuB,YAAY,eAAe,QAAQ,KAAK,QAAQ,IAAI,CAAC;AAAA,IAEpF,KAAK;AAAA,IACL,KAAK;AACJ,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AACC,4BAAsB,MAAM;AAAA,EAC9B;AACD;AAEA,eAAe,uBAAuB,SAAgC;AACrE,QAAM,UAAU,WAAW,YAAY,MAAM,QAAQ,CAAC;AACvD;",
  "names": []
}
