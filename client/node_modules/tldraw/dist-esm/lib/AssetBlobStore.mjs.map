{
  "version": 3,
  "sources": ["../../src/lib/AssetBlobStore.ts"],
  "sourcesContent": ["import { IDBPDatabase, openDB } from 'idb'\n\n// DO NOT CHANGE THESE WITHOUT ADDING MIGRATION LOGIC. DOING SO WOULD WIPE ALL EXISTING DATA.\nconst STORE_PREFIX = 'TLDRAW_ASSET_STORE_v1'\n\nconst Table = {\n\tAssets: 'assets',\n} as const\n\ntype StoreName = (typeof Table)[keyof typeof Table]\n\nasync function withDb<T>(storeId: string, cb: (db: IDBPDatabase<StoreName>) => Promise<T>) {\n\tconst db = await openDB<StoreName>(storeId, 1, {\n\t\tupgrade(database) {\n\t\t\tif (!database.objectStoreNames.contains(Table.Assets)) {\n\t\t\t\tdatabase.createObjectStore(Table.Assets)\n\t\t\t}\n\t\t},\n\t})\n\ttry {\n\t\treturn await cb(db)\n\t} finally {\n\t\tdb.close()\n\t}\n}\n\n/** @public */\nexport async function getAssetFromIndexedDb({\n\tpersistenceKey,\n\tassetId,\n}: {\n\tpersistenceKey: string\n\tassetId: string\n}): Promise<Blob | undefined> {\n\tconst storeId = STORE_PREFIX + persistenceKey\n\n\treturn await withDb(storeId, async (db) => {\n\t\tconst tx = db.transaction([Table.Assets], 'readwrite')\n\t\tconst assetsStore = tx.objectStore(Table.Assets)\n\t\treturn await assetsStore.get(assetId)\n\t})\n}\n\n/** @public */\nexport async function storeAssetInIndexedDb({\n\tpersistenceKey,\n\tassetId,\n\tblob,\n}: {\n\tpersistenceKey: string\n\tassetId: string\n\tblob: Blob\n}) {\n\tconst storeId = STORE_PREFIX + persistenceKey\n\n\tawait withDb(storeId, async (db) => {\n\t\tconst tx = db.transaction([Table.Assets], 'readwrite')\n\t\tconst assetsStore = tx.objectStore(Table.Assets)\n\t\tawait assetsStore.put(blob, assetId)\n\t\tawait tx.done\n\t})\n}\n"],
  "mappings": "AAAA,SAAuB,cAAc;AAGrC,MAAM,eAAe;AAErB,MAAM,QAAQ;AAAA,EACb,QAAQ;AACT;AAIA,eAAe,OAAU,SAAiB,IAAiD;AAC1F,QAAM,KAAK,MAAM,OAAkB,SAAS,GAAG;AAAA,IAC9C,QAAQ,UAAU;AACjB,UAAI,CAAC,SAAS,iBAAiB,SAAS,MAAM,MAAM,GAAG;AACtD,iBAAS,kBAAkB,MAAM,MAAM;AAAA,MACxC;AAAA,IACD;AAAA,EACD,CAAC;AACD,MAAI;AACH,WAAO,MAAM,GAAG,EAAE;AAAA,EACnB,UAAE;AACD,OAAG,MAAM;AAAA,EACV;AACD;AAGA,eAAsB,sBAAsB;AAAA,EAC3C;AAAA,EACA;AACD,GAG8B;AAC7B,QAAM,UAAU,eAAe;AAE/B,SAAO,MAAM,OAAO,SAAS,OAAO,OAAO;AAC1C,UAAM,KAAK,GAAG,YAAY,CAAC,MAAM,MAAM,GAAG,WAAW;AACrD,UAAM,cAAc,GAAG,YAAY,MAAM,MAAM;AAC/C,WAAO,MAAM,YAAY,IAAI,OAAO;AAAA,EACrC,CAAC;AACF;AAGA,eAAsB,sBAAsB;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AACD,GAIG;AACF,QAAM,UAAU,eAAe;AAE/B,QAAM,OAAO,SAAS,OAAO,OAAO;AACnC,UAAM,KAAK,GAAG,YAAY,CAAC,MAAM,MAAM,GAAG,WAAW;AACrD,UAAM,cAAc,GAAG,YAAY,MAAM,MAAM;AAC/C,UAAM,YAAY,IAAI,MAAM,OAAO;AACnC,UAAM,GAAG;AAAA,EACV,CAAC;AACF;",
  "names": []
}
