{
  "version": 3,
  "sources": ["../../../../../src/lib/shapes/note/toolStates/Pointing.ts"],
  "sourcesContent": ["import {\n\tEditor,\n\tStateNode,\n\tTLEventHandlers,\n\tTLInterruptEvent,\n\tTLNoteShape,\n\tTLPointerEventInfo,\n\tTLShapeId,\n\tVec,\n\tcreateShapeId,\n} from '@tldraw/editor'\nimport {\n\tNOTE_ADJACENT_POSITION_SNAP_RADIUS,\n\tgetAvailableNoteAdjacentPositions,\n} from '../noteHelpers'\n\nexport class Pointing extends StateNode {\n\tstatic override id = 'pointing'\n\n\tdragged = false\n\n\tinfo = {} as TLPointerEventInfo\n\n\twasFocusedOnEnter = false\n\n\tmarkId = ''\n\n\tshape = {} as TLNoteShape\n\n\toverride onEnter = () => {\n\t\tconst { editor } = this\n\n\t\tthis.wasFocusedOnEnter = !editor.getIsMenuOpen()\n\n\t\tif (this.wasFocusedOnEnter) {\n\t\t\tconst id = createShapeId()\n\t\t\tthis.markId = `creating:${id}`\n\t\t\teditor.mark(this.markId)\n\n\t\t\t// Check for note pits; if the pointer is close to one, place the note centered on the pit\n\t\t\tconst center = this.editor.inputs.originPagePoint.clone()\n\t\t\tconst offset = getNoteShapeAdjacentPositionOffset(\n\t\t\t\tthis.editor,\n\t\t\t\tcenter,\n\t\t\t\tthis.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1\n\t\t\t)\n\t\t\tif (offset) {\n\t\t\t\tcenter.sub(offset)\n\t\t\t}\n\t\t\tthis.shape = createNoteShape(this.editor, id, center)\n\t\t}\n\t}\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = (info) => {\n\t\tif (this.editor.inputs.isDragging) {\n\t\t\tif (!this.wasFocusedOnEnter) {\n\t\t\t\tconst id = createShapeId()\n\t\t\t\tconst center = this.editor.inputs.originPagePoint.clone()\n\t\t\t\tconst offset = getNoteShapeAdjacentPositionOffset(\n\t\t\t\t\tthis.editor,\n\t\t\t\t\tcenter,\n\t\t\t\t\tthis.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1\n\t\t\t\t)\n\t\t\t\tif (offset) {\n\t\t\t\t\tcenter.sub(offset)\n\t\t\t\t}\n\t\t\t\tthis.shape = createNoteShape(this.editor, id, center)\n\t\t\t}\n\n\t\t\tthis.editor.setCurrentTool('select.translating', {\n\t\t\t\t...info,\n\t\t\t\ttarget: 'shape',\n\t\t\t\tshape: this.shape,\n\t\t\t\tonInteractionEnd: 'note',\n\t\t\t\tisCreating: true,\n\t\t\t\tonCreate: () => {\n\t\t\t\t\tthis.editor.setEditingShape(this.shape.id)\n\t\t\t\t\tthis.editor.setCurrentTool('select.editing_shape')\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onInterrupt: TLInterruptEvent = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\tprivate complete() {\n\t\tif (this.wasFocusedOnEnter) {\n\t\t\tif (this.editor.getInstanceState().isToolLocked) {\n\t\t\t\tthis.parent.transition('idle')\n\t\t\t} else {\n\t\t\t\tthis.editor.setEditingShape(this.shape.id)\n\t\t\t\tthis.editor.setCurrentTool('select.editing_shape', {\n\t\t\t\t\t...this.info,\n\t\t\t\t\ttarget: 'shape',\n\t\t\t\t\tshape: this.shape,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate cancel() {\n\t\tthis.editor.bailToMark(this.markId)\n\t\tthis.parent.transition('idle', this.info)\n\t}\n}\n\nexport function getNoteShapeAdjacentPositionOffset(editor: Editor, center: Vec, scale: number) {\n\tlet min = NOTE_ADJACENT_POSITION_SNAP_RADIUS / editor.getZoomLevel() // in screen space\n\tlet offset: Vec | undefined\n\tfor (const pit of getAvailableNoteAdjacentPositions(editor, 0, scale, 0)) {\n\t\t// only check page rotations of zero\n\t\tconst deltaToPit = Vec.Sub(center, pit)\n\t\tconst dist = deltaToPit.len()\n\t\tif (dist < min) {\n\t\t\tmin = dist\n\t\t\toffset = deltaToPit\n\t\t}\n\t}\n\treturn offset\n}\n\nexport function createNoteShape(editor: Editor, id: TLShapeId, center: Vec) {\n\teditor\n\t\t.createShape({\n\t\t\tid,\n\t\t\ttype: 'note',\n\t\t\tx: center.x,\n\t\t\ty: center.y,\n\t\t\tprops: {\n\t\t\t\tscale: editor.user.getIsDynamicResizeMode() ? 1 / editor.getZoomLevel() : 1,\n\t\t\t},\n\t\t})\n\t\t.select(id)\n\n\tconst shape = editor.getShape<TLNoteShape>(id)!\n\tconst bounds = editor.getShapeGeometry(shape).bounds\n\n\t// Center the text around the created point\n\teditor.updateShapes([\n\t\t{\n\t\t\tid,\n\t\t\ttype: 'note',\n\t\t\tx: shape.x - bounds.width / 2,\n\t\t\ty: shape.y - bounds.height / 2,\n\t\t},\n\t])\n\n\treturn editor.getShape<TLNoteShape>(id)!\n}\n"],
  "mappings": "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",
  "names": []
}
