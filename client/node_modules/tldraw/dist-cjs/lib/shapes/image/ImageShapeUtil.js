"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ImageShapeUtil_exports = {};
__export(ImageShapeUtil_exports, {
  ImageShapeUtil: () => ImageShapeUtil
});
module.exports = __toCommonJS(ImageShapeUtil_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_editor = require("@tldraw/editor");
var import_react = require("react");
var import_BrokenAssetIcon = require("../shared/BrokenAssetIcon");
var import_HyperlinkButton = require("../shared/HyperlinkButton");
var import_useAsset = require("../shared/useAsset");
var import_usePrefersReducedMotion = require("../shared/usePrefersReducedMotion");
async function getDataURIFromURL(url) {
  const response = await (0, import_editor.fetch)(url);
  const blob = await response.blob();
  return import_editor.FileHelpers.blobToDataUrl(blob);
}
class ImageShapeUtil extends import_editor.BaseBoxShapeUtil {
  static type = "image";
  static props = import_editor.imageShapeProps;
  static migrations = import_editor.imageShapeMigrations;
  isAspectRatioLocked = () => true;
  canCrop = () => true;
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      assetId: null,
      playing: true,
      url: "",
      crop: null
    };
  }
  isAnimated(shape) {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
    if (!asset)
      return false;
    return "mimeType" in asset.props && import_editor.MediaHelpers.isAnimatedImageType(asset?.props.mimeType) || "isAnimated" in asset.props && asset.props.isAnimated;
  }
  component(shape) {
    const isCropping = this.editor.getCroppingShapeId() === shape.id;
    const prefersReducedMotion = (0, import_usePrefersReducedMotion.usePrefersReducedMotion)();
    const [staticFrameSrc, setStaticFrameSrc] = (0, import_react.useState)("");
    const [loadedSrc, setLoadedSrc] = (0, import_react.useState)("");
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    const { asset, url } = (0, import_useAsset.useAsset)(shape.id, shape.props.assetId, shape.props.w);
    (0, import_react.useEffect)(() => {
      if (url) {
        let cancelled = false;
        const image = (0, import_editor.Image)();
        image.onload = () => {
          if (cancelled)
            return;
          setLoadedSrc(url);
        };
        image.src = url;
        return () => {
          cancelled = true;
        };
      }
    }, [url, shape]);
    (0, import_react.useEffect)(() => {
      if (url && this.isAnimated(shape)) {
        let cancelled = false;
        const image = (0, import_editor.Image)();
        image.onload = () => {
          if (cancelled)
            return;
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const ctx = canvas.getContext("2d");
          if (!ctx)
            return;
          ctx.drawImage(image, 0, 0);
          setStaticFrameSrc(canvas.toDataURL());
          setLoadedSrc(url);
        };
        image.crossOrigin = "anonymous";
        image.src = url;
        return () => {
          cancelled = true;
        };
      }
    }, [prefersReducedMotion, url, shape]);
    if (asset?.type === "bookmark") {
      throw Error("Bookmark assets can't be rendered as images");
    }
    const showCropPreview = isSelected && isCropping && this.editor.isIn("select.crop");
    const reduceMotion = prefersReducedMotion && (asset?.props.mimeType?.includes("video") || this.isAnimated(shape));
    const containerStyle = getCroppedContainerStyle(shape);
    if (!asset?.props.src) {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        import_editor.HTMLContainer,
        {
          id: shape.id,
          style: {
            overflow: "hidden",
            width: shape.props.w,
            height: shape.props.h,
            color: "var(--color-text-3)",
            backgroundColor: asset ? "transparent" : "var(--color-low)",
            border: asset ? "none" : "1px solid var(--color-low-border)"
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tl-image-container", style: containerStyle, children: asset ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_BrokenAssetIcon.BrokenAssetIcon, {}) }),
            "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_HyperlinkButton.HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
          ]
        }
      );
    }
    if (!loadedSrc)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      showCropPreview && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: containerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "img",
        {
          className: "tl-image",
          crossOrigin: this.isAnimated(shape) ? "anonymous" : void 0,
          src: !shape.props.playing || reduceMotion ? staticFrameSrc : loadedSrc,
          referrerPolicy: "strict-origin-when-cross-origin",
          style: {
            opacity: 0.1
          },
          draggable: false
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        import_editor.HTMLContainer,
        {
          id: shape.id,
          style: { overflow: "hidden", width: shape.props.w, height: shape.props.h },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tl-image-container", style: containerStyle, children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "img",
                {
                  className: "tl-image",
                  crossOrigin: this.isAnimated(shape) ? "anonymous" : void 0,
                  src: !shape.props.playing || reduceMotion ? staticFrameSrc : loadedSrc,
                  referrerPolicy: "strict-origin-when-cross-origin",
                  draggable: false
                }
              ),
              this.isAnimated(shape) && !shape.props.playing && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tl-image__tg", children: "GIF" })
            ] }),
            shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_HyperlinkButton.HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
          ]
        }
      )
    ] });
  }
  indicator(shape) {
    const isCropping = this.editor.getCroppingShapeId() === shape.id;
    if (isCropping)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: (0, import_editor.toDomPrecision)(shape.props.w), height: (0, import_editor.toDomPrecision)(shape.props.h) });
  }
  async toSvg(shape) {
    if (!shape.props.assetId)
      return null;
    const asset = this.editor.getAsset(shape.props.assetId);
    if (!asset)
      return null;
    let src = await this.editor.resolveAssetUrl(shape.props.assetId, {
      shouldResolveToOriginalImage: true
    });
    if (!src)
      return null;
    if (src.startsWith("blob:") || src.startsWith("http") || src.startsWith("/") || src.startsWith("./")) {
      src = await getDataURIFromURL(src) || "";
    }
    const containerStyle = getCroppedContainerStyle(shape);
    const crop = shape.props.crop;
    if (containerStyle.transform && crop) {
      const { transform, width, height } = containerStyle;
      const croppedWidth = (crop.bottomRight.x - crop.topLeft.x) * width;
      const croppedHeight = (crop.bottomRight.y - crop.topLeft.y) * height;
      const points = [
        new import_editor.Vec(0, 0),
        new import_editor.Vec(croppedWidth, 0),
        new import_editor.Vec(croppedWidth, croppedHeight),
        new import_editor.Vec(0, croppedHeight)
      ];
      const cropClipId = `cropClipPath_${shape.id.replace(":", "_")}`;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("clipPath", { id: cropClipId, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polygon", { points: points.map((p) => `${p.x},${p.y}`).join(" ") }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("g", { clipPath: `url(#${cropClipId})`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("image", { href: src, width, height, style: { transform } }) })
      ] });
    } else {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("image", { href: src, width: shape.props.w, height: shape.props.h });
    }
  }
  onDoubleClick = (shape) => {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
    if (!asset)
      return;
    const canPlay = asset.props.src && this.isAnimated(shape);
    if (!canPlay)
      return;
    this.editor.updateShapes([
      {
        type: "image",
        id: shape.id,
        props: {
          playing: !shape.props.playing
        }
      }
    ]);
  };
  onDoubleClickEdge = (shape) => {
    const props = shape.props;
    if (!props)
      return;
    if (this.editor.getCroppingShapeId() !== shape.id) {
      return;
    }
    const crop = (0, import_editor.structuredClone)(props.crop) || {
      topLeft: { x: 0, y: 0 },
      bottomRight: { x: 1, y: 1 }
    };
    const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
    const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
    const pointDelta = new import_editor.Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation);
    const partial = {
      id: shape.id,
      type: shape.type,
      x: shape.x - pointDelta.x,
      y: shape.y - pointDelta.y,
      props: {
        crop: {
          topLeft: { x: 0, y: 0 },
          bottomRight: { x: 1, y: 1 }
        },
        w,
        h
      }
    };
    this.editor.updateShapes([partial]);
  };
}
function getCroppedContainerStyle(shape) {
  const crop = shape.props.crop;
  const topLeft = crop?.topLeft;
  if (!topLeft) {
    return {
      width: shape.props.w,
      height: shape.props.h
    };
  }
  const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
  const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
  const offsetX = -topLeft.x * w;
  const offsetY = -topLeft.y * h;
  return {
    transform: `translate(${offsetX}px, ${offsetY}px)`,
    width: w,
    height: h
  };
}
//# sourceMappingURL=ImageShapeUtil.js.map
