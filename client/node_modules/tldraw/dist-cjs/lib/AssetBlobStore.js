"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AssetBlobStore_exports = {};
__export(AssetBlobStore_exports, {
  getAssetFromIndexedDb: () => getAssetFromIndexedDb,
  storeAssetInIndexedDb: () => storeAssetInIndexedDb
});
module.exports = __toCommonJS(AssetBlobStore_exports);
var import_idb = require("idb");
const STORE_PREFIX = "TLDRAW_ASSET_STORE_v1";
const Table = {
  Assets: "assets"
};
async function withDb(storeId, cb) {
  const db = await (0, import_idb.openDB)(storeId, 1, {
    upgrade(database) {
      if (!database.objectStoreNames.contains(Table.Assets)) {
        database.createObjectStore(Table.Assets);
      }
    }
  });
  try {
    return await cb(db);
  } finally {
    db.close();
  }
}
async function getAssetFromIndexedDb({
  persistenceKey,
  assetId
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  return await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Assets], "readwrite");
    const assetsStore = tx.objectStore(Table.Assets);
    return await assetsStore.get(assetId);
  });
}
async function storeAssetInIndexedDb({
  persistenceKey,
  assetId,
  blob
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Assets], "readwrite");
    const assetsStore = tx.objectStore(Table.Assets);
    await assetsStore.put(blob, assetId);
    await tx.done;
  });
}
//# sourceMappingURL=AssetBlobStore.js.map
