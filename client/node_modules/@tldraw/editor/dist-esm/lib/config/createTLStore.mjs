import { Store } from "@tldraw/store";
import { createTLSchema } from "@tldraw/tlschema";
import { checkBindings } from "./defaultBindings.mjs";
import { checkShapesAndAddCore } from "./defaultShapes.mjs";
function createTLStore({
  initialData,
  defaultName = "",
  id,
  ...rest
} = {}) {
  const schema = "schema" in rest && rest.schema ? (
    // we have a schema
    (rest.schema)
  ) : (
    // we need a schema
    (createTLSchema({
      shapes: "shapeUtils" in rest && rest.shapeUtils ? utilsToMap(checkShapesAndAddCore(rest.shapeUtils)) : void 0,
      bindings: "bindingUtils" in rest && rest.bindingUtils ? utilsToMap(checkBindings(rest.bindingUtils)) : void 0,
      migrations: "migrations" in rest ? rest.migrations : void 0
    }))
  );
  return new Store({
    id,
    schema,
    initialData,
    props: {
      defaultName
    }
  });
}
function utilsToMap(utils) {
  return Object.fromEntries(
    utils.map((s) => [
      s.type,
      {
        props: s.props,
        migrations: s.migrations
      }
    ])
  );
}
export {
  createTLStore
};
//# sourceMappingURL=createTLStore.mjs.map
