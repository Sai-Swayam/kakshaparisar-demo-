{
  "version": 3,
  "sources": ["../../../src/lib/config/createTLStore.ts"],
  "sourcesContent": ["import { HistoryEntry, MigrationSequence, SerializedStore, Store, StoreSchema } from '@tldraw/store'\nimport { SchemaPropsInfo, TLRecord, TLStore, TLStoreProps, createTLSchema } from '@tldraw/tlschema'\nimport { TLAnyBindingUtilConstructor, checkBindings } from './defaultBindings'\nimport { TLAnyShapeUtilConstructor, checkShapesAndAddCore } from './defaultShapes'\n\n/** @public */\nexport interface TLStoreBaseOptions {\n\t/** The initial data for the store. */\n\tinitialData?: SerializedStore<TLRecord>\n\n\t/** The default name for the store. */\n\tdefaultName?: string\n}\n\n/** @public */\nexport type TLStoreOptions = TLStoreBaseOptions &\n\t(\n\t\t| {\n\t\t\t\tid?: string\n\t\t\t\tshapeUtils?: readonly TLAnyShapeUtilConstructor[]\n\t\t\t\tmigrations?: readonly MigrationSequence[]\n\t\t\t\tbindingUtils?: readonly TLAnyBindingUtilConstructor[]\n\t\t  }\n\t\t| {\n\t\t\t\tid?: string\n\t\t\t\tschema?: StoreSchema<TLRecord, TLStoreProps>\n\t\t  }\n\t)\n\n/** @public */\nexport type TLStoreEventInfo = HistoryEntry<TLRecord>\n\n/**\n * A helper for creating a TLStore.\n *\n * @param opts - Options for creating the store.\n *\n * @public */\nexport function createTLStore({\n\tinitialData,\n\tdefaultName = '',\n\tid,\n\t...rest\n}: TLStoreOptions = {}): TLStore {\n\tconst schema =\n\t\t'schema' in rest && rest.schema\n\t\t\t? // we have a schema\n\t\t\t\trest.schema\n\t\t\t: // we need a schema\n\t\t\t\tcreateTLSchema({\n\t\t\t\t\tshapes:\n\t\t\t\t\t\t'shapeUtils' in rest && rest.shapeUtils\n\t\t\t\t\t\t\t? utilsToMap(checkShapesAndAddCore(rest.shapeUtils))\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\tbindings:\n\t\t\t\t\t\t'bindingUtils' in rest && rest.bindingUtils\n\t\t\t\t\t\t\t? utilsToMap(checkBindings(rest.bindingUtils))\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\tmigrations: 'migrations' in rest ? rest.migrations : undefined,\n\t\t\t\t})\n\n\treturn new Store({\n\t\tid,\n\t\tschema,\n\t\tinitialData,\n\t\tprops: {\n\t\t\tdefaultName,\n\t\t},\n\t})\n}\n\nfunction utilsToMap<T extends SchemaPropsInfo & { type: string }>(utils: T[]) {\n\treturn Object.fromEntries(\n\t\tutils.map((s): [string, SchemaPropsInfo] => [\n\t\t\ts.type,\n\t\t\t{\n\t\t\t\tprops: s.props,\n\t\t\t\tmigrations: s.migrations,\n\t\t\t},\n\t\t])\n\t)\n}\n"],
  "mappings": "AAAA,SAA2D,aAA0B;AACrF,SAA2D,sBAAsB;AACjF,SAAsC,qBAAqB;AAC3D,SAAoC,6BAA6B;AAmC1D,SAAS,cAAc;AAAA,EAC7B;AAAA,EACA,cAAc;AAAA,EACd;AAAA,EACA,GAAG;AACJ,IAAoB,CAAC,GAAY;AAChC,QAAM,SACL,YAAY,QAAQ,KAAK;AAAA;AAAA,IAEvB,KAAK;AAAA;AAAA;AAAA,IAEL,eAAe;AAAA,MACd,QACC,gBAAgB,QAAQ,KAAK,aAC1B,WAAW,sBAAsB,KAAK,UAAU,CAAC,IACjD;AAAA,MACJ,UACC,kBAAkB,QAAQ,KAAK,eAC5B,WAAW,cAAc,KAAK,YAAY,CAAC,IAC3C;AAAA,MACJ,YAAY,gBAAgB,OAAO,KAAK,aAAa;AAAA,IACtD,CAAC;AAAA;AAEJ,SAAO,IAAI,MAAM;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,MACN;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAEA,SAAS,WAAyD,OAAY;AAC7E,SAAO,OAAO;AAAA,IACb,MAAM,IAAI,CAAC,MAAiC;AAAA,MAC3C,EAAE;AAAA,MACF;AAAA,QACC,OAAO,EAAE;AAAA,QACT,YAAY,EAAE;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
