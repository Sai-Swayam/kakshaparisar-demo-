import { Fragment, jsx } from "react/jsx-runtime";
import { Store } from "@tldraw/store";
import { annotateError } from "@tldraw/utils";
import React, {
  memo,
  useCallback,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
  useSyncExternalStore
} from "react";
import classNames from "classnames";
import { OptionalErrorBoundary } from "./components/ErrorBoundary.mjs";
import { DefaultErrorFallback } from "./components/default-components/DefaultErrorFallback.mjs";
import { createTLUser } from "./config/createTLUser.mjs";
import { Editor } from "./editor/Editor.mjs";
import { ContainerProvider, useContainer } from "./hooks/useContainer.mjs";
import { useCursor } from "./hooks/useCursor.mjs";
import { useDarkMode } from "./hooks/useDarkMode.mjs";
import { EditorContext, useEditor } from "./hooks/useEditor.mjs";
import {
  EditorComponentsProvider,
  useEditorComponents
} from "./hooks/useEditorComponents.mjs";
import { useEvent } from "./hooks/useEvent.mjs";
import { useForceUpdate } from "./hooks/useForceUpdate.mjs";
import { useLocalStore } from "./hooks/useLocalStore.mjs";
import { useZoomCss } from "./hooks/useZoomCss.mjs";
import { stopEventPropagation } from "./utils/dom.mjs";
const EMPTY_SHAPE_UTILS_ARRAY = [];
const EMPTY_BINDING_UTILS_ARRAY = [];
const EMPTY_TOOLS_ARRAY = [];
const TldrawEditor = memo(function TldrawEditor2({
  store,
  components,
  className,
  user: _user,
  ...rest
}) {
  const [container, setContainer] = React.useState(null);
  const user = useMemo(() => _user ?? createTLUser(), [_user]);
  const ErrorFallback = components?.ErrorFallback === void 0 ? DefaultErrorFallback : components?.ErrorFallback;
  const withDefaults = {
    ...rest,
    shapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,
    bindingUtils: rest.bindingUtils ?? EMPTY_BINDING_UTILS_ARRAY,
    tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
    components
  };
  return (
    /* @__PURE__ */ jsx(
      "div",
      {
        ref: setContainer,
        draggable: false,
        className: classNames("tl-container tl-theme__light", className),
        onPointerDown: stopEventPropagation,
        tabIndex: -1,
        children: /* @__PURE__ */ jsx(
          OptionalErrorBoundary,
          {
            fallback: ErrorFallback,
            onError: (error) => annotateError(error, { tags: { origin: "react.tldraw-before-app" } }),
            children: container && /* @__PURE__ */ jsx(ContainerProvider, { container, children: /* @__PURE__ */ jsx(EditorComponentsProvider, { overrides: components, children: store ? store instanceof Store ? (
              // Store is ready to go, whether externally synced or not
              /* @__PURE__ */ (jsx(TldrawEditorWithReadyStore, { ...withDefaults, store, user }))
            ) : (
              // Store is a synced store, so handle syncing stages internally
              /* @__PURE__ */ (jsx(TldrawEditorWithLoadingStore, { ...withDefaults, store, user }))
            ) : (
              // We have no store (it's undefined) so create one and possibly sync it
              /* @__PURE__ */ (jsx(TldrawEditorWithOwnStore, { ...withDefaults, store, user }))
            ) }) })
          }
        )
      }
    )
  );
});
function TldrawEditorWithOwnStore(props) {
  const {
    defaultName,
    snapshot,
    initialData,
    shapeUtils,
    bindingUtils,
    persistenceKey,
    sessionId,
    user
  } = props;
  const syncedStore = useLocalStore({
    shapeUtils,
    bindingUtils,
    initialData,
    persistenceKey,
    sessionId,
    defaultName,
    snapshot
  });
  return /* @__PURE__ */ jsx(TldrawEditorWithLoadingStore, { ...props, store: syncedStore, user });
}
const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
  store,
  user,
  ...rest
}) {
  const container = useContainer();
  useLayoutEffect(() => {
    if (user.userPreferences.get().colorScheme === "dark") {
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    }
  }, [container, user]);
  const { LoadingScreen: LoadingScreen2 } = useEditorComponents();
  switch (store.status) {
    case "error": {
      throw store.error;
    }
    case "loading": {
      return LoadingScreen2 ? /* @__PURE__ */ jsx(LoadingScreen2, {}) : null;
    }
    case "not-synced": {
      break;
    }
    case "synced-local": {
      break;
    }
    case "synced-remote": {
      break;
    }
  }
  return /* @__PURE__ */ jsx(TldrawEditorWithReadyStore, { ...rest, store: store.store, user });
});
function TldrawEditorWithReadyStore({
  onMount,
  children,
  store,
  tools,
  shapeUtils,
  bindingUtils,
  user,
  initialState,
  autoFocus = true,
  inferDarkMode,
  cameraOptions,
  assetOptions,
  options
}) {
  const { ErrorFallback } = useEditorComponents();
  const container = useContainer();
  const editorRef = useRef(null);
  const [renderEditor, setRenderEditor] = useState(null);
  const editor = editorRef.current;
  if (renderEditor !== editor) {
    setRenderEditor(editor);
  }
  const [initialAutoFocus] = useState(autoFocus);
  useLayoutEffect(() => {
    const editor2 = new Editor({
      store,
      shapeUtils,
      bindingUtils,
      tools,
      getContainer: () => container,
      user,
      initialState,
      autoFocus: initialAutoFocus,
      inferDarkMode,
      cameraOptions,
      assetOptions,
      options
    });
    editorRef.current = editor2;
    setRenderEditor(editor2);
    return () => {
      editor2.dispose();
    };
  }, [
    container,
    shapeUtils,
    bindingUtils,
    tools,
    store,
    user,
    initialState,
    initialAutoFocus,
    inferDarkMode,
    cameraOptions,
    assetOptions,
    options
  ]);
  const crashingError = useSyncExternalStore(
    useCallback(
      (onStoreChange) => {
        if (editor) {
          editor.on("crash", onStoreChange);
          return () => editor.off("crash", onStoreChange);
        }
        return () => {
        };
      },
      [editor]
    ),
    () => editor?.getCrashingError() ?? null
  );
  const { Canvas } = useEditorComponents();
  if (!editor) {
    return null;
  }
  return (
    // the top-level tldraw component also renders an error boundary almost
    // identical to this one. the reason we have two is because this one has
    // access to `App`, which means that here we can enrich errors with data
    // from app for reporting, and also still attempt to render the user's
    // document in the event of an error to reassure them that their work is
    // not lost.
    /* @__PURE__ */ (jsx(OptionalErrorBoundary, {
      fallback: ErrorFallback,
      onError: (error) => editor.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
      children: crashingError ? /* @__PURE__ */ jsx(Crash, { crashingError }) : /* @__PURE__ */ jsx(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ jsx(Layout, { onMount, children: children ?? (Canvas ? /* @__PURE__ */ jsx(Canvas, {}) : null) }) })
    }))
  );
}
function Layout({ children, onMount }) {
  useZoomCss();
  useCursor();
  useDarkMode();
  useForceUpdate();
  useOnMount(onMount);
  return /* @__PURE__ */ jsx(Fragment, { children });
}
function Crash({ crashingError }) {
  throw crashingError;
}
function LoadingScreen({ children }) {
  return /* @__PURE__ */ jsx("div", { className: "tl-loading", children });
}
function ErrorScreen({ children }) {
  return /* @__PURE__ */ jsx("div", { className: "tl-loading", children });
}
function useOnMount(onMount) {
  const editor = useEditor();
  const onMountEvent = useEvent((editor2) => {
    let teardown = void 0;
    editor2.history.ignore(() => {
      teardown = onMount?.(editor2);
      editor2.emit("mount");
    });
    window.tldrawReady = true;
    return teardown;
  });
  React.useLayoutEffect(() => {
    if (editor)
      return onMountEvent?.(editor);
  }, [editor, onMountEvent]);
}
export {
  ErrorScreen,
  LoadingScreen,
  TldrawEditor
};
//# sourceMappingURL=TldrawEditor.mjs.map
