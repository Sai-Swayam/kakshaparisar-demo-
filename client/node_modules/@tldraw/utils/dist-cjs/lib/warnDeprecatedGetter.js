"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var warnDeprecatedGetter_exports = {};
__export(warnDeprecatedGetter_exports, {
  warnDeprecatedGetter: () => warnDeprecatedGetter
});
module.exports = __toCommonJS(warnDeprecatedGetter_exports);
const warnedNames = /* @__PURE__ */ new Set();
function warnDeprecatedGetter(name) {
  if (warnedNames.has(name))
    return;
  warnedNames.add(name);
  console.warn(
    `Using '${name}' is deprecated and will be removed in the near future. Please refactor to use 'get${name[0].toLocaleUpperCase()}${name.slice(
      1
    )}' instead.`
  );
}
//# sourceMappingURL=warnDeprecatedGetter.js.map
